// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __TENTATIVEVELOCITY_H
#define __TENTATIVEVELOCITY_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class tentativevelocity_finite_element_0: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 20;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][20] = { { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 } };
    static const double coefficients1[1][20] = { { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 } };
    static const double coefficients2[1][20] = { { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 } };
    static const double coefficients3[1][20] = { { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 } };
    static const double coefficients9[1][20] = { { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 } };
    static const double coefficients13[1][20] = { { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 } };
    static const double coefficients14[1][20] = { { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 } };
    static const double coefficients15[1][20] = { { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 } };
    static const double coefficients16[1][20] = { { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 } };
    static const double coefficients17[1][20] = { { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 } };
    for (std::size_t k = 0; k < num_points * 20; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 9] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 10] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 11] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 12] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 13] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 14] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 15] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 16] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 17] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 18] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 19] += coefficients19[0][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 20 * num_derivatives, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][20][20] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.499090833947008, 0.0, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.898979485566347, 0.0, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][20] = { { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 } };
    static const double coefficients1[1][20] = { { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 } };
    static const double coefficients2[1][20] = { { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 } };
    static const double coefficients3[1][20] = { { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 } };
    static const double coefficients9[1][20] = { { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 } };
    static const double coefficients13[1][20] = { { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 } };
    static const double coefficients14[1][20] = { { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 } };
    static const double coefficients15[1][20] = { { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 } };
    static const double coefficients16[1][20] = { { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 } };
    static const double coefficients17[1][20] = { { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 } };
    const std::size_t reference_offset[20] = {};
    const std::size_t num_components[20] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 20; ++i)
        {
            double derivatives[27] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[20 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    std::fill_n(values, num_points * 20 * num_derivatives, 0.0);
    const std::size_t reference_offsets[20] = {};
    const std::size_t physical_offsets[20] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[27][27];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 20; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[20 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[20 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[20];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[20];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    // Declare transformation matrix
    double transform[27][27] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 20, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[27] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 6 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 6 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 7] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 9 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 9 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 10] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 10 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 10 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 11] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 12] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 13] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 13 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 13 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 14] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 14 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 14 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 15] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 15 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 15 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 16] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 16 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 16 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 17] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 18 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 18 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 19] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 19 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 19 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[60] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0 };
    std::copy_n(dof_X, 60, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_0();
  }

};


class tentativevelocity_finite_element_1: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 3), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 60;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][20] = { { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 } };
    static const double coefficients1[1][20] = { { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 } };
    static const double coefficients2[1][20] = { { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 } };
    static const double coefficients3[1][20] = { { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 } };
    static const double coefficients9[1][20] = { { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 } };
    static const double coefficients13[1][20] = { { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 } };
    static const double coefficients14[1][20] = { { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 } };
    static const double coefficients15[1][20] = { { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 } };
    static const double coefficients16[1][20] = { { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 } };
    static const double coefficients17[1][20] = { { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 } };
    for (std::size_t k = 0; k < num_points * 60 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 9] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 10] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 11] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 12] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 13] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 14] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 15] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 16] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 17] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 18] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 19] += coefficients19[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 20 + 1] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 21 + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 22 + 1] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 23 + 1] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 24 + 1] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 25 + 1] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 26 + 1] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 27 + 1] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 28 + 1] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 29 + 1] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 30 + 1] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 31 + 1] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 32 + 1] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 33 + 1] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 34 + 1] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 35 + 1] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 36 + 1] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 37 + 1] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 38 + 1] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 39 + 1] += coefficients19[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 40 + 2] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 41 + 2] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 42 + 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 43 + 2] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 44 + 2] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 45 + 2] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 46 + 2] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 47 + 2] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 48 + 2] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 49 + 2] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 50 + 2] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 51 + 2] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 52 + 2] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 53 + 2] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 54 + 2] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 55 + 2] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 56 + 2] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 57 + 2] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 58 + 2] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 59 + 2] += coefficients19[0][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 60 * num_derivatives * 3, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][20][20] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.499090833947008, 0.0, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.898979485566347, 0.0, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][20] = { { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 } };
    static const double coefficients1[1][20] = { { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 } };
    static const double coefficients2[1][20] = { { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 } };
    static const double coefficients3[1][20] = { { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 } };
    static const double coefficients9[1][20] = { { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 } };
    static const double coefficients13[1][20] = { { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 } };
    static const double coefficients14[1][20] = { { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 } };
    static const double coefficients15[1][20] = { { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 } };
    static const double coefficients16[1][20] = { { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 } };
    static const double coefficients17[1][20] = { { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 } };
    const std::size_t reference_offset[60] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t num_components[60] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 60; ++i)
        {
            double derivatives[27] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 21:
                // Compute reference derivatives for dof 21.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 22:
                // Compute reference derivatives for dof 22.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 23:
                // Compute reference derivatives for dof 23.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 24:
                // Compute reference derivatives for dof 24.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 25:
                // Compute reference derivatives for dof 25.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 26:
                // Compute reference derivatives for dof 26.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 27:
                // Compute reference derivatives for dof 27.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 28:
                // Compute reference derivatives for dof 28.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 29:
                // Compute reference derivatives for dof 29.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 30:
                // Compute reference derivatives for dof 30.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 31:
                // Compute reference derivatives for dof 31.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 32:
                // Compute reference derivatives for dof 32.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 33:
                // Compute reference derivatives for dof 33.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 34:
                // Compute reference derivatives for dof 34.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 35:
                // Compute reference derivatives for dof 35.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 36:
                // Compute reference derivatives for dof 36.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 37:
                // Compute reference derivatives for dof 37.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 38:
                // Compute reference derivatives for dof 38.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 39:
                // Compute reference derivatives for dof 39.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            case 40:
                // Compute reference derivatives for dof 40.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 41:
                // Compute reference derivatives for dof 41.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 42:
                // Compute reference derivatives for dof 42.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 43:
                // Compute reference derivatives for dof 43.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 44:
                // Compute reference derivatives for dof 44.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 45:
                // Compute reference derivatives for dof 45.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 46:
                // Compute reference derivatives for dof 46.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 47:
                // Compute reference derivatives for dof 47.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 48:
                // Compute reference derivatives for dof 48.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 49:
                // Compute reference derivatives for dof 49.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 50:
                // Compute reference derivatives for dof 50.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 51:
                // Compute reference derivatives for dof 51.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 52:
                // Compute reference derivatives for dof 52.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 53:
                // Compute reference derivatives for dof 53.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 54:
                // Compute reference derivatives for dof 54.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 55:
                // Compute reference derivatives for dof 55.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 56:
                // Compute reference derivatives for dof 56.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 57:
                // Compute reference derivatives for dof 57.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 58:
                // Compute reference derivatives for dof 58.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 59:
                // Compute reference derivatives for dof 59.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[60 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    std::fill_n(values, num_points * 60 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[60] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t physical_offsets[60] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[27][27];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 60; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[60 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[60 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[180];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[180];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 60; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    // Declare transformation matrix
    double transform[27][27] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 21:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 22:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 23:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 24:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 25:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 26:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 27:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 28:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 29:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 30:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 31:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 32:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 33:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 34:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 35:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 36:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 37:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 38:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 39:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 40:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 41:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 42:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 43:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 44:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 45:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 46:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 47:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 48:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 49:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 50:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 51:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 52:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 53:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 54:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 55:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 56:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 57:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 58:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 59:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 60, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[81] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 60; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 21:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 22:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 23:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 24:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 25:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 26:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 27:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 28:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 29:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 30:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 31:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 32:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 33:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 34:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 35:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 36:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 37:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 38:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 39:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 40:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 41:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 42:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 43:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 44:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 45:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 46:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 47:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 48:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 49:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 50:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 51:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 52:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 53:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 54:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 55:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 56:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 57:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 58:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 59:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[20] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[21] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[22] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[23] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[24] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[25] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[26] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[40] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[41] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[42] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[43] = vals[2];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[44] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[45] = vals[2];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[46] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[47] = vals[2];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[48] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[49] = vals[2];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[50] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[51] = vals[2];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[52] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[53] = vals[2];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[54] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[55] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[56] = vals[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[57] = vals[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[58] = vals[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[59] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[20];
    vertex_values[4] = dof_values[21];
    vertex_values[7] = dof_values[22];
    vertex_values[10] = dof_values[23];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[40];
    vertex_values[5] = dof_values[41];
    vertex_values[8] = dof_values[42];
    vertex_values[11] = dof_values[43];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 6 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 6 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 7] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 9 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 9 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 10] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 10 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 10 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 11] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 12] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 13] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 13 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 13 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 14] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 14 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 14 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 15] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 15 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 15 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 16] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 16 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 16 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 17] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 18 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 18 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 19] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 19 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 19 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 20] = coordinate_dofs[0];
    dof_coordinates[3 * 20 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 20 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 21] = coordinate_dofs[3];
    dof_coordinates[3 * 21 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 21 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 22] = coordinate_dofs[6];
    dof_coordinates[3 * 22 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 22 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 23] = coordinate_dofs[9];
    dof_coordinates[3 * 23 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 23 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 24] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 24 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 24 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 25] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 25 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 25 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 26] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 26 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 26 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 27] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 27 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 27 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 28] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 28 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 28 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 29] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 29 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 29 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 30] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 30 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 30 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 31] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 31 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 31 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 32] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 32 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 32 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 33] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 33 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 33 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 34] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 34 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 34 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 35] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 35 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 35 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 36] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 36 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 36 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 37] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 37 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 37 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 38] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 38 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 38 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 39] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 39 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 39 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 40] = coordinate_dofs[0];
    dof_coordinates[3 * 40 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 40 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 41] = coordinate_dofs[3];
    dof_coordinates[3 * 41 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 41 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 42] = coordinate_dofs[6];
    dof_coordinates[3 * 42 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 42 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 43] = coordinate_dofs[9];
    dof_coordinates[3 * 43 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 43 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 44] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 44 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 44 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 45] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 45 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 45 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 46] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 46 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 46 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 47] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 47 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 47 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 48] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 48 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 48 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 49] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 49 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 49 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 50] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 50 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 50 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 51] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 51 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 51 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 52] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 52 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 52 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 53] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 53 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 53 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 54] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 54 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 54 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 55] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 55 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 55 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 56] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 56 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 56 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 57] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 57 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 57 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 58] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 58 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 58 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 59] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 59 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 59 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[180] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0 };
    std::copy_n(dof_X, 180, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_finite_element_0();
    case 1:
        return new tentativevelocity_finite_element_0();
    case 2:
        return new tentativevelocity_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_1();
  }

};


class tentativevelocity_finite_element_2: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505542, 0.0, 0.0, 0.0 },
            { 5.163977794943223, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 4, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_2();
  }

};


class tentativevelocity_finite_element_3: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505542, 0.0, 0.0, 0.0 },
            { 5.163977794943223, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[36];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[36];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_finite_element_2();
    case 1:
        return new tentativevelocity_finite_element_2();
    case 2:
        return new tentativevelocity_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_3();
  }

};


class tentativevelocity_finite_element_4: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[3] = { 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_4();
  }

};


class tentativevelocity_dofmap_0: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + 2 * num_global_entities[1] + num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 20;
  }

  std::size_t num_element_dofs() const final override
  {
    return 20;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 10;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 1, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 4, 10, 20 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + 2 * entity_indices[1][0];
    dofs[5] = offset + 2 * entity_indices[1][0] + 1;
    dofs[6] = offset + 2 * entity_indices[1][1];
    dofs[7] = offset + 2 * entity_indices[1][1] + 1;
    dofs[8] = offset + 2 * entity_indices[1][2];
    dofs[9] = offset + 2 * entity_indices[1][2] + 1;
    dofs[10] = offset + 2 * entity_indices[1][3];
    dofs[11] = offset + 2 * entity_indices[1][3] + 1;
    dofs[12] = offset + 2 * entity_indices[1][4];
    dofs[13] = offset + 2 * entity_indices[1][4] + 1;
    dofs[14] = offset + 2 * entity_indices[1][5];
    dofs[15] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[16] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[18] = offset + entity_indices[2][2];
    dofs[19] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 7;
        dofs[7] = 8;
        dofs[8] = 9;
        dofs[9] = 16;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 17;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 18;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 8;
        dofs[4] = 9;
        dofs[5] = 12;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 19;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 5;
            break;
        case 1:
            dofs[0] = 6;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 8;
            dofs[1] = 9;
            break;
        case 3:
            dofs[0] = 10;
            dofs[1] = 11;
            break;
        case 4:
            dofs[0] = 12;
            dofs[1] = 13;
            break;
        case 5:
            dofs[0] = 14;
            dofs[1] = 15;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 16;
            break;
        case 1:
            dofs[0] = 17;
            break;
        case 2:
            dofs[0] = 18;
            break;
        case 3:
            dofs[0] = 19;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 9;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 10;
            dofs[3] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 12;
            dofs[3] = 13;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 14;
            dofs[3] = 15;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 7;
            dofs[7] = 8;
            dofs[8] = 9;
            dofs[9] = 16;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 17;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 18;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 8;
            dofs[4] = 9;
            dofs[5] = 12;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 19;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_0();
  }

};


class tentativevelocity_dofmap_1: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 3), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0] + 6 * num_global_entities[1] + 3 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 60;
  }

  std::size_t num_element_dofs() const final override
  {
    return 60;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 30;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 3, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 12, 30, 60 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + 2 * entity_indices[1][0];
    dofs[5] = offset + 2 * entity_indices[1][0] + 1;
    dofs[6] = offset + 2 * entity_indices[1][1];
    dofs[7] = offset + 2 * entity_indices[1][1] + 1;
    dofs[8] = offset + 2 * entity_indices[1][2];
    dofs[9] = offset + 2 * entity_indices[1][2] + 1;
    dofs[10] = offset + 2 * entity_indices[1][3];
    dofs[11] = offset + 2 * entity_indices[1][3] + 1;
    dofs[12] = offset + 2 * entity_indices[1][4];
    dofs[13] = offset + 2 * entity_indices[1][4] + 1;
    dofs[14] = offset + 2 * entity_indices[1][5];
    dofs[15] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[16] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[18] = offset + entity_indices[2][2];
    dofs[19] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
    dofs[20] = offset + entity_indices[0][0];
    dofs[21] = offset + entity_indices[0][1];
    dofs[22] = offset + entity_indices[0][2];
    dofs[23] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[24] = offset + 2 * entity_indices[1][0];
    dofs[25] = offset + 2 * entity_indices[1][0] + 1;
    dofs[26] = offset + 2 * entity_indices[1][1];
    dofs[27] = offset + 2 * entity_indices[1][1] + 1;
    dofs[28] = offset + 2 * entity_indices[1][2];
    dofs[29] = offset + 2 * entity_indices[1][2] + 1;
    dofs[30] = offset + 2 * entity_indices[1][3];
    dofs[31] = offset + 2 * entity_indices[1][3] + 1;
    dofs[32] = offset + 2 * entity_indices[1][4];
    dofs[33] = offset + 2 * entity_indices[1][4] + 1;
    dofs[34] = offset + 2 * entity_indices[1][5];
    dofs[35] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[36] = offset + entity_indices[2][0];
    dofs[37] = offset + entity_indices[2][1];
    dofs[38] = offset + entity_indices[2][2];
    dofs[39] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
    dofs[40] = offset + entity_indices[0][0];
    dofs[41] = offset + entity_indices[0][1];
    dofs[42] = offset + entity_indices[0][2];
    dofs[43] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[44] = offset + 2 * entity_indices[1][0];
    dofs[45] = offset + 2 * entity_indices[1][0] + 1;
    dofs[46] = offset + 2 * entity_indices[1][1];
    dofs[47] = offset + 2 * entity_indices[1][1] + 1;
    dofs[48] = offset + 2 * entity_indices[1][2];
    dofs[49] = offset + 2 * entity_indices[1][2] + 1;
    dofs[50] = offset + 2 * entity_indices[1][3];
    dofs[51] = offset + 2 * entity_indices[1][3] + 1;
    dofs[52] = offset + 2 * entity_indices[1][4];
    dofs[53] = offset + 2 * entity_indices[1][4] + 1;
    dofs[54] = offset + 2 * entity_indices[1][5];
    dofs[55] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[56] = offset + entity_indices[2][0];
    dofs[57] = offset + entity_indices[2][1];
    dofs[58] = offset + entity_indices[2][2];
    dofs[59] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 7;
        dofs[7] = 8;
        dofs[8] = 9;
        dofs[9] = 16;
        dofs[10] = 21;
        dofs[11] = 22;
        dofs[12] = 23;
        dofs[13] = 24;
        dofs[14] = 25;
        dofs[15] = 26;
        dofs[16] = 27;
        dofs[17] = 28;
        dofs[18] = 29;
        dofs[19] = 36;
        dofs[20] = 41;
        dofs[21] = 42;
        dofs[22] = 43;
        dofs[23] = 44;
        dofs[24] = 45;
        dofs[25] = 46;
        dofs[26] = 47;
        dofs[27] = 48;
        dofs[28] = 49;
        dofs[29] = 56;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 17;
        dofs[10] = 20;
        dofs[11] = 22;
        dofs[12] = 23;
        dofs[13] = 24;
        dofs[14] = 25;
        dofs[15] = 30;
        dofs[16] = 31;
        dofs[17] = 32;
        dofs[18] = 33;
        dofs[19] = 37;
        dofs[20] = 40;
        dofs[21] = 42;
        dofs[22] = 43;
        dofs[23] = 44;
        dofs[24] = 45;
        dofs[25] = 50;
        dofs[26] = 51;
        dofs[27] = 52;
        dofs[28] = 53;
        dofs[29] = 57;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 18;
        dofs[10] = 20;
        dofs[11] = 21;
        dofs[12] = 23;
        dofs[13] = 26;
        dofs[14] = 27;
        dofs[15] = 30;
        dofs[16] = 31;
        dofs[17] = 34;
        dofs[18] = 35;
        dofs[19] = 38;
        dofs[20] = 40;
        dofs[21] = 41;
        dofs[22] = 43;
        dofs[23] = 46;
        dofs[24] = 47;
        dofs[25] = 50;
        dofs[26] = 51;
        dofs[27] = 54;
        dofs[28] = 55;
        dofs[29] = 58;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 8;
        dofs[4] = 9;
        dofs[5] = 12;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 19;
        dofs[10] = 20;
        dofs[11] = 21;
        dofs[12] = 22;
        dofs[13] = 28;
        dofs[14] = 29;
        dofs[15] = 32;
        dofs[16] = 33;
        dofs[17] = 34;
        dofs[18] = 35;
        dofs[19] = 39;
        dofs[20] = 40;
        dofs[21] = 41;
        dofs[22] = 42;
        dofs[23] = 48;
        dofs[24] = 49;
        dofs[25] = 52;
        dofs[26] = 53;
        dofs[27] = 54;
        dofs[28] = 55;
        dofs[29] = 59;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 20;
            dofs[2] = 40;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 21;
            dofs[2] = 41;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 22;
            dofs[2] = 42;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 23;
            dofs[2] = 43;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 24;
            dofs[3] = 25;
            dofs[4] = 44;
            dofs[5] = 45;
            break;
        case 1:
            dofs[0] = 6;
            dofs[1] = 7;
            dofs[2] = 26;
            dofs[3] = 27;
            dofs[4] = 46;
            dofs[5] = 47;
            break;
        case 2:
            dofs[0] = 8;
            dofs[1] = 9;
            dofs[2] = 28;
            dofs[3] = 29;
            dofs[4] = 48;
            dofs[5] = 49;
            break;
        case 3:
            dofs[0] = 10;
            dofs[1] = 11;
            dofs[2] = 30;
            dofs[3] = 31;
            dofs[4] = 50;
            dofs[5] = 51;
            break;
        case 4:
            dofs[0] = 12;
            dofs[1] = 13;
            dofs[2] = 32;
            dofs[3] = 33;
            dofs[4] = 52;
            dofs[5] = 53;
            break;
        case 5:
            dofs[0] = 14;
            dofs[1] = 15;
            dofs[2] = 34;
            dofs[3] = 35;
            dofs[4] = 54;
            dofs[5] = 55;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 16;
            dofs[1] = 36;
            dofs[2] = 56;
            break;
        case 1:
            dofs[0] = 17;
            dofs[1] = 37;
            dofs[2] = 57;
            break;
        case 2:
            dofs[0] = 18;
            dofs[1] = 38;
            dofs[2] = 58;
            break;
        case 3:
            dofs[0] = 19;
            dofs[1] = 39;
            dofs[2] = 59;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 20;
            dofs[2] = 40;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 21;
            dofs[2] = 41;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 22;
            dofs[2] = 42;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 23;
            dofs[2] = 43;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 22;
            dofs[5] = 23;
            dofs[6] = 24;
            dofs[7] = 25;
            dofs[8] = 42;
            dofs[9] = 43;
            dofs[10] = 44;
            dofs[11] = 45;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 21;
            dofs[5] = 23;
            dofs[6] = 26;
            dofs[7] = 27;
            dofs[8] = 41;
            dofs[9] = 43;
            dofs[10] = 46;
            dofs[11] = 47;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 9;
            dofs[4] = 21;
            dofs[5] = 22;
            dofs[6] = 28;
            dofs[7] = 29;
            dofs[8] = 41;
            dofs[9] = 42;
            dofs[10] = 48;
            dofs[11] = 49;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 10;
            dofs[3] = 11;
            dofs[4] = 20;
            dofs[5] = 23;
            dofs[6] = 30;
            dofs[7] = 31;
            dofs[8] = 40;
            dofs[9] = 43;
            dofs[10] = 50;
            dofs[11] = 51;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 12;
            dofs[3] = 13;
            dofs[4] = 20;
            dofs[5] = 22;
            dofs[6] = 32;
            dofs[7] = 33;
            dofs[8] = 40;
            dofs[9] = 42;
            dofs[10] = 52;
            dofs[11] = 53;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 14;
            dofs[3] = 15;
            dofs[4] = 20;
            dofs[5] = 21;
            dofs[6] = 34;
            dofs[7] = 35;
            dofs[8] = 40;
            dofs[9] = 41;
            dofs[10] = 54;
            dofs[11] = 55;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 7;
            dofs[7] = 8;
            dofs[8] = 9;
            dofs[9] = 16;
            dofs[10] = 21;
            dofs[11] = 22;
            dofs[12] = 23;
            dofs[13] = 24;
            dofs[14] = 25;
            dofs[15] = 26;
            dofs[16] = 27;
            dofs[17] = 28;
            dofs[18] = 29;
            dofs[19] = 36;
            dofs[20] = 41;
            dofs[21] = 42;
            dofs[22] = 43;
            dofs[23] = 44;
            dofs[24] = 45;
            dofs[25] = 46;
            dofs[26] = 47;
            dofs[27] = 48;
            dofs[28] = 49;
            dofs[29] = 56;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 17;
            dofs[10] = 20;
            dofs[11] = 22;
            dofs[12] = 23;
            dofs[13] = 24;
            dofs[14] = 25;
            dofs[15] = 30;
            dofs[16] = 31;
            dofs[17] = 32;
            dofs[18] = 33;
            dofs[19] = 37;
            dofs[20] = 40;
            dofs[21] = 42;
            dofs[22] = 43;
            dofs[23] = 44;
            dofs[24] = 45;
            dofs[25] = 50;
            dofs[26] = 51;
            dofs[27] = 52;
            dofs[28] = 53;
            dofs[29] = 57;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 18;
            dofs[10] = 20;
            dofs[11] = 21;
            dofs[12] = 23;
            dofs[13] = 26;
            dofs[14] = 27;
            dofs[15] = 30;
            dofs[16] = 31;
            dofs[17] = 34;
            dofs[18] = 35;
            dofs[19] = 38;
            dofs[20] = 40;
            dofs[21] = 41;
            dofs[22] = 43;
            dofs[23] = 46;
            dofs[24] = 47;
            dofs[25] = 50;
            dofs[26] = 51;
            dofs[27] = 54;
            dofs[28] = 55;
            dofs[29] = 58;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 8;
            dofs[4] = 9;
            dofs[5] = 12;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 19;
            dofs[10] = 20;
            dofs[11] = 21;
            dofs[12] = 22;
            dofs[13] = 28;
            dofs[14] = 29;
            dofs[15] = 32;
            dofs[16] = 33;
            dofs[17] = 34;
            dofs[18] = 35;
            dofs[19] = 39;
            dofs[20] = 40;
            dofs[21] = 41;
            dofs[22] = 42;
            dofs[23] = 48;
            dofs[24] = 49;
            dofs[25] = 52;
            dofs[26] = 53;
            dofs[27] = 54;
            dofs[28] = 55;
            dofs[29] = 59;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            dofs[30] = 30;
            dofs[31] = 31;
            dofs[32] = 32;
            dofs[33] = 33;
            dofs[34] = 34;
            dofs[35] = 35;
            dofs[36] = 36;
            dofs[37] = 37;
            dofs[38] = 38;
            dofs[39] = 39;
            dofs[40] = 40;
            dofs[41] = 41;
            dofs[42] = 42;
            dofs[43] = 43;
            dofs[44] = 44;
            dofs[45] = 45;
            dofs[46] = 46;
            dofs[47] = 47;
            dofs[48] = 48;
            dofs[49] = 49;
            dofs[50] = 50;
            dofs[51] = 51;
            dofs[52] = 52;
            dofs[53] = 53;
            dofs[54] = 54;
            dofs[55] = 55;
            dofs[56] = 56;
            dofs[57] = 57;
            dofs[58] = 58;
            dofs[59] = 59;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_dofmap_0();
    case 1:
        return new tentativevelocity_dofmap_0();
    case 2:
        return new tentativevelocity_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_1();
  }

};


class tentativevelocity_dofmap_2: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 4;
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_2();
  }

};


class tentativevelocity_dofmap_3: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_dofmap_2();
    case 1:
        return new tentativevelocity_dofmap_2();
    case 2:
        return new tentativevelocity_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_3();
  }

};


class tentativevelocity_dofmap_4: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = {};
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_4();
  }

};


class tentativevelocity_coordinate_mapping_3: public ufc::coordinate_mapping
{
public:

  tentativevelocity_coordinate_mapping_3() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~tentativevelocity_coordinate_mapping_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new tentativevelocity_coordinate_mapping_3();
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new tentativevelocity_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new tentativevelocity_dofmap_3();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    tentativevelocity_finite_element_2 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    tentativevelocity_finite_element_2 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[4] = { 0.25000000000000006, 0.24999999999999997, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
  }

};


class tentativevelocity_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  tentativevelocity_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~tentativevelocity_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 9
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 9
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           9
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights125[125] = { 0.0009374398217669896, 0.00144688123847005, 0.001022687015780538, 0.0003675200380073259, 4.716533650593668e-5, 0.00161927658526932, 0.002499254732643926, 0.001766527408224398, 0.0006348317815652555, 8.147053631288457e-5, 0.001417924532550919, 0.00218848010941899, 0.001546865169503061, 0.000555892406098535, 7.133992621705589e-5, 0.0007158915019438664, 0.0011049349077046, 0.0007809919386245139, 0.0002806627859136635, 3.601859320129841e-5, 0.0001525364704986181, 0.0002354307468301134, 0.0001664075540527897, 5.980139538929234e-5, 7.674555521798026e-6, 0.001893772314860291, 0.002922922163836156, 0.002065984730200279, 0.0007424468824279085, 9.528121850813992e-5, 0.003271187222988238, 0.005048878136564872, 0.003568656484883998, 0.00128245763045955, 0.0001645829871568122, 0.002864425173708474, 0.004421065701079484, 0.003124905049696836, 0.001122987976685449, 0.0001441175999536503, 0.001446210706378578, 0.002232138094997412, 0.001577723579854278, 0.000566981902660168, 7.276308627071377e-5, 0.0003081470811558803, 0.0004756062416607817, 0.0003361687988193031, 0.0001208079967893717, 1.550378001720074e-5, 0.00225090157446144, 0.00347412941301363, 0.002455589959537544, 0.0008824581727683852, 0.0001132494350422472, 0.003888070605322779, 0.006001000045085255, 0.004241636883961954, 0.001524304625709162, 0.0001956201925721813, 0.00340460100870312, 0.00525479418474413, 0.003714202410295571, 0.00133476204345559, 0.0001712954245332323, 0.001718938401647658, 0.002653076672955637, 0.001875252089225375, 0.0006739038517854064, 8.648481349327676e-5, 0.0003662577305079242, 0.0005652964877443141, 0.000399563808494583, 0.0001435900757693727, 1.842749657758908e-5, 0.001893772314860291, 0.002922922163836156, 0.002065984730200279, 0.0007424468824279085, 9.528121850813992e-5, 0.003271187222988238, 0.005048878136564872, 0.003568656484883998, 0.00128245763045955, 0.0001645829871568122, 0.002864425173708474, 0.004421065701079484, 0.003124905049696836, 0.001122987976685449, 0.0001441175999536503, 0.001446210706378578, 0.002232138094997412, 0.001577723579854278, 0.000566981902660168, 7.276308627071377e-5, 0.0003081470811558803, 0.0004756062416607817, 0.0003361687988193031, 0.0001208079967893717, 1.550378001720074e-5, 0.0009374398217669897, 0.00144688123847005, 0.001022687015780538, 0.000367520038007326, 4.716533650593669e-5, 0.00161927658526932, 0.002499254732643926, 0.001766527408224398, 0.0006348317815652555, 8.147053631288457e-5, 0.001417924532550919, 0.002188480109418991, 0.001546865169503061, 0.0005558924060985351, 7.133992621705591e-5, 0.0007158915019438664, 0.0011049349077046, 0.0007809919386245139, 0.0002806627859136635, 3.601859320129841e-5, 0.0001525364704986181, 0.0002354307468301134, 0.0001664075540527897, 5.980139538929235e-5, 7.674555521798026e-6 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE23_C0_Q125[1][125][20] =
        { { { 0.474294742672057, 0.03534581477412845, 0.03204171670352372, 0.02938433368505925, -0.005290877293692924, -0.005360028893208045, -0.005883778382894233, -0.006064568447132025, -0.006539612539072584, -0.006653592091919854, 0.2269079707835756, -0.1232161497057562, 0.2522002214199321, -0.135183567705751, 0.2853502351677849, -0.1503323757551087, 0.001560353443238686, 0.0317022959064631, 0.03586934833496947, 0.03986751792380304 },
            { 0.1291950481124205, 0.03122392372258521, 0.02819201414895275, 0.06154525848634441, -0.02315104878463878, -0.01231823902423107, -0.02581700966551914, -0.01393738824901563, -0.004896655350869663, -0.00496817678906169, 0.7494182056132106, -0.283171231715603, 0.1421405001624226, -0.1009403423083112, 0.1608239077660397, -0.1125641355282185, 0.005737654394744017, 0.1165741122432206, 0.1318969910327359, 0.02501661173279248 },
            { -0.06124023457623243, 0.02417604387311256, 0.02169831609928772, -0.02746260878552604, -0.03950887022027656, 0.007229849127673913, -0.04424025298783083, 0.008180163907843138, -0.002756010469795296, -0.002784778411426358, 0.6612668324815502, 0.1661995094082999, 0.04119457260221301, -0.05657940488773547, 0.0466093206163573, -0.06335506867644375, 0.007026471255819355, 0.1427594958664633, 0.1615242662697764, 0.01006238750686957 },
            { -0.0006527365268150049, 0.01526991699802778, 0.01361741835963622, -0.0277808447719799, -0.03973865042400918, 0.03752268604106154, -0.04469214521992814, 0.04245478939574661, -0.001025626888036027, -0.001031820332757577, 0.003741125690992893, 0.8625701451826212, 8.585399249283823e-5, -0.02096388715846981, 9.71389192682675e-5, -0.02357707368679145, 0.004106443156342867, 0.08343217149266305, 0.09439876627367967, 0.002166329506253875 },
            { 0.06409519867369189, 0.006507721085943739, 0.005772232708007901, 0.3655922704770111, -0.02230455598725847, 0.03527000462263041, -0.0251762632313681, 0.03990600823731522, -0.0001754094095104339, -0.0001758279729726607, -0.3085558568163959, 0.8107855864753916, -0.002149786890445184, -0.003572363974306686, -0.002432361840506592, -0.004032305141011213, 0.0009140952347665432, 0.0185720214511841, 0.0210131880884135, 0.0001464042094194047 },
            { 0.09575250369580601, 0.0305997011889127, 0.05815319294465331, 0.02938433368505924, -0.01268690419487559, -0.02666067450765343, -0.005035828082798989, -0.005065353520555482, -0.02784008833480681, -0.01332582182232869, 0.1393767076463154, -0.1029147190178874, 0.770530643399393, -0.2707458034196594, 0.1463957750250677, -0.1074674561435907, 0.006482415205160737, 0.1317057016236127, 0.02502322059424587, 0.1383384540359302 },
            { -0.02961282767530361, 0.02687903416528827, 0.0628551497059861, 0.06154525848634441, -0.06503397661559357, -0.06127066993027708, -0.02201001815695791, -0.0116410259443746, -0.02076433385164277, -0.01165672472927633, 0.4415502537457798, -0.236515163114198, 0.4165601689045614, -0.2368341213133684, 0.07914370349025429, -0.08015384544460653, 0.02383681610830914, 0.4843016824220924, 0.0920141473301235, 0.08680649241685949 },
            { -0.0559174061280025, 0.02063682627482009, 0.06306685164382755, -0.02746260878552602, -0.1351395291735683, 0.03596112225749397, -0.03749813479507418, 0.00683237767213412, -0.01161921877930034, -0.007955881264643132, 0.3265040657114509, 0.1388160225141888, 0.1011709567039774, -0.1616426734220587, 0.01922181907180722, -0.04485215239155974, 0.02919114531692853, 0.5930876306877355, 0.1126827649180299, 0.03491602196733888 },
            { 0.0262133217034175, 0.01291692138381889, 0.05052272862117455, -0.02778084477197986, -0.1617891293608983, 0.1866370758674901, -0.03764824101663143, 0.03545982188260791, -0.004297410975757989, -0.003508731733982562, -0.1288445758611865, 0.7204507228693313, -0.01470714380063984, -0.07128824060287058, -0.002794260985651435, -0.01658873420278818, 0.01706002551611259, 0.3466150438076794, 0.06585458788466543, 0.007517063776088686 },
            { 0.06216231346930405, 0.005463020987790709, 0.02569437405013414, 0.3655922704770112, -0.1029577123228624, 0.1754322843891585, -0.02109931751620359, 0.03333098489667335, -0.0007311963681187784, -0.0006778960919862666, -0.28709374647718, 0.6771983300495051, -0.009949227247400175, -0.01377307339892012, -0.001890288006402785, -0.002822541820922338, 0.003797565785170237, 0.07715659216020104, 0.01465924711021632, 0.0005080158748317805 },
            { -0.06395874758862662, 0.0226118430361826, -0.04152260697435826, 0.02938433368505922, 0.01766520646684973, -0.05896925563908029, -0.003658188754915843, -0.003549755490928667, -0.04473220813586378, 0.01300306513951767, 0.04437193169722244, -0.07212173591608738, 0.5425784772322489, 0.2641882328201247, 0.03266144210133898, -0.05470926277014361, 0.01004800948310352, 0.2041492402151759, 0.01228911368422423, 0.1502708657089564 },
            { -0.04880819578613185, 0.01970066601667215, -0.0142247815198057, 0.0615452584863444, 0.02429879416175359, -0.1355211698510861, -0.01589923839020225, -0.00815792927352383, -0.03317633718024186, 0.003052176407621525, 0.1134349118539144, -0.1657477598642398, 0.2367003243372687, 0.06201223194170024, 0.0142485820265971, -0.04057597476592092, 0.03694804277772983, 0.7506874742898438, 0.04518892014071384, 0.09429400419099249 },
            { 0.003258524524086542, 0.01493982301608183, 0.03175873077230894, -0.02746260878552599, -0.09299456511856573, 0.07954039613144911, -0.02685982908791006, 0.00478807057776624, -0.01840878057522599, -0.003836649608300727, -0.01121474416318353, 0.0972810557346015, -0.007686190549896853, -0.0779506730983424, -0.0004626834239830858, -0.02251466797053741, 0.04524747269098751, 0.9193101566091401, 0.05533945173503418, 0.03792771059001579 },
            { 0.05704201370620524, 0.00922645911475466, 0.06321752791622888, -0.0277808447719798, -0.2375116908820991, 0.4128121152899197, -0.02672338018740865, 0.02484993336088736, -0.006746959480154129, -0.003609728155968351, -0.2305702346328409, 0.5048855719686222, -0.05821299624103617, -0.07334022342071352, -0.003504231159280309, -0.008251798748189109, 0.02644373936915051, 0.5372675363949571, 0.03234174090798245, 0.008165449650961873 },
            { 0.05342483831392524, 0.003857782744497981, 0.04733380747674396, 0.3655922704770113, -0.2009385531214546, 0.388028863355365, -0.01486186178784207, 0.02335806300091187, -0.001139182616084009, -0.000927163220854909, -0.2324185012953347, 0.4745746729790602, -0.01781520512783669, -0.0188375287076776, -0.001072416830417828, -0.001393265472100589, 0.005886382746930749, 0.1195958828882867, 0.007199279308755635, 0.000551834888114635 },
            { 0.02588546307060624, 0.01294764933883208, 0.004851167988216634, 0.02938433368505925, 0.1059643447933393, -0.09363782930820398, -0.002057282410782658, -0.001923450029566724, -0.03994604907490959, 0.04226386845002048, -0.006948513130962009, -0.03907946770832563, -0.1349185921545143, 0.8586911315255736, -0.002771413775671168, -0.01667136398217792, 0.008645461801381142, 0.1756531441405561, 0.003608157598128388, 0.0700592391834015 },
            { 0.04304726648444837, 0.01118752222207207, -0.05737358819566307, 0.06154525848634439, 0.3250843089642434, -0.2151953256427784, -0.008891140325167073, -0.004420408487982162, -0.02946017154234525, 0.02212602429850904, -0.05249570738058352, -0.08981112485808927, -0.1739408543908741, 0.4495428728564422, -0.003572984807451902, -0.01229511438888013, 0.03179066391286825, 0.6459030412602131, 0.01326773840217938, 0.04396172313249461 },
            { 0.06095850418078277, 0.008377081602977864, -0.04210073380656288, -0.02746260878552599, 0.2031879743297627, 0.1263029345604899, -0.01489219497216556, 0.002594436297910344, -0.01620713245225004, 0.004542291894273767, -0.1456360420494062, 0.05271215158541661, -0.158495280764707, 0.09228747650078059, -0.003255711444032276, -0.006763998204481578, 0.03893162097595248, 0.7909885889290639, 0.01624799545229548, 0.01768264616942555 },
            { 0.06082414163778984, 0.005101680184287419, 0.0372918536713576, -0.02778084477197975, -0.1720987573347607, 0.6555081960752898, -0.014677760623714, 0.0134650415162044, -0.005884400231254046, -0.001417260581844631, -0.2064973466246074, 0.273574383027935, -0.08278599613267877, -0.02879502367678265, -0.001700538424326365, -0.002455836818506765, 0.02275259980457861, 0.4622732463415232, 0.009495729406721578, 0.003806893554767449 },
            { 0.03518476251527829, 0.002107478174024336, 0.06030251108461737, 0.3655922704770113, -0.2734284036534983, 0.6161546399009752, -0.008096944931246713, 0.01265666525047648, -0.0009855235533682734, -0.0006836267057975069, -0.1440926443944555, 0.2571502941838854, -0.01753830563548144, -0.01388950446494368, -0.0003602609622878616, -0.0004113053043217352, 0.005064734191630171, 0.1029021358759465, 0.00211375165096564, 0.0002572763005907544 },
            { 0.0570282321039781, 0.004373243757902897, 0.42820757294106, 0.02938433368505925, 0.2181488248511591, -0.121373909483891, -0.0006850853425730795, -0.000622348371996484, -0.01724243500357065, 0.02815237354797608, -0.01027068462962851, -0.01264448919020889, -0.2584956955922336, 0.5719825085493428, -0.001325444455105694, -0.001796282116499294, 0.003625891878191779, 0.07366862792873828, 0.0003777381057727541, 0.009507026836526988 },
            { 0.05261283176874231, 0.003754983325663178, 0.1082491771841238, 0.06154525848634435, 0.7184797178792188, -0.2789374568899219, -0.00294826609163918, -0.001430260201079683, -0.01266247170272496, 0.01582247943942939, -0.04648512652267074, -0.02905914189784801, -0.1996483970222638, 0.3214713482617111, -0.001023703161468995, -0.001319150773401268, 0.0133329500184217, 0.2708906296978315, 0.001388999852591215, 0.005965598348941358 },
            { 0.04337045709813664, 0.00278443317041826, -0.06256303284875084, -0.027462608785526, 0.6272136474824757, 0.1637146125679315, -0.004906009963213442, 0.0008394516007347343, -0.006920697983948531, 0.00453675355138014, -0.08324781307281624, 0.01705545827515076, -0.1174341219078499, 0.09217495187630732, -0.0006021469926853536, -0.0007209843632690512, 0.01632785518513198, 0.3317392599990419, 0.00170100303488299, 0.002399532076468247 },
            { 0.02921620886627502, 0.001677382162309403, 0.001848666776100829, -0.02778084477197972, -0.01043824566453986, 0.8496736099522137, -0.004800258645946943, 0.004356726994546339, -0.002494485852994545, -2.781327548615539e-5, -0.08792690235374709, 0.08851728367266912, -0.04569179083802893, -0.0005650929239225796, -0.0002342860320028919, -0.0002598705070753753, 0.009542401404860412, 0.1938766080890256, 0.0009941081400892497, 0.0005165948076345369 },
            { 0.0131197535534446, 0.0006863389002214823, 0.06403508060147256, 0.3655922704770113, -0.3070864295425533, 0.7986632971303641, -0.002631219531562118, 0.004095170081081789, -0.0004151231089779411, -0.0002484212071832761, -0.05132213136134703, 0.08320313212389119, -0.008097006910499919, -0.005047268395306493, -4.151764650433057e-5, -4.324668857069378e-5, 0.00212414084898227, 0.04315697961461826, 0.0002212887112035544, 3.491235021432434e-5 },
            { 0.05654431446143236, 0.05204518621781549, 0.0320417167035237, 0.02938433368505925, -0.005290877293692924, -0.005360028893208059, -0.01192490773290343, -0.02983350951956758, -0.01325411513868346, -0.03273110110703473, 0.1264043799176285, -0.09944720863332061, 0.140494018317591, -0.1091060586906362, 0.7819789251941014, -0.2459100090144874, 0.00767586675104039, 0.0255867825986615, 0.1424140685509259, 0.1582882236257547 },
            { -0.04278025910631897, 0.05985054551924836, 0.02819201414895273, 0.0615452584863444, -0.02315104878463877, -0.01231823902423109, -0.06441964522236243, -0.06856237317290936, -0.0122183321990424, -0.02444001594234797, 0.3962398733176508, -0.2285462467917093, 0.07515394389382436, -0.08146850315502502, 0.418301084800223, -0.2266926271403255, 0.02822531701930637, 0.09408644961865839, 0.5236779588851392, 0.09932484484956342 },
            { -0.05138829566442669, 0.06406493173092517, 0.02169831609928771, -0.02746260878552602, -0.03950887022027649, 0.007229849127673875, -0.1409918342512136, 0.04024078546457262, -0.008783289992913614, -0.01369919623653741, 0.278233902549252, 0.1341388878515704, 0.0173329828988239, -0.04566498706262442, 0.09647405277419623, -0.1629606276039011, 0.03456541037121738, 0.1152205567510653, 0.6413087774654576, 0.03995125673337695 },
            { 0.03048536711428617, 0.05387556942220683, 0.01361741835963622, -0.02778084477197984, -0.03973865042400918, 0.03752268604106151, -0.1750644481250408, 0.2088483912137566, -0.004017502499660055, -0.005075847026569907, -0.1462844768086952, 0.6961765433646111, -0.003357039407685197, -0.01691986046465747, -0.01868502374187653, -0.07453866709092692, 0.02020087860567428, 0.06733773604333163, 0.3747966716784805, 0.008601098518055942 },
            { 0.06154176623822713, 0.02826351338596363, 0.005772232708007915, 0.3655922704770112, -0.02230455598725847, 0.03527000462263036, -0.1138796068580066, 0.1963101392975263, -0.000793428095769478, -0.0008649528076420977, -0.2822691544071443, 0.6543814554151804, -0.001966640769624457, -0.002883239139637235, -0.01094617161420644, -0.0147208552318665, 0.004496720438713936, 0.01498939624723654, 0.08342982930580051, 0.0005812767748576801 },
            { -0.04996172582535883, 0.06068298015665159, 0.05815319294465326, 0.02938433368505924, -0.01268690419487555, -0.02666067450765341, -0.0128998306447704, -0.02491805868675295, -0.07131546564926367, -0.06555388658866725, 0.0729128464227924, -0.08306201385168992, 0.4030916170641848, -0.2185177386533208, 0.3767444280999011, -0.2221851586649981, 0.03188902844759021, 0.1062990883811832, 0.09935108437974033, 0.5492528576855951 },
            { -0.06351206574006868, 0.06377875305562593, 0.06285514970598607, 0.0615452584863444, -0.06503397661559354, -0.06127066993027711, -0.06461541960019898, -0.05726584856887373, -0.06095842970117493, -0.05734307580324216, 0.2108409160517036, -0.1908903404896989, 0.1989081126268734, -0.1911477702394026, 0.1859069252837122, -0.189917548063637, 0.1172607558942993, 0.3908777426361022, 0.3653288864674409, 0.3446526445440796 },
            { -0.0211685519580148, 0.06201917658318289, 0.06306685164382754, -0.02746260878552601, -0.1351395291735683, 0.03596112225749394, -0.1309994937203768, 0.0336106033099987, -0.04059166638108553, -0.03913746897481627, 0.08529754120282738, 0.1120377968763242, 0.02643040241836815, -0.1304610857118856, 0.0247028378215388, -0.1264643756196419, 0.1436003763980119, 0.4786783996066521, 0.447390648351956, 0.1386290238547333 },
            { 0.04824483250590069, 0.04845979916553498, 0.05052272862117455, -0.02778084477197981, -0.1617891293608983, 0.1866370758674901, -0.1539568820033721, 0.1744379576088758, -0.01757362300731373, -0.01726054912231701, -0.208147479739573, 0.5814725871430634, -0.02375928436109544, -0.05753642321453617, -0.0222063114680416, -0.0547510723045973, 0.08392360282118665, 0.2797514665026054, 0.2614661327497928, 0.02984541636810007 },
            { 0.05738371232293465, 0.02424040267203389, 0.02569437405013414, 0.3655922704770113, -0.1029577123228624, 0.1754322843891585, -0.09683864454104293, 0.1639655424586234, -0.003355941021674577, -0.003334782959389899, -0.2548975964108099, 0.5465637724875551, -0.008833470399916298, -0.0111161865315165, -0.008256090211431897, -0.010455520153767, 0.01868141418317038, 0.06227274376220079, 0.05820242406868587, 0.002017003680903719 },
            { -0.03935162277933654, 0.0634945861384104, -0.04152260697435832, 0.02938433368505924, 0.01766520646684981, -0.05896925563908027, -0.01216485326421166, -0.01746235781720596, -0.1487514135036621, 0.06396614549000747, 0.01637555837710645, -0.05820913358981004, 0.2002397729426421, 0.213225152469635, 0.05929629815512166, -0.146833986735444, 0.04942930221335618, 0.1647679474849232, 0.04879215151363608, 0.5966287753663615 },
            { -0.01193547959968051, 0.06102966866914919, -0.01422478151980573, 0.06154525848634439, 0.02429879416175364, -0.1355211698510861, -0.05677215132182462, -0.04013140634214928, -0.1184642929727521, 0.01501461063651403, 0.02008066213146424, -0.1337742827956144, 0.0419015553654761, 0.05004979771280775, 0.01240815989551841, -0.1169372714737705, 0.1817589817887323, 0.6058765352788416, 0.1794160827947864, 0.3743807289552953 },
            { 0.03326688864802686, 0.0531823636136585, 0.03175873077230894, -0.027462608785526, -0.0929945651185657, 0.0795403961314491, -0.1058745158115127, 0.02355401714192872, -0.0725626631391967, -0.01887367973670306, -0.09657790860520718, 0.07851510917043905, -0.0661910960828755, -0.06291364296994005, -0.01960093597223946, -0.07162732014379798, 0.2225864740468575, 0.7419711552532702, 0.2197173029006605, 0.1505864986869652 },
            { 0.06340387815709866, 0.03778418410398023, 0.06321752791622888, -0.02778084477197977, -0.2375116908820991, 0.4128121152899198, -0.1161152030785559, 0.1222445966181216, -0.02931607321778888, -0.01775738211926012, -0.2372448834310752, 0.4074909087113879, -0.05989817171921778, -0.05919256945742173, -0.01773743446176802, -0.0289381848858204, 0.130085027002307, 0.4336262487618005, 0.128408212597364, 0.03241973886677825 },
            { 0.04693574582092748, 0.01767082850840482, 0.04733380747674396, 0.3655922704770113, -0.2009385531214546, 0.388028863355365, -0.0696942436245003, 0.1149056195789007, -0.00534216183083527, -0.004561005950662122, -0.1989705391739377, 0.3830271164010712, -0.0152513717712847, -0.01520368597787037, -0.004516334964501583, -0.005273300608925908, 0.02895695831406191, 0.0965253073211555, 0.02858369902401697, 0.002190980746313912 },
            { 0.04804748687512923, 0.04853758960920389, 0.004851167988216599, 0.02938433368505924, 0.1059643447933394, -0.09363782930820398, -0.008408422170859377, -0.009462052455624696, -0.1632655015758902, 0.207909191351235, -0.01131488455055911, -0.03154086528226767, -0.219699994110961, 0.693045808624359, -0.02220056663142037, -0.05499417520132345, 0.04252973137347169, 0.1417688745684654, 0.01432566877780219, 0.2781600936408288 },
            { 0.05758435570636915, 0.04378433053973908, -0.05737358819566309, 0.06154525848634437, 0.3250843089642435, -0.2151953256427784, -0.03744304268552696, -0.0217453722975058, -0.1240649028404838, 0.1088448357528082, -0.06335370627512132, -0.07248616104856562, -0.2099180742233212, 0.3628240614021431, -0.0212121088705199, -0.0417898878653999, 0.1563882216427842, 0.5213054835302973, 0.05267763965707711, 0.1745436742630803 },
            { 0.06413923880368312, 0.03495844779040268, -0.04210073380656288, -0.02746260878552599, 0.2031879743297627, 0.1263029345604899, -0.06555003969915257, 0.01276284383074635, -0.07133791745542208, 0.02234495490483819, -0.1432405218388426, 0.04254374405258061, -0.1558882430904615, 0.0744848134902162, -0.01575242339804951, -0.02402938706078953, 0.191516823517349, 0.638403386387667, 0.06451031996871896, 0.07020639349835207 },
            { 0.05546935183224141, 0.02280238252843811, 0.0372918536713576, -0.02778084477197974, -0.1720987573347607, 0.6555081960752898, -0.06769897592778704, 0.06623875181836233, -0.02714091609870709, -0.006971948198583682, -0.1816818244777537, 0.220800672725777, -0.07283730790950997, -0.02324033606004356, -0.007360170918719619, -0.009142116862715771, 0.1119271566941926, 0.3730986894519093, 0.03770142256394109, 0.01511472119905175 },
            { 0.02960459346803771, 0.009979473413263475, 0.06030251108461737, 0.3655922704770113, -0.2734284036534983, 0.6161546399009752, -0.03882847531680075, 0.06226209606301469, -0.004726026580521191, -0.003362973641576266, -0.1196397080930487, 0.2075448633713472, -0.01456200471227113, -0.01121015752916492, -0.001471482769992989, -0.001591909688615153, 0.02491501201400934, 0.08305185805356724, 0.008392345735112966, 0.001021478404533396 },
            { 0.05084284700731454, 0.01983126690352994, 0.42820757294106, 0.02938433368505925, 0.2181488248511592, -0.121373909483891, -0.003190920477054538, -0.003061526346400265, -0.08031005118357103, 0.13849033308201, -0.008886865998446885, -0.0102053112158051, -0.223667329953504, 0.4616445490153087, -0.005641767875760317, -0.006752596744808137, 0.01783689652577135, 0.05945762328115865, 0.001499754609072576, 0.03774627737779754 },
            { 0.0460926810007943, 0.01723424343305393, 0.1082491771841238, 0.06154525848634435, 0.7184797178792189, -0.278937456889922, -0.01384439255008593, -0.007035897392591632, -0.05946011094588876, 0.07783572649800111, -0.03971482357493556, -0.02345350470633608, -0.1705707063288499, 0.2594581012031396, -0.004302462642675186, -0.004999500631637871, 0.06558895241533749, 0.218634627300916, 0.005514823363302775, 0.02368554689869112 },
            { 0.03706606554682575, 0.01301899537363618, -0.06256303284875084, -0.02746260878552601, 0.6272136474824757, 0.1637146125679315, -0.02332710830415054, 0.004129525050307111, -0.03290655188684815, 0.02231771006344832, -0.06987929864685934, 0.0137653848255784, -0.09857573158050909, 0.07439399536423914, -0.00248646682497664, -0.002766835182884782, 0.08032182790023824, 0.2677452872839355, 0.006753586949863144, 0.00952699565202696 },
            { 0.02435522702288887, 0.008006184655998713, 0.001848666776100829, -0.02778084477197972, -0.01043824566453986, 0.8496736099522137, -0.02314229100392424, 0.02143210310824616, -0.01202604313080348, -0.0001368222036278238, -0.07253772469112404, 0.07144190755896926, -0.03769470384750928, -0.000456083995780939, -0.0009508083692750021, -0.001011168820106391, 0.04694205789466584, 0.1564769515992201, 0.003946962835443529, 0.002051065094923906 },
            { 0.01072251350212875, 0.003335359170138878, 0.06403508060147256, 0.3655922704770113, -0.3070864295425533, 0.7986632971303641, -0.01283879530256213, 0.02014542282163206, -0.00202555528248443, -0.001222061637851612, -0.04177186175610073, 0.06715287938334091, -0.006590276832468586, -0.00407362796463814, -0.0001662326461961995, -0.0001703119074803854, 0.01044931338337671, 0.03483180708022388, 0.0008785948769573226, 0.0001386144456894806 },
            { -0.05515710284123237, -0.05515710284123235, 0.03204171670352369, 0.02938433368505924, -0.005290877293692882, -0.005360028893208087, 0.02816234836950946, -0.06464035907644411, 0.03130145878070507, -0.07091857989883542, 0.02816234836950914, -0.06464035907644411, 0.03130145878070474, -0.07091857989883549, 0.3774863112706631, 0.3774863112706635, 0.01663132467485099, 0.0166313246748509, 0.2005688439966323, 0.2229252092432526 },
            { -0.0305865072810532, -0.03058650728105329, 0.02819201414895275, 0.06154525848634437, -0.02315104878463876, -0.01231823902423111, 0.05898818416140916, -0.1485543099823093, 0.01118815894459771, -0.05295425954868647, 0.0589881841614089, -0.1485543099823094, 0.01118815894459739, -0.05295425954868653, 0.1349258793174665, 0.1349258793174667, 0.06115588331898249, 0.06115588331898233, 0.7375218186576097, 0.1398841386551503 },
            { 0.01991321224390454, 0.01991321224390445, 0.02169831609928771, -0.027462608785526, -0.03950887022027651, 0.007229849127673844, -0.06231816421932106, 0.08718983665807147, -0.003882200065494893, -0.02968209164958091, -0.06231816421932126, 0.08718983665807138, -0.003882200065495125, -0.02968209164958095, -0.04681818162550776, -0.04681818162550768, 0.07489298356114149, 0.07489298356114139, 0.9031871742021385, 0.05626534977027726 },
            { 0.06121441225202864, 0.06121441225202861, 0.01361741835963621, -0.02778084477197976, -0.03973865042400918, 0.03752268604106149, -0.2371985604757176, 0.4525124672891838, -0.00544339995831889, -0.0109978537456137, -0.2371985604757178, 0.4525124672891838, -0.00544339995831903, -0.01099785374561368, -0.06564578940018397, -0.06564578940018377, 0.0437693073245031, 0.04376930732450295, 0.5278448676961803, 0.01211335652734859 },
            { 0.05014320416707885, 0.05014320416707881, 0.005772232708007901, 0.3655922704770113, -0.02230455598725847, 0.03527000462263036, -0.2151086632639202, 0.4253457973563533, -0.001498716598923873, -0.001874095973639658, -0.2151086632639206, 0.4253457973563533, -0.001498716598924067, -0.001874095973639668, -0.01807407777802002, -0.01807407777801981, 0.009743058342975341, 0.009743058342975189, 0.1174983945684906, 0.0008186411073117066 },
            { -0.02619650654486568, -0.02619650654486572, 0.05815319294465323, 0.02938433368505924, -0.01268690419487551, -0.02666067450765344, 0.009721503531014142, -0.05399003626922148, 0.05374439170690043, -0.142035812620994, 0.009721503531013871, -0.05399003626922148, 0.05374439170690016, -0.1420358126209941, 0.1088367684279635, 0.1088367684279637, 0.06909405841438676, 0.06909405841438671, 0.1399210930957342, 0.7735402256867155 },
            { 0.0009522124308471219, 0.0009522124308470803, 0.06285514970598605, 0.06154525848634437, -0.06503397661559351, -0.06127066993027712, -0.001478265051656914, -0.1240780945292863, -0.001394600805638988, -0.1242454230213224, -0.001478265051657161, -0.1240780945292864, -0.001394600805639179, -0.1242454230213225, -0.002824180163030865, -0.002824180163030788, 0.2540692492652009, 0.2540692492652007, 0.5145109130222597, 0.4853915290810563 },
            { 0.04120247091732638, 0.0412024709173263, 0.06306685164382754, -0.027462608785526, -0.1351395291735683, 0.03596112225749394, -0.1141969470471635, 0.07282420009316147, -0.03538520832890751, -0.08479927734335091, -0.1141969470471639, 0.07282420009316135, -0.03538520832890771, -0.08479927734335094, -0.07165792750379392, -0.07165792750379371, 0.3111393880023321, 0.3111393880023317, 0.6300825899287342, 0.1952381765498311 },
            { 0.06406508711500515, 0.06406508711500512, 0.05052272862117455, -0.02778084477197975, -0.1617891293608983, 0.1866370758674901, -0.2344370198534586, 0.3779552723759697, -0.02676014058126069, -0.03739848616842657, -0.2344370198534589, 0.3779552723759694, -0.02676014058126082, -0.0373984861684266, -0.05419146316560685, -0.05419146316560665, 0.1818375346618962, 0.1818375346618958, 0.3682358107137654, 0.04203279016221241 },
            { 0.04463249992317966, 0.04463249992317967, 0.02569437405013414, 0.3655922704770113, -0.1029577123228624, 0.1754322843891585, -0.1877515984797158, 0.3552646574730893, -0.006506527370444725, -0.007225484745453193, -0.187751598479716, 0.355264657473089, -0.006506527370444864, -0.0072254847454532, -0.01317624760829497, -0.01317624760829476, 0.04047707897268571, 0.04047707897268552, 0.08196938007626489, 0.002840647000202434 },
            { 0.02994448634200982, 0.0299444863420097, -0.04152260697435837, 0.02938433368505922, 0.01766520646684989, -0.05896925563908027, -0.007856783360530814, -0.03783574570350796, -0.0960724807021955, 0.1385956489798212, -0.007856783360531052, -0.03783574570350805, -0.09607248070219566, 0.1385956489798213, -0.06164184895263401, -0.06164184895263392, 0.1070986248491398, 0.1070986248491397, 0.06871642334759274, 0.8402620962097326 },
            { 0.04588932242424484, 0.04588932242424478, -0.01422478151980576, 0.06154525848634435, 0.02429879416175372, -0.1355211698510861, -0.05497801734900565, -0.08695284456888173, -0.1147205417207771, 0.03253220417466089, -0.05497801734900591, -0.08695284456888185, -0.1147205417207773, 0.03253220417466091, -0.07360678367863656, -0.07360678367863648, 0.3938177585337869, 0.3938177585337868, 0.2526806283024376, 0.5272590747895738 },
            { 0.06185115229751287, 0.06185115229751283, 0.03175873077230893, -0.02746260878552601, -0.09299456511856564, 0.0795403961314491, -0.1460869852406077, 0.05103456315618392, -0.1001228729858551, -0.04089366135332154, -0.146086985240608, 0.05103456315618382, -0.1001228729858553, -0.04089366135332159, -0.06424065422468898, -0.0642406542246888, 0.4822788146500639, 0.4822788146500637, 0.3094388489651564, 0.2120784854366034 },
            { 0.06012402416271535, 0.06012402416271533, 0.06321752791622888, -0.02778084477197974, -0.2375116908820991, 0.4128121152899198, -0.2028977858028906, 0.2648677526647547, -0.05122642157634298, -0.0384749757883409, -0.2028977858028909, 0.2648677526647548, -0.05122642157634308, -0.03847497578834096, -0.03286780270597022, -0.03286780270597001, 0.2818556378820538, 0.2818556378820537, 0.1808436976935146, 0.04565833708245766 },
            { 0.03430208568317208, 0.03430208568317206, 0.04733380747674396, 0.3655922704770113, -0.2009385531214546, 0.388028863355365, -0.140168467199395, 0.2489663679899859, -0.01074411022226899, -0.00988234596426622, -0.1401684671993952, 0.2489663679899859, -0.01074411022226911, -0.009882345964266268, -0.006893616305219785, -0.00689361630521957, 0.06274113281760874, 0.0627411328176086, 0.04025585062436926, 0.00308566758873206 },
            { 0.06405377209550323, 0.06405377209550303, 0.004851167988216561, 0.02938433368505922, 0.1059643447933394, -0.09363782930820401, -0.01278659630826893, -0.02050145886894607, -0.2482760757366405, 0.4504774999877969, -0.01278659630826911, -0.02050145886894621, -0.2482760757366408, 0.4504774999877971, -0.05435860476970857, -0.05435860476970838, 0.09214930297096868, 0.09214930297096829, 0.02017555467292169, 0.3917467494272587 },
            { 0.06354777371698592, 0.06354777371698578, -0.0573735881956631, 0.06154525848634433, 0.3250843089642435, -0.2151953256427783, -0.06115382981011706, -0.04711576667303561, -0.2026289374353729, 0.2358344485774755, -0.06115382981011734, -0.04711576667303576, -0.2026289374353731, 0.2358344485774759, -0.0443644289618917, -0.04436442896189153, 0.3388468525865405, 0.3388468525865407, 0.07418855031666326, 0.2458185720700213 },
            { 0.05767129312800953, 0.05767129312800939, -0.04210073380656289, -0.02746260878552602, 0.2031879743297628, 0.1263029345604899, -0.1175666732089585, 0.02765329394166352, -0.1279474683368906, 0.04841488419752716, -0.1175666732089588, 0.02765329394166344, -0.1279474683368908, 0.04841488419752724, -0.02801335506038619, -0.02801335506038597, 0.414960104952508, 0.4149601049525082, 0.09085310484864113, 0.09887516962624986 },
            { 0.04250522124077318, 0.04250522124077314, 0.0372918536713576, -0.02778084477197972, -0.1720987573347607, 0.6555081960752898, -0.1323880869042974, 0.1435197122720697, -0.05307515970360593, -0.01510614212931357, -0.1323880869042977, 0.1435197122720696, -0.053075159703606, -0.01510614212931366, -0.0116204979511512, -0.01162049795115098, 0.242512923073051, 0.2425129230730508, 0.05309679596699539, 0.02128681659804665 },
            { 0.0204175014942816, 0.02041750149428156, 0.06030251108461737, 0.3655922704770113, -0.2734284036534983, 0.6161546399009752, -0.0809475986170374, 0.134903479717181, -0.009852575965761716, -0.007286565585370549, -0.08094759861703762, 0.1349034797171809, -0.00985257596576183, -0.007286565585370625, -0.002157164282935178, -0.00215716428293497, 0.05398343503378833, 0.05398343503378825, 0.01181935955933849, 0.00143859904326463 },
            { 0.03786767594073564, 0.0378676759407354, 0.42820757294106, 0.02938433368505924, 0.2181488248511592, -0.121373909483891, -0.00634510558531472, -0.006633418781102615, -0.1596955355001958, 0.3000674410486592, -0.006345105585314936, -0.006633418781102747, -0.1596955355001962, 0.3000674410486596, -0.008727801295597633, -0.008727801295597372, 0.03864725990346512, 0.03864725990346483, 0.002112179304200823, 0.05315996724111459 },
            { 0.03356269025993335, 0.03356269025993312, 0.1082491771841238, 0.06154525848634435, 0.7184797178792189, -0.278937456889922, -0.02790559693979946, -0.01524470104946379, -0.1198514043898167, 0.1686469138505702, -0.02790559693979979, -0.01524470104946391, -0.1198514043898171, 0.1686469138505705, -0.006550209680165772, -0.006550209680165512, 0.1421117898581267, 0.1421117898581268, 0.007766801117880546, 0.03335753840358632 },
            { 0.02611512322344678, 0.02611512322344658, -0.06256303284875084, -0.02746260878552602, 0.6272136474824757, 0.1637146125679315, -0.04798211686699275, 0.008947454937942793, -0.06768631575494352, 0.04835585271384368, -0.0479821168669932, 0.008947454937942693, -0.06768631575494377, 0.04835585271384377, -0.003699243767146551, -0.003699243767146313, 0.1740335575920868, 0.1740335575920871, 0.009511413732839228, 0.01341734369455711 },
            { 0.01658129246701175, 0.01658129246701164, 0.001848666776100829, -0.02778084477197971, -0.01043824566453986, 0.8496736099522137, -0.04864587885353939, 0.04643700533360774, -0.02527914963688355, -0.0002964530997043363, -0.04864587885353958, 0.04643700533360765, -0.02527914963688363, -0.0002964530997043987, -0.001381575222258713, -0.001381575222258484, 0.101709504746943, 0.1017095047469429, 0.005558704847474349, 0.002888617390378295 },
            { 0.007097650309218408, 0.007097650309218335, 0.06403508060147256, 0.3655922704770114, -0.3070864295425533, 0.7986632971303641, -0.02748471560919311, 0.04364915110248652, -0.004336217657327592, -0.002647844801244838, -0.02748471560919338, 0.04364915110248646, -0.004336217657327678, -0.002647844801244918, -0.0002369862499229415, -0.0002369862499227264, 0.02264056023180033, 0.02264056023180025, 0.001237369036681008, 0.000195217645391748 },
            { 0.0520451862178155, 0.05654431446143223, 0.03204171670352369, 0.02938433368505922, -0.005290877293692882, -0.005360028893208087, 0.1264043799176287, -0.09944720863332054, 0.1404940183175912, -0.109106058690636, -0.01192490773290366, -0.02983350951956762, -0.01325411513868373, -0.03273110110703481, -0.2459100090144875, 0.7819789251941016, 0.02558678259866149, 0.007675866751040414, 0.1424140685509259, 0.1582882236257547 },
            { 0.05985054551924845, -0.04278025910631917, 0.02819201414895275, 0.06154525848634434, -0.02315104878463878, -0.01231823902423109, 0.3962398733176508, -0.2285462467917092, 0.07515394389382464, -0.08146850315502495, -0.06441964522236268, -0.06856237317290945, -0.01221833219904265, -0.02444001594234804, -0.2266926271403256, 0.4183010848002232, 0.09408644961865853, 0.02822531701930634, 0.5236779588851395, 0.0993248448495635 },
            { 0.06406493173092527, -0.05138829566442681, 0.02169831609928772, -0.027462608785526, -0.03950887022027655, 0.007229849127673882, 0.2782339025492522, 0.1341388878515704, 0.01733298289882413, -0.04566498706262443, -0.1409918342512138, 0.04024078546457251, -0.008783289992913756, -0.01369919623653746, -0.1629606276039013, 0.09647405277419639, 0.1152205567510656, 0.03456541037121728, 0.6413087774654576, 0.03995125673337695 },
            { 0.05387556942220691, 0.03048536711428613, 0.01361741835963621, -0.02778084477197969, -0.03973865042400912, 0.03752268604106146, -0.1462844768086947, 0.6961765433646111, -0.003357039407685009, -0.01691986046465746, -0.1750644481250409, 0.2088483912137564, -0.004017502499660174, -0.005075847026569907, -0.07453866709092717, -0.01868502374187636, 0.06733773604333176, 0.02020087860567414, 0.3747966716784805, 0.008601098518055886 },
            { 0.02826351338596361, 0.06154176623822715, 0.005772232708007887, 0.3655922704770114, -0.02230455598725847, 0.03527000462263036, -0.2822691544071438, 0.6543814554151808, -0.001966640769624262, -0.002883239139637211, -0.1138796068580066, 0.1963101392975258, -0.0007934280957696063, -0.0008649528076421012, -0.01472085523186671, -0.01094617161420624, 0.01498939624723664, 0.004496720438713811, 0.0834298293058004, 0.0005812767748576801 },
            { 0.06068298015665168, -0.04996172582535884, 0.05815319294465323, 0.02938433368505922, -0.01268690419487551, -0.02666067450765343, 0.07291284642279257, -0.08306201385168988, 0.4030916170641847, -0.2185177386533206, -0.01289983064477072, -0.02491805868675302, -0.07131546564926383, -0.06555388658866741, -0.2221851586649982, 0.3767444280999013, 0.1062990883811834, 0.03188902844759023, 0.09935108437974027, 0.5492528576855953 },
            { 0.06377875305562607, -0.06351206574006872, 0.06285514970598607, 0.06154525848634432, -0.06503397661559349, -0.06127066993027709, 0.2108409160517037, -0.1908903404896988, 0.1989081126268734, -0.1911477702394025, -0.06461541960019926, -0.05726584856887382, -0.06095842970117506, -0.05734307580324227, -0.1899175480636372, 0.1859069252837124, 0.3908777426361023, 0.1172607558942994, 0.365328886467441, 0.3446526445440797 },
            { 0.06201917658318298, -0.02116855195801483, 0.06306685164382755, -0.02746260878552602, -0.1351395291735683, 0.03596112225749395, 0.08529754120282763, 0.1120377968763243, 0.02643040241836832, -0.1304610857118855, -0.130999493720377, 0.03361060330999857, -0.04059166638108561, -0.03913746897481633, -0.1264643756196421, 0.02470283782153893, 0.4786783996066523, 0.1436003763980117, 0.4473906483519562, 0.1386290238547332 },
            { 0.04845979916553503, 0.04824483250590068, 0.05052272862117455, -0.0277808447719797, -0.1617891293608983, 0.1866370758674901, -0.2081474797395725, 0.5814725871430635, -0.02375928436109527, -0.05753642321453613, -0.1539568820033722, 0.1744379576088756, -0.01757362300731377, -0.01726054912231702, -0.05475107230459755, -0.02220631146804139, 0.2797514665026056, 0.08392360282118638, 0.2614661327497928, 0.02984541636809999 },
            { 0.02424040267203391, 0.05738371232293465, 0.02569437405013414, 0.3655922704770114, -0.1029577123228624, 0.1754322843891585, -0.2548975964108097, 0.5465637724875554, -0.008833470399916128, -0.01111618653151648, -0.09683864454104296, 0.163965542458623, -0.003355941021674684, -0.003334782959389906, -0.01045552015376722, -0.008256090211431699, 0.06227274376220099, 0.01868141418317021, 0.0582024240686858, 0.002017003680903708 },
            { 0.06349458613841058, -0.03935162277933653, -0.0415226069743584, 0.02938433368505921, 0.01766520646684995, -0.05896925563908027, 0.01637555837710662, -0.05820913358980993, 0.2002397729426419, 0.213225152469635, -0.01216485326421193, -0.01746235781720606, -0.1487514135036622, 0.06396614549000761, -0.1468339867354442, 0.05929629815512179, 0.1647679474849235, 0.04942930221335604, 0.04879215151363607, 0.5966287753663617 },
            { 0.06102966866914931, -0.01193547959968052, -0.01422478151980577, 0.06154525848634432, 0.02429879416175378, -0.1355211698510861, 0.02008066213146446, -0.1337742827956142, 0.04190155536547618, 0.05004979771280778, -0.05677215132182489, -0.04013140634214939, -0.1184642929727522, 0.01501461063651406, -0.1169372714737708, 0.01240815989551858, 0.6058765352788418, 0.1817589817887322, 0.1794160827947865, 0.3743807289552954 },
            { 0.05318236361365855, 0.03326688864802687, 0.03175873077230894, -0.02746260878552604, -0.0929945651185656, 0.0795403961314491, -0.09657790860520678, 0.07851510917043911, -0.06619109608287531, -0.06291364296994, -0.105874515811513, 0.0235540171419286, -0.07256266313919671, -0.0188736797367031, -0.07162732014379823, -0.01960093597223928, 0.7419711552532702, 0.2225864740468573, 0.2197173029006607, 0.1505864986869651 },
            { 0.03778418410398027, 0.06340387815709866, 0.06321752791622888, -0.02778084477197971, -0.237511690882099, 0.4128121152899198, -0.2372448834310748, 0.4074909087113879, -0.05989817171921762, -0.05919256945742168, -0.116115203078556, 0.1222445966181215, -0.02931607321778885, -0.01775738211926017, -0.02893818488582065, -0.01773743446176783, 0.4336262487618007, 0.1300850270023069, 0.128408212597364, 0.03241973886677819 },
            { 0.01767082850840484, 0.04693574582092747, 0.04733380747674396, 0.3655922704770114, -0.2009385531214546, 0.388028863355365, -0.1989705391739375, 0.3830271164010716, -0.01525137177128457, -0.01520368597787032, -0.0696942436245003, 0.1149056195789004, -0.005342161830835364, -0.004561005950662163, -0.005273300608926116, -0.004516334964501375, 0.09652530732115563, 0.02895695831406171, 0.02858369902401692, 0.002190980746313926 },
            { 0.04853758960920411, 0.04804748687512907, 0.004851167988216536, 0.02938433368505924, 0.1059643447933395, -0.09363782930820398, -0.01131488455055892, -0.03154086528226754, -0.2196999941109609, 0.6930458086243588, -0.008408422170859627, -0.009462052455624807, -0.1632655015758905, 0.2079091913512356, -0.05499417520132371, -0.0222005666314202, 0.1417688745684658, 0.04252973137347134, 0.01432566877780221, 0.2781600936408289 },
            { 0.04378433053973921, 0.05758435570636902, -0.05737358819566312, 0.06154525848634432, 0.3250843089642436, -0.2151953256427784, -0.06335370627512105, -0.07248616104856546, -0.209918074223321, 0.3628240614021431, -0.03744304268552719, -0.0217453722975059, -0.1240649028404839, 0.1088448357528083, -0.04178988786540012, -0.02121210887051969, 0.5213054835302974, 0.156388221642784, 0.05267763965707711, 0.1745436742630803 },
            { 0.03495844779040284, 0.06413923880368307, -0.04210073380656289, -0.02746260878552604, 0.2031879743297628, 0.1263029345604899, -0.1432405218388422, 0.0425437440525807, -0.1558882430904613, 0.07448481349021616, -0.06555003969915299, 0.01276284383074628, -0.07133791745542227, 0.02234495490483827, -0.02402938706078984, -0.01575242339804931, 0.6384033863876669, 0.1915168235173492, 0.0645103199687191, 0.07020639349835213 },
            { 0.02280238252843817, 0.05546935183224138, 0.03729185367135761, -0.02778084477197971, -0.1720987573347607, 0.6555081960752898, -0.1816818244777534, 0.2208006727257771, -0.07283730790950982, -0.02324033606004347, -0.06769897592778726, 0.06623875181836217, -0.02714091609870707, -0.006971948198583748, -0.009142116862715995, -0.007360170918719402, 0.3730986894519093, 0.1119271566941924, 0.03770142256394109, 0.0151147211990517 },
            { 0.009979473413263464, 0.02960459346803771, 0.06030251108461737, 0.3655922704770114, -0.2734284036534983, 0.6161546399009752, -0.1196397080930486, 0.2075448633713476, -0.01456200471227102, -0.01121015752916485, -0.03882847531680075, 0.0622620960630143, -0.004726026580521278, -0.003362973641576329, -0.001591909688615369, -0.001471482769992781, 0.08305185805356752, 0.02491501201400906, 0.008392345735112938, 0.001021478404533403 },
            { 0.01983126690353013, 0.05084284700731428, 0.42820757294106, 0.02938433368505922, 0.2181488248511592, -0.121373909483891, -0.008886865998446656, -0.01020531121580499, -0.2236673299535037, 0.4616445490153089, -0.003190920477054795, -0.003061526346400362, -0.08031005118357108, 0.1384903330820103, -0.006752596744808381, -0.005641767875760066, 0.05945762328115901, 0.01783689652577102, 0.001499754609072604, 0.03774627737779754 },
            { 0.01723424343305413, 0.0460926810007941, 0.1082491771841238, 0.06154525848634433, 0.7184797178792189, -0.278937456889922, -0.03971482357493523, -0.02345350470633597, -0.1705707063288497, 0.2594581012031394, -0.01384439255008621, -0.007035897392591722, -0.05946011094588886, 0.07783572649800109, -0.004999500631638122, -0.00430246264267492, 0.2186346273009161, 0.06558895241533735, 0.005514823363302754, 0.02368554689869109 },
            { 0.01301899537363642, 0.0370660655468255, -0.06256303284875081, -0.02746260878552602, 0.6272136474824754, 0.1637146125679314, -0.06987929864685886, 0.0137653848255785, -0.09857573158050864, 0.07439399536423896, -0.02332710830415099, 0.004129525050307059, -0.0329065518868484, 0.02231771006344851, -0.002766835182885027, -0.002486466824976396, 0.267745287283935, 0.08032182790023869, 0.006753586949863137, 0.009526995652026988 },
            { 0.008006184655998842, 0.02435522702288875, 0.001848666776100829, -0.02778084477197971, -0.01043824566453986, 0.8496736099522137, -0.07253772469112377, 0.07144190755896936, -0.03769470384750919, -0.0004560839957808488, -0.02314229100392443, 0.02143210310824601, -0.01202604313080357, -0.0001368222036278862, -0.001011168820106606, -0.000950808369274787, 0.1564769515992202, 0.04694205789466575, 0.003946962835443529, 0.002051065094923879 },
            { 0.003335359170138909, 0.01072251350212871, 0.06403508060147256, 0.3655922704770114, -0.3070864295425533, 0.7986632971303641, -0.04177186175610062, 0.06715287938334119, -0.006590276832468506, -0.004073627964638071, -0.01283879530256207, 0.02014542282163179, -0.002025555282484492, -0.001222061637851681, -0.0001703119074806282, -0.0001662326461959567, 0.03483180708022418, 0.0104493133833764, 0.0008785948769573226, 0.0001386144456894806 },
            { 0.03534581477412863, 0.4742947426720567, 0.03204171670352372, 0.02938433368505921, -0.00529087729369291, -0.005360028893208059, 0.2269079707835757, -0.1232161497057561, 0.2522002214199321, -0.1351835677057509, -0.005883778382894448, -0.006064568447132102, -0.006539612539072719, -0.006653592091919918, -0.150332375755109, 0.2853502351677857, 0.03170229590646333, 0.001560353443238821, 0.03586934833496953, 0.03986751792380308 },
            { 0.03122392372258538, 0.1291950481124203, 0.02819201414895275, 0.0615452584863443, -0.02315104878463881, -0.01231823902423103, 0.7494182056132109, -0.2831712317156029, 0.1421405001624229, -0.1009403423083112, -0.02581700966551936, -0.01393738824901566, -0.004896655350869868, -0.004968176789061744, -0.1125641355282188, 0.16082390776604, 0.1165741122432207, 0.005737654394744078, 0.1318969910327359, 0.02501661173279236 },
            { 0.02417604387311277, -0.06124023457623264, 0.02169831609928774, -0.02746260878552601, -0.03950887022027656, 0.007229849127673934, 0.6612668324815504, 0.1661995094082998, 0.04119457260221332, -0.05657940488773545, -0.04424025298783108, 0.008180163907843043, -0.002756010469795434, -0.002784778411426421, -0.06335506867644428, 0.04660932061635777, 0.1427594958664634, 0.007026471255819349, 0.1615242662697768, 0.01006238750686951 },
            { 0.0152699169980279, -0.0006527365268150656, 0.01361741835963622, -0.02778084477197965, -0.03973865042400912, 0.03752268604106149, 0.003741125690993531, 0.8625701451826212, 8.585399249306895e-5, -0.02096388715846981, -0.04469214521992814, 0.04245478939574635, -0.001025626888036098, -0.001031820332757556, -0.02357707368679179, 9.713891926848607e-5, 0.08343217149266324, 0.004106443156342676, 0.09439876627367956, 0.00216632950625383 },
            { 0.006507721085943798, 0.0640951986736919, 0.005772232708007887, 0.3655922704770114, -0.02230455598725847, 0.0352700046226303, -0.3085558568163953, 0.8107855864753917, -0.002149786890444993, -0.003572363974306627, -0.02517626323136787, 0.03990600823731466, -0.0001754094095105484, -0.0001758279729726434, -0.004032305141011459, -0.002432361840506405, 0.01857202145118408, 0.0009140952347663489, 0.02101318808841331, 0.0001464042094193561 },
            { 0.03059970118891297, 0.09575250369580598, 0.05815319294465323, 0.02938433368505921, -0.01268690419487552, -0.02666067450765343, 0.1393767076463157, -0.1029147190178873, 0.7705306433993927, -0.2707458034196592, -0.005035828082799204, -0.005065353520555503, -0.02784008833480688, -0.01332582182232879, -0.1074674561435912, 0.1463957750250683, 0.1317057016236129, 0.006482415205160887, 0.02502322059424574, 0.1383384540359305 },
            { 0.02687903416528849, -0.02961282767530371, 0.06285514970598605, 0.06154525848634427, -0.0650339766155935, -0.06127066993027704, 0.44155025374578, -0.2365151631141979, 0.4165601689045615, -0.2368341213133683, -0.02201001815695821, -0.01164102594437463, -0.02076433385164286, -0.01165672472927641, -0.08015384544460696, 0.07914370349025482, 0.4843016824220924, 0.0238368161083091, 0.0920141473301236, 0.08680649241685953 },
            { 0.02063682627482021, -0.05591740612800255, 0.06306685164382757, -0.02746260878552604, -0.1351395291735683, 0.035961122257494, 0.3265040657114512, 0.1388160225141889, 0.1011709567039776, -0.1616426734220586, -0.03749813479507442, 0.006832377672133995, -0.01161921877930032, -0.007955881264643203, -0.04485215239156009, 0.01922181907180753, 0.5930876306877355, 0.02919114531692841, 0.1126827649180299, 0.03491602196733878 },
            { 0.01291692138381893, 0.0262133217034175, 0.05052272862117456, -0.02778084477197967, -0.1617891293608983, 0.1866370758674901, -0.1288445758611859, 0.7204507228693313, -0.01470714380063964, -0.07128824060287053, -0.03764824101663139, 0.03545982188260768, -0.004297410975757976, -0.003508731733982575, -0.01658873420278847, -0.002794260985651208, 0.3466150438076796, 0.01706002551611235, 0.06585458788466543, 0.007517063776088583 },
            { 0.005463020987790647, 0.06216231346930407, 0.02569437405013414, 0.3655922704770114, -0.1029577123228624, 0.1754322843891585, -0.2870937464771796, 0.6771983300495057, -0.00994922724739998, -0.01377307339892009, -0.02109931751620317, 0.03333098489667252, -0.0007311963681188652, -0.0006778960919862596, -0.002822541820922543, -0.001890288006402556, 0.07715659216020115, 0.00379756578516996, 0.01465924711021604, 0.0005080158748317562 },
            { 0.02261184303618289, -0.06395874758862659, -0.04152260697435839, 0.0293843336850592, 0.01766520646684995, -0.05896925563908029, 0.0443719316972226, -0.07212173591608723, 0.5425784772322486, 0.2641882328201249, -0.003658188754916129, -0.003549755490928765, -0.04473220813586392, 0.01300306513951778, -0.0547092627701441, 0.03266144210133935, 0.204149240215176, 0.0100480094831035, 0.01228911368422422, 0.1502708657089568 },
            { 0.01970066601667236, -0.04880819578613182, -0.01422478151980575, 0.06154525848634428, 0.02429879416175377, -0.1355211698510861, 0.1134349118539146, -0.1657477598642396, 0.2367003243372687, 0.06201223194170031, -0.01589923839020253, -0.008157929273523892, -0.03317633718024195, 0.003052176407621576, -0.04057597476592135, 0.01424858202659742, 0.7506874742898438, 0.03694804277772974, 0.04518892014071394, 0.09429400419099274 },
            { 0.01493982301608196, 0.003258524524086591, 0.03175873077230895, -0.02746260878552605, -0.09299456511856559, 0.07954039613144911, -0.0112147441631832, 0.09728105573460157, -0.007686190549896717, -0.07795067309834229, -0.02685982908791038, 0.004788070577766174, -0.01840878057522601, -0.003836649608300777, -0.0225146679705378, -0.0004626834239828291, 0.9193101566091402, 0.04524747269098751, 0.0553394517350345, 0.03792771059001585 },
            { 0.009226459114754717, 0.05704201370620527, 0.06321752791622888, -0.02778084477197969, -0.237511690882099, 0.4128121152899198, -0.2305702346328403, 0.5048855719686222, -0.05821299624103592, -0.07334022342071345, -0.02672338018740875, 0.02484993336088715, -0.006746959480154057, -0.003609728155968376, -0.008251798748189373, -0.003504231159280098, 0.5372675363949573, 0.02644373936915019, 0.03234174090798242, 0.008165449650961734 },
            { 0.003857782744498047, 0.05342483831392521, 0.04733380747674396, 0.3655922704770114, -0.2009385531214546, 0.388028863355365, -0.2324185012953343, 0.4745746729790601, -0.01781520512783651, -0.01883752870767753, -0.0148618617878421, 0.02335806300091176, -0.001139182616084092, -0.0009271632208549332, -0.001393265472100853, -0.001072416830417627, 0.1195958828882868, 0.005886382746930555, 0.007199279308755635, 0.0005518348881146072 },
            { 0.01294764933883237, 0.02588546307060614, 0.004851167988216522, 0.02938433368505922, 0.1059643447933396, -0.09363782930820398, -0.006948513130961911, -0.0390794677083255, -0.1349185921545144, 0.8586911315255732, -0.002057282410782874, -0.001923450029566828, -0.03994604907491, 0.04226386845002127, -0.01667136398217828, -0.002771413775670977, 0.1756531441405562, 0.008645461801380788, 0.003608157598128398, 0.070059239183402 },
            { 0.01118752222207229, 0.04304726648444827, -0.05737358819566312, 0.0615452584863443, 0.3250843089642437, -0.2151953256427784, -0.05249570738058321, -0.08981112485808909, -0.1739408543908738, 0.449542872856442, -0.008891140325167364, -0.004420408487982266, -0.02946017154234552, 0.0221260242985094, -0.01229511438888052, -0.003572984807451668, 0.6459030412602131, 0.03179066391286815, 0.01326773840217944, 0.04396172313249474 },
            { 0.008377081602978068, 0.06095850418078272, -0.04210073380656288, -0.02746260878552605, 0.2031879743297628, 0.1263029345604899, -0.1456360420494058, 0.05271215158541667, -0.1584952807647068, 0.09228747650078055, -0.01489219497216602, 0.002594436297910306, -0.01620713245225028, 0.004542291894273893, -0.006763998204481958, -0.003255711444032085, 0.7909885889290632, 0.0389316209759528, 0.0162479954522957, 0.01768264616942564 },
            { 0.0051016801842875, 0.06082414163778984, 0.03729185367135762, -0.0277808447719797, -0.1720987573347607, 0.6555081960752898, -0.2064973466246069, 0.2735743830279351, -0.08278599613267856, -0.02879502367678251, -0.0146777606237141, 0.01346504151620425, -0.005884400231253991, -0.001417260581844679, -0.002455836818506999, -0.001700538424326166, 0.4622732463415235, 0.02275259980457826, 0.00949572940672155, 0.003806893554767365 },
            { 0.002107478174024374, 0.03518476251527828, 0.06030251108461737, 0.3655922704770114, -0.2734284036534983, 0.6161546399009752, -0.1440926443944553, 0.2571502941838856, -0.0175383056354813, -0.0138895044649436, -0.00809694493124663, 0.0126566652504761, -0.0009855235533683254, -0.0006836267057975659, -0.0004113053043219225, -0.0003602609622876604, 0.1029021358759467, 0.005064734191629811, 0.002113751650965584, 0.0002572763005907683 },
            { 0.004373243757903068, 0.05702823210397787, 0.42820757294106, 0.02938433368505922, 0.2181488248511592, -0.121373909483891, -0.01027068462962824, -0.01264448919020878, -0.2584956955922334, 0.5719825085493426, -0.0006850853425733432, -0.0006223483719965603, -0.01724243500357074, 0.02815237354797626, -0.001796282116499535, -0.001325444455105439, 0.07366862792873863, 0.00362589187819139, 0.0003777381057727403, 0.009507026836526822 },
            { 0.003754983325663417, 0.05261283176874208, 0.1082491771841238, 0.06154525848634432, 0.7184797178792189, -0.278937456889922, -0.04648512652267036, -0.0290591418978479, -0.1996483970222635, 0.3214713482617109, -0.002948266091639513, -0.00143026020107978, -0.01266247170272521, 0.01582247943942966, -0.001319150773401582, -0.001023703161468738, 0.2708906296978316, 0.01333295001842184, 0.001388999852591204, 0.005965598348941384 },
            { 0.002784433170418514, 0.04337045709813643, -0.06256303284875082, -0.02746260878552603, 0.6272136474824757, 0.1637146125679315, -0.08324781307281579, 0.01705545827515083, -0.1174341219078495, 0.09217495187630712, -0.004906009963213961, 0.0008394516007346614, -0.006920697983948867, 0.004536753551380372, -0.0007209843632693027, -0.000602146992685109, 0.3317392599990414, 0.01632785518513254, 0.001701003034883018, 0.002399532076468289 },
            { 0.001677382162309536, 0.02921620886627491, 0.001848666776100843, -0.02778084477197971, -0.01043824566453986, 0.8496736099522137, -0.08792690235374687, 0.08851728367266919, -0.04569179083802882, -0.0005650929239225033, -0.004800258645947096, 0.00435672699454618, -0.002494485852994568, -2.781327548621784e-5, -0.0002598705070755904, -0.0002342860320026768, 0.1938766080890256, 0.009542401404860158, 0.0009941081400892497, 0.0005165948076345092 },
            { 0.0006863389002215829, 0.01311975355344455, 0.06403508060147256, 0.3655922704770114, -0.3070864295425533, 0.7986632971303641, -0.05132213136134675, 0.08320313212389113, -0.008097006910499815, -0.005047268395306385, -0.002631219531562284, 0.004095170081081845, -0.000415123108978014, -0.0002484212071833629, -4.324668857093664e-5, -4.151764650414322e-5, 0.0431569796146184, 0.002124140848982242, 0.0002212887112035544, 3.491235021432781e-5 } } };
    alignas(32) static const double FE33_C0_D001_Q125[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][16][16] =
        { { { 0.05952380952380941, -0.01130952380952371, -0.01339285714285701, -0.0133928571428571, -0.01339285714285685, -0.01339285714285724, -0.03482142857142847, 0.0133928571428571, -0.03482142857142847, 0.01339285714285723, -0.09642857142857116, 0.04821428571428548, -0.03214285714285696, 0.03214285714285697, 0.04821428571428547, 0.04821428571428527 },
            { -0.01130952380952371, 0.05952380952380933, -0.03482142857142865, 0.01339285714285704, -0.03482142857142851, 0.01339285714285709, -0.01339285714285728, -0.01339285714285706, -0.0133928571428572, -0.01339285714285709, 0.04821428571428547, -0.09642857142857106, 0.03214285714285703, -0.03214285714285702, 0.04821428571428596, 0.04821428571428575 },
            { -0.01339285714285701, -0.03482142857142865, 0.2410714285714282, -0.07232142857142813, 0.1205357142857141, -0.02410714285714301, 0.04821428571428587, 0.07232142857142823, 0.02410714285714293, 0.02410714285714302, 0.0241071428571425, 0.02410714285714314, -0.04821428571428519, 0.04821428571428522, -0.2892857142857144, -0.1446428571428569 },
            { -0.0133928571428571, 0.01339285714285704, -0.07232142857142813, 0.1928571428571426, -0.02410714285714281, -0.02410714285714284, 0.07232142857142849, -0.1928571428571426, 0.02410714285714283, 0.02410714285714285, 0.0, 0.0, 0.09642857142857141, -0.09642857142857145, 0.0, 0.0 },
            { -0.01339285714285685, -0.03482142857142851, 0.1205357142857141, -0.02410714285714281, 0.2410714285714281, -0.07232142857142865, 0.02410714285714283, 0.02410714285714283, 0.04821428571428533, 0.07232142857142868, 0.0241071428571423, 0.02410714285714302, -0.04821428571428608, 0.04821428571428611, -0.1446428571428571, -0.2892857142857133 },
            { -0.01339285714285724, 0.01339285714285709, -0.02410714285714301, -0.02410714285714284, -0.07232142857142865, 0.192857142857143, 0.02410714285714287, 0.02410714285714286, 0.07232142857142879, -0.1928571428571429, 0.0, 0.0, 0.09642857142857174, -0.09642857142857177, 0.0, 0.0 },
            { -0.03482142857142847, -0.01339285714285728, 0.04821428571428587, 0.07232142857142849, 0.02410714285714283, 0.02410714285714287, 0.2410714285714284, -0.07232142857142847, 0.1205357142857142, -0.02410714285714284, 0.02410714285714248, 0.02410714285714326, 0.04821428571428547, -0.04821428571428556, -0.2892857142857143, -0.1446428571428569 },
            { 0.0133928571428571, -0.01339285714285706, 0.07232142857142823, -0.1928571428571426, 0.02410714285714283, 0.02410714285714286, -0.07232142857142847, 0.1928571428571427, -0.02410714285714281, -0.02410714285714288, 0.0, 0.0, -0.09642857142857143, 0.09642857142857152, 0.0, 0.0 },
            { -0.03482142857142847, -0.0133928571428572, 0.02410714285714293, 0.02410714285714283, 0.04821428571428533, 0.07232142857142879, 0.1205357142857142, -0.02410714285714281, 0.2410714285714285, -0.07232142857142876, 0.02410714285714239, 0.0241071428571432, 0.04821428571428592, -0.04821428571428595, -0.1446428571428572, -0.2892857142857137 },
            { 0.01339285714285723, -0.01339285714285709, 0.02410714285714302, 0.02410714285714285, 0.07232142857142868, -0.1928571428571429, -0.02410714285714284, -0.02410714285714288, -0.07232142857142876, 0.1928571428571429, 0.0, 0.0, -0.09642857142857165, 0.09642857142857167, 0.0, 0.0 },
            { -0.09642857142857116, 0.04821428571428547, 0.0241071428571425, 0.0, 0.0241071428571423, 0.0, 0.02410714285714248, 0.0, 0.02410714285714239, 0.0, 0.2410714285714276, -0.1928571428571421, 0.0, 0.0, -0.04821428571428492, -0.04821428571428465 },
            { 0.04821428571428548, -0.09642857142857106, 0.02410714285714314, 0.0, 0.02410714285714302, 0.0, 0.02410714285714326, 0.0, 0.0241071428571432, 0.0, -0.1928571428571421, 0.2410714285714277, 0.0, 0.0, -0.04821428571428647, -0.04821428571428626 },
            { -0.03214285714285696, 0.03214285714285703, -0.04821428571428519, 0.09642857142857141, -0.04821428571428608, 0.09642857142857174, 0.04821428571428547, -0.09642857142857143, 0.04821428571428592, -0.09642857142857165, 0.0, 0.0, 0.5785714285714297, -0.57857142857143, 0.0, 0.0 },
            { 0.03214285714285697, -0.03214285714285702, 0.04821428571428522, -0.09642857142857145, 0.04821428571428611, -0.09642857142857177, -0.04821428571428556, 0.09642857142857152, -0.04821428571428595, 0.09642857142857167, 0.0, 0.0, -0.57857142857143, 0.57857142857143, 0.0, 0.0 },
            { 0.04821428571428547, 0.04821428571428596, -0.2892857142857144, 0.0, -0.1446428571428571, 0.0, -0.2892857142857143, 0.0, -0.1446428571428572, 0.0, -0.04821428571428492, -0.04821428571428647, 0.0, 0.0, 0.5785714285714287, 0.289285714285714 },
            { 0.04821428571428527, 0.04821428571428575, -0.1446428571428569, 0.0, -0.2892857142857133, 0.0, -0.1446428571428569, 0.0, -0.2892857142857137, 0.0, -0.04821428571428465, -0.04821428571428626, 0.0, 0.0, 0.289285714285714, 0.5785714285714266 } } };
    alignas(32) static const double PI1[1][16][16] =
        { { { 0.05952380952380937, -0.01130952380952384, -0.01339285714285703, -0.01339285714285715, -0.01339285714285695, -0.01339285714285704, -0.03482142857142848, 0.01339285714285711, -0.09642857142857127, 0.04821428571428567, -0.0348214285714283, 0.01339285714285692, -0.03214285714285692, 0.0482142857142856, 0.03214285714285686, 0.04821428571428533 },
            { -0.01130952380952374, 0.01130952380952375, 0.01339285714285704, 0.01339285714285709, 0.06160714285714253, -0.03482142857142836, -0.01339285714285729, -0.01339285714285707, 0.0, 0.0, 0.0348214285714282, -0.06160714285714257, -0.01607142857142866, 0.0, 0.01607142857142875, 0.0 },
            { -0.01339285714285698, 0.01339285714285701, -0.04821428571428537, -0.07232142857142847, 0.09642857142857168, -0.04821428571428606, 0.04821428571428591, 0.07232142857142837, 0.0, 0.0, 0.04821428571428551, -0.0964285714285711, 0.2410714285714288, 0.0, -0.2410714285714288, 0.0 },
            { -0.01339285714285716, 0.01339285714285725, -0.0723214285714288, 0.1928571428571433, -0.02410714285714282, -0.02410714285714284, 0.07232142857142869, -0.1928571428571429, 0.0, 0.0, 0.02410714285714278, 0.02410714285714264, 0.09642857142857134, 0.0, -0.09642857142857121, 0.0 },
            { -0.01339285714285682, -0.03482142857142848, -0.04821428571428572, -0.02410714285714294, 0.09642857142857202, 0.07232142857142761, 0.02410714285714287, 0.02410714285714289, 0.0241071428571424, 0.02410714285714307, 0.04821428571428521, -0.09642857142857125, 0.1205357142857141, 0.02410714285714288, -0.120535714285714, -0.1205357142857133 },
            { -0.01339285714285718, 0.06160714285714264, 0.09642857142857122, -0.02410714285714299, -0.02410714285714303, 0.09642857142857197, 0.02410714285714283, 0.02410714285714294, 0.04821428571428583, -0.09642857142857146, 0.02410714285714293, 0.02410714285714279, -0.02410714285714221, -0.1205357142857142, 0.02410714285714265, -0.1205357142857145 },
            { -0.03482142857142847, -0.01339285714285705, 0.04821428571428539, 0.0723214285714288, 0.02410714285714288, 0.02410714285714284, 0.2410714285714284, -0.07232142857142861, 0.02410714285714256, 0.02410714285714332, 0.1205357142857142, -0.02410714285714283, 0.04821428571428562, -0.2892857142857141, -0.04821428571428558, -0.1446428571428573 },
            { 0.01339285714285715, -0.01339285714285726, 0.07232142857142887, -0.1928571428571434, 0.02410714285714285, 0.02410714285714285, -0.07232142857142866, 0.1928571428571431, 0.0, 0.0, -0.02410714285714276, -0.02410714285714267, -0.09642857142857136, 0.0, 0.0964285714285712, 0.0 },
            { -0.03482142857142836, 0.03482142857142854, 0.04821428571428572, 0.02410714285714296, 0.02410714285714288, 0.04821428571428557, 0.1205357142857143, -0.02410714285714287, 0.1446428571428564, -0.1446428571428564, 0.1205357142857143, -0.02410714285714284, 0.0241071428571429, -0.1687500000000001, -0.02410714285714291, -0.1687500000000001 },
            { 0.01339285714285716, -0.06160714285714261, -0.09642857142857118, 0.024107142857143, 0.02410714285714303, -0.09642857142857188, -0.0241071428571428, -0.02410714285714295, -0.04821428571428583, 0.09642857142857146, -0.02410714285714292, -0.02410714285714279, 0.02410714285714225, 0.1205357142857142, -0.02410714285714269, 0.1205357142857144 },
            { -0.09642857142857124, 0.0, 0.0, 0.0, 0.04821428571428518, 0.0241071428571427, 0.02410714285714247, 0.0, 0.120535714285714, -0.02410714285714279, 0.1446428571428564, -0.04821428571428514, 0.02410714285714252, -0.02410714285714241, -0.02410714285714253, -0.168749999999999 },
            { 0.04821428571428558, 0.0, 0.0, 0.0, -0.09642857142857074, 0.02410714285714267, 0.02410714285714327, 0.0, -0.02410714285714285, -0.02410714285714271, -0.1446428571428562, 0.09642857142857079, 0.02410714285714313, -0.02410714285714336, -0.02410714285714311, 0.1205357142857134 },
            { -0.03214285714285692, -0.01607142857142872, 0.2410714285714282, 0.09642857142857175, -0.02410714285714273, 0.1205357142857146, 0.04821428571428536, -0.09642857142857152, 0.02410714285714322, 0.02410714285714237, 0.02410714285714264, 0.02410714285714262, 0.2892857142857168, -0.2892857142857143, -0.2892857142857157, -0.1446428571428564 },
            { 0.03214285714285694, 0.01607142857142871, -0.2410714285714282, -0.09642857142857184, 0.02410714285714276, -0.1205357142857146, -0.04821428571428545, 0.09642857142857154, -0.02410714285714319, -0.02410714285714236, -0.02410714285714266, -0.02410714285714265, -0.2892857142857169, 0.2892857142857143, 0.2892857142857158, 0.1446428571428564 },
            { 0.04821428571428543, 0.0, 0.0, 0.0, -0.1205357142857146, 0.02410714285714316, -0.2892857142857144, 0.0, -0.02410714285714259, -0.02410714285714325, -0.1687499999999997, 0.120535714285714, -0.2892857142857145, 0.2892857142857145, 0.2892857142857144, 0.144642857142857 },
            { 0.04821428571428513, 0.0, 0.0, 0.0, -0.1205357142857148, -0.1205357142857131, -0.1446428571428569, 0.0, -0.1687499999999987, 0.1205357142857132, -0.1687499999999994, 0.120535714285714, -0.1446428571428569, 0.1446428571428571, 0.1446428571428569, 0.2892857142857133 } } };
    alignas(32) static const double PI2[1][16][16] =
        { { { 0.05952380952380933, -0.01130952380952376, -0.01339285714285717, -0.01339285714285703, -0.01339285714285703, -0.01339285714285704, -0.09642857142857122, 0.04821428571428556, -0.0348214285714285, 0.0133928571428572, -0.03482142857142832, 0.01339285714285692, -0.03214285714285698, 0.04821428571428552, 0.04821428571428543, 0.03214285714285686 },
            { -0.01130952380952373, 0.01130952380952375, 0.01339285714285702, 0.01339285714285707, 0.0616071428571425, -0.03482142857142848, 0.0, 0.0, -0.01339285714285728, -0.01339285714285706, 0.03482142857142818, -0.06160714285714253, -0.01607142857142854, 0.0, 0.0, 0.01607142857142855 },
            { -0.01339285714285697, -0.03482142857142866, -0.02410714285714251, -0.04821428571428549, 0.09642857142857184, 0.07232142857142851, 0.02410714285714258, 0.02410714285714335, 0.02410714285714314, 0.024107142857143, 0.04821428571428548, -0.09642857142857107, 0.1205357142857142, 0.02410714285714182, -0.1205357142857147, -0.1205357142857141 },
            { -0.01339285714285714, 0.06160714285714297, -0.0241071428571431, 0.09642857142857127, -0.02410714285714257, 0.09642857142857118, 0.04821428571428574, -0.09642857142857157, 0.02410714285714285, 0.02410714285714295, 0.02410714285714275, 0.02410714285714253, -0.02410714285714261, -0.1205357142857141, -0.1205357142857137, 0.02410714285714274 },
            { -0.01339285714285695, 0.01339285714285699, -0.07232142857142805, -0.04821428571428595, 0.09642857142857168, -0.04821428571428573, 0.0, 0.0, 0.04821428571428561, 0.07232142857142858, 0.04821428571428515, -0.09642857142857118, 0.2410714285714278, 0.0, 0.0, -0.2410714285714278 },
            { -0.01339285714285711, 0.013392857142857, 0.1928571428571419, -0.07232142857142834, -0.02410714285714297, -0.024107142857143, 0.0, 0.0, 0.07232142857142851, -0.1928571428571428, 0.02410714285714304, 0.02410714285714303, 0.09642857142857264, 0.0, 0.0, -0.0964285714285724 },
            { -0.03482142857142843, 0.03482142857142871, 0.02410714285714233, 0.04821428571428587, 0.02410714285714325, 0.04821428571428493, 0.1446428571428567, -0.1446428571428567, 0.1205357142857142, -0.02410714285714275, 0.1205357142857143, -0.02410714285714288, 0.02410714285714318, -0.1687499999999998, -0.1687499999999999, -0.02410714285714291 },
            { 0.01339285714285713, -0.06160714285714301, 0.02410714285714312, -0.09642857142857131, 0.02410714285714261, -0.09642857142857121, -0.04821428571428572, 0.09642857142857159, -0.02410714285714281, -0.02410714285714297, -0.02410714285714272, -0.02410714285714256, 0.02410714285714265, 0.1205357142857142, 0.1205357142857137, -0.02410714285714279 },
            { -0.03482142857142847, -0.01339285714285706, 0.07232142857142816, 0.04821428571428589, 0.02410714285714286, 0.02410714285714259, 0.02410714285714259, 0.02410714285714305, 0.2410714285714284, -0.0723214285714287, 0.1205357142857143, -0.0241071428571428, 0.04821428571428604, -0.2892857142857141, -0.1446428571428574, -0.04821428571428574 },
            { 0.0133928571428571, -0.01339285714285698, -0.1928571428571419, 0.07232142857142836, 0.02410714285714295, 0.02410714285714301, 0.0, 0.0, -0.07232142857142848, 0.1928571428571427, -0.02410714285714302, -0.02410714285714302, -0.09642857142857253, 0.0, 0.0, 0.09642857142857232 },
            { -0.09642857142857116, 0.0, 0.0, 0.0, 0.04821428571428524, 0.02410714285714278, 0.120535714285714, -0.02410714285714274, 0.02410714285714242, 0.0, 0.1446428571428564, -0.04821428571428517, 0.02410714285714237, -0.02410714285714248, -0.1687499999999992, -0.02410714285714236 },
            { 0.04821428571428556, 0.0, 0.0, 0.0, -0.09642857142857071, 0.02410714285714273, -0.02410714285714277, -0.02410714285714275, 0.02410714285714325, 0.0, -0.1446428571428562, 0.09642857142857078, 0.02410714285714313, -0.02410714285714327, 0.1205357142857134, -0.02410714285714304 },
            { -0.03214285714285688, -0.01607142857142898, 0.09642857142857071, 0.2410714285714287, -0.02410714285714237, 0.1205357142857146, 0.02410714285714239, 0.02410714285714256, 0.04821428571428583, -0.0964285714285712, 0.02410714285714266, 0.02410714285714282, 0.2892857142857166, -0.289285714285714, -0.1446428571428564, -0.289285714285716 },
            { 0.0321428571428569, 0.01607142857142896, -0.09642857142857073, -0.2410714285714288, 0.0241071428571424, -0.1205357142857147, -0.02410714285714243, -0.02410714285714253, -0.04821428571428585, 0.09642857142857122, -0.02410714285714268, -0.02410714285714285, -0.2892857142857165, 0.2892857142857141, 0.1446428571428565, 0.289285714285716 },
            { 0.04821428571428539, 0.0, 0.0, 0.0, -0.1205357142857151, -0.1205357142857134, -0.1687499999999993, 0.1205357142857133, -0.1446428571428574, 0.0, -0.1687499999999997, 0.120535714285714, -0.1446428571428575, 0.1446428571428578, 0.2892857142857145, 0.144642857142857 },
            { 0.04821428571428536, 0.0, 0.0, 0.0, -0.1205357142857145, 0.02410714285714317, -0.02410714285714249, -0.02410714285714319, -0.2892857142857138, 0.0, -0.1687499999999994, 0.120535714285714, -0.2892857142857136, 0.2892857142857139, 0.1446428571428569, 0.2892857142857133 } } };
    alignas(32) static const double PI3[1][16][16] =
        { { { 0.05952380952380935, -0.0113095238095238, -0.01339285714285697, -0.0133928571428572, -0.01339285714285694, -0.01339285714285703, -0.03482142857142849, 0.01339285714285717, -0.09642857142857109, 0.04821428571428551, -0.03482142857142837, 0.01339285714285691, -0.03214285714285693, 0.04821428571428555, 0.03214285714285686, 0.04821428571428542 },
            { -0.0113095238095238, 0.05952380952380935, -0.03482142857142864, 0.01339285714285731, 0.01339285714285704, -0.03482142857142845, -0.01339285714285697, -0.01339285714285727, 0.04821428571428569, -0.09642857142857131, -0.01339285714285715, -0.0133928571428571, 0.03214285714285701, 0.04821428571428561, -0.03214285714285695, 0.04821428571428572 },
            { -0.01339285714285697, -0.03482142857142864, 0.2410714285714278, -0.07232142857142916, -0.02410714285714285, 0.1205357142857141, 0.0482142857142851, 0.07232142857142909, 0.02410714285714281, 0.02410714285714274, 0.02410714285714288, 0.02410714285714271, -0.04821428571428471, -0.289285714285713, 0.04821428571428518, -0.1446428571428566 },
            { -0.0133928571428572, 0.01339285714285731, -0.07232142857142916, 0.1928571428571441, -0.02410714285714294, -0.02410714285714298, 0.07232142857142897, -0.1928571428571437, 0.0, 0.0, 0.0241071428571429, 0.02410714285714277, 0.09642857142857172, 0.0, -0.09642857142857157, 0.0 },
            { -0.01339285714285694, 0.01339285714285704, -0.02410714285714285, -0.02410714285714294, 0.1928571428571431, -0.07232142857142847, 0.02410714285714289, 0.02410714285714291, 0.0, 0.0, 0.07232142857142805, -0.1928571428571426, 0.09642857142857213, 0.0, -0.09642857142857196, 0.0 },
            { -0.01339285714285703, -0.03482142857142845, 0.1205357142857141, -0.02410714285714298, -0.07232142857142847, 0.2410714285714282, 0.02410714285714272, 0.02410714285714292, 0.02410714285714253, 0.02410714285714296, 0.04821428571428573, 0.07232142857142851, -0.04821428571428535, -0.144642857142857, 0.04821428571428577, -0.2892857142857138 },
            { -0.03482142857142849, -0.01339285714285697, 0.0482142857142851, 0.07232142857142897, 0.02410714285714289, 0.02410714285714272, 0.2410714285714285, -0.07232142857142879, 0.02410714285714259, 0.02410714285714322, 0.1205357142857142, -0.02410714285714286, 0.04821428571428582, -0.2892857142857139, -0.04821428571428577, -0.1446428571428572 },
            { 0.01339285714285717, -0.01339285714285727, 0.07232142857142909, -0.1928571428571437, 0.02410714285714291, 0.02410714285714292, -0.07232142857142879, 0.1928571428571433, 0.0, 0.0, -0.02410714285714281, -0.02410714285714274, -0.09642857142857141, 0.0, 0.09642857142857131, 0.0 },
            { -0.09642857142857109, 0.04821428571428569, 0.02410714285714281, 0.0, 0.0, 0.02410714285714253, 0.02410714285714259, 0.0, 0.2410714285714275, -0.1928571428571421, 0.02410714285714255, 0.0, 0.0, -0.04821428571428541, 0.0, -0.04821428571428509 },
            { 0.04821428571428551, -0.09642857142857131, 0.02410714285714274, 0.0, 0.0, 0.02410714285714296, 0.02410714285714322, 0.0, -0.1928571428571421, 0.2410714285714279, 0.02410714285714323, 0.0, 0.0, -0.04821428571428592, 0.0, -0.04821428571428629 },
            { -0.03482142857142837, -0.01339285714285715, 0.02410714285714288, 0.0241071428571429, 0.07232142857142805, 0.04821428571428573, 0.1205357142857142, -0.02410714285714281, 0.02410714285714255, 0.02410714285714323, 0.2410714285714283, -0.07232142857142794, 0.04821428571428505, -0.1446428571428573, -0.04821428571428503, -0.2892857142857144 },
            { 0.01339285714285691, -0.0133928571428571, 0.02410714285714271, 0.02410714285714277, -0.1928571428571426, 0.07232142857142851, -0.02410714285714286, -0.02410714285714274, 0.0, 0.0, -0.07232142857142794, 0.192857142857142, -0.09642857142857149, 0.0, 0.09642857142857134, 0.0 },
            { -0.03214285714285693, 0.03214285714285701, -0.04821428571428471, 0.09642857142857172, 0.09642857142857213, -0.04821428571428535, 0.04821428571428582, -0.09642857142857141, 0.0, 0.0, 0.04821428571428505, -0.09642857142857149, 0.5785714285714307, 0.0, -0.5785714285714301, 0.0 },
            { 0.04821428571428555, 0.04821428571428561, -0.289285714285713, 0.0, 0.0, -0.144642857142857, -0.2892857142857139, 0.0, -0.04821428571428541, -0.04821428571428592, -0.1446428571428573, 0.0, 0.0, 0.5785714285714276, 0.0, 0.289285714285714 },
            { 0.03214285714285686, -0.03214285714285695, 0.04821428571428518, -0.09642857142857157, -0.09642857142857196, 0.04821428571428577, -0.04821428571428577, 0.09642857142857131, 0.0, 0.0, -0.04821428571428503, 0.09642857142857134, -0.5785714285714301, 0.0, 0.5785714285714294, 0.0 },
            { 0.04821428571428542, 0.04821428571428572, -0.1446428571428566, 0.0, 0.0, -0.2892857142857138, -0.1446428571428572, 0.0, -0.04821428571428509, -0.04821428571428629, -0.2892857142857144, 0.0, 0.0, 0.289285714285714, 0.0, 0.5785714285714281 } } };
    alignas(32) static const double PI4[1][16][16] =
        { { { 0.05952380952380931, -0.01130952380952376, -0.01339285714285711, -0.01339285714285704, -0.01339285714285702, -0.01339285714285708, -0.0964285714285712, 0.04821428571428555, -0.03482142857142839, 0.01339285714285713, -0.0348214285714284, 0.01339285714285691, -0.03214285714285691, 0.04821428571428545, 0.04821428571428555, 0.03214285714285678 },
            { -0.01130952380952376, 0.01130952380952384, 0.06160714285714246, -0.03482142857142851, 0.01339285714285708, 0.0133928571428571, 0.0, 0.0, 0.03482142857142845, -0.0616071428571426, -0.01339285714285714, -0.01339285714285706, -0.01607142857142844, 0.0, 0.0, 0.01607142857142859 },
            { -0.01339285714285698, -0.03482142857142895, 0.09642857142857046, 0.07232142857142863, -0.02410714285714282, -0.04821428571428556, 0.02410714285714233, 0.02410714285714318, 0.04821428571428555, -0.096428571428571, 0.02410714285714293, 0.0241071428571429, 0.1205357142857146, -0.1205357142857135, 0.02410714285714277, -0.1205357142857145 },
            { -0.01339285714285718, 0.06160714285714319, -0.02410714285714323, 0.09642857142857177, -0.02410714285714271, 0.09642857142857161, 0.04821428571428591, -0.09642857142857195, 0.02410714285714296, 0.02410714285714308, 0.02410714285714287, 0.02410714285714266, -0.02410714285714284, -0.1205357142857148, -0.1205357142857143, 0.02410714285714298 },
            { -0.013392857142857, 0.01339285714285701, -0.0241071428571426, -0.02410714285714304, 0.1928571428571429, -0.07232142857142845, 0.0, 0.0, 0.02410714285714297, 0.02410714285714301, 0.07232142857142798, -0.1928571428571425, 0.09642857142857213, 0.0, 0.0, -0.09642857142857203 },
            { -0.01339285714285708, 0.01339285714285696, 0.09642857142857118, -0.04821428571428553, -0.07232142857142863, -0.04821428571428569, 0.0, 0.0, 0.04821428571428551, -0.09642857142857175, 0.04821428571428581, 0.07232142857142872, 0.2410714285714285, 0.0, 0.0, -0.2410714285714285 },
            { -0.03482142857142845, 0.03482142857142878, 0.02410714285714228, 0.04821428571428586, 0.02410714285714327, 0.04821428571428506, 0.1446428571428568, -0.1446428571428567, 0.1205357142857142, -0.02410714285714271, 0.1205357142857143, -0.0241071428571429, 0.0241071428571431, -0.1687499999999999, -0.1687500000000001, -0.02410714285714283 },
            { 0.01339285714285714, -0.0616071428571431, 0.02410714285714319, -0.0964285714285715, 0.02410714285714267, -0.09642857142857142, -0.04821428571428581, 0.09642857142857178, -0.0241071428571429, -0.02410714285714304, -0.0241071428571428, -0.02410714285714263, 0.02410714285714281, 0.1205357142857144, 0.120535714285714, -0.02410714285714294 },
            { -0.09642857142857107, 0.0, 0.04821428571428565, 0.02410714285714279, 0.0, 0.0, 0.1205357142857138, -0.02410714285714276, 0.1446428571428564, -0.04821428571428583, 0.02410714285714257, 0.0, 0.02410714285714321, -0.1687499999999992, -0.02410714285714271, -0.02410714285714292 },
            { 0.04821428571428549, 0.0, -0.0964285714285712, 0.02410714285714291, 0.0, 0.0, -0.02410714285714267, -0.02410714285714277, -0.1446428571428563, 0.09642857142857149, 0.02410714285714322, 0.0, 0.02410714285714203, 0.1205357142857132, -0.02410714285714325, -0.02410714285714233 },
            { -0.03482142857142843, -0.01339285714285712, 0.02410714285714247, 0.0241071428571431, 0.07232142857142811, 0.04821428571428545, 0.02410714285714261, 0.02410714285714312, 0.1205357142857143, -0.02410714285714285, 0.2410714285714283, -0.07232142857142795, 0.04821428571428515, -0.1446428571428572, -0.2892857142857143, -0.04821428571428506 },
            { 0.01339285714285697, -0.01339285714285699, 0.02410714285714236, 0.02410714285714286, -0.1928571428571424, 0.0723214285714283, 0.0, 0.0, -0.02410714285714292, -0.02410714285714275, -0.07232142857142788, 0.1928571428571419, -0.09642857142857131, 0.0, 0.0, 0.0964285714285712 },
            { -0.03214285714285687, -0.01607142857142884, -0.02410714285714197, 0.1205357142857141, 0.09642857142857261, 0.2410714285714283, 0.0241071428571424, 0.0241071428571431, 0.02410714285714322, 0.02410714285714249, 0.04821428571428499, -0.0964285714285715, 0.289285714285717, -0.144642857142858, -0.2892857142857133, -0.2892857142857165 },
            { 0.04821428571428552, 0.0, -0.1205357142857129, -0.1205357142857147, 0.0, 0.0, -0.1687499999999992, 0.1205357142857138, -0.1687499999999999, 0.1205357142857139, -0.1446428571428574, 0.0, -0.1446428571428582, 0.2892857142857138, 0.1446428571428575, 0.1446428571428579 },
            { 0.03214285714285681, 0.01607142857142898, 0.02410714285714241, -0.120535714285714, -0.09642857142857246, -0.2410714285714284, -0.02410714285714238, -0.02410714285714322, -0.02410714285714322, -0.02410714285714292, -0.04821428571428502, 0.09642857142857135, -0.2892857142857158, 0.1446428571428579, 0.2892857142857134, 0.2892857142857154 },
            { 0.04821428571428549, 0.0, -0.1205357142857132, 0.02410714285714256, 0.0, 0.0, -0.02410714285714248, -0.02410714285714286, -0.16875, 0.1205357142857141, -0.2892857142857145, 0.0, -0.2892857142857134, 0.1446428571428566, 0.289285714285714, 0.2892857142857134 } } };
    alignas(32) static const double PI5[1][16][16] =
        { { { 0.05952380952380924, -0.01130952380952374, -0.01339285714285704, -0.01339285714285708, -0.01339285714285707, -0.01339285714285701, -0.09642857142857106, 0.04821428571428547, -0.03482142857142848, 0.01339285714285707, -0.03482142857142844, 0.01339285714285695, -0.03214285714285697, 0.04821428571428558, 0.04821428571428553, 0.03214285714285686 },
            { -0.01130952380952374, 0.05952380952380942, 0.01339285714285692, -0.03482142857142842, 0.01339285714285701, -0.03482142857142844, 0.04821428571428575, -0.0964285714285715, -0.01339285714285708, -0.01339285714285697, -0.01339285714285712, -0.01339285714285696, 0.03214285714285655, 0.04821428571428555, 0.04821428571428562, -0.03214285714285654 },
            { -0.01339285714285704, 0.01339285714285692, 0.1928571428571409, -0.07232142857142844, -0.02410714285714253, -0.02410714285714315, 0.0, 0.0, 0.07232142857142786, -0.1928571428571417, 0.02410714285714257, 0.0241071428571426, 0.09642857142857231, 0.0, 0.0, -0.09642857142857207 },
            { -0.01339285714285708, -0.03482142857142842, -0.07232142857142844, 0.2410714285714284, -0.02410714285714279, 0.1205357142857142, 0.02410714285714276, 0.02410714285714274, 0.04821428571428595, 0.07232142857142841, 0.02410714285714304, 0.02410714285714271, -0.04821428571428564, -0.2892857142857145, -0.1446428571428569, 0.04821428571428582 },
            { -0.01339285714285707, 0.01339285714285701, -0.02410714285714253, -0.02410714285714279, 0.1928571428571428, -0.07232142857142798, 0.0, 0.0, 0.02410714285714295, 0.02410714285714292, 0.07232142857142805, -0.1928571428571423, 0.09642857142857193, 0.0, 0.0, -0.09642857142857184 },
            { -0.01339285714285701, -0.03482142857142844, -0.02410714285714315, 0.1205357142857142, -0.07232142857142798, 0.2410714285714279, 0.02410714285714214, 0.02410714285714344, 0.02410714285714267, 0.02410714285714312, 0.04821428571428541, 0.07232142857142813, -0.04821428571428515, -0.1446428571428572, -0.2892857142857132, 0.04821428571428541 },
            { -0.09642857142857106, 0.04821428571428575, 0.0, 0.02410714285714276, 0.0, 0.02410714285714214, 0.2410714285714277, -0.1928571428571421, 0.02410714285714268, 0.0, 0.02410714285714264, 0.0, 0.0, -0.04821428571428553, -0.04821428571428519, 0.0 },
            { 0.04821428571428547, -0.0964285714285715, 0.0, 0.02410714285714274, 0.0, 0.02410714285714344, -0.1928571428571421, 0.2410714285714282, 0.02410714285714298, 0.0, 0.02410714285714307, 0.0, 0.0, -0.04821428571428572, -0.04821428571428623, 0.0 },
            { -0.03482142857142848, -0.01339285714285708, 0.07232142857142786, 0.04821428571428595, 0.02410714285714295, 0.02410714285714267, 0.02410714285714268, 0.02410714285714298, 0.2410714285714283, -0.0723214285714284, 0.1205357142857142, -0.02410714285714289, 0.04821428571428615, -0.2892857142857141, -0.1446428571428575, -0.04821428571428584 },
            { 0.01339285714285707, -0.01339285714285697, -0.1928571428571417, 0.07232142857142841, 0.02410714285714292, 0.02410714285714312, 0.0, 0.0, -0.0723214285714284, 0.1928571428571424, -0.02410714285714294, -0.02410714285714299, -0.09642857142857225, 0.0, 0.0, 0.096428571428572 },
            { -0.03482142857142844, -0.01339285714285712, 0.02410714285714257, 0.02410714285714304, 0.07232142857142805, 0.04821428571428541, 0.02410714285714264, 0.02410714285714307, 0.1205357142857142, -0.02410714285714294, 0.2410714285714283, -0.07232142857142791, 0.04821428571428516, -0.1446428571428572, -0.2892857142857141, -0.04821428571428506 },
            { 0.01339285714285695, -0.01339285714285696, 0.0241071428571426, 0.02410714285714271, -0.1928571428571423, 0.07232142857142813, 0.0, 0.0, -0.02410714285714289, -0.02410714285714299, -0.07232142857142791, 0.1928571428571419, -0.09642857142857091, 0.0, 0.0, 0.09642857142857078 },
            { -0.03214285714285697, 0.03214285714285655, 0.09642857142857231, -0.04821428571428564, 0.09642857142857193, -0.04821428571428515, 0.0, 0.0, 0.04821428571428615, -0.09642857142857225, 0.04821428571428516, -0.09642857142857091, 0.5785714285714305, 0.0, 0.0, -0.5785714285714303 },
            { 0.04821428571428558, 0.04821428571428555, 0.0, -0.2892857142857145, 0.0, -0.1446428571428572, -0.04821428571428553, -0.04821428571428572, -0.2892857142857141, 0.0, -0.1446428571428572, 0.0, 0.0, 0.5785714285714282, 0.2892857142857144, 0.0 },
            { 0.04821428571428553, 0.04821428571428562, 0.0, -0.1446428571428569, 0.0, -0.2892857142857132, -0.04821428571428519, -0.04821428571428623, -0.1446428571428575, 0.0, -0.2892857142857141, 0.0, 0.0, 0.2892857142857144, 0.5785714285714277, 0.0 },
            { 0.03214285714285686, -0.03214285714285654, -0.09642857142857207, 0.04821428571428582, -0.09642857142857184, 0.04821428571428541, 0.0, 0.0, -0.04821428571428584, 0.096428571428572, -0.04821428571428506, 0.09642857142857078, -0.5785714285714303, 0.0, 0.0, 0.57857142857143 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE33_C0_D001_Q125[0][0][0] + coordinate_dofs[7] * FE33_C0_D001_Q125[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE33_C0_D001_Q125[0][0][0] + coordinate_dofs[11] * FE33_C0_D001_Q125[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE33_C0_D001_Q125[0][0][0] + coordinate_dofs[10] * FE33_C0_D001_Q125[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE33_C0_D001_Q125[0][0][0] + coordinate_dofs[8] * FE33_C0_D001_Q125[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE33_C0_D001_Q125[0][0][0] + coordinate_dofs[3] * FE33_C0_D001_Q125[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE33_C0_D001_Q125[0][0][0] + coordinate_dofs[6] * FE33_C0_D001_Q125[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE33_C0_D001_Q125[0][0][0] + coordinate_dofs[5] * FE33_C0_D001_Q125[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE33_C0_D001_Q125[0][0][0] + coordinate_dofs[4] * FE33_C0_D001_Q125[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE33_C0_D001_Q125[0][0][0] + coordinate_dofs[9] * FE33_C0_D001_Q125[0][0][1];
    alignas(32) double sp[80];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * sp[14];
    sp[20] = sp[14] * sp[17];
    sp[21] = sp[18] * sp[14];
    sp[22] = sp[17] * sp[17];
    sp[23] = sp[18] * sp[17];
    sp[24] = sp[18] * sp[18];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = J_c1 * J_c6;
    sp[34] = J_c0 * J_c7;
    sp[35] = sp[33] + -1 * sp[34];
    sp[36] = sp[35] / sp[13];
    sp[37] = sp[28] * sp[28];
    sp[38] = sp[28] * sp[32];
    sp[39] = sp[28] * sp[36];
    sp[40] = sp[32] * sp[32];
    sp[41] = sp[32] * sp[36];
    sp[42] = sp[36] * sp[36];
    sp[43] = sp[37] + sp[19];
    sp[44] = sp[38] + sp[20];
    sp[45] = sp[39] + sp[21];
    sp[46] = sp[40] + sp[22];
    sp[47] = sp[41] + sp[23];
    sp[48] = sp[24] + sp[42];
    sp[49] = J_c1 * J_c5;
    sp[50] = J_c2 * J_c4;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = J_c2 * J_c3;
    sp[54] = J_c0 * J_c5;
    sp[55] = sp[53] + -1 * sp[54];
    sp[56] = sp[55] / sp[13];
    sp[57] = J_c0 * J_c4;
    sp[58] = J_c1 * J_c3;
    sp[59] = sp[57] + -1 * sp[58];
    sp[60] = sp[59] / sp[13];
    sp[61] = sp[52] * sp[52];
    sp[62] = sp[52] * sp[56];
    sp[63] = sp[60] * sp[52];
    sp[64] = sp[56] * sp[56];
    sp[65] = sp[60] * sp[56];
    sp[66] = sp[60] * sp[60];
    sp[67] = sp[43] + sp[61];
    sp[68] = sp[44] + sp[62];
    sp[69] = sp[45] + sp[63];
    sp[70] = sp[46] + sp[64];
    sp[71] = sp[47] + sp[65];
    sp[72] = sp[48] + sp[66];
    sp[73] = std::abs(sp[13]);
    sp[74] = 0.01 * sp[67] * sp[73];
    sp[75] = 0.01 * sp[68] * sp[73];
    sp[76] = 0.01 * sp[69] * sp[73];
    sp[77] = 0.01 * sp[70] * sp[73];
    sp[78] = 0.01 * sp[71] * sp[73];
    sp[79] = 0.01 * sp[72] * sp[73];
    alignas(32) double BF0[20][20] = {};
    for (int iq = 0; iq < 125; ++iq)
    {
        // Quadrature loop body setup (num_points=125)
        // Unstructured varying computations for num_points=125
        double w1 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w1 += w[1][ic] * FE23_C0_Q125[0][iq][ic];
        alignas(32) double sv125[2];
        sv125[0] = 1 / w[0][0] * w1;
        sv125[1] = sv125[0] * sp[73];
        const double fw0 = sv125[1] * weights125[iq];
        alignas(32) double TF0[20];
        for (int i = 0; i < 20; ++i)
            TF0[i] = fw0 * FE23_C0_Q125[0][iq][i];
        for (int i = 0; i < 20; ++i)
            for (int j = 0; j < 20; ++j)
                BF0[i][j] += TF0[i] * FE23_C0_Q125[0][iq][j];
    }
    std::fill_n(A, 3600, 0.0);
    {
        int k = 0;
        int l = 0;
        for (int i = 0; i < 2; ++i)
        {
            for (int j = 0; j < 2; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            for (int j = 6; j < 20; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 6; i < 20; ++i)
        {
            for (int j = 0; j < 2; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            for (int j = 6; j < 20; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        for (int i = 0; i < 2; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            {
                int j = 2;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 4; j < 6; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 8; j < 20; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 6; i < 20; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            {
                int j = 2;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 4; j < 6; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 8; j < 20; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        for (int i = 0; i < 2; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 3; j < 8; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 10; j < 20; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 6; i < 20; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 3; j < 8; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 10; j < 20; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int l = 0;
        int k = 0;
        {
            int i = 0;
            for (int j = 0; j < 2; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 6; j < 20; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        {
            int i = 2;
            for (int j = 0; j < 2; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 6; j < 20; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 4; i < 6; ++i)
        {
            for (int j = 0; j < 2; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 6; j < 20; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 8; i < 20; ++i)
        {
            for (int j = 0; j < 2; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 6; j < 20; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        {
            int i = 0;
            {
                int j = 0;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 2;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 4; j < 6; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 8; j < 20; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        {
            int i = 2;
            {
                int j = 0;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 2;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 4; j < 6; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 8; j < 20; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 4; i < 6; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 2;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 4; j < 6; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 8; j < 20; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 8; i < 20; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 2;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 4; j < 6; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 8; j < 20; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        {
            int i = 0;
            {
                int j = 0;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 3; j < 8; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 10; j < 20; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        {
            int i = 2;
            {
                int j = 0;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 3; j < 8; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 10; j < 20; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 4; i < 6; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 3; j < 8; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 10; j < 20; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 8; i < 20; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 3; j < 8; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 10; j < 20; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int l = 0;
        int k = 0;
        {
            int i = 0;
            for (int j = 0; j < 2; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            for (int j = 6; j < 20; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 3; i < 8; ++i)
        {
            for (int j = 0; j < 2; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            for (int j = 6; j < 20; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 10; i < 20; ++i)
        {
            for (int j = 0; j < 2; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            for (int j = 6; j < 20; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int l = 0;
        int k = 0;
        {
            int i = 0;
            {
                int j = 0;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            {
                int j = 2;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 4; j < 6; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 8; j < 20; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 3; i < 8; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            {
                int j = 2;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 4; j < 6; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 8; j < 20; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 10; i < 20; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            {
                int j = 2;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 4; j < 6; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 8; j < 20; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        {
            int i = 0;
            {
                int j = 0;
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 3; j < 8; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 10; j < 20; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 3; i < 8; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 3; j < 8; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 10; j < 20; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 10; i < 20; ++i)
        {
            {
                int j = 0;
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 3; j < 8; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 10; j < 20; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        for (int i = 20; i < 22; ++i)
        {
            for (int j = 20; j < 22; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            for (int j = 26; j < 40; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 26; i < 40; ++i)
        {
            for (int j = 20; j < 22; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            for (int j = 26; j < 40; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        for (int i = 20; i < 22; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            {
                int j = 22;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 24; j < 26; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 28; j < 40; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 26; i < 40; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            {
                int j = 22;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 24; j < 26; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 28; j < 40; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        for (int i = 20; i < 22; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 23; j < 28; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 30; j < 40; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 26; i < 40; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 23; j < 28; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 30; j < 40; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int l = 0;
        int k = 0;
        {
            int i = 20;
            for (int j = 20; j < 22; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 26; j < 40; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        {
            int i = 22;
            for (int j = 20; j < 22; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 26; j < 40; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 24; i < 26; ++i)
        {
            for (int j = 20; j < 22; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 26; j < 40; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 28; i < 40; ++i)
        {
            for (int j = 20; j < 22; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 26; j < 40; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        {
            int i = 20;
            {
                int j = 20;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 22;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 24; j < 26; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 28; j < 40; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        {
            int i = 22;
            {
                int j = 20;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 22;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 24; j < 26; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 28; j < 40; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 24; i < 26; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 22;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 24; j < 26; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 28; j < 40; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 28; i < 40; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 22;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 24; j < 26; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 28; j < 40; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        {
            int i = 20;
            {
                int j = 20;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 23; j < 28; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 30; j < 40; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        {
            int i = 22;
            {
                int j = 20;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 23; j < 28; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 30; j < 40; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 24; i < 26; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 23; j < 28; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 30; j < 40; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 28; i < 40; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 23; j < 28; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 30; j < 40; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int l = 0;
        int k = 0;
        {
            int i = 20;
            for (int j = 20; j < 22; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            for (int j = 26; j < 40; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 23; i < 28; ++i)
        {
            for (int j = 20; j < 22; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            for (int j = 26; j < 40; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 30; i < 40; ++i)
        {
            for (int j = 20; j < 22; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            for (int j = 26; j < 40; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int l = 0;
        int k = 0;
        {
            int i = 20;
            {
                int j = 20;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            {
                int j = 22;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 24; j < 26; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 28; j < 40; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 23; i < 28; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            {
                int j = 22;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 24; j < 26; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 28; j < 40; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 30; i < 40; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            {
                int j = 22;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 24; j < 26; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 28; j < 40; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        {
            int i = 20;
            {
                int j = 20;
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 23; j < 28; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 30; j < 40; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 23; i < 28; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 23; j < 28; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 30; j < 40; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 30; i < 40; ++i)
        {
            {
                int j = 20;
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 23; j < 28; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 30; j < 40; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        for (int i = 40; i < 42; ++i)
        {
            for (int j = 40; j < 42; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            for (int j = 46; j < 60; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 46; i < 60; ++i)
        {
            for (int j = 40; j < 42; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            for (int j = 46; j < 60; ++j)
            {
                A[60 * i + j] += sp[74] * PI0[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        for (int i = 40; i < 42; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            {
                int j = 42;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 44; j < 46; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 48; j < 60; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 46; i < 60; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            {
                int j = 42;
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 44; j < 46; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            for (int j = 48; j < 60; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        for (int i = 40; i < 42; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 43; j < 48; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 50; j < 60; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 46; i < 60; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 43; j < 48; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            for (int j = 50; j < 60; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int l = 0;
        int k = 0;
        {
            int i = 40;
            for (int j = 40; j < 42; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 46; j < 60; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        {
            int i = 42;
            for (int j = 40; j < 42; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 46; j < 60; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 44; i < 46; ++i)
        {
            for (int j = 40; j < 42; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 46; j < 60; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 48; i < 60; ++i)
        {
            for (int j = 40; j < 42; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            for (int j = 46; j < 60; ++j)
            {
                A[60 * i + j] += sp[75] * PI1[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        {
            int i = 40;
            {
                int j = 40;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 42;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 44; j < 46; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 48; j < 60; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        {
            int i = 42;
            {
                int j = 40;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 42;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 44; j < 46; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 48; j < 60; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 44; i < 46; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 42;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 44; j < 46; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 48; j < 60; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 48; i < 60; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            {
                int j = 42;
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 44; j < 46; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            for (int j = 48; j < 60; ++j)
            {
                A[60 * i + j] += sp[77] * PI3[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        {
            int i = 40;
            {
                int j = 40;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 43; j < 48; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 50; j < 60; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        {
            int i = 42;
            {
                int j = 40;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 43; j < 48; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 50; j < 60; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 44; i < 46; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 43; j < 48; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 50; j < 60; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 48; i < 60; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 43; j < 48; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            for (int j = 50; j < 60; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int l = 0;
        int k = 0;
        {
            int i = 40;
            for (int j = 40; j < 42; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            for (int j = 46; j < 60; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 43; i < 48; ++i)
        {
            for (int j = 40; j < 42; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            for (int j = 46; j < 60; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 50; i < 60; ++i)
        {
            for (int j = 40; j < 42; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            for (int j = 46; j < 60; ++j)
            {
                A[60 * i + j] += sp[76] * PI2[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int l = 0;
        int k = 0;
        {
            int i = 40;
            {
                int j = 40;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            {
                int j = 42;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 44; j < 46; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 48; j < 60; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 43; i < 48; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            {
                int j = 42;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 44; j < 46; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 48; j < 60; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 50; i < 60; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            {
                int j = 42;
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 44; j < 46; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            for (int j = 48; j < 60; ++j)
            {
                A[60 * i + j] += sp[78] * PI4[0][l][k];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    {
        int k = 0;
        int l = 0;
        {
            int i = 40;
            {
                int j = 40;
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 43; j < 48; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 50; j < 60; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 43; i < 48; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 43; j < 48; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 50; j < 60; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        for (int i = 50; i < 60; ++i)
        {
            {
                int j = 40;
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 43; j < 48; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            for (int j = 50; j < 60; ++j)
            {
                A[60 * i + j] += sp[79] * PI5[0][k][l];
                ++l;
            }
            l = 0;
            ++k;
        }
        k = 0;
    }
    for (int i = 0; i < 20; ++i)
        for (int j = 0; j < 20; ++j)
            A[60 * i + j] += BF0[i][j];
    for (int i = 0; i < 20; ++i)
        for (int j = 0; j < 20; ++j)
            A[60 * (i + 20) + (j + 20)] += BF0[i][j];
    for (int i = 0; i < 20; ++i)
        for (int j = 0; j < 20; ++j)
            A[60 * (i + 40) + (j + 40)] += BF0[i][j];
  }

};


class tentativevelocity_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  tentativevelocity_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~tentativevelocity_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 11
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 11
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           11
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights216[216] = { 0.0003873813194994919, 0.0006651185320093223, 0.0005858361910284347, 0.0003177012134009132, 9.737569218620557e-5, 1.134216942858236e-5, 0.0007261290454488172, 0.001246735091362301, 0.001098123871152249, 0.0005955167872389845, 0.0001825264019143804, 2.126039188243837e-5, 0.0007542546786186336, 0.001295025700392986, 0.001140658224196833, 0.0006185833300378595, 0.0001895963169056989, 2.208388460302278e-5, 0.0005285480847880828, 0.0009074963312758541, 0.0007993224793794701, 0.0004334756464118112, 0.0001328606543971471, 1.547540272867239e-5, 0.0002354768656004508, 0.0004043045425439875, 0.0003561113122256885, 0.000193120530504066, 5.919160689345546e-5, 6.894546462907932e-6, 4.681288071535159e-5, 8.037588012956056e-5, 7.079504960327859e-5, 3.83924269380752e-5, 1.176731151821484e-5, 1.370638174291803e-6, 0.0008157169605546229, 0.001400554027850867, 0.00123360754139111, 0.0006689901012644167, 0.0002050460351693296, 2.388344379727091e-5, 0.001529025144240894, 0.002625276202416827, 0.002312342442444397, 0.001253992175651298, 0.0003843496686493298, 4.476845261653239e-5, 0.001588249879270966, 0.002726962749596587, 0.002401907920794034, 0.001302563878093511, 0.000399236936769406, 4.650249849138737e-5, 0.001112974775829033, 0.001910934037860289, 0.001683150091555361, 0.0009127787504630996, 0.0002797674635477128, 3.258687975326573e-5, 0.0004958485694062517, 0.0008513525458804195, 0.0007498710510955289, 0.0004066579471798192, 0.0001246410067678467, 1.451799093562967e-5, 9.857486370605128e-5, 0.0001692491747560218, 0.0001490746191874023, 8.084373776904129e-5, 2.477867440262618e-5, 2.886181520053689e-6, 0.001057998858597558, 0.001816542544196867, 0.001600010094018067, 0.0008676916109106968, 0.0002659482169177954, 3.097723536324522e-5, 0.001983171780900475, 0.003405028165372252, 0.002999147722917846, 0.00162644931353061, 0.0004985080982708227, 5.806544924267081e-5, 0.00205998727584857, 0.003536917357400039, 0.003115315681224402, 0.001689447642888703, 0.0005178171398138199, 6.031453642004785e-5, 0.001443547332489404, 0.002478514152184317, 0.002183074475370925, 0.001183889661293119, 0.0003628631883600435, 4.226574075494212e-5, 0.0006431240808237643, 0.001104218822657781, 0.0009725955870955502, 0.0005274423173245576, 0.0001616615189724279, 1.883008271469836e-5, 0.0001278532853068322, 0.0002195190763088946, 0.0001933523324547521, 0.0001048557115034738, 3.213836478000209e-5, 3.743426827665786e-6, 0.001057998858597558, 0.001816542544196866, 0.001600010094018067, 0.0008676916109106963, 0.0002659482169177953, 3.09772353632452e-5, 0.001983171780900474, 0.00340502816537225, 0.002999147722917844, 0.00162644931353061, 0.0004985080982708225, 5.806544924267078e-5, 0.002059987275848568, 0.003536917357400037, 0.0031153156812244, 0.001689447642888702, 0.0005178171398138195, 6.03145364200478e-5, 0.001443547332489403, 0.002478514152184316, 0.002183074475370924, 0.001183889661293119, 0.0003628631883600433, 4.22657407549421e-5, 0.0006431240808237638, 0.001104218822657781, 0.0009725955870955495, 0.0005274423173245572, 0.0001616615189724277, 1.883008271469835e-5, 0.0001278532853068321, 0.0002195190763088945, 0.000193352332454752, 0.0001048557115034737, 3.213836478000207e-5, 3.743426827665784e-6, 0.0008157169605546229, 0.001400554027850867, 0.00123360754139111, 0.0006689901012644167, 0.0002050460351693296, 2.388344379727091e-5, 0.001529025144240894, 0.002625276202416827, 0.002312342442444397, 0.001253992175651298, 0.0003843496686493298, 4.476845261653239e-5, 0.001588249879270966, 0.002726962749596587, 0.002401907920794034, 0.001302563878093511, 0.000399236936769406, 4.650249849138737e-5, 0.001112974775829033, 0.001910934037860289, 0.001683150091555361, 0.0009127787504630996, 0.0002797674635477128, 3.258687975326573e-5, 0.0004958485694062517, 0.0008513525458804195, 0.0007498710510955289, 0.0004066579471798192, 0.0001246410067678467, 1.451799093562967e-5, 9.857486370605128e-5, 0.0001692491747560218, 0.0001490746191874023, 8.084373776904129e-5, 2.477867440262618e-5, 2.886181520053689e-6, 0.000387381319499493, 0.000665118532009324, 0.0005858361910284363, 0.000317701213400914, 9.737569218620582e-5, 1.134216942858239e-5, 0.0007261290454488191, 0.001246735091362304, 0.001098123871152252, 0.0005955167872389862, 0.0001825264019143809, 2.126039188243843e-5, 0.0007542546786186357, 0.00129502570039299, 0.001140658224196836, 0.0006185833300378611, 0.0001895963169056994, 2.208388460302284e-5, 0.0005285480847880842, 0.0009074963312758565, 0.0007993224793794723, 0.0004334756464118124, 0.0001328606543971475, 1.547540272867243e-5, 0.0002354768656004515, 0.0004043045425439885, 0.0003561113122256895, 0.0001931205305040666, 5.919160689345562e-5, 6.894546462907952e-6, 4.681288071535172e-5, 8.037588012956077e-5, 7.079504960327879e-5, 3.83924269380753e-5, 1.176731151821487e-5, 1.370638174291807e-6 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE17_C0_D001_Q216[1][216][16] =
        { { { -4.045766714094543, 0.7759181248141048, -0.1174972127670413, -0.108533070741716, -0.1299080819815356, -0.1213384961259054, 6.634590401012133, -3.364741811731697, -0.5759240316176354, 0.1174972127670472, -0.6438752299338637, 0.1299080819815381, 0.02461644807364727, 0.6844571023593464, 0.7652137260597709, -0.02461644807364415 },
            { -2.625711238408821, 0.04959698013003971, -0.1058170176815776, -0.02412978679176842, -0.1171477355034727, -0.02697677326497694, 2.989723163690292, -0.4136089054115149, -0.4453329839720995, 0.1058170176815834, -0.4978762158036487, 0.1171477355034695, 0.01956582020866324, 0.4694627707638631, 0.5248529890686353, -0.01956582020866223 },
            { -0.8903325476865995, -0.487113055533024, -0.08637949239123477, 0.0749657542710081, -0.09582638001419128, 0.08381069310972356, -1.147049378204736, 2.524494981424352, -0.2692199683245161, 0.08637949239123956, -0.3009842609290893, 0.0958263800141833, 0.01262377772618259, 0.1942542140535035, 0.2171735678193813, -0.01262377772618323 },
            { 0.2817594879154561, -0.08323377445967992, -0.06197308708326267, 0.1330514064039018, -0.06891615594318554, 0.1487496617404959, -3.247753687173189, 3.049227973717406, -0.1141809838777007, 0.06197308708326454, -0.1276527861527743, 0.06891615594317523, 0.006253467968977508, -0.01887042252620219, -0.02109687558770414, -0.006253467968980561 },
            { 0.4399970069452301, 1.473562780061813, -0.03657053775591756, 0.1235561244057333, -0.04076164475393684, 0.1381340656822958, -2.172311402539007, 0.2587516155319576, -0.02250470229596913, 0.03657053775591522, -0.02515995091351025, 0.04076164475392813, 0.002097170501978551, -0.1010514221097631, -0.1129741147687714, -0.002097170501981285 },
            { -0.1966678229043566, 3.635476166336824, -0.01478438315683572, 0.06452321305348052, -0.01650912933744286, 0.07213607413496836, 1.12302889716838, -4.561837240600854, 0.005420761067554181, 0.0147843831568284, 0.006060337105546043, 0.01650912933743554, 0.0003324085017619716, -0.06994397412103082, -0.07819641124050092, -0.0003324085017610834 },
            { -2.463135790343379, 0.7759181248141054, -0.3682117308030808, -0.5482054496463298, -0.1154915478935884, -0.1064928514564607, 4.6271327430258, -2.93991507749653, -2.473687051352033, 0.3682117308030878, -0.4805315012452908, 0.1154915478935899, 0.1091260647270806, 3.021892500998357, 0.5870243527017562, -0.1091260647270787 },
            { -1.465078690873648, 0.04959698013003949, -0.3554342461949629, -0.12188064455976, -0.1039892555505808, -0.02367619180891151, 1.734640339843193, -0.3191586290995896, -1.903383941405101, 0.3554342461949686, -0.3697460203422503, 0.1039892555505791, 0.08673635433272704, 2.025264585964857, 0.3934222121511713, -0.08673635433272678 },
            { -0.2832474925452291, -0.4871130555330245, -0.3207830003431014, 0.3786554157858237, -0.08485985387112899, 0.07355653792293482, -1.460698927018079, 2.231059475096326, -1.136596164957589, 0.3207830003431052, -0.2207919797931568, 0.0848598538711223, 0.0559618991792154, 0.7579407491717626, 0.1472354418702372, -0.05596189917921704 },
            { 0.4323172743199215, -0.08323377445968069, -0.2558016305833287, 0.67204867212602, -0.06085969413089068, 0.1305502881418001, -2.877513581454232, 2.528430081593984, -0.4661434263205015, 0.2558016305833299, -0.09055171321003909, 0.06085969413088183, 0.02772196656114866, -0.2059052458055195, -0.03999857493174487, -0.0277219665611513 },
            { 0.3668980549672397, 1.473562780061812, -0.1655276462224383, 0.6240875732484781, -0.03590037963128101, 0.1212334997338205, -1.615581567666748, -0.224879267362308, -0.0765847120568888, 0.1655276462224354, -0.01487713113792005, 0.03590037963127247, 0.009296871882523705, -0.5475028611915881, -0.1063563685958858, -0.009296871882525967 },
            { -0.2786156794290424, 3.635476166336823, -0.07163462484401073, 0.3259096677434159, -0.01450920640174092, 0.0633102970020043, 1.457537431250038, -4.814397918157826, 0.03325901055825708, 0.07163462484400307, 0.006460802010001265, 0.01450920640173298, 0.00147358512370821, -0.359168678301669, -0.06977109901199263, -0.001473585123706378 },
            { -0.6408368989713336, 0.7759181248141052, -0.02250324356082767, -1.247559364236927, -0.091711447464082, -0.08287899665834364, 2.129093791861273, -2.26417501770405, -4.053590470495809, 0.02250324356083146, -0.2692918034117024, 0.09171144746408506, 0.1932726471171776, 5.301149834732738, 0.352170800070052, -0.1932726471171809 },
            { -0.1714107500994937, 0.04959698013003933, -0.1607318658735095, -0.2773656108998096, -0.08238439827233612, -0.01842620415338669, 0.2907374203845124, -0.1689236504150646, -3.079057909007673, 0.1607318658735125, -0.2045507712633636, 0.08238439827233518, 0.1536183389834974, 3.356423519907483, 0.2229769754167605, -0.1536183389835004 },
            { 0.3259504277881937, -0.487113055533025, -0.3118368314327825, 0.8617118091171819, -0.06698094185551817, 0.05724602146846186, -1.603150970474617, 1.764313598219442, -1.778460716101412, 0.311836831432784, -0.1181483174044555, 0.06698094185551372, 0.09911384983158608, 0.9167489069842302, 0.06090229593600682, -0.09911384983158894 },
            { 0.4952244484671153, -0.08323377445968169, -0.3749799245674644, 1.52939124314564, -0.0478292580708347, 0.1016019079841603, -2.112026564739446, 1.700035890732006, -0.6604952749075823, 0.3749799245674639, -0.04387862193267322, 0.04782925807082802, 0.0490982413227084, -0.8688959682380575, -0.05772328605147271, -0.04909824132271112 },
            { 0.191409021594045, 1.47356278006181, -0.3072231109542028, 1.420245451066454, -0.02809561685664719, 0.09435103560380176, -0.6708171206055972, -0.9941546810502638, -0.04003509115861142, 0.3072231109541992, -0.00265964753379222, 0.0280956168566395, 0.01646564496886593, -1.380210359907842, -0.09169138806999599, -0.01646564496886664 },
            { -0.4183499296694299, 3.635476166336823, -0.1520086632203266, 0.7416775191690403, -0.01131661703757403, 0.049271794509262, 1.999001030423308, -5.216127267090707, 0.09696708287080452, 0.1520086632203191, 0.006441805310108739, 0.01131661703756687, 0.002609859508125867, -0.838644602039841, -0.05571359981935853, -0.002609859508123646 },
            { 0.4091215024833699, 0.7759181248141052, 1.549167836755928, -2.068271660040131, -0.06247548835981831, -0.05516744664082607, 0.286134644620882, -1.471174271918365, -3.654447954720781, -1.549167836755931, -0.09747586182166, 0.062475488359823, 0.2132824665159305, 5.722719614760921, 0.1526433084624916, -0.2132824665159359 },
            { 0.4815273117423193, 0.04959698013003966, 0.9945032683129209, -0.4598317714882261, -0.05597389009518344, -0.01226518992037762, -0.538505787812709, 0.007381495940341931, -2.667836974042439, -0.9945032683129239, -0.07115977884116394, 0.05597389009518457, 0.1695226858491594, 3.127668745530672, 0.08342496876154998, -0.169522685849163 },
            { 0.4826265886697988, -0.4871130555330249, 0.2965941636064895, 1.428592630547169, -0.04531781738420301, 0.03810515283841726, -1.21208717855628, 1.2165736454195, -1.376221418563487, -0.296594163606492, -0.03670824444458435, 0.0453178173842008, 0.1093752617003999, -0.05237121198367861, -0.001396908393823115, -0.1093752617004025 },
            { 0.2925135686978321, -0.08323377445968236, -0.2186400789894167, 2.535507853164534, -0.03219996575209201, 0.06763013626273104, -0.937170846672699, 0.7278910524345437, -0.3161772002558501, 0.218640078989414, -0.008433461213610834, 0.0321999657520868, 0.0541814590274298, -2.219330652908682, -0.05919667504910808, -0.05418145902743057 },
            { -0.1072713679992971, 1.47356278006181, -0.3741732153688174, 2.354560032129906, -0.01882324972958982, 0.06280367683065258, 0.5306304912780474, -1.896921903340564, 0.1948162525523883, 0.374173215368813, 0.005196375033848052, 0.01882324972958306, 0.01817035894172336, -2.549376284682293, -0.06800005186448843, -0.01817035894172239 },
            { -0.5970315832676181, 3.635476166336821, -0.2305852330650493, 1.229593266469097, -0.007552069519294324, 0.03279720078770909, 2.649123837599998, -5.687568420669209, 0.2021565577449436, 0.2305852330650415, 0.005392164543930933, 0.007552069519288052, 0.002880062344343237, -1.431749824214038, -0.0381893653316272, -0.002880062344339795 },
            { 0.3179205603439745, 0.7759181248141038, 4.207844896470917, -2.84779972367011, -0.03337741801515204, -0.02884649222622215, -0.3758715224551004, -0.7179671627029902, -1.022318615718535, -4.207844896470931, -0.01035547049039645, 0.0333774180151549, 0.1535561246503787, 3.870118339388661, 0.03920196271662468, -0.1535561246503776 },
            { 0.236553744923604, 0.04959698013003916, 3.01843581936806, -0.6331415824522275, -0.02983220298412412, -0.006413342056500182, -0.4609901840941193, 0.174839459040466, -0.4864931811489633, -3.018435819368071, -0.004927882270464853, 0.02983220298412548, 0.1220505703284141, 1.119634763601205, 0.01134122432697046, -0.1220505703284132 },
            { 0.0732520113709321, -0.4871130555330248, 1.472375625285531, 1.967026758192128, -0.02406013148601893, 0.01992479373368228, -0.2824588327171906, 0.6963198768792772, 0.1612221865850662, -1.472375625285539, 0.001633083433982975, 0.02406013148601754, 0.07874646985142639, -2.128248944777187, -0.0215578771676592, -0.07874646985142525 },
            { -0.1765361283854379, -0.08323377445968264, 0.2260286538609248, 3.491136441653539, -0.01701730254030825, 0.03536310485171967, 0.4552404074885636, -0.1954705046434479, 0.5832102136410396, -0.22602865386093, 0.005907567429765722, 0.01701730254030439, 0.03900880842230271, -4.074346655294574, -0.0412706722814775, -0.03900880842229985 },
            { -0.4836947350263208, 1.473562780061809, -0.3384383601662193, 3.241989695267657, -0.009902940052623599, 0.03283939869953878, 1.764519243311707, -2.754387288347199, 0.6098256752375978, 0.338438360166214, 0.006177165990246605, 0.009902940052617812, 0.01308204067674679, -3.851815370505254, -0.03901656468977477, -0.01308204067674307 },
            { -0.7814449830670065, 3.635476166336821, -0.2894753501139642, 1.693024872955699, -0.003958482160759891, 0.01714932002788183, 3.281320963126161, -6.135352146395983, 0.3324911424478816, 0.2894753501139565, 0.003367934576363529, 0.003958482160753174, 0.002073546970707607, -2.025516015403579, -0.02051725460423293, -0.002073546970703111 },
            { -0.4449936557652546, 0.7759181248141016, 6.943200588586825, -3.431668517133514, -0.0107346516257576, -0.009132020594120771, -0.1771116281771749, -0.1538128408716863, 2.386908973744294, -6.943200588586849, 0.006351808688900534, 0.01073465162575474, 0.05857831867796204, 1.04475954338924, 0.002780211905229035, -0.05857831867794773 },
            { -0.4990226123038778, 0.04959698013003833, 5.12571763291889, -0.7629511363914619, -0.009577809411743521, -0.002030290937206747, 0.1491596703134211, 0.3002659618604083, 2.290106359135056, -5.125717632918909, 0.00609420703950609, 0.009577809411741585, 0.04655963557170326, -1.527155222743577, -0.004063916102294951, -0.04655963557169179 },
            { -0.5895769690872155, -0.4871130555330248, 2.734575962457597, 2.370315490356116, -0.007703076066606945, 0.006307651733965802, 0.7700417379052273, 0.3066482867150065, 2.050079765429595, -2.73457596245761, 0.005455471746185526, 0.007703076066605093, 0.03004006395853137, -4.420395255785699, -0.01176312348014905, -0.03004006395852155 },
            { -0.7043103662278543, -0.08323377445968258, 0.7480894357499493, 4.206905041903779, -0.005429963221980166, 0.01119500420520442, 1.674615144934703, -0.8870710042471702, 1.622095780272442, -0.7480894357499573, 0.004316562627515595, 0.005429963221976895, 0.01488101120168682, -5.829000822176215, -0.01551156683271505, -0.01488101120167942 },
            { -0.8248129763617834, 1.473562780061808, -0.2482887099393799, 3.906677101500439, -0.003149338358205744, 0.01039606697656503, 2.747881559156976, -3.396631362857005, 1.04315686053107, 0.2482887099393737, 0.002775947002369508, 0.003149338358200429, 0.00499051372562398, -4.949833962031507, -0.01317201397892553, -0.004990513725618498 },
            { -0.9289507568771611, 3.63547616633682, -0.3235376225814819, 2.040136497997307, -0.00125542070598117, 0.005429011695485375, 3.764218053645526, -6.470743463105191, 0.4495268689458916, 0.3235376225814737, 0.00119623693381965, 0.001255420705974675, 0.0007910130287585027, -2.489663366943197, -0.006625248629292368, -0.000791013028752896 },
            { -2.258535283870652, 0.7759181248141052, -0.1174972127670413, -0.1085330707417163, -0.3744301704253736, -0.6087375658961079, 4.359959901018042, -2.877342741961495, -0.477043344323691, 0.1174972127670478, -2.675628748601597, 0.374430170425378, 0.1234971353675917, 0.5855764150654041, 3.284366314497703, -0.1234971353675919 },
            { -1.316785740156483, 0.04959698013003982, -0.1058170176815775, -0.02412978679176914, -0.3673077642221303, -0.1353385431447601, 1.572435895558173, -0.3052471355317321, -0.3667399333453702, 0.1058170176815838, -2.056961742774648, 0.3673077642221294, 0.09815887083539376, 0.3908697201371347, 2.192300285919414, -0.09815887083539342 },
            { -0.2084477490763917, -0.4871130555330239, -0.08637949239123435, 0.07496575427100782, -0.3385424602293996, 0.4204660429179519, -1.492278827006713, 2.187839631616124, -0.2185120914579346, 0.08637949239123982, -1.225585139754508, 0.3385424602293955, 0.06333165459276488, 0.1435463371869216, 0.805119096836567, -0.06333165459276567 },
            { 0.447251811846716, -0.08323377445968, -0.06197308708326223, 0.1330514064039019, -0.2752981524158253, 0.7462553922031254, -2.815740280641817, 2.451722243254777, -0.08906171366886376, 0.06197308708326439, -0.4995271065566761, 0.2752981524158193, 0.03137273817781601, -0.0439896927350405, -0.2467282856464367, -0.03137273817781822 },
            { 0.3537030347186484, 1.473562780061812, -0.03657053775591756, 0.1235561244057339, -0.1808709960985347, 0.6929984926096293, -1.531153003385091, -0.2961128113953738, -0.01408067377695764, 0.03657053775591512, -0.07897533003152755, 0.1808709960985292, 0.0105211990209918, -0.1094754506287761, -0.6140231625780909, -0.01052119902099373 },
            { -0.2910706036990969, 3.635476166336824, -0.01478438315683572, 0.06452321305348052, -0.07907937721401881, 0.3618961795657545, 1.507191783393907, -4.851597346031641, 0.006755997614235121, 0.01478438315682828, 0.03789287002370972, 0.07907937721401315, 0.001667645048444077, -0.07127921066771292, -0.3997890495894536, -0.001667645048442468 },
            { -1.21041949070138, 0.7759181248141054, -0.368211730803081, -0.5482054496463298, -0.3658082417524725, -0.5342591283946406, 2.946650166445623, -2.512148800558351, -2.035343540151151, 0.368211730803088, -1.983564494746176, 0.3658082417524754, 0.5474695759279647, 2.583548989797476, 2.517823623140819, -0.5474695759279644 },
            { -0.5673443854934075, 0.04959698013003949, -0.3554342461949628, -0.1218806445597603, -0.3519270327017227, -0.1187800066064273, 0.7418022196654378, -0.2240548143020734, -1.554976636495329, 0.3554342461949688, -1.515418102873635, 0.351927032701722, 0.4351436592425006, 1.676857281055085, 1.634198109480069, -0.4351436592425009 },
            { 0.1532359968298496, -0.4871130555330244, -0.3207830003431011, 0.3786554157858236, -0.3161934635012436, 0.3690224395437222, -1.601716514772369, 1.935593573475539, -0.9118053650598994, 0.3207830003431055, -0.888609078798353, 0.3161934635012399, 0.2807526990769061, 0.5331499492740723, 0.5195866392546418, -0.2807526990769074 },
            { 0.4973246741558502, -0.08323377445968067, -0.2558016305833286, 0.6720486721260206, -0.2510631060498451, 0.6549517850296229, -2.418119484402337, 2.004028584706162, -0.3547883234841634, 0.2558016305833301, -0.3457625249649243, 0.2510631060498397, 0.139077069397488, -0.3172603486418593, -0.3091892600646863, -0.1390770693974897 },
            { 0.264253653985449, 1.473562780061811, -0.1655276462224382, 0.6240875732484787, -0.1619099036751024, 0.6082108142864477, -1.02595985213233, -0.7118565819149345, -0.03924053150419375, 0.1655276462224355, -0.03824225419995209, 0.1619099036750968, 0.0466410524352201, -0.5848470417442844, -0.5699685600864846, -0.04664105243522138 },
            { -0.3657334462288283, 3.635476166336824, -0.07163462484401073, 0.3259096677434159, -0.06990627906661251, 0.3176185408888488, 1.798963441936669, -5.06870616204467, 0.03917818741850582, 0.07163462484400329, 0.03818149614491445, 0.06990627906660685, 0.00739276198395733, -0.3650878551619188, -0.3558000370337524, -0.007392761983955332 },
            { -0.0568947526571619, 0.7759181248141049, -0.022503243560828, -1.247559364236927, -0.3307306925282512, -0.4157918574939556, 1.212238784711491, -1.931262156868438, -3.277242391159197, 0.0225032435608319, -1.092253194790046, 0.3307306925282547, 0.9696207264537937, 4.524801755396123, 1.508045052284004, -0.9696207264537958 },
            { 0.2164851818698335, 0.04959698013003949, -0.1607318658735099, -0.27736561089981, -0.3104819308005213, -0.09244158303561978, -0.1711738904670459, -0.09490827153283204, -2.461995411030852, 0.1607318658735128, -0.8205442357608783, 0.3104819308005222, 0.7706808369603187, 2.739361021930662, 0.9129858187965051, -0.7706808369603215 },
            { 0.4651377828347774, -0.4871130555330248, -0.3118368314327826, 0.8617118091171818, -0.2696890900028767, 0.2871949536096581, -1.512389393380003, 1.534364666078246, -1.380334814168909, 0.3118368314327843, -0.4600438205984, 0.2696890900028744, 0.4972397517640902, 0.5186230050517258, 0.172848866988752, -0.4972397517640922 },
            { 0.4464900798809347, -0.08323377445968158, -0.3749799245674644, 1.52939124314564, -0.207087184395531, 0.5097219772074574, -1.655172126929967, 1.291915821508709, -0.4632747891417879, 0.3749799245674642, -0.1544021796711906, 0.207087184395527, 0.2463187270885034, -1.066116454003853, -0.3553197975362551, -0.246318727088505 },
            { 0.07821471106248776, 1.473562780061811, -0.3072231109542025, 1.420245451066455, -0.1299298928021917, 0.4733454063386133, -0.1786284393392278, -1.373149051785075, 0.02610500697369063, 0.3072231109541992, 0.008700387052219274, 0.1299298928021863, 0.08260574310116908, -1.446350458040144, -0.4820457933908213, -0.08260574310116887 },
            { -0.491429906474757, 3.635476166336822, -0.1520086632203268, 0.7416775191690399, -0.05502683957013366, 0.2471894181528045, 2.269998630872177, -5.414044890734248, 0.1074505084703264, 0.1520086632203191, 0.03581155958287635, 0.05502683957012772, 0.01309328510764884, -0.8491280276393636, -0.2830009777356695, -0.01309328510764596 },
            { 0.4923913402203189, 0.7759181248141047, 1.549167836755927, -2.068271660040131, -0.2561088617483823, -0.2767670463790316, -0.01873479285427282, -1.249574672180159, -2.797723344665517, -1.549167836755931, -0.3743790729471742, 0.2561088617483868, 1.070007076571195, 4.865995004705658, 0.6511461193262102, -1.070007076571198 },
            { 0.4969660812089814, 0.04959698013003955, 0.9945032683129205, -0.4598317714882263, -0.2352521214813124, -0.06153267178817351, -0.6032120391471656, 0.05664897780813755, -1.986889030678362, -0.9945032683129237, -0.2658767796939566, 0.2352521214813148, 0.8504706292132365, 2.446720802166595, 0.3274094514821361, -0.8504706292132392 },
            { 0.4186476104774454, -0.4871130555330249, 0.296594163606489, 1.42859263054717, -0.1979573132801516, 0.1911680029632692, -0.9950453502390743, 1.063510795294648, -0.9368769194085733, -0.2965941636064917, -0.125368762148181, 0.197957313280151, 0.548719760855314, -0.4917157111385926, -0.06579924081508033, -0.5487197608553157 },
            { 0.1824852303054017, -0.08323377445968219, -0.2186400789894167, 2.535507853164534, -0.1469807887460076, 0.3392905454100644, -0.5554820991329344, 0.45623064328721, -0.0985381691823292, 0.2186400789894142, -0.01318594581509728, 0.1469807887460044, 0.2718204901009512, -2.436969683982204, -0.3261045995949577, -0.271820490100951 },
            { -0.2086381490432977, 1.473562780061809, -0.3741732153688172, 2.354560032129907, -0.08955005679561678, 0.3150769012626107, 0.8842704967540062, -2.149195127772522, 0.2678039384752184, 0.3741732153688132, 0.03583634901182084, 0.0895500567956114, 0.09115804486455381, -2.622363970605124, -0.3509132502744206, -0.09115804486455216 },
            { -0.6498007290260881, 3.635476166336822, -0.2305852330650491, 1.229593266469097, -0.03711359060443065, 0.1645387804625256, 2.833634563033285, -5.819310000344025, 0.2137253487909244, 0.2305852330650414, 0.0285997892172648, 0.03711359060442443, 0.01444885339032487, -1.443318615260019, -0.1931385696797785, -0.01444885339032081 },
            { 0.2097722488902549, 0.7759181248141034, 4.207844896470916, -2.84779972367011, -0.1517771451266595, -0.1447186509070493, -0.3835953696822078, -0.6020950040221621, -0.4055060236583507, -4.207844896470931, -0.02060688614818408, 0.1517771451266617, 0.7703687167105646, 3.253305747328477, 0.1653255370552394, -0.7703687167105622 },
            { 0.1240597867820593, 0.0495969801300391, 3.018435819368059, -0.633141582452228, -0.1372068898690434, -0.03217480319421967, -0.3742576870902936, 0.2006009201781858, 0.003766187001269933, -3.018435819368071, 0.0001913889861599738, 0.1372068898690452, 0.6123099384786479, 0.6293753954509715, 0.03198341420806464, -0.6123099384786459 },
            { -0.03799104476891502, -0.4871130555330248, 1.47237562528553, 1.967026758192128, -0.1126690228359793, 0.09995978873709943, -0.09118078157392598, 0.6162848818758598, 0.4775352890108805, -1.472375625285539, 0.02426724822386855, 0.1126690228359785, 0.3950595722772409, -2.444562047203001, -0.1242270369609629, -0.3950595722772383 },
            { -0.2726033746696093, -0.08323377445968255, 0.2260286538609246, 3.491136441653538, -0.0813919468986538, 0.1774115475077793, 0.6933560964287944, -0.337518947299507, 0.7399029166570829, -0.22602865386093, 0.03760016935559178, 0.08139194689865066, 0.1957015114383463, -4.231039358310617, -0.2150117168633641, -0.195701511438343 },
            { -0.549621380435599, 1.473562780061809, -0.3384383601662193, 3.241989695267657, -0.04834640718865213, 0.1647504812413731, 1.962356971262819, -2.886298370889033, 0.6623743276448536, 0.3384383601662138, 0.0336603442634958, 0.04834640718864723, 0.0656306930840026, -3.904364022912509, -0.198410825504859, -0.06563069308399855 },
            { -0.8110857660367503, 3.635476166336821, -0.2894753501139642, 1.693024872955699, -0.01964749477023564, 0.08603564131626529, 3.379848067384288, -6.204238467684366, 0.3408202786817688, 0.2894753501139566, 0.01731970493663149, 0.01964749477022959, 0.01040268320459559, -2.033845151637466, -0.1033553462528845, -0.01040268320459031 },
            { -0.5151981526926647, 0.7759181248141012, 6.943200588586825, -3.431668517133514, -0.05228351008566645, -0.04581401752671566, -0.1435891281823598, -0.1171308439390912, 2.622209549768412, -6.943200588586848, 0.03500744715640185, 0.05228351008566305, 0.2938788947020802, 0.8094589673651212, 0.01080657037032218, -0.2938788947020655 },
            { -0.5632232344827265, 0.04959698013003833, 5.12571763291889, -0.7629511363914621, -0.0468020608748447, -0.01018567398341336, 0.2052049094460629, 0.3084213449066149, 2.47712963526771, -5.12571763291891, 0.03307057775525286, 0.04680206087484329, 0.2335829117043564, -1.714178498876231, -0.02288490377183541, -0.2335829117043449 },
            { -0.643238410674408, -0.4871130555330246, 2.734575962457597, 2.370315490356116, -0.03783973975805721, 0.0316445702365582, 0.8490400979950123, 0.2813113682124142, 2.170746327952539, -2.734575962457609, 0.02898024964192772, 0.0378397397580556, 0.1507066264814751, -4.541061818308644, -0.06062481987848375, -0.1507066264814657 },
            { -0.7438597492692877, -0.08323377445968255, 0.7480894357499496, 4.206905041903779, -0.02684232679835527, 0.05616370589429781, 1.75913322966523, -0.9320397059362638, 1.681870635314398, -0.7480894357499569, 0.02245358209257365, 0.0268423267983523, 0.07465586624364311, -5.888775677218171, -0.07861728798686686, -0.07465586624363577 },
            { -0.8487477966164038, 1.473562780061808, -0.2482887099393799, 3.906677101500439, -0.01566596014600452, 0.0521555541584966, 2.813575866593529, -3.438390850038936, 1.063203027454186, 0.2482887099393737, 0.0141941454691913, 0.01566596014599932, 0.02503668064874021, -4.969880128954623, -0.06634969962767823, -0.02503668064873417 },
            { -0.9388199182233308, 3.63547616633682, -0.3235376225814819, 2.040136497997307, -0.006277053254459375, 0.0272365611099965, 3.795894764406206, -6.492551012519702, 0.4527042530960287, 0.3235376225814738, 0.006043765731511219, 0.00627705325445288, 0.003968397178895744, -2.492840751093333, -0.03328032684149473, -0.003968397178889971 },
            { -0.3589901608983301, 0.7759181248141047, -0.1174972127670404, -0.1085330707417167, 0.1293777364586292, -1.368045881051418, 1.701106462890409, -2.118034426806185, -0.3229992914576013, 0.1174972127670474, -4.071365964689915, -0.1293777364586247, 0.2775411882336818, 0.4315323621993154, 5.439411845741331, -0.2775411882336821 },
            { 0.01914245142577995, 0.04959698013003944, -0.1058170176815771, -0.02412978679176914, -0.05380846470295286, -0.3041529665154484, 0.06769328060522273, -0.1364327121610434, -0.244301544444805, 0.1058170176815836, -3.079390634837735, 0.05380846470295564, 0.2205972597359586, 0.2684313312365699, 3.383543601353187, -0.2205972597359587 },
            { 0.4001325007598047, -0.4871130555330239, -0.08637949239123421, 0.07496575427100782, -0.2629514009355948, 0.9449340247124776, -1.576391095048382, 1.6633716498216, -0.1395154028372111, 0.08637949239123993, -1.758574330296903, 0.2629514009355952, 0.1423283432134895, 0.06454964856619755, 0.8136403055844308, -0.1423283432134895 },
            { 0.4803118287087426, -0.08323377445968014, -0.06197308708326198, 0.1330514064039027, -0.3720592928341325, 1.677096457835705, -1.917959231871263, 1.520881177622199, -0.04992895383574461, 0.06197308708326477, -0.6293482638370131, 0.3720592928341321, 0.07050549801093724, -0.08312245256816177, -1.047748193998686, -0.07050549801093783 },
            { 0.1438928252088821, 1.473562780061812, -0.03657053775591723, 0.1235561244057353, -0.32376955611401, 1.557409607198853, -0.456931679286101, -1.160523925984595, -0.0009570646067418864, 0.0365705377559154, -0.01206368053723873, 0.3237695561140095, 0.02364480819121062, -0.1225990597989945, -1.545345926661609, -0.02364480819121041 },
            { -0.4500857687921524, 3.635476166336823, -0.0147843831568355, 0.06452321305348097, -0.1646090488221084, 0.8133070892287746, 2.117617858149983, -5.303008255694659, 0.008836133329455154, 0.01478438315682834, 0.1113783635086749, 0.1646090488221048, 0.003747780763665443, -0.07335934638293451, -0.9246854527374411, -0.003747780763663278 },
            { 0.05966724712073124, 0.7759181248141047, -0.3682117308030809, -0.54820544964633, -0.07427863069976903, -1.200666824197853, 1.0101557328203, -1.845741104755138, -1.352457803200253, 0.3682117308030879, -2.962121621515585, 0.07427863069977292, 1.230355312878862, 1.900663252846579, 4.162788445713439, -1.230355312878861 },
            { 0.2895474800957163, 0.04959698013003938, -0.3554342461949628, -0.1218806445597605, -0.1965151463037275, -0.2669401526912198, -0.2632497920084768, -0.07589466821728125, -1.012200541736734, 0.3554342461949686, -2.216898082064765, 0.1965151463037294, 0.977919754001096, 1.13408118629649, 2.483838234755989, -0.9779197540010953 },
            { 0.4837418728029613, -0.4871130555330245, -0.320783000343101, 0.3786554157858239, -0.3271008436936675, 0.8293222838813425, -1.471922546407859, 1.475293729137919, -0.5616087107798572, 0.3207830003431056, -1.230022334963891, 0.3271008436936681, 0.6309493533569488, 0.1829532949940292, 0.4007000510825548, -0.6309493533569486 },
            { 0.425474538458707, -0.08323377445968069, -0.2558016305833283, 0.6720486721260212, -0.374253090235873, 1.471905369398485, -1.529315764336329, 1.187075000337301, -0.1813106523871067, 0.2558016305833304, -0.3971023734538123, 0.3742530902358729, 0.3125547404945462, -0.4907380197389179, -1.074802995944667, -0.3125547404945465 },
            { 0.04628721040880267, 1.473562780061811, -0.1655276462224379, 0.6240875732484794, -0.300158392241646, 1.366862086243429, -0.04934213659870079, -1.470507853871915, 0.0189371478863137, 0.1655276462224357, 0.04147570081014841, 0.3001583922416449, 0.1048187318257301, -0.643024721134794, -1.408337787053572, -0.1048187318257297 },
            { -0.5106548454704409, 3.635476166336823, -0.07163462484401051, 0.3259096677434163, -0.147005620836179, 0.7137997734194497, 2.340066073708882, -5.464887394575269, 0.04839954315679373, 0.07163462484400318, 0.1060035536169605, 0.1470056208361749, 0.01661411772224652, -0.3743092109002086, -0.8198033270364, -0.01661411772224397 },
            { 0.4400449426948967, 0.7759181248141046, -0.02250324356082845, -1.247559364236927, -0.2903225691204142, -0.934429497844407, 0.1966614490089811, -1.412624516517986, -2.067786754789033, 0.02250324356083193, -1.548784766734268, 0.2903225691204184, 2.179076362823958, 3.315346119025958, 2.483214264578677, -2.179076362823959 },
            { 0.4926981940126751, 0.04959698013003927, -0.1607318658735102, -0.27736561089981, -0.3377485231207407, -0.2077485175793138, -0.5626938371535801, 0.02039866301086157, -1.50068728644782, 0.1607318658735132, -1.124023840223941, 0.3377485231207432, 1.731988961543352, 1.778052897347629, 1.331772357803259, -1.731988961543352 },
            { 0.4702979942995484, -0.4871130555330246, -0.3118368314327828, 0.8617118091171818, -0.3738069511189256, 0.6454273489201692, -1.159317209534262, 1.176132270767734, -0.7601032081492546, 0.3118368314327848, -0.5693218931792231, 0.373806951118927, 1.117471357783745, -0.1016086009679291, -0.07610545574094026, -1.117471357783745 },
            { 0.2657091263581476, -0.0832337744596815, -0.3749799245674644, 1.529391243145641, -0.3503328628655483, 1.145523277134263, -0.8385898734803731, 0.6561145215819036, -0.1560293222361137, 0.3749799245674646, -0.1168669046184236, 0.3503328628655485, 0.5535641939941784, -1.373361920909529, -1.028656372515833, -0.5535641939941784 },
            { -0.1332937772822725, 1.47356278006181, -0.3072231109542024, 1.420245451066455, -0.2534097206746452, 1.063772419733768, 0.6233070624006876, -1.963576065180229, 0.1291432144547244, 0.3072231109541992, 0.09672904752452414, 0.2534097206746435, 0.1856439505822046, -1.54938866552118, -1.160501467258285, -0.1856439505822034 },
            { -0.6108534562604542, 3.635476166336822, -0.1520086632203268, 0.7416775191690408, -0.1175481784517758, 0.555520940860009, 2.697753703365078, -5.722376413441451, 0.1237824071602073, 0.1520086632203191, 0.0927137704869308, 0.1175481784517714, 0.02942518379753101, -0.8654599263292457, -0.6482347113469298, -0.02942518379752712 },
            { 0.4392272888395439, 0.7759181248141043, 1.549167836755927, -2.068271660040132, -0.3748777407068475, -0.6219921999593213, -0.3107958950537876, -0.9043495185998678, -1.463050874896838, -1.54916783675593, -0.4399839005248647, 0.3748777407068523, 2.404679546339876, 3.531322534936978, 1.061976100484189, -2.404679546339878 },
            { 0.3756532195513175, 0.04959698013003933, 0.9945032683129198, -0.4598317714882263, -0.3691811622029, -0.138285400648773, -0.5586519063501003, 0.133401706668737, -0.9260551726489886, -0.9945032683129229, -0.2784929587578819, 0.3691811622029035, 1.91130448724261, 1.385886944137221, 0.4167783594066587, -1.911304487242612 },
            { 0.2251876008755337, -0.4871130555330248, 0.2965941636064889, 1.428592630547169, -0.3419624709159453, 0.4296212583130736, -0.5631320852873567, 0.8250575399448428, -0.2524317652900893, -0.2965941636064912, -0.07591391018206523, 0.3419624709159471, 1.233164914973798, -1.176160865257077, -0.3537073481310032, -1.233164914973798 },
            { -0.03538574631496161, -0.08323377445968208, -0.2186400789894168, 2.535507853164534, -0.2793350713659323, 0.762504335418563, 0.08560266749592864, 0.03301685327871123, 0.2405169013872213, 0.2186400789894146, 0.07233074818533883, 0.2793350713659323, 0.6108755606705022, -2.776024754551755, -0.8348350836038956, -0.6108755606705006 },
            { -0.3821361954125888, 1.473562780061809, -0.3741732153688172, 2.354560032129907, -0.1841528348666882, 0.7080878216415534, 1.45077946350224, -2.542206048151464, 0.3815098527094793, 0.3741732153688133, 0.1147316173100389, 0.1841528348666856, 0.2048639590988158, -2.736069884839386, -0.822819438951584, -0.2048639590988132 },
            { -0.7344782576305988, 3.635476166336822, -0.2305852330650489, 1.229593266469097, -0.08069720118532353, 0.3697760964589372, 3.123549407634208, -6.024547316340437, 0.23174811449224, 0.2305852330650414, 0.06969370724088253, 0.08069720118531842, 0.03247161909164165, -1.461341380961335, -0.439469803699809, -0.03247161909163648 },
            { -0.008713797996012948, 0.7759181248141026, 4.207844896470916, -2.847799723670111, -0.286225316079188, -0.3252333441805291, -0.3456240160694211, -0.42158031074868, 0.5554127779811679, -4.20784489647093, 0.06343098978555541, 0.2862253160791898, 1.731287518350084, 2.292386945688958, 0.2618023543949796, -1.731287518350079 },
            { -0.09093674837885783, 0.04959698013003888, 3.018435819368059, -0.6331415824522277, -0.2647388919276124, -0.0723080181830037, -0.1993943669181598, 0.24073413516697, 0.7675304982355373, -3.01843581936807, 0.08765592208850753, 0.2647388919276146, 1.376074249712917, -0.1343889157832966, -0.01534790390550053, -1.376074249712913 },
            { -0.2369372377734326, -0.4871130555330246, 1.47237562528553, 1.967026758192128, -0.2250677932113453, 0.2246445511396221, 0.2324501738331152, 0.4916001194733363, 0.9703125300050681, -1.472375625285538, 0.1108146708530187, 0.2250677932113462, 0.8878368132714296, -2.937339288197189, -0.3354592219926376, -0.8878368132714252 },
            { -0.4349672958233295, -0.08323377445968247, 0.2260286538609246, 3.491136441653539, -0.1689769263892046, 0.3987056991656014, 1.077014169240338, -0.5588130989573299, 0.9840110401714333, -0.2260286538609296, 0.1123791110187593, 0.1689769263892035, 0.4398096349526973, -4.47514748182497, -0.5110848101843557, -0.4398096349526927 },
            { -0.6565871030474106, 1.473562780061809, -0.3384383601662194, 3.241989695267657, -0.1039765925803398, 0.3702518620346871, 2.274824074667945, -3.091799751682347, 0.744238720085831, 0.3384383601662141, 0.08499588148361908, 0.1039765925803358, 0.1474950855249808, -3.986228415353487, -0.455247743518298, -0.1474950855249761 },
            { -0.8579377232299525, 3.635476166336821, -0.289475350113964, 1.693024872955699, -0.04341383137849708, 0.1933521295881673, 3.534016512849393, -6.311554955956268, 0.3537960572433357, 0.2894753501139565, 0.04040532552157183, 0.04341383137849181, 0.02337846176616321, -2.046820930199034, -0.2337574551097277, -0.02337846176615749 },
            { -0.6295795385756064, 0.7759181248141012, 6.943200588586823, -3.431668517133514, -0.1120002242095726, -0.1029600955866368, -0.08635382035933892, -0.05998476587916968, 2.988779153645957, -6.943200588586847, 0.08967211891543748, 0.1120002242095697, 0.6604484985796257, 0.4428893634875765, 0.01328797667120707, -0.6604484985796114 },
            { -0.6672231243749865, 0.04959698013003827, 5.12571763291889, -0.7629511363914621, -0.1008097559298017, -0.02289076626678788, 0.2964997070549486, 0.3211264371899896, 2.768489093056716, -5.12571763291891, 0.08306277259255575, 0.1008097559298004, 0.5249423694933631, -2.005537956665238, -0.06017200632576397, -0.524942369493351 },
            { -0.7294063027626941, -0.4871130555330246, 2.734575962457597, 2.370315490356116, -0.08221907699118416, 0.07111639957037597, 0.9746798194171167, 0.2418395388785962, 2.358730117761738, -2.734575962457608, 0.07076880449708622, 0.08221907699118328, 0.3386904162906728, -4.729045608117842, -0.1418852040674606, -0.3386904162906638 },
            { -0.8067459269812242, -0.08323377445968255, 0.7480894357499496, 4.206905041903779, -0.05892711637841083, 0.1262194594482925, 1.892075160931162, -1.002095459490258, 1.774992570265897, -0.7480894357499569, 0.05325497022445425, 0.05892711637840853, 0.1677778011951411, -5.98189761216967, -0.1794744296727425, -0.1677778011951337 },
            { -0.8864622633718, 1.473562780061808, -0.2482887099393797, 3.906677101500439, -0.03473839504649523, 0.1172117428558048, 2.916346522046233, -3.503447038736245, 1.094432511004267, 0.2482887099393737, 0.03283617732409651, 0.03473839504649058, 0.05626616419882147, -5.001109612504704, -0.1500479201798925, -0.05626616419881538 },
            { -0.954262538811891, 3.63547616633682, -0.3235376225814819, 2.040136497997307, -0.0140324737060693, 0.06121006379108573, 3.845310887675857, -6.526524515200792, 0.4576542301380025, 0.3235376225814738, 0.01373096586846134, 0.01403247370606303, 0.008918374220869607, -2.497790728135307, -0.0749410296595352, -0.008918374220863445 },
            { 0.4904306359360884, 0.7759181248141042, -0.1174972127670404, -0.1085330707417158, 1.994104798874384, -2.22554580407057, -0.005814256963163289, -1.260534503787032, -0.1490346965259472, 0.1174972127670469, -3.056059699108578, -1.994104798874377, 0.4515057831653368, 0.2575677672676605, 5.281605503179145, -0.4515057831653351 },
            { 0.4979174640291206, 0.04959698013003938, -0.1058170176815769, -0.02412978679176875, 1.330143320774213, -0.4947979945700651, -0.6017267600527341, 0.05421231589357317, -0.1060297687230429, 0.1058170176815836, -2.17421386196391, -1.330143320774207, 0.3588690354577209, 0.130159555514807, 2.669011856533976, -0.3588690354577189 },
            { 0.4229183491114313, -0.4871130555330242, -0.08637949239123416, 0.0749657542710081, 0.4869091621917406, 1.537224725391589, -1.006886242720895, 1.071080949142488, -0.05030308544387033, 0.08637949239124038, -1.031499615521196, -0.4869091621917356, 0.2315406606068318, -0.02466266882714474, -0.5057251098703927, -0.231540660606829 },
            { 0.1884751098418244, -0.08323377445968042, -0.061973087083262, 0.1330514064039036, -0.1521613469998413, 2.728311262403907, -0.5749077084361407, 0.4696663730539987, -0.005735655968905982, 0.06197308708326509, -0.1176135991358076, 0.1521613469998468, 0.1146987958777788, -0.1273157504350031, -2.6106976632681, -0.1146987958777766 },
            { -0.203440952036349, 1.473562780061812, -0.03657053775591701, 0.1235561244057359, -0.3747558508071585, 2.533603926979932, 0.8665964177402115, -2.136718245765673, 0.01386365265471913, 0.03657053775591555, 0.2842838020148408, 0.3747558508071636, 0.03846552545267456, -0.1374197770604582, -2.817887728994775, -0.03846552545267197 },
            { -0.6471617467581141, 3.635476166336824, -0.01478438315683483, 0.06452321305348185, -0.2437017555136691, 1.323093183441201, 2.824479930328372, -5.812794349907085, 0.01118526632335104, 0.01478438315682823, 0.2293616347830744, 0.2437017555136689, 0.006096913757563494, -0.07570847937683145, -1.552454818224271, -0.006096913757559719 },
            { 0.4959050550982941, 0.7759181248141038, -0.3682117308030803, -0.5482054496463289, 1.253043728145941, -1.953252482019523, -0.1786677329789345, -1.093155446933466, -0.5812632104655544, 0.3682117308030871, -2.071037070647435, -1.253043728145938, 2.00154990561356, 1.12946866011188, 4.024289552666959, -2.001549905613558 },
            { 0.4639388416873175, 0.0495969801300391, -0.3554342461949623, -0.1218806445597606, 0.7723055076656999, -0.4342599506263035, -0.6049609515351611, 0.09142512971780242, -0.3992341746070255, 0.3554342461949688, -1.422468789686941, -0.7723055076656957, 1.590886121130804, 0.521114819166781, 1.856728740313246, -1.590886121130801 },
            { 0.3451469861010876, -0.4871130555330245, -0.3207830003431012, 0.3786554157858238, 0.1724221140684053, 1.349146804707908, -0.8135031388794174, 0.9554692083113535, -0.1661256137387333, 0.320783000343106, -0.5919044904999478, -0.1724221140684004, 1.026432450398073, -0.2125298020470963, -0.7572423142079588, -1.026432450398071 },
            { 0.09078124167341899, -0.08323377445968097, -0.2558016305833281, 0.6720486721260215, -0.2598219510581384, 2.394505085119008, -0.2720227518305171, 0.2644752846167794, 0.01460066142596574, 0.2558016305833307, 0.05202206250920707, 0.2598219510581437, 0.5084660543076214, -0.6866493335519924, -2.446527147628215, -0.5084660543076186 },
            { -0.2848974413704942, 1.473562780061811, -0.1655276462224378, 0.6240875732484805, -0.3712533820708819, 2.223619999092611, 1.138600428029778, -2.327265766721095, 0.08463820054578455, 0.1655276462224358, 0.3015653627602072, 0.3712533820708853, 0.1705197844852029, -0.7087257737942667, -2.525185361852817, -0.1705197844852008 },
            { -0.6877948312376292, 3.635476166336823, -0.07163462484401029, 0.3259096677434168, -0.2205974715652088, 1.161214044560591, 2.964620330617213, -5.912301665716411, 0.05881337858818497, 0.07163462484400318, 0.2095516886551175, 0.2205974715652076, 0.02702795315363971, -0.3847230463316009, -1.370765733215703, -0.0270279531536356 },
            { 0.3967158158569041, 0.775918124814104, -0.02250324356082789, -1.247559364236927, 0.3598426795199187, -1.520135893782373, -0.3457158200909924, -0.8269181205800198, -0.7019277296967532, 0.02250324356083154, -0.8552903912559412, -0.3598426795199141, 3.544935387916236, 1.949487093933679, 2.375426285038316, -3.544935387916235 },
            { 0.3241321420939853, 0.04959698013003899, -0.16073186587351, -0.2773656108998099, 0.1119569968809861, -0.3379666193981609, -0.524345887053737, 0.150616764829709, -0.4150655088711776, 0.1607318658735133, -0.5057522683035256, -0.1119569968809819, 2.817610739119992, 0.692431119770986, 0.8437188877016892, -2.817610739119992 },
            { 0.1661102999415648, -0.4871130555330247, -0.3118368314327831, 0.8617118091171823, -0.1813738303174964, 1.049985346337723, -0.4505715177587231, 0.7715742733501803, -0.05966500169143155, 0.3118368314327852, -0.0727010780198126, 0.1813738303175008, 1.817909564241568, -0.8020468074257536, -0.9772842683179077, -1.817909564241566 },
            { -0.09202281212657076, -0.08323377445968155, -0.3749799245674644, 1.529391243145641, -0.3585297657279081, 1.86354460636361, 0.2371633942336941, -0.06190680764744305, 0.1909482611263304, 0.3749799245674649, 0.2326681310039321, 0.3585297657279125, 0.9005417773566242, -1.720339504271974, -2.09621273736754, -0.9005417773566216 },
            { -0.4236563386042771, 1.47356278006181, -0.3072231109542022, 1.420245451066456, -0.341355218984281, 1.7305517877843, 1.580448991773225, -2.630355433230759, 0.2455060320605686, 0.3072231109541995, 0.299146110536891, 0.3413552189842828, 0.3020067681880501, -1.665751483127026, -2.029697898321187, -0.3020067681880471 },
            { -0.7538838229146934, 3.635476166336823, -0.1520086632203266, 0.7416775191690417, -0.1799912998549651, 0.903725025694408, 3.188988154853718, -6.07058049827585, 0.142226300885334, 0.152008663220319, 0.1733010157379792, 0.1799912998549629, 0.04786907752265823, -0.8839038200543738, -1.07702604143238, -0.0478690775226539 },
            { 0.1113356234527028, 0.7759181248141038, 1.549167836755926, -2.068271660040132, -0.241152886861113, -1.011860895864255, -0.3727729255718791, -0.5144808226949344, 0.04421767101435342, -1.54916783675593, 0.02163261870771099, 0.241152886861118, 3.911948092251067, 2.024053989025785, 0.990228277156546, -3.911948092251068 },
            { 0.02575602267585526, 0.04959698013003899, 0.9945032683129194, -0.4598317714882263, -0.3075330299998059, -0.2249635757402854, -0.29543288456615, 0.2200798817602496, 0.2719627252720051, -0.9945032683129231, 0.1330523703206736, 0.3075330299998105, 3.109322385163603, 0.187869046216227, 0.09191120541961423, -3.109322385163603 },
            { -0.1306499582655352, -0.4871130555330246, 0.2965941636064884, 1.42859263054717, -0.3672301218090742, 0.698910615514831, 0.06199483105547077, 0.5557681827430847, 0.5205239040382282, -0.2965941636064909, 0.2546559980658727, 0.3672301218090783, 2.006120584302116, -1.949116534585395, -0.9535666135807013, -2.006120584302114 },
            { -0.3494754260481406, -0.08323377445968208, -0.2186400789894168, 2.535507853164535, -0.3607607927468342, 1.240446938060417, 0.8776349498709629, -0.4449257493631436, 0.6234176165639991, 0.218640078989415, 0.3049947065376138, 0.3607607927468373, 0.9937762758472805, -3.158925469728533, -1.545441644598027, -0.9937762758472775 },
            { -0.6008899182848365, 1.473562780061809, -0.374173215368817, 2.354560032129907, -0.2681699782294008, 1.151921804813062, 2.113367169545998, -2.986040031322973, 0.5099198947919994, 0.3741732153688133, 0.2494681968195722, 0.2681699782294009, 0.333274001181337, -2.864479926921907, -1.401390001632628, -0.3332740011813333 },
            { -0.8337229958451502, 3.635476166336822, -0.2305852330650489, 1.229593266469097, -0.1262999706071597, 0.6015541227954224, 3.454572172185245, -6.256325342676922, 0.2521015333775701, 0.2305852330650414, 0.1233356760335962, 0.1262999706071567, 0.05282503797697258, -1.481694799846666, -0.7248897988290104, -0.05282503797696703 },
            { -0.3286884078080083, 0.7759181248141025, 4.207844896470916, -2.847799723670111, -0.3648253808586182, -0.5290916880130664, -0.2295077500899619, -0.217721966916143, 1.640594886470261, -4.207844896470931, 0.3048055348181203, 0.3648253808586208, 2.816469626839177, 1.207204837199865, 0.2242861531949504, -2.816469626839173 },
            { -0.3919448452793033, 0.04959698013003888, 3.018435819368058, -0.6331415824522275, -0.3505541557557966, -0.1176311472420526, 0.05629060092323721, 0.2860572642260187, 1.630062654167738, -3.01843581936807, 0.3028487551607683, 0.3505541557557996, 2.238606405645116, -0.9969210717154983, -0.1852176079187137, -2.238606405645112 },
            { -0.4991666532209886, -0.4871130555330246, 1.47237562528553, 1.967026758192128, -0.3144455929120165, 0.3654531950433248, 0.6354882331843748, 0.3507914755696331, 1.526814332743361, -1.472375625285538, 0.2836662865999025, 0.3144455929120188, 1.444338616009721, -3.493841090935482, -0.6491194816432255, -1.444338616009716 },
            { -0.6369318884502357, -0.08323377445968236, 0.2260286538609246, 3.491136441653539, -0.2492839206569365, 0.6486169858243762, 1.528890048526019, -0.808724385616105, 1.259686537125643, -0.2260286538609295, 0.2340367093779323, 0.2492839206569371, 0.7154851319069072, -4.75082297877918, -0.8826536952023052, -0.7154851319069017 },
            { -0.7836244669619794, 1.473562780061809, -0.3384383601662194, 3.241989695267657, -0.1605615805001643, 0.6023281012821797, 2.633937677830007, -3.32387599092984, 0.8366895846622172, 0.3384383601662143, 0.1554482574783617, 0.1605615805001624, 0.2399459501013674, -4.078679279929875, -0.7577763587605344, -0.239945950101362 },
            { -0.9118373670836197, 3.635476166336821, -0.289475350113964, 1.693024872955699, -0.06926463973226071, 0.3145464831795919, 3.709110510294485, -6.432749309547692, 0.3684498268591491, 0.2894753501139565, 0.06845416102147506, 0.06926463973225611, 0.03803223138197653, -2.061474699814847, -0.3830006442010558, -0.03803223138197065 },
            { -0.7660918579612346, 0.7759181248141012, 6.943200588586823, -3.431668517133514, -0.1720998796620132, -0.167496143143558, -0.01437754853063167, 0.004551281677751318, 3.402752503907322, -6.943200588586849, 0.1660847828486245, 0.1720998796620106, 1.07442184884099, 0.02891601322621196, 0.001411360294940711, -1.074421848840975 },
            { -0.7905055846829973, 0.04959698013003822, 5.12571763291889, -0.7629511363914621, -0.1559679754146445, -0.03723884521903342, 0.4054340884107143, 0.3354745161422352, 3.097526333448152, -5.12571763291891, 0.1511870134157233, 0.1559679754146434, 0.8539796098847988, -2.334575197056673, -0.1139481681966866, -0.8539796098847863 },
            { -0.830480994318025, -0.4871130555330246, 2.734575962457597, 2.370315490356116, -0.1285736139312341, 0.1156926144485846, 1.120330725850656, 0.1972633240003874, 2.571023440609471, -2.734575962457609, 0.125488959112367, 0.1285736139312331, 0.5509837391384068, -4.941338930965576, -0.2411815735609507, -0.5509837391383966 },
            { -0.8796288547905168, -0.08323377445968247, 0.7480894357499497, 4.206905041903779, -0.09329653325769179, 0.2053346252914476, 2.044073254583609, -1.081210625333413, 1.880156770971338, -0.7480894357499569, 0.09176848115446534, 0.09329653325769005, 0.272942001900583, -6.087061812875112, -0.2971031064459089, -0.2729420019005745 },
            { -0.9296791351347395, 1.473562780061808, -0.2482887099393797, 3.906677101500439, -0.05565194675779161, 0.1906808142282819, 3.03303246518165, -3.576916110108722, 1.129700503209311, 0.2482887099393736, 0.05513949737573899, 0.05565194675778785, 0.09153415640386575, -5.036377604709749, -0.2458203116040125, -0.09153415640385916 },
            { -0.9718012639282523, 3.63547616633682, -0.3235376225814819, 2.040136497997307, -0.02269169481142441, 0.09957692393506656, 3.901216472936199, -6.564891375344773, 0.4632443242377499, 0.3235376225814738, 0.02261046987946713, 0.02269169481141858, 0.01450846832061714, -2.503380822235055, -0.1221873938145221, -0.01450846832061109 },
            { 0.0951941590365423, 0.7759181248141038, -0.1174972127670406, -0.1085330707417147, 4.792694305630262, -2.984854119225883, -0.3698860952189277, -0.5012261886317194, 0.005009356340142962, 0.1174972127670471, 0.1377662845468434, -4.792694305630253, 0.6055498360314325, 0.1035237144015696, 2.847087834679034, -0.605549836031429 },
            { 0.009891035232639803, 0.04959698013003921, -0.1058170176815781, -0.02412978679176814, 3.467597240672138, -0.6636124179407534, -0.2825147546269396, 0.223026739264262, 0.0164086201775225, 0.1058170176815845, 0.4512664867304909, -3.46759724067213, 0.4813074243582905, 0.007721166614240271, 0.2123459312102578, -0.4813074243582864 },
            { -0.1453085813673907, -0.4871130555330245, -0.08637949239123499, 0.07496575427100793, 1.739307401800566, 2.061692707186114, 0.08580866955245542, 0.5466129673479638, 0.02869360317685273, 0.08637949239124122, 0.7891255545664464, -1.739307401800557, 0.3105373492275585, -0.1036593574478695, -2.850818261752567, -0.3105373492275533 },
            { -0.361422381531194, -0.0832337744596808, -0.06197308708326206, 0.1330514064039037, 0.3340350208168971, 3.659152328036486, 0.9058308485694596, -0.4611746925785792, 0.03339710386421262, 0.06197308708326596, 0.9184802600539456, -0.3340350208168867, 0.1538315557109004, -0.1664485102681237, -4.57763258809044, -0.1538315557108958 },
            { -0.608752489168924, 1.473562780061811, -0.03657053775591679, 0.1235561244057373, -0.3221530831998246, 3.398015041569154, 2.136319069462011, -3.001129360354895, 0.02698726182493448, 0.03657053775591614, 0.7421981067547475, 0.3221530831998343, 0.05158913462289239, -0.1505433862306769, -4.140213148323909, -0.0515891346228882 },
            { -0.8371645227047513, 3.635476166336823, -0.01478438315683506, 0.0645232130534823, -0.2982438162681764, 1.774504093104221, 3.465893615938028, -6.264205259570103, 0.01326540203857113, 0.01478438315682834, 0.3648223499752036, 0.2982438162681781, 0.008177049472785081, -0.0777886150920537, -2.139326443079423, -0.008177049472780473 },
            { -0.001612528860250581, 0.7759181248141036, -0.3682117308030805, -0.5482054496463277, 3.312177660979302, -2.619660177822735, -0.3475578448236017, -0.4267477511302534, 0.1016225264853436, 0.3682117308030869, 0.4856144461444695, -3.312177660979296, 2.684435642564459, 0.4465829231609816, 2.134045731678264, -2.684435642564457 },
            { -0.08410912224514815, 0.04959698013003888, -0.3554342461949629, -0.1218806445597599, 2.332657223585286, -0.5824200967110952, -0.2050731336874866, 0.2395852758025947, 0.1435419201515703, 0.3554342461949691, 0.6859308901651093, -2.33265722358528, 2.133662215889401, -0.02166127559181524, -0.103510793454015, -2.133662215889397 },
            { -0.2308078912905129, -0.4871130555330247, -0.3207830003431015, 0.3786554157858239, 1.067975487240694, 1.809446649045528, 0.2227515828498054, 0.4951693639737337, 0.1840710405413087, 0.3207830003431067, 0.8796037600639379, -1.067975487240686, 1.376629104678117, -0.5627264563271394, -2.689050409109469, -1.376629104678113 },
            { -0.4301043103039853, -0.08323377445968116, -0.2558016305833286, 0.6720486721260222, 0.06602348103609512, 3.21145866948787, 1.065816384515752, -0.552478299752082, 0.1880783325230222, 0.2558016305833313, 0.8987530465808412, -0.06602348103608542, 0.6819437254046798, -0.8601270046490508, -4.110211716068716, -0.6819437254046751 },
            { -0.6534529395391891, 1.473562780061811, -0.1655276462224377, 0.6240875732484814, -0.3589128160453769, 2.982271271049593, 2.265807198155457, -3.085917038678076, 0.1428158799362921, 0.1655276462224362, 0.6824614269544047, 0.3589128160453846, 0.228697463875713, -0.766903453184777, -3.664732698004002, -0.2286974638757087 },
            { -0.8565850966360503, 3.635476166336823, -0.07163462484401051, 0.3259096677434177, -0.2738279471779661, 1.557395277091192, 3.529591828546233, -6.308482898247009, 0.06803473432647295, 0.07163462484400307, 0.3251114784407806, 0.2738279471779669, 0.03624930889192801, -0.3939444020698901, -1.882506755531968, -0.03624930889192413 },
            { -0.1769589681250635, 0.7759181248141034, -0.02250324356082756, -1.247559364236926, 1.470865282261781, -2.038773534132824, -0.290678676459476, -0.3082804802295678, 0.5075279066734124, 0.02250324356083074, 0.8294069954678892, -1.470865282261776, 4.754391024286397, 0.7400314575635142, 1.209366538664936, -4.7543910242864 },
            { -0.2506082551572149, 0.04959698013003866, -0.1607318658735104, -0.2773656108998094, 0.9356438139548082, -0.4532735539418546, -0.06491242434622987, 0.2659236993734029, 0.546242615711855, 0.1607318658735132, 0.8926749460214954, -0.9356438139548022, 3.778918863703024, -0.2688770048120461, -0.4394013920796404, -3.778918863703025 },
            { -0.37776073701393, -0.4871130555330248, -0.3118368314327834, 0.8617118091171825, 0.2635395569867197, 1.408217741648235, 0.4515319145072846, 0.413341878039669, 0.5605666043282224, 0.3118368314327857, 0.9160833462398954, -0.2635395569867124, 2.438141170261222, -1.422278413445408, -2.324301087888131, -2.43814117026122 },
            { -0.5447785580164275, -0.08323377445968161, -0.3749799245674647, 1.529391243145641, -0.2298006518308555, 2.499345906290416, 1.325720440050358, -0.6977081075742482, 0.4981937280320045, 0.3749799245674655, 0.8141529907908388, 0.2298006518308638, 1.207787244262299, -2.02758497117765, -3.313498897081256, -1.207787244262295 },
            { -0.7263746188062195, 1.47356278006181, -0.3072231109542024, 1.420245451066457, -0.3736252549995527, 2.320978801179454, 2.473594285370323, -3.220782446625913, 0.3485442395416025, 0.3072231109541997, 0.56959435472356, 0.3736252549995576, 0.4050449756690861, -1.768789690608062, -2.890573155903014, -0.4050449756690816 },
            { -0.8877644281612085, 3.635476166336822, -0.1520086632203264, 0.7416775191690417, -0.2280555832757891, 1.212056548401613, 3.631200282807436, -6.378912020983054, 0.1585581995752147, 0.1520086632203191, 0.2591173375636702, 0.2280555832757882, 0.06420097621254017, -0.9002357187442553, -1.471173885965276, -0.0642009762125354 },
            { -0.416190448430337, 0.7759181248141032, 1.549167836755926, -2.06827166004013, 0.1144402546826848, -1.357086049444544, -0.1904720072691284, -0.1692556691146445, 1.378890140783034, -1.549167836755931, 0.9047518321345496, -0.1144402546826802, 5.246620562019745, 0.6893815192571051, 0.4523342173099967, -5.246620562019745 },
            { -0.4725926314404948, 0.04959698013003883, 0.9945032683129194, -0.459831771488226, -0.06442627826270828, -0.3017163046008839, 0.1261630406896014, 0.2968326106208486, 1.33279658330138, -0.9945032683129231, 0.8745077761741208, 0.06442627826271377, 4.170156243192976, -0.8729648118131463, -0.5727914715732351, -4.170156243192976 },
            { -0.5673717370166217, -0.4871130555330246, 0.2965941636064883, 1.428592630547169, -0.2679735102956931, 0.9373638708646358, 0.7371698651563632, 0.3173149273932792, 1.204969058156712, -0.2965941636064903, 0.7906343883303382, 0.2679735102956997, 2.690565738420598, -2.633561688703879, -1.727998259194974, -2.690565738420597 },
            { -0.6878515093369484, -0.08323377445968194, -0.2186400789894172, 2.535507853164535, -0.3726099686983159, 1.663660728068917, 1.639224823168271, -0.8681395393716436, 0.9624726871335506, 0.2186400789894155, 0.6315216138749381, 0.3726099686983215, 1.332831346416833, -3.497980540298087, -2.295182341943854, -1.332831346416828 },
            { -0.8148007014423295, 1.473562780061809, -0.3741732153688171, 2.354560032129908, -0.3223600195122709, 1.544932725192005, 2.720288873082434, -3.379050951701915, 0.6236258090262603, 0.3741732153688134, 0.4091889386941944, 0.3223600195122731, 0.4469799154155994, -2.978185841156169, -1.954121663886196, -0.4469799154155943 },
            { -0.9248060776822051, 3.635476166336822, -0.2305852330650489, 1.229593266469097, -0.163478027955507, 0.806791438791834, 3.750892570018712, -6.461562658673333, 0.270124299078886, 0.2305852330650416, 0.177240700522303, 0.1634780279555057, 0.07084780367828936, -1.499717565547983, -0.9840321393141302, -0.07084780367828286 },
            { -0.6768715240241573, 0.7759181248141018, 4.207844896470915, -2.84779972367011, -0.3695764824812666, -0.7096063812865472, -0.06183932714729345, -0.03720727364266163, 2.601513688109782, -4.207844896470931, 0.6482375494116215, 0.3695764824812685, 3.777388428478697, 0.2462860355603444, 0.06136883187492981, -3.777388428478692 },
            { -0.7100281268508709, 0.0495969801300386, 3.018435819368058, -0.6331415824522275, -0.3749994114037155, -0.1577643622308363, 0.3342406675060212, 0.3261904792148027, 2.393826965402007, -3.01843581936807, 0.5964867810844171, 0.3749994114037186, 3.002370716879384, -1.760685382949765, -0.4387224188535791, -3.002370716879379 },
            { -0.7646239436047694, -0.4871130555330245, 1.472375625285529, 1.967026758192128, -0.3603332659081203, 0.4901379574458481, 1.02563028597068, 0.2261067131671091, 2.01959157373755, -1.472375625285538, 0.5032359039875786, 0.3603332659081239, 1.937115857003911, -3.986618331929671, -0.993373861433426, -1.937115857003905 },
            { -0.8322435552047383, -0.0832337744596823, 0.2260286538609246, 3.49113644165354, -0.3039211545467051, 0.8699111374821984, 1.945495866938345, -1.030018537273928, 1.503794660639994, -0.2260286538609294, 0.3747111422426654, 0.3039211545467072, 0.9595932554212581, -4.994931102293531, -1.244622279724861, -0.9595932554212511 },
            { -0.901639584969063, 1.473562780061809, -0.3384383601662195, 3.241989695267659, -0.2051423704965799, 0.8078294820754932, 2.957454176630405, -3.529377371723153, 0.9185539771031948, 0.3384383601662145, 0.2288825854890297, 0.205142370496579, 0.3218103425423458, -4.160543672370853, -1.036712067564516, -0.3218103425423392 },
            { -0.9604406902078844, 3.635476166336821, -0.289475350113964, 1.693024872955699, -0.09127961040945975, 0.4218629714514948, 3.865030321690652, -6.540065797819594, 0.3814256054207162, 0.2894753501139566, 0.09504251346854009, 0.09127961040945592, 0.05100800994354415, -2.074450478376415, -0.5169054849200236, -0.05100800994353777 },
            { -0.8934712849905284, 0.7759181248141011, 6.943200588586823, -3.431668517133514, -0.2188185526395672, -0.2246422212034791, 0.05585580043874161, 0.06169735973767221, 3.769322107784866, -6.943200588586847, 0.2467455369003647, 0.2188185526395647, 1.440991452718536, -0.3376535906513335, -0.02210331569687896, -1.440991452718521 },
            { -0.9048366700171621, 0.0495969801300381, 5.12571763291889, -0.7629511363914618, -0.1996444750276973, -0.04994393750240816, 0.5070600814615041, 0.3481796084256097, 3.388885791237159, -5.12571763291891, 0.221841599136835, 0.1996444750276963, 1.145339067673806, -2.62593465484568, -0.1718976616344241, -1.145339067673793 },
            { -0.9233145264619532, -0.4871130555330246, 2.734575962457596, 2.370315490356116, -0.1662873111087184, 0.1551644437824021, 1.252636087328403, 0.1577914946665693, 2.759007230418669, -2.734575962457609, 0.1806087940788108, 0.166287311108718, 0.7389675289476044, -5.129322720774774, -0.3357732378612124, -0.7389675289475947 },
            { -0.9458170049773224, -0.08323377445968247, 0.7480894357499497, 4.206905041903779, -0.1220793503628776, 0.2753903788454418, 2.180317158324409, -1.151266378887408, 1.973278705922835, -0.7480894357499569, 0.1291738142360849, 0.1220793503628764, 0.3660639368520797, -6.180183747826608, -0.4045641930815234, -0.3660639368520719 },
            { -0.9685009553309814, 1.473562780061808, -0.2482887099393797, 3.906677101500439, -0.07361702821743621, 0.2557370029255897, 3.136910474075199, -3.641972298806029, 1.160929986759392, 0.2482887099393738, 0.07599623611233565, 0.07361702821743289, 0.1227636399539466, -5.067607088259829, -0.3317332390379171, -0.12276363995394 },
            { -0.9874194037213089, 3.63547616633682, -0.3235376225814819, 2.040136497997307, -0.03027159605853802, 0.1335504266161567, 3.950808115410346, -6.598864878025863, 0.4681943012797236, 0.3235376225814739, 0.03064870842541012, 0.03027159605853241, 0.019458445362591, -2.508330799277029, -0.1641991350415548, -0.01945844536258456 },
            { -0.7264234090591893, 0.7759181248141039, -0.1174972127670428, -0.1085330707417134, 7.157021215506049, -3.472253188996083, -0.03566759689339438, -0.01382711886151888, 0.1038900436340878, 0.1174972127670487, 3.323710762518356, -7.157021215506037, 0.7044305233253836, 0.004643027107624098, 0.1485424264777166, -0.704430523325381 },
            { -0.7547673686263285, 0.04959698013003894, -0.1058170176815796, -0.02412978679176803, 5.291021114064788, -0.7719741878205363, 0.3737818793522473, 0.3313885091440456, 0.09500167080425065, 0.105817017681586, 3.039348763982105, -5.291021114064777, 0.5599004749850254, -0.07087188401248795, -2.267374576161577, -0.5599004749850212 },
            { -0.8012906341175025, -0.4871130555330246, -0.08637949239123613, 0.07496575427100738, 2.834458172945678, 2.398348056994341, 1.078446072110797, 0.2099576175397372, 0.07940148004343392, 0.08637949239124251, 2.540258378461664, -2.834458172945665, 0.361245226094143, -0.1543672343144507, -4.938606435456018, -0.3612452260941369 },
            { -0.8586720420688775, -0.08323377445968103, -0.06197308708326281, 0.1330514064039036, 0.7903950088132017, 4.256658058499114, 2.000586239569774, -1.058680423041207, 0.05851637407304898, 0.06197308708326663, 1.87208990858793, -0.790395008813188, 0.1789508259197395, -0.1915677804769619, -6.128747967087057, -0.1789508259197333 },
            { -0.917304406451105, 1.473562780061811, -0.03657053775591701, 0.1235561244057379, -0.2400044894888237, 3.952879468496488, 2.999735413671525, -3.555993787282226, 0.03541129034394556, 0.03657053775591639, 1.132898617747928, 0.2400044894888355, 0.06001316314190552, -0.15896741474969, -5.085778086244425, -0.06001316314190051 },
            { -0.9667959272344029, 3.635476166336823, -0.01478438315683506, 0.06452321305348274, -0.3255854404098399, 2.064264198535006, 3.885285125898466, -6.553965365000887, 0.01460063858525201, 0.01478438315682845, 0.4671121303631905, 0.3255854404098437, 0.009512286019466965, -0.07912385163873514, -2.531376328898196, -0.009512286019461691 },
            { -0.7584176427420413, 0.7759181248141034, -0.3682117308030812, -0.5482054496463268, 5.071382380644208, -3.047426454760913, -0.01851900787998784, 0.001018525807925386, 0.5399660376862266, 0.3682117308030876, 3.001624279691162, -5.071382380644199, 3.122779153765344, 0.008239411960098919, 0.04580217506974582, -3.122779153765346 },
            { -0.7835969085669662, 0.04959698013003871, -0.3554342461949634, -0.1218806445597597, 3.681941538136204, -0.6775239115086111, 0.3993108378368175, 0.3346890906001107, 0.4919492250613431, 0.3554342461949697, 2.734702991037842, -3.681941538136194, 2.482069520799174, -0.3700685805015876, -2.057179079529236, -2.482069520799173 },
            { -0.8248447915523479, -0.4871130555330249, -0.3207830003431023, 0.3786554157858237, 1.867162267247493, 2.104912550666315, 1.112254384732429, 0.199703462352947, 0.4088618404389977, 0.3207830003431074, 2.272827440332569, -1.867162267247483, 1.601419904575808, -0.7875172562248285, -4.377739990998891, -1.601419904575803 },
            { -0.8755880160435076, -0.08323377445968141, -0.2558016305833288, 0.6720486721260219, 0.3863111746925917, 3.735860166375691, 2.035701587143097, -1.076879796639903, 0.2994334353593598, 0.255801630583332, 1.664524445976857, -0.3863111746925798, 0.7932988282410193, -0.9714821074853895, -5.400384612352556, -0.7932988282410134 },
            { -0.9272962486228664, 1.473562780061811, -0.1655276462224375, 0.6240875732484816, -0.3137234319873115, 3.469248585602219, 3.026627821791762, -3.572894353230702, 0.1801600604889868, 0.1655276462224364, 1.001494120096145, 0.313723431987322, 0.2660416444284088, -0.8042476337374733, -4.470742705698372, -0.2660416444284038 },
            { -0.9708384599421407, 3.635476166336823, -0.07163462484401051, 0.3259096677434186, -0.3020894233365339, 1.811703520978037, 3.898153435739169, -6.562791142133854, 0.07395391118672157, 0.07163462484400335, 0.4111033655883026, 0.3020894233365364, 0.0421684857521778, -0.3998635789301397, -2.222806886566337, -0.04216848575217302 },
            { -0.8101572730647337, 0.7759181248141029, -0.02250324356082767, -1.247559364236925, 2.448986488451452, -2.371686394968433, 0.009606767644584013, 0.02463238060604311, 1.283875986010025, 0.02250324356083062, 2.440726506597231, -2.448986488451447, 5.530739103623009, -0.03631662177309825, -0.06904011162879531, -5.530739103623014 },
            { -0.830128546953266, 0.0495969801300386, -0.1607318658735103, -0.2773656108998093, 1.674962505192, -0.5272889328240862, 0.4405924885675899, 0.3399390782556346, 1.163305113688676, 0.1607318658735135, 2.211513929054738, -1.674962505191994, 4.395981361679844, -0.8859395027888668, -1.684224996230651, -4.395981361679845 },
            { -0.8627459056477516, -0.4871130555330249, -0.3118368314327835, 0.8617118091171823, 0.6850039325197662, 1.63816667378943, 1.166466015282303, 0.1833929458984727, 0.9586925062607258, 0.3118368314327861, 1.822532890406761, -0.6850039325197576, 2.836267072193724, -1.82040431537791, -3.460699564196195, -2.836267072193723 },
            { -0.9027106143802316, -0.08323377445968169, -0.3749799245674647, 1.529391243145641, -0.0798608903779278, 2.907465975513712, 2.091772565637459, -1.105828176797545, 0.6954142137977982, 0.3749799245674659, 1.322024808607568, 0.07986089037793856, 1.405007730028094, -2.224805456943444, -4.229490784121285, -1.405007730028089 },
            { -0.9432618359467702, 1.47356278006181, -0.3072231109542022, 1.420245451066457, -0.3717666243361033, 2.699973171914265, 3.069475873245685, -3.599776817360723, 0.4146843376739043, 0.3072231109542, 0.7883402025275582, 0.3717666243361103, 0.4711850738013892, -1.834929788740364, -3.488313374441826, -0.4711850738013837 },
            { -0.9772800756463571, 3.635476166336822, -0.1520086632203264, 0.7416775191690417, -0.2553301351285266, 1.409974172045154, 3.918633553936127, -6.576829644626596, 0.1690416251747368, 0.1520086632203193, 0.3213584331960796, 0.2553301351285279, 0.07468440181206293, -0.9107191443437783, -1.73133260524123, -0.07468440181205746 },
            { -0.8722045591516217, 0.7759181248141023, 1.549167836755926, -2.06827166004013, 0.4600908297523537, -1.578685649182749, 0.04394250371394992, 0.05234393062356268, 2.235614750838296, -1.549167836755931, 1.706416517925504, -0.4600908297523487, 6.103345172075005, -0.1673430907981568, -0.127730868742752, -6.103345172075007 },
            { -0.8857913626150311, 0.04959698013003866, 0.994503268312919, -0.459831771488226, 0.1849329909923599, -0.3509837864686789, 0.4900942899963427, 0.3461000924886438, 2.013744526665456, -0.9945032683129225, 1.537065776603725, -0.1849329909923537, 4.851104186557051, -1.553912755177223, -1.186081990135045, -4.851104186557051 },
            { -0.9079056705083028, -0.4871130555330246, 0.2965941636064882, 1.42859263054717, -0.1440580508923144, 1.090426720989488, 1.230766648772897, 0.1642520772684267, 1.644313557311626, -0.2965941636064901, 1.255083781225397, 0.1440580508923223, 3.129910237575511, -3.072906187858793, -2.345510502214885, -3.12991023757551 },
            { -0.934877471748118, -0.08323377445968191, -0.2186400789894171, 2.535507853164535, -0.3503931676734914, 1.935321137216249, 2.157911194726773, -1.139799948518976, 1.18011171820707, 0.2186400789894156, 0.9007643773109307, 0.3503931676734991, 1.550470377490353, -3.715619571371607, -2.836085514527181, -1.550470377490347 },
            { -0.962111169630737, 1.473562780061809, -0.3741732153688169, 2.354560032129908, -0.3471431394338905, 1.797205949623963, 3.1198725657028, -3.631324176133873, 0.6966134949490903, 0.3741732153688136, 0.5317162869609815, 0.3471431394338942, 0.5199676013384296, -3.051173527078999, -2.328922236584942, -0.5199676013384238 },
            { -0.9848574507059371, 3.635476166336822, -0.2305852330650489, 1.229593266469098, -0.1857573217753821, 0.9385330184666523, 3.942685522717261, -6.59330423834815, 0.2816930901248668, 0.2305852330650414, 0.2150127797261597, 0.185757321775381, 0.08241659472427032, -1.511286356593964, -1.153545798192805, -0.08241659472426394 },
            { -0.9324674485427289, 0.7759181248141018, 4.207844896470915, -2.84779972367011, -0.3405285965279221, -0.825478539967375, 0.07788443869045092, 0.07866488503816593, 3.218326280169965, -4.207844896470931, 0.9328813598835378, 0.3405285965279241, 4.394201020538881, -0.3705265564998386, -0.1074028199161592, -4.394201020538875 },
            { -0.9397174447288155, 0.04959698013003849, 3.018435819368058, -0.6331415824522274, -0.3651787385522352, -0.1835258233685557, 0.5381685242462466, 0.3519519403525218, 2.88408633355224, -3.01843581936807, 0.8359967718138416, 0.3651787385522389, 3.492630085029617, -2.250944751099998, -0.6524709484452844, -3.492630085029611 },
            { -0.951480909924442, -0.4871130555330245, 1.472375625285529, 1.967026758192128, -0.373328247078255, 0.5701729524492651, 1.29252224729377, 0.146071718163692, 2.335904676163362, -1.472375625285537, 0.6770978891371153, 0.3733282470782593, 2.253428959429724, -4.302931434355485, -1.247270841586381, -2.253428959429717 },
            { -0.9657678270778772, -0.08323377445968222, 0.2260286538609244, 3.49113644165354, -0.3308387733160836, 1.011959580138258, 2.221068581467543, -1.172066979929987, 1.660487363656037, -0.2260286538609292, 0.481317795346425, 0.3308387733160865, 1.116285958437302, -5.151623805309574, -1.493277375484682, -1.116285958437295 },
            { -0.9801278633069834, 1.473562780061809, -0.3384383601662194, 3.241989695267658, -0.2310242047039662, 0.9397405646173269, 3.167853537510159, -3.661288454264987, 0.9711026295104501, 0.3384383601662143, 0.2814890296195631, 0.2310242047039661, 0.3743589949496017, -4.213092324778109, -1.221229594236885, -0.3743589949495947 },
            { -0.9920725337888858, 3.635476166336821, -0.289475350113964, 1.693024872955699, -0.1049775624076787, 0.4907492927398773, 3.965548486560037, -6.608952119107978, 0.3897547416546031, 0.2894753501139565, 0.1129764050513229, 0.1049775624076751, 0.05933714617743124, -2.082779614610302, -0.6037256977911909, -0.059337146177425 },
            { -0.9784527553025391, 0.7759181248141009, 6.943200588586823, -3.431668517133513, -0.2455904377148747, -0.2613242181360735, 0.1041552738181576, 0.09837935667026709, 4.004622683808985, -6.943200588586848, 0.3049551221370677, 0.2455904377148719, 1.676292028742653, -0.5729541666754506, -0.04363090400098757, -1.676292028742637 },
            { -0.9807824312025116, 0.04959698013003805, 5.12571763291889, -0.7629511363914621, -0.2251235874842973, -0.05809932054861477, 0.5748504596006474, 0.3563349914718161, 3.575909067369813, -5.12571763291891, 0.2723082478655847, 0.2251235874842966, 1.332362343806459, -2.812957930978333, -0.2142089273169677, -1.332362343806445 },
            { -0.9845538780268509, -0.4871130555330246, 2.734575962457596, 2.370315490356116, -0.188846064822464, 0.1805013622849946, 1.339212357395893, 0.1324545761639768, 2.879673792941614, -2.734575962457608, 0.2192893919299623, 0.1888460648224638, 0.859634091470549, -5.24998928329772, -0.399790754214957, -0.8596340914705388 },
            { -0.9891202736103187, -0.08323377445968244, 0.7480894357499495, 4.206905041903779, -0.1397378283476898, 0.3203590805345352, 2.268589128646499, -1.196235080576502, 2.033053560964792, -0.7480894357499568, 0.1548186048842682, 0.139737828347689, 0.4258387918940365, -6.239958602868566, -0.4751776854188007, -0.4258387918940282 },
            { -0.9936946831500945, 1.473562780061808, -0.2482887099393795, 3.906677101500439, -0.084874742440743, 0.2974964901075217, 3.203863689076244, -3.683731785987962, 1.180976153682508, 0.2482887099393737, 0.0899322497081423, 0.08487474244073979, 0.1428098068770628, -5.087653255182946, -0.3874287398156555, -0.1428098068770562 },
            { -0.9974881061047873, 3.63547616633682, -0.3235376225814819, 2.040136497997307, -0.03509368756970765, 0.1553579760306669, 3.982684367208335, -6.620672427440375, 0.4713716854298605, 0.3235376225814739, 0.03589531929771905, 0.03509368756970183, 0.02263582951272758, -2.511508183427166, -0.1912532953283752, -0.02263582951272164 } } };
    alignas(32) static const double FE17_C0_D010_Q216[1][216][16] =
        { { { -4.045766714094546, 0.7539962955252164, -0.09659707695548525, -0.1075113772643904, -0.129908081981539, -0.1190520608856206, -0.522430814493906, 0.1075113772643896, 6.581097183888409, -3.289326765319082, -0.6438752299338647, 0.1299080819815376, 0.02233001283336206, 0.6190278914493917, -0.02233001283335984, 0.7629272908194905 },
            { -2.625711238408823, 0.7796154913055007, -0.5016000332397823, -0.3583652824090272, -0.1171477355034719, -0.1085190756615319, -2.30129795037449, 0.3583652824090262, 4.845688130092685, -2.999592382989368, -0.4978762158036499, 0.1171477355034688, 0.1011081226052135, 2.802897983614274, -0.1011081226052115, 0.6063952914651894 },
            { -0.8903325476865986, 0.8215952498391424, -1.193975119062376, -0.1261469244300138, -0.09582638001418574, -0.09025920814212227, -3.981507551150408, 0.1261469244300134, 2.565238204621154, -2.496500906773703, -0.3009842609290879, 0.09582638001418241, 0.1866936789780211, 5.175482670212786, -0.1866936789780199, 0.3912434690712182 },
            { 0.2817594879154589, 0.8732570708747058, -2.092842610795448, 1.20743008478171, -0.06891615594317727, -0.06615833401895813, -4.038148695986384, -1.207430084781708, 0.6762140249354881, -1.831230583725658, -0.1276527861527715, 0.06891615594317316, 0.2211614637284229, 6.130991306781833, -0.2211614637284222, 0.193811120171738 },
            { 0.4399970069452324, 0.925921001398158, -3.059500487651055, 3.694127852964539, -0.04076164475393087, -0.03983677829297327, -1.932306913050177, -3.694127852964533, -0.2625091917848031, -1.103408816558588, -0.02515995091350773, 0.04076164475392718, 0.1800680144772417, 4.991807400701226, -0.1800680144772397, 0.06499672920648589 },
            { -0.1966678229043567, 0.9702825697561608, -3.911169012658548, 6.626101439135876, -0.01650912933744108, -0.01636253492638606, 1.448614337578229, -6.626101439135864, -0.3201646793422939, -0.4534500675095042, 0.006060337105546432, 0.01650912933743709, 0.0888310175631073, 2.462554675080306, -0.08883101756310197, 0.01030219782083914 },
            { -2.463135790343382, -0.01730383321639173, -0.01568384515452775, -0.1075113772643897, -0.115491547893591, -0.0169647446372846, -0.4442496376184056, 0.1075113772643889, 2.597695329292181, -0.1172557057324116, -0.4805315012452913, 0.1154915478935898, 0.01959795790790601, 0.459933482772933, -0.01959795790790203, 0.4974962458825816 },
            { -1.46507869087365, 0.06588017441096441, -0.1352328026266219, -0.3583652824090272, -0.1039892555505802, -0.02567748154972417, -1.947301198293007, 0.3583652824090263, 1.778557596731102, -0.3793590802684209, -0.3697460203422508, 0.103989255550579, 0.08873764407353643, 2.082534000919631, -0.08873764407353388, 0.3954235018919798 },
            { -0.2832474925452288, 0.2143932600386828, -0.5174869756989675, -0.1261469244300147, -0.08485985387112392, -0.03433345539730758, -3.327861194265569, 0.1261469244300143, 0.7305661022898986, -0.6617118697833568, -0.2207919797931555, 0.08485985387112216, 0.1638518924994517, 3.845348169964537, -0.1638518924994494, 0.2551254351904685 },
            { 0.4323172743199233, 0.4170429674961619, -1.291459785194852, 1.207430084781708, -0.06085969413088435, -0.03583032326445258, -3.263824756146818, -1.207430084781707, -0.0798322516279195, -0.7695279901881686, -0.09055171321003685, 0.06085969413088095, 0.1941025779673961, 4.555284541341669, -0.194102577967393, 0.1263820364744954 },
            { 0.3668980549672415, 0.6450154214060546, -2.407020567282728, 3.694127852964538, -0.03590037963127631, -0.02750649986332471, -1.301858135679432, -3.694127852964531, -0.3903081440442096, -0.6216053323290852, -0.014877131137918, 0.03590037963127191, 0.1580368714796636, 3.708878702962153, -0.1580368714796587, 0.04238363100124657 },
            { -0.2786156794290427, 0.8529378788455719, -3.589288108745199, 6.626101439135875, -0.0145092064017394, -0.01317874853240608, 1.75962685458658, -6.626101439135864, -0.2688304127782839, -0.3054917866382385, 0.006460802010001321, 0.01450920640173492, 0.07796263065811049, 1.829661254158605, -0.07796263065810383, 0.006717946522404382 },
            { -0.6408368989713372, -0.4996518766880285, 0.1130187709687667, -0.1075113772643901, -0.09171144746408595, 0.09514136764599732, -0.3198926965901776, 0.1075113772643891, -1.604603982044347, 2.745092757703709, -0.2692918034117033, 0.09171144746408419, 0.0152522828128428, 0.2068739256214104, -0.01525228281283819, 0.1741504357657127 },
            { -0.1714107500994959, -0.47765531854568, 0.4475201043114265, -0.3583652824090274, -0.08238439827233668, 0.06613128420909975, -1.384225084807485, 0.3583652824090265, -1.40409540381567, 2.053161472460842, -0.2045507712633641, 0.08238439827233528, 0.0690608506210123, 0.9367049804960582, -0.06906085062100892, 0.1384194870542698 },
            { 0.3259504277881937, -0.3696431875250911, 0.5585520341064822, -0.1261469244300156, -0.06698094185551511, 0.02884069733485352, -2.28815490299438, 0.1261469244300153, -1.09345678358165, 1.137149543318544, -0.1181483174044548, 0.06698094185551384, 0.127519173965192, 1.729602868887897, -0.1275191739651886, 0.0893076200696057 },
            { 0.4952244484671167, -0.1194923796879663, -0.01676016097524091, 1.207430084781707, -0.04782925807083119, -0.0003618862262261338, -2.032165674361513, -1.207430084781704, -0.7403561652855183, 0.3646240965063666, -0.04387862193267165, 0.04782925807082789, 0.151062035533092, 2.048925835336751, -0.1510620355330881, 0.04424050815890257 },
            { 0.191409021594046, 0.2616269064030356, -1.369169639193498, 3.694127852964537, -0.02809561685664453, -0.01217690222771534, -0.2990504962694882, -3.69412785296453, -0.4118017154947231, -0.04123421250235648, -0.002659647533791276, 0.02809561685663964, 0.1229935828003796, 1.668220135462978, -0.1229935828003732, 0.01483654976151024 },
            { -0.4183499296694305, 0.6763398520968253, -3.077296268947143, 6.626101439135875, -0.011316617037574, -0.00879344780793978, 2.254331165551843, -6.626101439135862, -0.1583630522577293, -0.09962687016965799, 0.006441805310108406, 0.01131661703756903, 0.06067510182532088, 0.8229651033952861, -0.06067510182531333, 0.002351642497830614 },
            { 0.4091215024833663, 0.1002706194017143, 0.2640550593925765, -0.107511377264391, -0.0624754883598248, 0.1479625140273741, -0.1739561851314712, 0.1075113772643902, -3.194357124968413, 2.684965003083327, -0.09747586182166243, 0.06247548835981991, 0.01015250584774276, -0.09009887426110835, -0.010152505847736, -0.05048665220570071 },
            { 0.4815273117423171, -0.1887639442016824, 1.131397703565443, -0.3583652824090277, -0.0559738900951862, 0.1112879385593734, -0.7234387788050672, 0.3583652824090269, -2.482903983050071, 2.190140615509434, -0.07115977884116535, 0.05597389009518292, 0.04596955736941397, -0.4079589247603778, -0.0459695573694088, -0.04012815971820015 },
            { 0.4826265886697984, -0.4570946554055262, 1.821315318456177, -0.1261469244300156, -0.04531781738420336, 0.06259874959290337, -1.068029127663962, 0.1261469244300157, -1.520279469455802, 1.494747536191528, -0.03670824444458437, 0.04531781738420015, 0.08488166494591695, -0.7532861907922157, -0.08488166494591237, -0.02589050514831316 },
            { 0.2925135686978329, -0.4529332562239051, 1.479137171157639, 1.207430084781706, -0.03219996575209128, 0.02125889652763568, -0.586777678999203, -1.207430084781703, -0.6665703679293472, 0.8269900554554198, -0.00843346121361014, 0.03219996575208697, 0.1005526987625248, -0.8923594921584402, -0.1005526987625193, -0.01282543531402064 },
            { -0.1072713679992969, -0.08895706925961722, -0.1512211868820079, 3.694127852964535, -0.01882324972958948, -0.0008952216979512539, 0.8777736307119435, -3.694127852964527, -0.1523268868815084, 0.3485553241404261, 0.005196375033848233, 0.01882324972958388, 0.08186925747032514, -0.7265524438299454, -0.08186925747031792, -0.004301153335893808 },
            { -0.5970315832676192, 0.4848416144657586, -2.476458853860742, 6.626101439135871, -0.007552069519296311, -0.004710417430423552, 2.834881159375389, -6.626101439135859, 0.01639923596955523, 0.09579073283231376, 0.005392164543929656, 0.007552069519290661, 0.04038768056246944, -0.3584223055146627, -0.04038768056246056, -0.0006817471135069961 },
            { 0.3179205603439708, 1.835962491650606, 0.4075121832287012, -0.1075113772643921, -0.03337741801515799, 0.1194009912082542, -0.03534292592717894, 0.1075113772643915, -1.362847212246441, -0.7910358397481418, -0.01035547049040017, 0.03337741801514973, 0.005308641215911097, -0.3721692573015275, -0.005308641215900634, -0.1090455207178401 },
            { 0.2365537449236018, 1.012298915487432, 1.78095758396747, -0.3583652824090272, -0.02983220298412805, 0.09160021804134777, -0.09581144554188309, 0.3583652824090267, -0.8516719197011898, -0.3971807407098489, -0.004927882270466637, 0.02983220298412188, 0.02403701023057193, -1.68514613842559, -0.02403701023056429, -0.08667233577087058 },
            { 0.07325201137093128, 0.05772447927076156, 3.02071177310389, -0.1261469244300145, -0.0240601314860203, 0.05428751126187975, 0.09086941436106624, 0.1261469244300149, -0.212106060493186, 0.08112956985149075, 0.001633083433982649, 0.02406013148601541, 0.04438375232323197, -3.11158118746496, -0.04438375232322528, -0.05592059469585438 },
            { -0.1765361283854376, -0.4734675182173958, 2.899968754490476, 1.207430084781706, -0.01701730254031, 0.02179393804048021, 0.7860791808046496, -1.207430084781703, 0.2523714403249542, 0.39763220627788, 0.005907567429766072, 0.01701730254030396, 0.0525779752335437, -3.686047935295132, -0.05257797523353583, -0.0277015054702398 },
            { -0.4836947350263209, -0.322623030353397, 1.005609292552121, 3.694127852964533, -0.009902940052625675, 0.003112844036349094, 1.995543448015678, -3.694127852964525, 0.3788014705336278, 0.4275162948460949, 0.006177165990246147, 0.009902940052618658, 0.04280859533993553, -3.00115274056781, -0.04280859533992531, -0.009290010026591654 },
            { -0.7814449830670077, 0.3186963612607449, -1.905772111218041, 6.626101439135871, -0.003958482160762461, -0.001895437079646789, 3.386298525533847, -6.626101439135858, 0.2275135800401981, 0.2352350417660732, 0.003367934576362419, 0.003958482160756338, 0.02111830407823012, -1.480526414315822, -0.02111830407821991, -0.001472497496716176 },
            { -0.4449936557652589, 3.879999586099935, 0.5149619874318823, -0.1075113772643923, -0.010734651625761, 0.04776572560623613, 0.06847880953769775, 0.107511377264392, 2.141318536029437, -5.576324466364121, 0.006351808688896995, 0.01073465162574949, 0.00168057247760349, -0.5834407969695874, -0.001680572477588432, -0.05411753429511656 },
            { -0.4990226123038811, 2.503248929977418, 2.267479829089084, -0.3583652824090259, -0.009577809411745899, 0.03691987618594068, 0.374283257797718, 0.3583652824090257, 2.064982771650773, -4.069209089324317, 0.00609420703950409, 0.009577809411736428, 0.007609468448555173, -2.641763086886808, -0.007609468448544501, -0.04301408322543055 },
            { -0.5895769690872165, 0.8248621055574836, 3.919063216153224, -0.1261469244300126, -0.007703076066608899, 0.02229701805197442, 0.9588878027276921, 0.1261469244300132, 1.861233700607137, -2.096518837077407, 0.005455471746185679, 0.00770307606660179, 0.014050697640523, -4.877951018880921, -0.01405069764051492, -0.02775248979814899 },
            { -0.7043103662278545, -0.2998451364165037, 3.96417575482885, 1.207430084781707, -0.005429963221983331, 0.009431248033974583, 1.814352973282395, -1.207430084781703, 1.482357951924752, -0.4782024492803931, 0.004316562627515785, 0.005429963221975552, 0.01664476737291852, -5.778528728111251, -0.01664476737290951, -0.01374781066148167 },
            { -0.8248129763617837, -0.434255377347489, 1.872078696005835, 3.694127852964532, -0.003149338358209653, 0.001834535233917522, 2.832756301597724, -3.694127852964525, 0.9582821180903247, 0.3007862356189531, 0.002775947002368606, 0.003149338358201637, 0.01355204546827082, -4.704834997603569, -0.0135520454682605, -0.004610482236281153 },
            { -0.9289507568771631, 0.2042996789599214, -1.478326076343128, 6.626101439135871, -0.0012554207059846, -0.0004654601604743291, 3.799311741215241, -6.626101439135858, 0.4144331813761805, 0.3102178965410703, 0.001196236933817652, 0.001255420705977617, 0.006685484884711768, -2.32098566487213, -0.006685484884700887, -0.0007307767733437013 },
            { -2.258535283870653, 0.7539962955252169, -0.09659707695548375, -0.1075113772643905, -0.3744301704253757, -0.5972668532435715, -0.4327344046122122, 0.10751137726439, 4.315650961306567, -2.811111972961132, -2.675628748601597, 0.3744301704253775, 0.1120264227150575, 0.5293314815676974, -0.1120264227150559, 3.272895601845168 },
            { -1.316785740156484, 0.7796154913055003, -0.5016000332397818, -0.3583652824090277, -0.3673077642221286, -0.5444244001751147, -1.895161345113962, 0.3583652824090268, 3.100857307326765, -2.563687058475784, -2.056961742774649, 0.367307764222129, 0.5072447278657432, 2.396761378353745, -0.5072447278657427, 2.601386142949766 },
            { -0.2084477490763912, 0.8215952498391424, -1.193975119062375, -0.126146924430014, -0.3385424602293961, -0.4528173038104453, -3.231586228807274, 0.1261469244300136, 1.520795310342625, -2.13394281110538, -1.225585139754507, 0.3385424602293952, 0.9366150013211545, 4.425561347869651, -0.9366150013211546, 1.678402443564957 },
            { 0.4472518118467175, 0.8732570708747055, -2.092842610795447, 1.20743008478171, -0.2752981524158203, -0.3319067278751645, -3.149775301458709, -1.207430084781708, 0.244973307148025, -1.565482189869451, -0.4995271065566741, 0.2752981524158185, 1.109534858256099, 5.242617912254156, -1.109534858256099, 0.8314338344318434 },
            { 0.3537030347186496, 0.9259210013981578, -3.059500487651053, 3.694127852964539, -0.1808709960985316, -0.1998553157115437, -1.208999920185259, -3.694127852964532, -0.3362337569767913, -0.9433902791400155, -0.0789753300315256, 0.180870996098529, 0.9033750073421605, 4.268500407836306, -0.9033750073421589, 0.2788306457430723 },
            { -0.2910706036990975, 0.9702825697561606, -3.911169012658547, 6.626101439135876, -0.07907937721401849, -0.08208845503278039, 1.805435599662093, -6.626101439135864, -0.2914878186539481, -0.3877241474031088, 0.03789287002370978, 0.07907937721401537, 0.445652279646972, 2.105733412996441, -0.4456522796469673, 0.04419558500906959 },
            { -1.210419490701382, -0.01730383321639171, -0.01568384515452687, -0.1075113772643903, -0.3658082417524733, -0.08510965345931004, -0.3655274945336782, 0.1075113772643896, 1.276834120828158, -0.04911079691038629, -1.983564494746176, 0.3658082417524746, 0.09832010099263525, 0.3812113396882048, -0.09832010099263264, 2.068674148205488 },
            { -0.5673443854934088, 0.06588017441096436, -0.1352328026266218, -0.3583652824090275, -0.3519270327017216, -0.1288201858106282, -1.590855003919846, 0.3583652824090266, 0.7776805870899582, -0.2762163760075169, -1.515418102873634, 0.3519270327017219, 0.4451838384466991, 1.726087806546468, -0.4451838384466972, 1.644238288684265 },
            { 0.1532359968298498, 0.2143932600386827, -0.5174869756989674, -0.1261469244300147, -0.3161934635012403, -0.1722459461313391, -2.66969200201306, 0.1261469244300145, 0.1561701221807901, -0.5237993790493256, -0.8886090787983519, 0.3161934635012403, 0.8220210847519613, 3.187178977712028, -0.8220210847519603, 1.060855024929694 },
            { 0.4973246741558514, 0.4170429674961616, -1.291459785194851, 1.207430084781708, -0.2510631060498415, -0.1797555142486817, -2.484142965438426, -1.207430084781706, -0.2887648424480765, -0.625602799203939, -0.3457625249649224, 0.2510631060498397, 0.973784368675788, 3.775602750633277, -0.9737843686757864, 0.5255180392136082 },
            { 0.2642536539854499, 0.6450154214060544, -2.407020567282727, 3.694127852964538, -0.1619099036751002, -0.137996104350484, -0.6670470360869467, -3.694127852964531, -0.3981533475495786, -0.5111157278419241, -0.03824225419995089, 0.1619099036750968, 0.7928479710721476, 3.074067603369667, -0.7928479710721446, 0.1762383585504378 },
            { -0.365733446228829, 0.8529378788455717, -3.589288108745198, 6.626101439135876, -0.0699062790666127, -0.06611586231337518, 2.072791389114643, -6.626101439135864, -0.2346497597594667, -0.2525546728572691, 0.03818149614491451, 0.06990627906660896, 0.3911271651861747, 1.516496719630541, -0.3911271651861683, 0.02793436616845969 },
            { -0.05689475265716433, -0.4996518766880286, 0.1130187709687666, -0.1075113772643905, -0.3307306925282538, 0.477310387107109, -0.2586264975502875, 0.1075113772643896, -1.806377108897408, 2.362923738242597, -1.092253194790045, 0.330730692528253, 0.07651848185273513, 0.1456077265815195, -0.07651848185273058, 0.6149428076829423 },
            { 0.2164851818698321, -0.4776553185456801, 0.4475201043114262, -0.3583652824090276, -0.3104819308005218, 0.3317710229180552, -1.106817704421851, 0.3583652824090267, -1.526351597076042, 1.787521733751886, -0.8205442357608784, 0.3104819308005216, 0.3464682310066466, 0.6592976001104249, -0.346468231006643, 0.4887732128428277 },
            { 0.4651377828347775, -0.3696431875250912, 0.5585520341064822, -0.1261469244300154, -0.2696890900028751, 0.1446895787808942, -1.775928950366719, 0.1261469244300152, -1.116795257182192, 1.021300661872503, -0.4600438205983992, 0.2696890900028746, 0.6397451265928524, 1.217376916260237, -0.6397451265928498, 0.3153542418175084 },
            { 0.4464900798809357, -0.1194923796879665, -0.01676016097524047, 1.207430084781707, -0.2070871843955294, -0.001815530499539413, -1.425371475099107, -1.207430084781704, -0.6930754409726503, 0.3660777407796801, -0.1544021796711895, 0.2070871843955272, 0.7578562347954981, 1.442131636074345, -0.7578562347954949, 0.1562177101707324 },
            { 0.07821471106248812, 0.2616269064030355, -1.369169639193497, 3.694127852964537, -0.1299298928021911, -0.06108974529041888, 0.1949968156603308, -3.69412785296453, -0.3475202480258688, 0.007678630560347788, 0.008700387052219982, 0.1299298928021869, 0.6170408947301981, 1.174172823533158, -0.6170408947301931, 0.05238935823820168 },
            { -0.4914299064747583, 0.6763398520968251, -3.077296268947143, 6.626101439135874, -0.05502683957013445, -0.04411544716100635, 2.498054214147973, -6.62610143913586, -0.1206050748054681, -0.06430487081659098, 0.03581155958287574, 0.0550268395701301, 0.3043981504214526, 0.5792420547991535, -0.304398150421445, 0.008303887578129426 },
            { 0.4923913402203168, 0.1002706194017139, 0.2640550593925766, -0.1075113772643913, -0.2561088617483868, 0.7423063867499139, -0.1331750475369561, 0.1075113772643906, -2.683283089982825, 2.090621130360789, -0.3743790729471761, 0.2561088617483832, 0.05093364344225904, -0.1308800118556235, -0.05093364344225187, -0.3679273138027281 },
            { 0.4969660812089796, -0.1887639442016825, 1.131397703565443, -0.3583652824090277, -0.2352521214813151, 0.5583153821350421, -0.5387857608844555, 0.358365282409027, -2.051315308941065, 1.743113171933764, -0.2658767796939578, 0.2352521214813129, 0.2306225752900264, -0.5926119426809899, -0.230622575290021, -0.2924386024410778 },
            { 0.4186476104774453, -0.4570946554055263, 1.821315318456177, -0.1261469244300154, -0.1979573132801525, 0.3140488111520844, -0.7270718399433784, 0.1261469244300155, -1.204850429704268, 1.243297474632347, -0.125368762148181, 0.1979573132801503, 0.4258389526665011, -1.0942434785128, -0.4258389526664969, -0.1886800490038985 },
            { 0.1824852303054022, -0.4529332562239053, 1.479137171157639, 1.207430084781706, -0.1469807887460081, 0.1066527881839024, -0.1828721304346143, -1.207430084781703, -0.4711481378806502, 0.7415961637991537, -0.0131859458150969, 0.1469807887460046, 0.5044582473271135, -1.296265040723029, -0.5044582473271083, -0.09346684236880115 },
            { -0.2086381490432976, -0.08895706925961733, -0.1512211868820073, 3.694127852964534, -0.08955005679561762, -0.004491196897501271, 1.206630516266282, -3.694127852964527, -0.05455608103705778, 0.3521512993399766, 0.03583634901182087, 0.0895500567956124, 0.410726143024664, -1.055409329384285, -0.4107261430246572, -0.03134515211431676 },
            { -0.6498007290260894, 0.4848416144657584, -2.476458853860742, 6.626101439135872, -0.03711359060443277, -0.02363147832303814, 2.997112590988801, -6.62610143913586, 0.05024732083541103, 0.1147117937249284, 0.02859978921726414, 0.03711359060442732, 0.202619112175882, -0.5206537371280746, -0.2026191121758734, -0.004968310894226687 },
            { 0.2097722488902518, 1.835962491650605, 0.4075121832287011, -0.1075113772643921, -0.1517771451266645, 0.5990173858613731, -0.01401888720094183, 0.1075113772643916, -0.7750825061396046, -1.270652234401259, -0.0206068861481878, 0.1517771451266567, 0.02663267994214888, -0.3934932960277644, -0.02663267994213847, -0.5784104997131717 },
            { 0.1240597867820575, 1.012298915487432, 1.78095758396747, -0.3583652824090272, -0.137206889869047, 0.4595449551985556, 0.0007417243134228008, 0.3583652824090267, -0.3712332244024375, -0.7651254778670563, 0.0001913889861584264, 0.1372068898690412, 0.1205901800858778, -1.781699308280896, -0.12059018008587, -0.459736344184703 },
            { -0.03799104476891549, 0.05772447927076159, 3.02071177310389, -0.1261469244300143, -0.1126690228359812, 0.2723525387179817, 0.269152484334196, 0.1261469244300146, 0.1172020231027626, -0.1369354576046108, 0.02426724822386836, 0.1126690228359766, 0.2226668222963616, -3.289864257438089, -0.2226668222963553, -0.2966197869418422 },
            { -0.2726033746696091, -0.4734675182173955, 2.899968754490475, 1.207430084781706, -0.08139194689865556, 0.1093370135417309, 0.9972772509755023, -1.207430084781703, 0.4359817621103759, 0.3100891307766301, 0.0376001693555917, 0.08139194689865012, 0.2637760454043961, -3.897246005465983, -0.2637760454043888, -0.1469371828973164 },
            { -0.5496213804355992, -0.3226230303533971, 1.005609292552122, 3.694127852964533, -0.04834640718865509, 0.01561668524171322, 2.167499341759404, -3.694127852964525, 0.4572319571482703, 0.415012453640731, 0.03366034426349557, 0.04834640718864824, 0.2147644890836617, -3.173108634311537, -0.2147644890836524, -0.0492770295052047 },
            { -0.8110857660367519, 0.3186963612607449, -1.905772111218041, 6.626101439135871, -0.01964749477023871, -0.009509131817284855, 3.471127677793756, -6.626101439135858, 0.249540668272304, 0.2428487365037115, 0.01731970493663026, 0.01964749477023287, 0.1059474563381388, -1.565355566575731, -0.1059474563381291, -0.007810573119345983 },
            { -0.5151981526926688, 3.879999586099935, 0.5149619874318823, -0.1075113772643924, -0.05228351008566919, 0.2396336897782528, 0.07522942445720546, 0.1075113772643921, 2.403390997128863, -5.768192430536136, 0.03500744715639841, 0.05228351008565813, 0.008431187397110407, -0.5901914118890952, -0.008431187397095752, -0.2746411369346344 },
            { -0.5632232344827293, 2.503248929977418, 2.267479829089084, -0.3583652824090259, -0.04680206087484706, 0.1852216425963447, 0.4048493844737598, 0.3583652824090257, 2.277485160240026, -4.217510855734721, 0.03307057775525118, 0.04680206087483803, 0.03817559512459694, -2.67232921356285, -0.03817559512458631, -0.2182922203515819 },
            { -0.6432384106744089, 0.8248621055574836, 3.919063216153224, -0.1261469244300126, -0.03783973975805931, 0.1118608927014726, 1.015327409103732, 0.1261469244300132, 2.004459016843827, -2.186082711726905, 0.02898024964192794, 0.03783973975805209, 0.07049030401656274, -4.934390625256961, -0.07049030401655418, -0.1408411423433878 },
            { -0.7438597492692877, -0.2998451364165037, 3.964175754828849, 1.207430084781707, -0.02684232679835877, 0.04731519801931032, 1.88121258002811, -1.207430084781703, 1.559791284951521, -0.516086399265729, 0.02245358209257386, 0.02684232679835087, 0.08350437411863307, -5.845388334856967, -0.08350437411862405, -0.06976878011187537 },
            { -0.8487477966164043, -0.4342553773474891, 1.872078696005834, 3.694127852964532, -0.01566596014600821, 0.009203596125719304, 2.887192894810969, -3.694127852964525, 0.9895859992367468, 0.2934171747271515, 0.01419414546919018, 0.01566596014600052, 0.06798863868151639, -4.759271590816814, -0.06798863868150584, -0.02339774159490462 },
            { -0.9388199182233326, 0.2042996789599214, -1.478326076343127, 6.626101439135871, -0.006277053254462694, -0.002335145845337672, 3.826166360464752, -6.626101439135858, 0.4224326570374869, 0.3120875822259336, 0.00604376573150911, 0.006277053254456044, 0.03354010413422315, -2.347840284121642, -0.03354010413421227, -0.003708619886171928 },
            { -0.3589901608983304, 0.7539962955252161, -0.09659707695548359, -0.1075113772643903, 0.1293777364586293, -1.342267184161032, -0.2929983359839736, 0.1075113772643899, 1.671105507416783, -2.06611164204367, -4.071365964689914, -0.1293777364586253, 0.2517624913432959, 0.3895954129394572, -0.251762491343293, 5.413633148850945 },
            { 0.01914245142577967, 0.7796154913055005, -0.5016000332397814, -0.3583652824090274, -0.05380846470295163, -1.223511739590208, -1.26245004016899, 0.3583652824090268, 1.085841776329409, -1.884599719060691, -3.079390634837736, 0.05380846470295506, 1.139956032810714, 1.764050073408773, -1.139956032810713, 4.302902374427943 },
            { 0.4001325007598049, 0.8215952498391421, -1.193975119062375, -0.1261469244300142, -0.2629514009355938, -1.017638604962347, -2.063300257240121, 0.1261469244300142, 0.3473937593545278, -1.569121509953477, -1.758574330296902, 0.2629514009355958, 2.104900972888309, 3.257275376302497, -2.104900972888308, 2.776212935259251 },
            { 0.4803118287087429, 0.8732570708747051, -2.092842610795446, 1.20743008478171, -0.3720592928341322, -0.7459103189967539, -1.765797884871417, -1.207430084781707, -0.20209030083559, -1.15147859874786, -0.6293482638370119, 0.3720592928341325, 2.493512274843392, 3.858640495666863, -2.493512274843393, 1.375258582833768 },
            { 0.143892825208882, 0.9259210013981573, -3.059500487651052, 3.694127852964538, -0.3237695561140109, -0.4491446836584259, -0.08217582847893379, -3.694127852964531, -0.3757129154139063, -0.6941009111931312, -0.01206368053723761, 0.3237695561140101, 2.030199099048486, 3.14167631612998, -2.030199099048486, 0.4612083641956646 },
            { -0.4500857687921536, 0.9702825697561602, -3.911169012658546, 6.626101439135876, -0.1646090488221097, -0.1844814236561072, 2.361319613663662, -6.626101439135864, -0.2348656221842194, -0.2853311787797808, 0.1113783635086751, 0.1646090488221074, 1.001536293648542, 1.549849398994871, -1.001536293648536, 0.07310306014743055 },
            { 0.05966724712073068, -0.01730383321639213, -0.01568384515452625, -0.10751137726439, -0.07427863069976824, -0.1912711115196624, -0.2428879953256422, 0.1075113772643894, -0.09941407505430681, 0.05705066114996612, -2.962121621515584, 0.07427863069977167, 0.2209596002006724, 0.2585718404801676, -0.2209596002006681, 3.153392733035248 },
            { 0.289547480095716, 0.06588017441096425, -0.1352328026266217, -0.3583652824090274, -0.196515146303726, -0.2895039413824955, -1.035555299674176, 0.3583652824090267, -0.2398950340710322, -0.1155326204356503, -2.216898082064766, 0.196515146303729, 1.000483542692369, 1.170788102300798, -1.000483542692366, 2.506402023447261 },
            { 0.4837418728029613, 0.2143932600386826, -0.5174869756989668, -0.1261469244300147, -0.3271008436936667, -0.3870967890504727, -1.644344660476261, 0.1261469244300147, -0.3891865967114543, -0.3089485361301915, -1.230022334963891, 0.3271008436936685, 1.84736842628876, 2.161831636175229, -1.847368426288759, 1.617119124014364 },
            { 0.4254745384587075, 0.4170429674961611, -1.29145978519485, 1.207430084781709, -0.3742530902358732, -0.4039734109429991, -1.269493813278187, -1.207430084781706, -0.4411326034452492, -0.4013849025096203, -0.397102373453811, 0.3742530902358734, 2.188433520836028, 2.560953598473036, -2.188433520836027, 0.8010757843968125 },
            { 0.04628721040880263, 0.6450154214060539, -2.407020567282725, 3.694127852964537, -0.3001583922416474, -0.3101254345621258, 0.3219112454721877, -3.69412785296453, -0.3523162341845734, -0.3389863976302808, 0.04147570081014923, 0.3001583922416458, 1.781806252631283, 2.085109321810531, -1.781806252631281, 0.2686497337519778 },
            { -0.5106548454704422, 0.8529378788455716, -3.589288108745197, 6.626101439135875, -0.1470056208361805, -0.1485854302039414, 2.560663545274099, -6.626101439135863, -0.1721979284084201, -0.1700851049667021, 0.1060035536169601, 0.1470056208361776, 0.8789993213456311, 1.028624563471084, -0.878999321345626, 0.04258187658697957 },
            { 0.4400449426948961, -0.4996518766880287, 0.1130187709687672, -0.1075113772643906, -0.2903225691204148, 1.072683116087467, -0.1631812305109357, 0.1075113772643897, -1.70794407526911, 1.76755100926224, -1.548784766734268, 0.2903225691204158, 0.1719637488920884, 0.05016245954216653, -0.1719637488920828, 0.4761016506468056 },
            { 0.4926981940126747, -0.4776553185456802, 0.4475201043114263, -0.3583652824090275, -0.3377485231207405, 0.745605342570105, -0.6746508340345645, 0.3583652824090268, -1.388730289566833, 1.373687414099837, -1.124023840223941, 0.3377485231207419, 0.7786351013939345, 0.2271307297231373, -0.7786351013939302, 0.378418497653839 },
            { 0.4702979942995485, -0.3696431875250913, 0.5585520341064824, -0.1261469244300153, -0.3738069511189258, 0.3251680089611031, -0.9779433792167629, 0.1261469244300153, -0.9414770384667532, 0.8408222316922942, -0.5693218931792227, 0.3738069511189269, 1.43773069774281, 0.4193913451102797, -1.437730697742807, 0.2441538842181213 },
            { 0.2657091263581479, -0.1194923796879666, -0.01676016097523991, 1.207430084781707, -0.3503328628655498, -0.004080131013703296, -0.4800601077524608, -1.207430084781704, -0.5145590879640262, 0.3683423412938446, -0.1168669046184229, 0.3503328628655492, 1.703167602142144, 0.4968202687276977, -1.703167602142141, 0.1209470356321286 },
            { -0.1332937772822726, 0.261626906403035, -1.369169639193495, 3.694127852964536, -0.2534097206746473, -0.137289990138872, 0.9646622813849747, -3.694127852964529, -0.2122120045295612, 0.0838788754088019, 0.09672904752452438, 0.2534097206746445, 1.386706360454843, 0.4045073578085129, -1.386706360454838, 0.04056094261434928 },
            { -0.6108534562604555, 0.6763398520968249, -3.077296268947142, 6.626101439135875, -0.1175481784517777, -0.09914281483599818, 2.877745003220051, -6.626101439135862, -0.05620889269476258, -0.009277503141598809, 0.09271377048692986, 0.117548178451774, 0.6840889394935303, 0.1995512657270757, -0.6840889394935243, 0.006429044349066412 },
            { 0.4392272888395428, 0.1002706194017136, 0.2640550593925775, -0.1075113772643915, -0.3748777407068498, 1.668221663594017, -0.06964300819267188, 0.1075113772643908, -1.704203761757947, 1.164705853516687, -0.4399839005248662, 0.3748777407068483, 0.1144656827865444, -0.1944120511999084, -0.1144656827865371, -1.228237763069143 },
            { 0.375653219551317, -0.1887639442016827, 1.131397703565443, -0.3583652824090275, -0.3691811622029016, 1.254729626769652, -0.2511188763502925, 0.3583652824090268, -1.233588202648792, 1.046698927299155, -0.2784929587578828, 0.369181162202901, 0.5182894598241896, -0.8802788272151532, -0.5182894598241841, -0.9762366680117637 },
            { 0.2251876008755339, -0.4570946554055263, 1.821315318456176, -0.1261469244300151, -0.3419624709159468, 0.7057773441552753, -0.1959019634782808, 0.1261469244300153, -0.6196618870991649, 0.8515689416291559, -0.07591391018206536, 0.3419624709159462, 0.9570088291315989, -1.625413354977898, -0.9570088291315941, -0.6298634339732059 },
            { -0.03538574631496143, -0.4529332562239053, 1.479137171157639, 1.207430084781706, -0.2793350713659352, 0.239686058084572, 0.4463634602427663, -1.207430084781703, -0.1202438913596166, 0.6085628938984839, 0.07233074818533906, 0.2793350713659326, 1.133693838004495, -1.92550063140041, -1.13369383800449, -0.3120168062699076 },
            { -0.3821361954125891, -0.08895706925961766, -0.1512211868820064, 3.694127852964534, -0.1841528348666914, -0.01009328774966078, 1.718949441731647, -3.694127852964527, 0.1133398744800744, 0.3577533901921364, 0.1147316173100388, 0.1841528348666871, 0.9230450684900295, -1.56772825484965, -0.9230450684900224, -0.1046383295603756 },
            { -0.7344782576306005, 0.4848416144657582, -2.476458853860741, 6.626101439135872, -0.08069720118532631, -0.05310818387788452, 3.249849378241375, -6.62610143913586, 0.1054481438850754, 0.1441884992797752, 0.06969370724088142, 0.08069720118532153, 0.4553558994284572, -0.7733905243806499, -0.4553558994284486, -0.01658552336299813 },
            { -0.008713797996015168, 1.835962491650605, 0.4075121832287009, -0.1075113772643919, -0.2862253160791907, 1.346201242237268, 0.01920136478919829, 0.1075113772643915, 0.190587397122558, -2.017836090777152, 0.06343098978555232, 0.2862253160791848, 0.05985293193228833, -0.4267135480179043, -0.05985293193227786, -1.40963223202281 },
            { -0.09093674837885898, 1.012298915487432, 1.78095758396747, -0.358365282409027, -0.264738891927615, 1.032757986919823, 0.1511597888376382, 0.3583652824090265, 0.4169763424797456, -1.338338509588322, 0.08765592208850631, 0.2647388919276106, 0.2710082446100929, -1.932117372805112, -0.271008244610085, -1.12041390900832 },
            { -0.236937237773433, 0.05772447927076139, 3.02071177310389, -0.1261469244300141, -0.2250677932113476, 0.612071259703755, 0.5468957667451332, 0.1261469244300145, 0.6558669370930539, -0.4766541785903841, 0.1108146708530186, 0.225067793211344, 0.5004101047072987, -3.567607539849027, -0.5004101047072924, -0.7228859305567666 },
            { -0.4349672958233294, -0.473467518217396, 2.899968754490477, 1.207430084781706, -0.1689769263892078, 0.2457184497921301, 1.326298089897276, -1.207430084781703, 0.734727119514496, 0.1737076945262309, 0.1123791110187594, 0.1689769263892031, 0.5927968843261707, -4.226266844387759, -0.5927968843261633, -0.3580975608108833 },
            { -0.6565871030474113, -0.3226230303533972, 1.005609292552122, 3.694127852964533, -0.1039765925803433, 0.03509614506729508, 2.435385655168114, -3.694127852964525, 0.583677139585664, 0.3955329938151497, 0.08499588148361853, 0.1039765925803371, 0.4826508024923721, -3.440994947720247, -0.4826508024923624, -0.1200920265509102 },
            { -0.8579377232299543, 0.3186963612607447, -1.905772111218041, 6.626101439135871, -0.04341383137850081, -0.02137033977172087, 3.603281152581662, -6.626101439135858, 0.2845314175110705, 0.2547099444581475, 0.04040532552157039, 0.04341383137849519, 0.2381009311260449, -1.697509041363637, -0.2381009311260351, -0.0190349857498507 },
            { -0.6295795385756104, 3.879999586099934, 0.5149619874318823, -0.1075113772643924, -0.1120002242095749, 0.5385405807504094, 0.08574605930267273, 0.1075113772643921, 2.816679273983961, -6.067099321508292, 0.08967211891543408, 0.1120002242095645, 0.01894782224257791, -0.600708046734562, -0.01894782224256314, -0.6282126996658276 },
            { -0.6672231243749891, 2.503248929977418, 2.267479829089084, -0.3583652824090259, -0.1008097559298032, 0.4162577101061438, 0.4524676824695931, 0.3583652824090257, 2.612521117642084, -4.448546923244519, 0.08306277259255419, 0.1008097559297952, 0.08579389312042993, -2.719947511558683, -0.08579389312041918, -0.4993204826986847 },
            { -0.7294063027626949, 0.8248621055574834, 3.919063216153224, -0.1261469244300124, -0.08221907699118645, 0.2513904875998692, 1.103253433348351, 0.126146924430013, 2.23015650383051, -2.325612306625301, 0.07076880449708674, 0.0822190769911795, 0.1584163282611827, -5.022316649501581, -0.1584163282611737, -0.3221592920969437 },
            { -0.8067459269812244, -0.2998451364165037, 3.964175754828849, 1.207430084781707, -0.05892711637841455, 0.1063337723640577, 1.985371694188856, -1.207430084781703, 1.681696037008206, -0.5751049736104765, 0.05325497022445423, 0.0589271163784072, 0.187663488279378, -5.949547449017712, -0.1876634882793692, -0.1595887425885036 },
            { -0.8864622633718007, -0.4342553773474891, 1.872078696005835, 3.694127852964532, -0.03473839504649947, 0.02068369438004924, 2.971998468804029, -3.694127852964525, 1.038780564246473, 0.2819370764728214, 0.03283617732409549, 0.03473839504649179, 0.1527942126745759, -4.844077164809875, -0.1527942126745658, -0.05351987170414021 },
            { -0.9542625388118928, 0.2042996789599214, -1.478326076343127, 6.626101439135871, -0.01403247370607279, -0.005247888144810697, 3.868002582487289, -6.626101439135858, 0.4349625353265741, 0.3150003245254065, 0.01373096586845934, 0.01403247370606608, 0.07537632615675949, -2.389676506144178, -0.07537632615674861, -0.008483077723649302 },
            { 0.4904306359360898, 0.7539962955252147, -0.0965970769554817, -0.1075113772643894, 1.994104798874385, -2.183608854810714, -0.1351919934217895, 0.1075113772643891, -0.01965696006732094, -1.224769971393986, -3.056059699108577, -1.994104798874379, 0.4095688339054803, 0.2317890703772698, -0.4095688339054744, 5.239668553919287 },
            { 0.4979174640291209, 0.7796154913054999, -0.5016000332397814, -0.3583652824090269, 1.330143320774213, -1.990416736742272, -0.5479182953497794, 0.3583652824090265, -0.1598382334259958, -1.117694721908626, -2.174213861963911, -1.330143320774208, 1.854487777629925, 1.04951832858956, -1.854487777629922, 4.164630598706181 },
            { 0.4229183491114309, 0.8215952498391421, -1.193975119062375, -0.1261469244300142, 0.4869091621917385, -1.655501002344715, -0.7439348417852972, 0.1261469244300146, -0.3132544863794642, -0.9312591125711099, -1.031499615521196, -0.4869091621917352, 3.424266388343132, 1.937909960847673, -3.424266388343132, 2.687000617865911 },
            { 0.1884751098418235, 0.8732570708747046, -2.092842610795445, 1.207430084781709, -0.1521613469998456, -1.213451685831122, -0.2028484156020029, -1.207430084781706, -0.3777949488030381, -0.6839372319134909, -0.1176135991358064, 0.1521613469998478, 4.056461744112806, 2.295691026397447, -4.056461744112807, 1.33106528496693 },
            { -0.2034409520363508, 0.9259210013981567, -3.05950048765105, 3.694127852964538, -0.3747558508071647, -0.7306714489490446, 1.190365973854231, -3.694127852964531, -0.3099059034592929, -0.4125741459025109, 0.2842838020148415, 0.3747558508071656, 3.302740901381651, 1.869134513796813, -3.302740901381652, 0.4463876469342033 },
            { -0.6471617467581163, 0.9702825697561599, -3.911169012658546, 6.626101439135876, -0.2437017555136734, -0.3001155619366106, 2.989088979150491, -6.626101439135864, -0.1534237824987608, -0.1696970404992759, 0.2293616347830738, 0.2437017555136721, 1.62930565913537, 0.9220800335080415, -1.629305659135366, 0.07075392715353422 },
            { 0.4959050550982947, -0.01730383321639244, -0.01568384515452576, -0.1075113772643895, 1.253043728145946, -0.3111610696531162, -0.1043891022791626, 0.1075113772643889, -0.6555418411653249, 0.1769406192834209, -2.071037070647433, -1.253043728145939, 0.3594584932471515, 0.1200729474336865, -0.3594584932471452, 2.382198140300549 },
            { 0.463938841687318, 0.06588017441096441, -0.1352328026266215, -0.358365282409027, 0.7723055076657013, -0.4709668666306155, -0.4084458052314324, 0.3583652824090264, -0.5957493209107533, 0.06593030481246961, -1.42246878968694, -0.7723055076656964, 1.627593037135113, 0.5436786078580529, -1.627593037135109, 1.893435656317555 },
            { 0.3451469861010873, 0.2143932600386826, -0.5174869756989668, -0.1261469244300147, 0.1724221140684035, -0.6297315364732947, -0.4864022951857476, 0.126146924430015, -0.4932264574324009, -0.06631378870737009, -0.5919044904999472, -0.1724221140684, 3.005310791579273, 1.003889270884714, -3.005310791579272, 1.221636026973242 },
            { 0.09078124167341832, 0.4170429674961609, -1.291459785194849, 1.207430084781708, -0.259821951058143, -0.6571865330929476, 0.1022303384053605, -1.207430084781705, -0.359652428809908, -0.1481717803596713, 0.05202206250920759, 0.259821951058145, 3.560157672519575, 1.189229446789487, -3.560157672519575, 0.6051644705837406 },
            { -0.2848974413704954, 0.6450154214060533, -2.407020567282724, 3.694127852964537, -0.3712533820708872, -0.5045140438527143, 1.438758820271432, -3.694127852964529, -0.2155201916958638, -0.1445977883396914, 0.3015653627602076, 0.3712533820708872, 2.898653827430528, 0.9682617470112851, -2.898653827430527, 0.2029486810925068 },
            { -0.6877948312376314, 0.8529378788455713, -3.589288108745196, 6.626101439135875, -0.2205974715652129, -0.2417197298107071, 3.111625951453401, -6.626101439135863, -0.08819224224799747, -0.07695080535993504, 0.2095516886551166, 0.2205974715652108, 1.429961727524933, 0.4776621572917807, -1.429961727524928, 0.03216804115558795 },
            { 0.396715815856905, -0.4996518766880291, 0.1130187709687675, -0.1075113772643904, 0.3598426795199223, 1.745047765701415, -0.05539325097057538, 0.1075113772643895, -0.9922502988171695, 1.095186359648292, -0.8552903912559411, -0.3598426795199172, 0.2797517284324487, -0.05762551999819478, -0.279751728432442, -0.8897573744454724 },
            { 0.324132142093986, -0.47765531854568, 0.4475201043114261, -0.3583652824090272, 0.1119569968809879, 1.212955548226327, -0.1865973639329946, 0.3583652824090265, -0.75281403199192, 0.906337208443613, -0.5057522683035255, -0.1119569968809836, 1.266688571495504, -0.260922740378433, -1.266688571495499, -0.7072032799228016 },
            { 0.1661102999415649, -0.3696431875250912, 0.5585520341064817, -0.1261469244300149, -0.1813738303174977, 0.5289854002595129, -0.07676456663979524, 0.1261469244300152, -0.4334719528103587, 0.6370048403938843, -0.07270107801981254, 0.1813738303175009, 2.338909510319777, -0.4817874674666884, -2.338909510319774, -0.4562843222396999 },
            { -0.09202281212657096, -0.1194923796879667, -0.01676016097523936, 1.207430084781707, -0.3585297657279124, -0.006637583273616562, 0.5874962570992457, -1.207430084781704, -0.1593846017392198, 0.3708997935537581, 0.2326681310039323, 0.3585297657279135, 2.770723966993851, -0.5707360961240101, -2.770723966993848, -0.2260305477303145 },
            { -0.4236563386042784, 0.2616269064030348, -1.369169639193494, 3.694127852964536, -0.3413552189842862, -0.2233442355453952, 1.833858712447877, -3.694127852964528, -0.007903688614079207, 0.1699331208153264, 0.299146110536891, 0.3413552189842848, 2.255902791517745, -0.4646890732543905, -2.255902791517741, -0.07580187499149474 },
            { -0.7538838229146954, 0.6763398520968247, -3.077296268947141, 6.626101439135874, -0.1799912998549694, -0.1612861663619195, 3.306536333305503, -6.626101439135862, 0.02467812243355465, 0.05286584838432407, 0.1733010157379781, 0.1799912998549662, 1.112880269578981, -0.2292400643583752, -1.112880269578975, -0.01201484937606042 },
            { 0.1113356234527032, 0.1002706194017132, 0.2640550593925773, -0.1075113772643915, -0.2411528868611121, 2.713873690272627, 0.002104815134970864, 0.1075113772643908, -0.3306600696924953, 0.1190538268380775, 0.02163261870770993, 0.2411528868611139, 0.1862135061141864, -0.2661598745275515, -0.1862135061141793, -2.735506308980335 },
            { 0.02575602267585565, -0.1887639442016829, 1.131397703565443, -0.3583652824090274, -0.3075330299998058, 2.041202195612086, 0.07374827763675172, 0.3583652824090267, -0.09721843693089634, 0.2602263584567224, 0.133052370320673, 0.3075330299998076, 0.8431566138112337, -1.205145981202198, -0.8431566138112279, -2.174254565932756 },
            { -0.1306499582655348, -0.4570946554055264, 1.821315318456176, -0.1261469244300147, -0.3672301218090762, 1.148163105235652, 0.4039573019714173, 0.1261469244300151, 0.1785614331222815, 0.4091831805487792, 0.2546559980658725, 0.367230121809077, 1.556868094581297, -2.225272620427596, -1.556868094581292, -1.402819103301521 },
            { -0.3494754260481408, -0.4529332562239055, 1.479137171157639, 1.207430084781707, -0.3607607927468388, 0.3899228149090731, 1.156970021236899, -1.207430084781703, 0.3440825451980645, 0.4583261370739828, 0.3049947065376136, 0.3607607927468378, 1.844300398998627, -2.636107192394543, -1.844300398998622, -0.6949175214466838 },
            { -0.6008899182848375, -0.08895706925961788, -0.1512211868820057, 3.694127852964534, -0.2681699782294062, -0.0164198251766744, 2.297520004412692, -3.694127852964527, 0.3257670599253086, 0.3640799276191509, 0.2494681968195719, 0.2681699782294029, 1.501615631171074, -2.146298817530696, -1.501615631171068, -0.2330483716428955 },
            { -0.833722995845152, 0.4848416144657582, -2.476458853860741, 6.626101439135872, -0.1262999706071643, -0.08639673378526791, 3.535269373370577, -6.62610143913586, 0.1714043321922432, 0.1774770491871594, 0.1233356760335947, 0.1262999706071599, 0.7407758945576581, -1.058810519509851, -0.7407758945576504, -0.03693894224832849 },
            { -0.3286884078080098, 1.835962491650605, 0.4075121832287014, -0.1075113772643925, -0.3648253808586195, 2.190008805693794, 0.05671756598922703, 0.1075113772643919, 1.354369570391079, -2.861643654233676, 0.3048055348181178, 0.3648253808586157, 0.09736913313231682, -0.4642297492179334, -0.09736913313230688, -2.494814340511904 },
            { -0.391944845279304, 1.012298915487431, 1.78095758396747, -0.358365282409027, -0.3505541557557981, 1.68009730977976, 0.3210294928508508, 0.3583652824090264, 1.365323762240129, -1.985677832448259, 0.3028487551607671, 0.3505541557557955, 0.4408779486233049, -2.101987076818324, -0.4408779486232975, -1.982946064940521 },
            { -0.4991666532209886, 0.05772447927076134, 3.02071177310389, -0.1261469244300137, -0.314445592912019, 0.995721446695162, 0.8605560263957209, 0.1261469244300142, 1.301746539532017, -0.8603043655817907, 0.2836662865999022, 0.3144455929120166, 0.814070364357886, -3.881267799499615, -0.8140703643578795, -1.279387733295058 },
            { -0.6369318884502357, -0.4734675182173959, 2.899968754490477, 1.207430084781707, -0.2492839206569406, 0.3997363483871657, 1.697866974915226, -1.207430084781703, 1.090709610736438, 0.01968979593119514, 0.2340367093779322, 0.2492839206569367, 0.9643657693441192, -4.597835729405709, -0.9643657693441127, -0.6337730577650927 },
            { -0.7836244669619801, -0.3226230303533972, 1.005609292552122, 3.694127852964533, -0.1605615805001695, 0.05709463364893835, 2.737914270410351, -3.694127852964525, 0.7327129920818757, 0.3735345052335064, 0.1554482574783611, 0.1605615805001638, 0.7851794177346085, -3.743523562962485, -0.7851794177345996, -0.2125428911272963 },
            { -0.9118373670836215, 0.3186963612607447, -1.905772111218041, 6.626101439135871, -0.06926463973226495, -0.03476540565581054, 3.75252434167299, -6.626101439135858, 0.3250359954806479, 0.2681050103422376, 0.0684541610214735, 0.0692646397322596, 0.3873441202173726, -1.846752230454965, -0.3873441202173629, -0.03368875536566409 },
            { -0.7660918579612381, 3.879999586099934, 0.5149619874318823, -0.1075113772643925, -0.1720998796620149, 0.8761012670785849, 0.09762267567893895, 0.1075113772643922, 3.290752279697766, -6.404660007836468, 0.1660847828486212, 0.1720998796620054, 0.0308244386188435, -0.612584663110828, -0.03082443861882908, -1.042186049927192 },
            { -0.7905055846829998, 2.503248929977418, 2.267479829089084, -0.3583652824090259, -0.1559679754146451, 0.6771707096744095, 0.5062438443405156, 0.3583652824090255, 2.996716577518361, -4.709459922812785, 0.1511870134157219, 0.1559679754146381, 0.1395700549913524, -2.773723673429605, -0.139570054991342, -0.8283577230901195 },
            { -0.8304809943180256, 0.8248621055574835, 3.919063216153223, -0.1261469244300123, -0.1285736139312358, 0.4089636558323205, 1.202549802841841, 0.1261469244300129, 2.488804363618292, -2.483185474857752, 0.1254889591123673, 0.1285736139312296, 0.2577126977546721, -5.12161301899507, -0.2577126977546631, -0.5344526149446766 },
            { -0.8796288547905168, -0.2998451364165037, 3.964175754828848, 1.207430084781707, -0.09329653325769574, 0.1729844621394873, 2.103000370962022, -1.207430084781704, 1.821229654592928, -0.6417556633859061, 0.09176848115446559, 0.0932965332576885, 0.3052921650525447, -6.067176125790878, -0.3052921650525354, -0.2647529432939446 },
            { -0.9296791351347403, -0.4342553773474891, 1.872078696005835, 3.694127852964532, -0.05565194675779674, 0.03364836653345082, 3.067770860228149, -3.694127852964525, 1.094962108162814, 0.26897240431942, 0.05513949737573776, 0.05565194675778917, 0.2485666040986959, -4.939849556233995, -0.2485666040986858, -0.08878786390918394 },
            { -0.9718012639282543, 0.2042996789599214, -1.478326076343127, 6.626101439135871, -0.02269169481142823, -0.008537298056068843, 3.915248946642276, -6.626101439135858, 0.4492118505316773, 0.318289734436665, 0.02261046987946502, 0.02269169481142175, 0.122622690311746, -2.436922870299165, -0.122622690311736, -0.01407317182339689 },
            { 0.09519415903654349, 0.7539962955252137, -0.09659707695548114, -0.107511377264389, 4.792694305630262, -2.928609185728172, 0.004544075206450532, 0.1075113772643888, -0.3694208140852362, -0.479769640476523, 0.1377662845468447, -4.792694305630254, 0.549304902533724, 0.09205300174902908, -0.5493049025337177, 2.790842901181326 },
            { 0.009891035232639863, 0.7796154913054995, -0.5016000332397811, -0.3583652824090272, 3.467597240672136, -2.669504076157363, 0.08479300959519379, 0.358365282409027, -0.350899144044608, -0.4386073824935328, 0.4512664867304915, -3.46759724067213, 2.487199082574902, 0.4168070236445862, -2.487199082574897, 2.21823758942687 },
            { -0.1453085813673916, 0.8215952498391422, -1.193975119062375, -0.126146924430015, 1.739307401800561, -2.220322303496617, 0.4243511297818586, 0.1261469244300157, -0.3098488570525432, -0.3664378114192077, 0.7891255545664472, -1.739307401800556, 4.592552359910291, 0.7696239892805165, -4.592552359910289, 1.431196748930169 },
            { -0.3614223815311962, 0.8732570708747048, -2.092842610795444, 1.207430084781708, 0.334035020816888, -1.627455276952712, 1.181129000985291, -1.207430084781705, -0.241901048551608, -0.2699336407919004, 0.9184802600539466, -0.3340350208168856, 5.4404391607001, 0.911713609810152, -5.440439160700103, 0.7089750168987657 },
            { -0.6087524891689271, 0.9259210013981563, -3.059500487651048, 3.694127852964537, -0.3221530831998349, -0.9799608168959271, 2.317190065560556, -3.69412785296453, -0.1538837342735989, -0.1632847779556275, 0.7421981067547478, 0.3221530831998369, 4.429564993087976, 0.7423104220904866, -4.429564993087977, 0.2377627101411784 },
            { -0.8371645227047541, 0.9702825697561598, -3.911169012658544, 6.626101439135875, -0.2982438162681826, -0.4025085305599375, 3.54497299315206, -6.626101439135863, -0.06581397517545037, -0.06730407187594789, 0.3648223499752027, 0.2982438162681821, 2.185189673136938, 0.366196019506472, -2.185189673136936, 0.03768618058473153 },
            { -0.001612528860249013, -0.01730383321639273, -0.0156838451545247, -0.107511377264389, 3.312177660979309, -0.4173225277134682, 0.01825039692887373, 0.1075113772643885, -0.2641857152671335, 0.2831020773437757, 0.4856144461444706, -3.312177660979299, 0.4820979924551892, -0.002566551774350515, -0.4820979924551839, -0.06829191843100625 },
            { -0.08410912224514758, 0.06588017441096435, -0.1352328026266215, -0.358365282409027, 2.332657223585288, -0.631650622202482, 0.1468538990142382, 0.3583652824090267, -0.2083851125501534, 0.2266140603843363, 0.6859308901651099, -2.332657223585281, 2.182892741380785, -0.01162109638761782, -2.18289274138078, -0.05428026796263007 },
            { -0.2308078912905134, 0.2143932600386826, -0.5174869756989675, -0.1261469244300149, 1.06797548724069, -0.8445823793924285, 0.5389450463510514, 0.1261469244300156, -0.1321224229599329, 0.1485370542117634, 0.8796037600639384, -1.067975487240685, 4.030658133116074, -0.02145807065208498, -4.030658133116072, -0.03502138067151074 },
            { -0.4301043103039869, 0.4170429674961608, -1.291459785194849, 1.207430084781708, 0.06602348103608638, -0.881404429787265, 1.316879490565602, -1.207430084781704, -0.06298477352681968, 0.07604611633464656, 0.8987530465808417, -0.06602348103608377, 4.774806824679817, -0.02541970537075501, -4.774806824679817, -0.01734861679357607 },
            { -0.6534529395391914, 0.6450154214060532, -2.407020567282722, 3.694127852964537, -0.3589128160453862, -0.6766433740643558, 2.427717101830567, -3.694127852964529, -0.01909402373880989, 0.02753154187195159, 0.6824614269544049, 0.3589128160453872, 3.887612108989666, -0.02069653454785247, -3.887612108989665, -0.005818052890049351 },
            { -0.8565850966360529, 0.852937878845571, -3.589288108745195, 6.626101439135875, -0.2738279471779723, -0.324189297701273, 3.599498107612857, -6.626101439135862, -0.001871544740142415, 0.005518762530632104, 0.3251114784407796, 0.2738279471779705, 1.917833883684389, -0.01020999886767604, -1.917833883684385, -0.0009221807395090779 },
            { -0.1769589681250612, -0.499651876688029, 0.1130187709687679, -0.10751137726439, 1.470865282261789, 2.340420494681771, 0.0400520160687763, 0.1075113772643894, 0.1767972141451559, 0.4998136306679356, 0.8294069954678892, -1.47086528226178, 0.3751969954717994, -0.1530707870375461, -0.3751969954717937, -3.169827490149665 },
            { -0.2506082551572136, -0.4776553185456799, 0.4475201043114257, -0.358365282409027, 0.9356438139548113, 1.626789867878377, 0.2455695064542923, 0.3583652824090264, 0.2357606849113309, 0.4925028887915639, 0.8926749460214953, -0.9356438139548042, 1.69885544188279, -0.6930896107657197, -1.698855441882786, -2.519464813899875 },
            { -0.3777607370139296, -0.3696431875250909, 0.5585520341064818, -0.1261469244300149, 0.2635395569867176, 0.7094638304397217, 0.7212210045101619, 0.1261469244300154, 0.290877514325346, 0.456526410213675, 0.9160833462398956, -0.2635395569867126, 3.136895081469735, -1.279773038616646, -3.136895081469732, -1.625547176679618 },
            { -0.5447785580164285, -0.1194923796879667, -0.01676016097523908, 1.207430084781707, -0.2298006518308629, -0.008902183787780557, 1.532807624445892, -1.207430084781703, 0.291106543636474, 0.3731643940679221, 0.8141529907908384, 0.2298006518308649, 3.716035334340498, -1.516047463470657, -3.716035334340495, -0.8052508070030567 },
            { -0.7263746188062212, 0.2616269064030343, -1.369169639193493, 3.694127852964535, -0.3736252549995607, -0.2995444803938481, 2.60352417817252, -3.694127852964528, 0.2186143467394107, 0.24613336566378, 0.5695943547235597, 0.3736252549995599, 3.025568257242389, -1.234354538979036, -3.025568257242387, -0.2700498743297106 },
            { -0.8877644281612107, 0.6763398520968246, -3.077296268947141, 6.626101439135875, -0.2280555832757944, -0.2163135340369114, 3.686227122377579, -6.62610143913586, 0.1035313600050785, 0.107893216059316, 0.2591173375636687, 0.2280555832757918, 1.492571058651059, -0.6089308534304535, -1.492571058651053, -0.04280380352675996 },
            { -0.4161904484303357, 0.100270619401713, 0.2640550593925775, -0.1075113772643915, 0.1144402546826899, 3.639788967116729, 0.06563685447925487, 0.1075113772643907, 1.122781279034647, -0.8068614500060231, 0.9047518321345489, -0.1144402546826844, 0.2497455454584692, -0.3296919138718349, -0.2497455454584625, -4.54454079925128 },
            { -0.4725926314404936, -0.1887639442016829, 1.131397703565443, -0.3583652824090272, -0.06442627826270599, 2.737616440246695, 0.3614151621709147, 0.3583652824090265, 1.097544461820064, -0.4361878861778868, 0.8745077761741205, 0.06442627826271059, 1.130823498345396, -1.49281286573636, -1.13082349834539, -3.612124216420815 },
            { -0.5673717370166211, -0.4570946554055263, 1.821315318456176, -0.1261469244300145, -0.2679735102956958, 1.539891638238842, 0.935127178436515, 0.1261469244300149, 1.007011744876559, 0.01745464754558858, 0.7906343883303377, 0.2679735102956982, 2.088037971046393, -2.756442496892693, -2.088037971046389, -2.330526026569178 },
            { -0.6878515093369487, -0.4529332562239055, 1.47913717115764, 1.207430084781707, -0.3726099686983224, 0.5229560848097435, 1.786205611914281, -1.207430084781703, 0.8154918983875432, 0.325292867173313, 0.6315216138749374, 0.3726099686983221, 2.473535989676009, -3.265342783071926, -2.473535989676004, -1.154477698684678 },
            { -0.8148007014423309, -0.0889570692596181, -0.151221186882005, 3.694127852964534, -0.3223600195122778, -0.02202191602883369, 2.809838929878056, -3.694127852964527, 0.5340757522306425, 0.3696820184713108, 0.4091889386941938, 0.3223600195122752, 2.01393455663644, -2.658617742996061, -2.013934556636433, -0.3871670226653581 },
            { -0.9248060776822076, 0.484841614465758, -2.47645885386074, 6.626101439135872, -0.1634780279555133, -0.1158734393401143, 3.788006160623151, -6.62610143913586, 0.2330107084744519, 0.2069537547420059, 0.1772407005223012, 0.1634780279555095, 0.9935126818102329, -1.311547306762426, -0.9935126818102256, -0.06136726118218896 },
            { -0.6768715240241583, 1.835962491650604, 0.4075121832287015, -0.1075113772643924, -0.3695764824812653, 2.93719266206969, 0.08993781797936701, 0.1075113772643918, 2.449736542983125, -3.608827510609572, 0.6482375494116196, 0.369576482481264, 0.1305893851224554, -0.4974500012080737, -0.1305893851224459, -3.585430211481305 },
            { -0.7100281268508709, 1.012298915487431, 1.780957583967469, -0.3583652824090268, -0.3749994114037156, 2.253310341501027, 0.4714475573750657, 0.3583652824090262, 2.256620075532964, -2.558890864169525, 0.596486781084416, 0.3749994114037147, 0.5912960131475192, -2.252405141342539, -0.5912960131475121, -2.849797122585438 },
            { -0.7646239436047695, 0.05772447927076114, 3.02071177310389, -0.1261469244300136, -0.3603332659081228, 1.335440167680936, 1.138299308806659, 0.126146924430014, 1.906922550901572, -1.200023086567565, 0.5032359039875781, 0.3603332659081213, 1.091813646768824, -4.159011081910553, -1.091813646768817, -1.838676071668508 },
            { -0.8322435552047384, -0.4734675182173961, 2.899968754490477, 1.207430084781707, -0.3039211545467101, 0.5361177846375653, 2.026887813836999, -1.207430084781703, 1.42240271374134, -0.1166916403192041, 0.3747111422426651, 0.3039211545467067, 1.293386608265893, -4.926856568327484, -1.293386608265886, -0.9108289268802244 },
            { -0.9016395849690639, -0.3226230303533973, 1.005609292552122, 3.694127852964533, -0.205142370496586, 0.07657409347452004, 3.00580058381906, -3.694127852964525, 0.8702075699145414, 0.3540550454079252, 0.2288825854890285, 0.2051423704965806, 1.053065731143319, -4.011409876371195, -1.05306573114331, -0.3054566789635454 },
            { -0.9604406902078865, 0.3186963612607447, -1.90577211121804, 6.626101439135871, -0.09127961040946479, -0.046626613610246, 3.884677816460895, -6.626101439135858, 0.3617781106504767, 0.2799662182966737, 0.09504251346853854, 0.09127961040945953, 0.5194975950052783, -1.978905705242871, -0.5194975950052694, -0.04841589985829347 },
            { -0.893471284990532, 3.879999586099934, 0.5149619874318824, -0.1075113772643926, -0.2188185526395688, 1.175008158050741, 0.1081393105244061, 0.1075113772643921, 3.717038597699216, -6.703566898808623, 0.2467455369003617, 0.2188185526395594, 0.04134107346431057, -0.6231012979562953, -0.04134107346429644, -1.42175369495109 },
            { -0.9048366700171641, 2.503248929977418, 2.267479829089084, -0.3583652824090259, -0.1996444750276974, 0.9082067771842095, 0.5538621423363489, 0.3583652824090255, 3.342083730362324, -4.940495990322584, 0.2218415991368337, 0.1996444750276911, 0.1871883529871854, -2.821341971425439, -0.1871883529871748, -1.130048376321031 },
            { -0.9233145264619539, 0.8248621055574833, 3.919063216153223, -0.1261469244300122, -0.1662873111087203, 0.5484932507307168, 1.29047582708646, 0.1261469244300128, 2.721167490660616, -2.622715069756149, 0.1806087940788111, 0.1662873111087143, 0.3456387219992911, -5.20953904323969, -0.3456387219992821, -0.729102044809517 },
            { -0.9458170049773227, -0.2998451364165037, 3.964175754828849, 1.207430084781707, -0.1220793503628818, 0.2320030364842346, 2.207159485122766, -1.207430084781704, 1.946436379124481, -0.7007742377306534, 0.1291738142360849, 0.1220793503628751, 0.4094512792132892, -6.171335239951623, -0.4094512792132803, -0.3611768507203115 },
            { -0.968500955330982, -0.434255377347489, 1.872078696005835, 3.694127852964532, -0.07361702821744145, 0.04512846478778054, 3.152576434221207, -3.694127852964525, 1.145264026613386, 0.25749230606509, 0.07599623611233486, 0.07361702821743432, 0.3333721780917546, -5.024655130227053, -0.3333721780917445, -0.1211247009001108 },
            { -0.9874194037213109, 0.2042996789599214, -1.478326076343127, 6.626101439135871, -0.03027159605854228, -0.01145004035554198, 3.957085168664813, -6.626101439135858, 0.4619172480252608, 0.3212024767361382, 0.03064870842540801, 0.0302715960585358, 0.1644589123342832, -2.478759092321702, -0.1644589123342723, -0.01919866806986658 },
            { -0.7264234090591887, 0.7539962955252132, -0.09659707695548003, -0.1075113772643895, 7.157021215506047, -3.406823978086119, 0.09424048508814578, 0.1075113772643896, -0.02601803834745127, -0.001554848118572323, 3.323710762518357, -7.157021215506038, 0.6390013124154252, 0.002356591867335098, -0.6390013124154227, 0.08311321556775687 },
            { -0.7547673686263294, 0.7796154913054992, -0.5016000332397808, -0.358365282409028, 5.291021114064785, -3.105409400670943, 0.4909296148557227, 0.358365282409028, -0.02214606469921923, -0.002702057979950854, 3.039348763982106, -5.291021114064778, 2.893335687835435, 0.01067041838405808, -2.893335687835432, 0.06606063668883634 },
            { -0.8012906341175036, 0.8215952498391423, -1.193975119062376, -0.1261469244300158, 2.834458172945669, -2.582880399164937, 1.174272452124991, 0.1261469244300169, -0.01642489997075141, -0.003879715750887018, 2.540258378461667, -2.834458172945665, 5.342473682253426, 0.01970266693738344, -5.342473682253424, 0.0426220207032703 },
            { -0.8586720420688805, 0.8732570708747047, -2.092842610795444, 1.207430084781707, 0.7903950088131889, -1.893203670808917, 2.069502395512965, -1.207430084781704, -0.01039978187012821, -0.004185246935694852, 1.87208990858793, -0.790395008813186, 6.328812555227778, 0.02334021528247689, -6.328812555227779, 0.02111376222098621 },
            { -0.9173044064511084, 0.9259210013981561, -3.059500487651047, 3.694127852964536, -0.2400044894888363, -1.139979354314497, 3.040497058425472, -3.694127852964528, -0.005350354409988402, -0.003266240537056042, 1.132898617747927, 0.2400044894888388, 5.152871985952894, 0.01900342922556897, -5.152871985952896, 0.007080736566567804 },
            { -0.9667959272344062, 0.9702825697561596, -3.911169012658543, 6.626101439135876, -0.325585440409848, -0.4682344506663318, 3.901794255235922, -6.626101439135863, -0.001908490752192675, -0.001578151769553116, 0.4671121303631898, 0.3255854404098479, 2.542010935220802, 0.009374757422608626, -2.542010935220798, 0.001122320303138534 },
            { -0.7584176427420398, -0.01730383321639307, -0.01568384515452353, -0.1075113772643893, 5.071382380644215, -0.485467436535492, 0.096972540013602, 0.1075113772643889, 0.424474489792634, 0.3512469861658008, 3.001624279691164, -5.071382380644201, 0.5608201355399207, -0.08128869485907804, -0.5608201355399181, -2.516156843155678 },
            { -0.7835969085669657, 0.06588017441096443, -0.1352328026266218, -0.3583652824090272, 3.681941538136206, -0.7347933264633862, 0.5033000933874003, 0.3583652824090269, 0.3879599695107613, 0.3297567646452415, 2.734702991037842, -3.681941538136196, 2.539338935753949, -0.3680672907607793, -2.539338935753945, -1.999909664574462 },
            { -0.8248447915523488, 0.214393260038683, -0.5174869756989677, -0.1261469244300155, 1.867162267247489, -0.9824948701264596, 1.19711423860356, 0.1261469244300163, 0.3240019865678727, 0.2864495449457937, 2.272827440332569, -1.867162267247483, 4.688827325368584, -0.6796272629045933, -4.688827325368583, -1.290332570206112 },
            { -0.8755880160435097, 0.417042967496161, -1.291459785194849, 1.207430084781707, 0.3863111746925811, -1.025329620771494, 2.096561281273993, -1.207430084781704, 0.2385737412284743, 0.2199713073188755, 1.664524445976858, -0.3863111746925775, 5.55448861538821, -0.8051014960791467, -5.55448861538821, -0.6391948252053639 },
            { -0.9272962486228691, 0.6450154214060531, -2.407020567282722, 3.694127852964536, -0.313723431987323, -0.7871329785515158, 3.062528201423051, -3.694127852964528, 0.1442596808577078, 0.1380211463591119, 1.001494120096145, 0.3137234319873247, 4.522423208582148, -0.655507634140337, -4.522423208582148, -0.2143611415446304 },
            { -0.9708384599421438, 0.8529378788455708, -3.589288108745195, 6.626101439135875, -0.302089423336541, -0.3771264114822421, 3.912662642140921, -6.626101439135862, 0.05944470478497916, 0.05845587631160165, 0.4111033655883015, 0.30208942333654, 2.230998418212454, -0.3233745333957402, -2.23099841821245, -0.03397695410606254 },
            { -0.8101572730647312, -0.499651876688029, 0.1130187709687684, -0.1075113772643902, 2.448986488451462, 2.722589514142881, 0.1013182151086656, 0.1075113772643893, 1.192164538545937, 0.117644611206827, 2.440726506597231, -2.448986488451448, 0.4364631945116892, -0.2143369860774353, -0.4364631945116854, -5.163316020740121 },
            { -0.8301285469532645, -0.4776553185456798, 0.4475201043114256, -0.358365282409027, 1.674962505192004, 1.892429606587331, 0.5229768868399253, 0.3583652824090265, 1.080920715416338, 0.226863150082609, 2.211513929054737, -1.674962505191996, 1.976262822268423, -0.9704969911513522, -1.97626282226842, -4.103943535642073 },
            { -0.8627459056477519, -0.3696431875250906, 0.5585520341064814, -0.126146924430015, 0.6850039325197641, 0.8253127118857614, 1.233446957137822, 0.1261469244300157, 0.8917115644052098, 0.3406775287676341, 1.822532890406762, -0.6850039325197572, 3.649121034097395, -1.791998991244305, -3.649121034097392, -2.647845602292525 },
            { -0.9027106143802329, -0.1194923796879665, -0.01676016097523919, 1.207430084781707, -0.07986089037793706, -0.01035582806109431, 2.139601823708298, -1.207430084781703, 0.6475849557269658, 0.3746180383412354, 1.322024808607568, 0.07986089037794, 4.322829533602905, -2.122841662733062, -4.322829533602902, -1.311668980546473 },
            { -0.9432618359467724, 0.2616269064030344, -1.369169639193493, 3.694127852964535, -0.3717666243361131, -0.3484573234565518, 3.097571490102339, -3.694127852964528, 0.3865887208172582, 0.295046208726484, 0.7883402025275581, 0.3717666243361131, 3.519615569172208, -1.728401850908854, -3.519615569172206, -0.4398828790710059 },
            { -0.9772800756463598, 0.6763398520968243, -3.077296268947141, 6.626101439135875, -0.2553301351285339, -0.2516355333899777, 3.929950170973711, -6.62610143913586, 0.1577250081371605, 0.1432152154123831, 0.3213584331960783, 0.2553301351285318, 1.736294107247191, -0.8526539020265859, -1.736294107247185, -0.06972289980610329 },
            { -0.8722045591516201, 0.1002706194017128, 0.2640550593925776, -0.1075113772643914, 0.4600908297523617, 4.234132839839268, 0.1064179920737694, 0.1075113772643906, 2.173139262478471, -1.401205322728561, 1.706416517925504, -0.4600908297523525, 0.2905266830529823, -0.3704730514663493, -0.290526683052977, -5.940549357764777 },
            { -0.88579136261503, -0.1887639442016827, 1.131397703565443, -0.358365282409027, 0.1849329909923636, 3.184643883822362, 0.5460681800915261, 0.3583652824090264, 1.957770636570269, -0.8832153297535545, 1.537065776603725, -0.1849329909923565, 1.315476516266006, -1.677465883656971, -1.315476516266001, -4.72170966042609 },
            { -0.9079056705083024, -0.4570946554055261, 1.821315318456175, -0.1261469244300143, -0.144058050892317, 1.791341699798022, 1.2760844661571, 0.1261469244300149, 1.598995739927423, -0.2339954140135927, 1.255083781225396, 0.1440580508923208, 2.428995258766978, -3.097399784613278, -2.428995258766973, -3.046425481023419 },
            { -0.9348774717481187, -0.4529332562239056, 1.47913717115764, 1.207430084781707, -0.350393167673499, 0.6083499764660092, 2.190111160478868, -1.207430084781703, 1.147911752454979, 0.2398989755170468, 0.9007643773109302, 0.3503931676734996, 2.877441538240597, -3.669248331636513, -2.877441538240592, -1.509114353776936 },
            { -0.9621111696307387, -0.08895706925961822, -0.1512211868820041, 3.694127852964534, -0.3471431394338989, -0.02561789122838365, 3.138695815432394, -3.694127852964526, 0.6777902452195005, 0.3732779936708612, 0.5317162869609806, 0.3471431394338965, 2.342791442190778, -2.987474628550401, -2.342791442190772, -0.5060983957325951 },
            { -0.9848574507059397, 0.484841614465758, -2.47645885386074, 6.626101439135872, -0.1857573217753886, -0.134794500232729, 3.950237592236565, -6.62610143913586, 0.2741410206055693, 0.2258748156346208, 0.2150127797261582, 0.185757321775385, 1.155744113423646, -1.47377873837584, -1.155744113423638, -0.08021827949343124 },
            { -0.9324674485427292, 1.835962491650604, 0.4075121832287014, -0.1075113772643925, -0.3405285965279192, 3.416809056722808, 0.1112618567056043, 0.1075113772643917, 3.184948862154813, -4.088443905262688, 0.9328813598835365, 0.3405285965279198, 0.1519134238486914, -0.5187740399343104, -0.1519134238486827, -4.349690416606342 },
            { -0.9397174447288157, 1.012298915487431, 1.780957583967469, -0.3583652824090267, -0.3651787385522349, 2.621255078658236, 0.5680007272303716, 0.3583652824090261, 2.854254130568118, -2.926835601326733, 0.835996771813841, 0.3651787385522352, 0.6878491830028242, -2.348958311197845, -0.6878491830028172, -3.457251850472072 },
            { -0.9514809099244419, 0.05772447927076117, 3.02071177310389, -0.1261469244300134, -0.373328247078257, 1.553505195137037, 1.316582378779788, 0.1261469244300138, 2.311844544677346, -1.418088114023666, 0.6770978891371154, 0.3733282470782567, 1.270096716741952, -4.337294151883682, -1.270096716741946, -2.230603084274148 },
            { -0.9657678270778772, -0.4734675182173961, 2.899968754490477, 1.207430084781707, -0.3308387733160892, 0.6236608601388154, 2.238085884007853, -1.207430084781703, 1.643470061115729, -0.2042347158204542, 0.4813177953464248, 0.3308387733160862, 1.504584678436746, -5.138054638498336, -1.504584678436739, -1.104978655485235 },
            { -0.9801278633069843, -0.3226230303533975, 1.005609292552123, 3.694127852964533, -0.2310242047039728, 0.08907793467988406, 3.177756477562786, -3.694127852964525, 0.9611996894578255, 0.3415512042025614, 0.2814890296195618, 0.2310242047039678, 1.225021624887044, -4.183365770114921, -1.225021624887036, -0.3705669642994429 },
            { -0.992072533788888, 0.3186963612607446, -1.90577211121804, 6.626101439135871, -0.1049775624076836, -0.0542403083478844, 3.969506968720805, -6.626101439135858, 0.3857962594938401, 0.287579913034312, 0.1129764050513209, 0.1049775624076787, 0.6043267472651874, -2.063734857502781, -0.6043267472651781, -0.05873609670343809 },
            { -0.9784527553025424, 3.879999586099934, 0.5149619874318816, -0.1075113772643927, -0.2455904377148753, 1.366876122222756, 0.1148899254439135, 0.1075113772643922, 3.993888032183241, -6.895434862980637, 0.3049551221370645, 0.2455904377148669, 0.04809168838381771, -0.6298519128758033, -0.04809168838380359, -1.671831244359808 },
            { -0.9807824312025137, 2.503248929977418, 2.267479829089084, -0.3583652824090258, -0.2251235874842973, 1.056508543594613, 0.5844282690123908, 0.3583652824090255, 3.566331257958079, -5.088797756732988, 0.2723082478655837, 0.225123587484291, 0.2177544796632272, -2.85190809810148, -0.2177544796632165, -1.328816791460185 },
            { -0.9845538780268516, 0.8248621055574833, 3.919063216153223, -0.1261469244300122, -0.1888460648224664, 0.6380571253802145, 1.3469154334625, 0.1261469244300128, 2.871970716875012, -2.712278944405646, 0.2192893919299633, 0.1888460648224603, 0.4020783283753313, -5.265978649615729, -0.4020783283753222, -0.8573465173101663 },
            { -0.9891202736103187, -0.2998451364165036, 3.964175754828848, 1.207430084781707, -0.1397378283476939, 0.2698869864695703, 2.274019091868481, -1.207430084781704, 2.027623597742813, -0.738658187715989, 0.1548186048842685, 0.1397378283476875, 0.4763108859590037, -6.238194846697337, -0.4763108859589946, -0.4247055913538309 },
            { -0.9936946831500952, -0.4342553773474891, 1.872078696005835, 3.694127852964532, -0.08487474244074836, 0.05249752567958255, 3.207013027434454, -3.694127852964525, 1.177826815324301, 0.2501232451732884, 0.08993224970814107, 0.084874742440741, 0.3878087713050019, -5.079091723440301, -0.3878087713049909, -0.142429775387719 },
            { -0.9974881061047893, 0.2042996789599214, -1.478326076343127, 6.626101439135871, -0.03509368756971136, -0.01331972604040521, 3.983939787914324, -6.626101439135858, 0.4701162647238759, 0.3230721624210015, 0.03589531929771705, 0.03509368756970521, 0.1913135315837946, -2.505613711571214, -0.1913135315837837, -0.02257559325731261 } } };
    alignas(32) static const double FE17_C0_D100_Q216[1][216][16] =
        { { { -4.045766714094551, 0.7264234090591986, -0.09424048508814722, -0.1075113772643888, -0.1038900436340901, -0.1174972127670476, -0.5224308144939078, 0.1075113772643888, -0.5759240316176371, 0.1174972127670474, 6.513145985572196, -3.193802680536844, 0.01997342096601856, -0.01997342096601798, 0.6166712995820549, 0.6798140752517272 },
            { -2.625711238408826, 0.7547673686263365, -0.4909296148557245, -0.3583652824090255, -0.09500167080425209, -0.105817017681584, -2.301297950374491, 0.3583652824090251, -0.4453329839720997, 0.1058170176815838, 4.793144898261145, -2.922201028478656, 0.09043770422115052, -0.09043770422114943, 2.792227565230216, 0.5403346547763518 },
            { -0.8903325476866008, 0.8012906341175094, -1.174272452124992, -0.1261469244300138, -0.07940148004343295, -0.08637949239124013, -3.98150755115041, 0.1261469244300127, -0.2692199683245147, 0.0863794923912397, 2.533473912016587, -2.444431998447496, 0.1669910120406334, -0.1669910120406315, 5.155780003275403, 0.3486214483679472 },
            { 0.2817594879154581, 0.8586720420688828, -2.069502395512961, 1.207430084781704, -0.05851637407304974, -0.06197308708326508, -4.038148695986387, -1.207430084781706, -0.1141809838776987, 0.0619730870832647, 0.6627422226604188, -1.80317375264476, 0.1978212484459382, -0.1978212484459368, 6.107651091499352, 0.1726973579507481 },
            { 0.4399970069452329, 0.9173044064511091, -3.040497058425464, 3.694127852964523, -0.0354112903439473, -0.03657053775591493, -1.932306913050183, -3.694127852964526, -0.02250470229596824, 0.03657053775591484, -0.2651644404023432, -1.092136972993999, 0.1610645852516643, -0.1610645852516637, 4.97280397147565, 0.05791599263991516 },
            { -0.1966678229043558, 0.9667959272344042, -3.901794255235902, 6.626101439135848, -0.01460063858525318, -0.0147843831568264, 1.448614337578225, -6.626101439135851, 0.00542076106755407, 0.01478438315682673, -0.3195251033043011, -0.4506030010257476, 0.07945626014049223, -0.07945626014049267, 2.453179917657683, 0.009179877517699112 },
            { -2.463135790343382, 0.7584176427420479, -0.09697254001360434, -0.1075113772643881, -0.5399660376862273, -0.3682117308030888, -0.4442496376184071, 0.107511377264388, -2.473687051352037, 0.3682117308030887, 4.590850879398928, -2.886132731797594, 0.1008866527669772, -0.1008866527669768, 0.5412221776320116, 3.013653089038264 },
            { -1.46507869087365, 0.7835969085669711, -0.5033000933874012, -0.3583652824090254, -0.4919492250613407, -0.3554342461949695, -1.947301198293007, 0.3583652824090251, -1.903383941405104, 0.3554342461949692, 3.312195517793956, -2.630713735487277, 0.4568049348343114, -0.4568049348343107, 2.450601291680409, 2.395333166466443 },
            { -0.2832474925452292, 0.8248447915523529, -1.197114238603562, -0.1261469244300143, -0.4088618404389955, -0.3207830003431061, -3.32786119426557, 0.1261469244300134, -1.13659616495759, 0.3207830003431057, 1.646370287454335, -2.187967586461459, 0.8434791554040419, -0.8434791554040409, 4.524975432869133, 1.545458005396585 },
            { 0.4323172743199238, 0.8755880160435117, -2.096561281273991, 1.207430084781703, -0.2994334353593583, -0.2558016305833303, -3.263824756146822, -1.207430084781705, -0.4661434263205008, 0.2558016305833299, 0.2957594614825449, -1.603664751845981, 0.9992040740465346, -0.9992040740465337, 5.360386037420816, 0.7655768616798588 },
            { 0.3668980549672424, 0.9272962486228696, -3.062528201423044, 3.694127852964522, -0.1801600604889876, -0.1655276462224347, -1.301858135679437, -3.694127852964525, -0.07658471205688849, 0.1655276462224346, -0.32860056312524, -0.9655937404648725, 0.8135445056199921, -0.8135445056199917, 4.364386337102484, 0.256744772545876 },
            { -0.278615679429042, 0.9708384599421409, -3.9126626421409, 6.626101439135848, -0.07395391118672179, -0.07163462484400107, 1.759626854586576, -6.626101439135851, 0.03325901055825664, 0.07163462484400152, -0.2956286213265384, -0.3965941591865607, 0.4013371640538419, -0.4013371640538428, 2.153035787554329, 0.04069490062846561 },
            { -0.6408368989713341, 0.8101572730647374, -0.1013182151086676, -0.107511377264388, -1.283875986010025, -0.0225032435608308, -0.3198926965901757, 0.107511377264388, -4.053590470495813, 0.02250324356083084, 2.179694685039756, -2.349015059133158, 0.2295892688902743, -0.2295892688902746, 0.4212109116988443, 5.337466456505837 },
            { -0.1714107500994936, 0.830128546953268, -0.5229768868399267, -0.3583652824090254, -1.163305113688673, -0.1607318658735124, -1.384225084807483, 0.3583652824090252, -3.079057909007675, 0.1607318658735123, 1.470411733928637, -2.12912953078241, 1.039557841772362, -1.039557841772362, 1.90720197164741, 4.242363022696346 },
            { 0.325950427788195, 0.8627459056477532, -1.233446957137822, -0.1261469244300151, -0.9586925062607218, -0.3118368314327841, -2.28815490299438, 0.1261469244300145, -1.778460716101412, 0.3118368314327839, 0.5668556151153055, -1.755551948551253, 1.919518165209494, -1.919518165209494, 3.521601860132203, 2.737153222362134 },
            { 0.4952244484671177, 0.9027106143802333, -2.139601823708295, 1.207430084781701, -0.695414213797795, -0.3749799245674635, -2.032165674361516, -1.207430084781703, -0.6604952749075819, 0.3749799245674634, -0.1237395123106095, -1.274195550536741, 2.273903698266147, -2.273903698266148, 4.171767498069813, 1.355909488705377 },
            { 0.1914090215940468, 0.9432618359467713, -3.09757149010233, 3.694127852964521, -0.4146843376739034, -0.3072231109541975, -0.299050496269492, -3.694127852964524, -0.04003509115861209, 0.3072231109541977, -0.3744262718699026, -0.7602445856709157, 1.851395433709224, -1.851395433709224, 3.396621986371826, 0.4547194288325158 },
            { -0.4183499296694301, 0.9772800756463565, -3.92995017097369, 6.626101439135847, -0.1690416251747366, -0.1520086632203166, 2.25433116555184, -6.626101439135851, 0.09696708287080369, 0.1520086632203171, -0.2488883298184232, -0.3100418161585031, 0.9133290038518984, -0.9133290038518989, 1.675619005421855, 0.07207454230393329 },
            { 0.4091215024833695, 0.8722045591516226, -0.106417992073771, -0.1075113772643891, -2.235614750838295, 1.549167836755936, -0.1739561851314679, 0.1075113772643893, -3.654447954720777, -1.549167836755936, 0.3626149679306962, -1.643941029565687, 0.3806255573140889, -0.3806255573140896, 0.2803741772052392, 5.890062705559069 },
            { 0.4815273117423197, 0.8857913626150328, -0.5460681800915279, -0.3583652824090255, -2.013744526665454, 0.9945032683129276, -0.723438778805064, 0.3583652824090255, -2.667836974042435, -0.9945032683129271, 0.1137732121511943, -1.481091886508546, 1.723435441026384, -1.723435441026385, 1.269506958896593, 4.681581500707889 },
            { 0.4826265886697999, 0.9079056705083037, -1.276084466157101, -0.1261469244300149, -1.644313557311624, 0.296594163606494, -1.068029127663961, 0.1261469244300148, -1.376221418563485, -0.2965941636064939, -0.1807662953369049, -1.209765963841199, 3.182281449559193, -3.182281449559193, 2.344113593821064, 3.020534975875108 },
            { 0.2925135686978336, 0.9348774717481182, -2.190111160478865, 1.207430084781701, -1.180111718207068, -0.2186400789894123, -0.5867776789992036, -1.207430084781702, -0.3161772002558493, 0.2186400789894125, -0.3588266288871093, -0.8685644115588425, 3.769801030399031, -3.769801030399032, 2.776888839478071, 1.496288918462918 },
            { -0.1072713679992963, 0.9621111696307372, -3.138695815432385, 3.694127852964519, -0.6966134949490892, -0.3741732153688105, 0.8777736307119413, -3.694127852964521, 0.1948162525523877, 0.3741732153688108, -0.3419467644000475, -0.5128930372313932, 3.069343886020716, -3.069343886020717, 2.260922184720448, 0.5017972423967023 },
            { -0.5970315832676187, 0.9848574507059351, -3.950237592236542, 6.626101439135845, -0.2816930901248659, -0.2305852330650384, 2.834881159375387, -6.626101439135849, 0.2021565577449423, 0.2305852330650389, -0.1803651572314553, -0.2074607102068608, 1.5141664189383, -1.514166418938301, 1.115356432861159, 0.07953653237992425 },
            { 0.3179205603439715, 0.9324674485427275, -0.111261856705606, -0.1075113772643901, -3.218326280169961, 4.207844896470939, -0.03534292592717736, 0.1075113772643902, -1.022318615718526, -4.207844896470937, -0.350884067018315, -0.8995039418683837, 0.5240826811502128, -0.5240826811502142, 0.1466047826327833, 4.240644895888485 },
            { 0.2365537449236019, 0.9397174447288157, -0.5680007272303733, -0.358365282409025, -2.884086333552239, 3.018435819368076, -0.09581144554188012, 0.3583652824090252, -0.4864931811489553, -3.018435819368075, -0.3701066208227012, -0.806164568829716, 2.372995321428412, -2.372995321428413, 0.6638121727722541, 3.370579514701193 },
            { 0.07325201137093125, 0.9514809099244431, -1.316582378779789, -0.1261469244300138, -2.335904676163364, 1.472375625285543, 0.09086941436106949, 0.1261469244300139, 0.1612221865850722, -1.472375625285542, -0.371695163644276, -0.6530377576510982, 4.381677904206911, -4.381677904206912, 1.225712964418721, 2.174682489578292 },
            { -0.1765361283854379, 0.9657678270778772, -2.238085884007849, 1.207430084781701, -1.660487363656038, 0.2260286538609332, 0.7860791808046512, -1.207430084781701, 0.5832102136410419, -0.2260286538609327, -0.3249312058863215, -0.4643004928061179, 5.190632613731872, -5.190632613731874, 1.4520067032032, 1.077277150014997 },
            { -0.483694735026321, 0.9801278633069825, -3.177756477562776, 3.694127852964518, -0.9711026295104506, -0.3384383601662105, 1.995543448015678, -3.694127852964519, 0.6098256752375975, 0.338438360166211, -0.2248470387137222, -0.2715860895669394, 4.226174365454849, -4.22617436545485, 1.182213029547103, 0.3612769542728542 },
            { -0.7814449830670078, 0.9920725337888836, -3.969506968720783, 6.626101439135844, -0.3897547416546021, -0.2894753501139533, 3.386298525533846, -6.626101439135847, 0.3324911424478803, 0.2894753501139538, -0.1016096278313173, -0.1090179228905584, 2.084853161581002, -2.084853161581004, 0.5832084431869407, 0.05726359920672271 },
            { -0.4449936557652615, 0.9784527553025318, -0.1148899254439159, -0.1075113772643909, -4.004622683808974, 6.943200588586852, 0.06847880953769364, 0.107511377264391, 2.386908973744303, -6.94320058858685, -0.239238629025969, -0.2942204705113022, 0.6315324853533889, -0.6315324853533905, 0.04641111590622255, 1.617713710064671 },
            { -0.4990226123038835, 0.98078243120251, -0.5844282690123926, -0.3583652824090239, -3.575909067369811, 5.125717632918914, 0.374283257797718, 0.3583652824090242, 2.290106359135067, -5.125717632918912, -0.21902938044479, -0.262730438453837, 2.859517566550025, -2.859517566550028, 0.2101450112146754, 1.285802708234744 },
            { -0.5895769690872187, 0.984553878026852, -1.3469154334625, -0.126146924430012, -2.879673792941618, 2.734575962457613, 0.9588878027276952, 0.1261469244300124, 2.050079765429603, -2.734575962457612, -0.1833905930762795, -0.211586315863354, 5.280029347256246, -5.280029347256248, 0.388027630734806, 0.8295940275120158 },
            { -0.7043103662278563, 0.9891202736103197, -2.274019091868476, 1.207430084781702, -2.033053560964797, 0.7480894357499608, 1.814352973282399, -1.207430084781702, 1.622095780272446, -0.7480894357499599, -0.1354212657201758, -0.1493886416622879, 6.254839614070249, -6.254839614070252, 0.4596661185860801, 0.4109577806923528 },
            { -0.8248129763617847, 0.9936946831500935, -3.207013027434442, 3.694127852964517, -1.18097615368251, -0.2482887099393699, 2.832756301597725, -3.694127852964519, 1.043156860531069, 0.2482887099393707, -0.08209879543837437, -0.08678291134993402, 5.092643768908562, -5.092643768908564, 0.3742567258367204, 0.1378192931514413 },
            { -0.9289507568771633, 0.9974881061047847, -3.983939787914301, 6.626101439135843, -0.4713716854298596, -0.3235376225814702, 3.799311741215241, -6.626101439135845, 0.4495268689458899, 0.3235376225814707, -0.03389745063588889, -0.03463989859173239, 2.512299196455918, -2.512299196455919, 0.1846280466990648, 0.02184481648397023 },
            { -2.258535283870656, -0.09519415903653626, -0.004544075206450837, -0.1075113772643893, -0.005009356340142414, -0.1174972127670478, -0.4327344046122134, 0.1075113772643893, -0.4770433443236919, 0.1174972127670477, 2.11706555702867, 0.2366638858785223, 0.01997342096601926, -0.01997342096601887, 0.4372784798186644, 0.482052700663834 },
            { -1.316785740156486, -0.009891035232633998, -0.08479300959519312, -0.358365282409026, -0.01640862017752147, -0.105817017681584, -1.895161345113961, 0.3583652824090257, -0.3667399333453707, 0.1058170176815838, 1.410635497897494, -0.08395872250837436, 0.09043770422115111, -0.09043770422115036, 1.979954354709155, 0.3831485535228918 },
            { -0.2084477490763924, 0.1453085813673951, -0.424351129781856, -0.1261469244300138, -0.028693603176852, -0.08637949239123995, -3.231586228807274, 0.126146924430013, -0.2185120914579339, 0.08637949239123952, 0.513722262046056, -0.4505830943370596, 0.1669910120406338, -0.1669910120406325, 3.655937358589131, 0.2472056946347853 },
            { 0.4472518118467177, 0.3614223815311973, -1.181129000985285, 1.207430084781704, -0.03339710386421357, -0.06197308708326462, -3.149775301458712, -1.207430084781706, -0.08906171366886227, 0.06197308708326435, -0.1654920857397851, -0.6431821076381306, 0.1978212484459392, -0.1978212484459384, 4.330904302443999, 0.1224588175330754 },
            { 0.3537030347186507, 0.6087524891689275, -2.317190065560546, 3.694127852964523, -0.02698726182493588, -0.03657053775591457, -1.208999920185264, -3.694127852964526, -0.0140806737769571, 0.03657053775591459, -0.4011284132313604, -0.5613271106562182, 0.1610645852516659, -0.1610645852516654, 3.526189985745814, 0.04106793560189283 },
            { -0.2910706036990965, 0.8371645227047515, -3.544972993152038, 6.626101439135848, -0.01326540203857163, -0.01478438315682623, 1.805435599662089, -6.626101439135851, 0.006755997614235287, 0.01478438315682662, -0.2603509462444725, -0.2857429727611826, 0.07945626014049312, -0.07945626014049401, 1.739537393489954, 0.006509404424337038 },
            { -1.210419490701382, 0.001612528860254869, -0.01825039692887445, -0.1075113772643886, -0.1016225264853415, -0.3682117308030891, -0.365527494533679, 0.1075113772643885, -2.035343540151154, 0.3682117308030889, 1.328613166233136, -0.1198062043920075, 0.1008866527669778, -0.1008866527669776, 0.3837778914625536, 2.136966066636494 },
            { -0.567344385493409, 0.08410912224515202, -0.1468538990142379, -0.3583652824090257, -0.1435419201515666, -0.3554342461949695, -1.590855003919845, 0.3583652824090255, -1.554976636495331, 0.3554342461949693, 0.8172391207116553, -0.3340038574633979, 0.4568049348343118, -0.4568049348343113, 1.737708902934084, 1.698518556646896 },
            { 0.1532359968298497, 0.2308078912905159, -0.5389450463510507, -0.1261469244300145, -0.1840710405413057, -0.3207830003431059, -2.669692002013059, 0.1261469244300138, -0.9118053650598998, 0.3207830003431057, 0.1793664084423397, -0.5634102965627052, 0.8434791554040424, -0.8434791554040416, 3.208637048364111, 1.095876405601205 },
            { 0.497324674155852, 0.4301043103039874, -1.316879490565597, 1.207430084781703, -0.1880783325230208, -0.25580163058333, -2.484142965438428, -1.207430084781704, -0.3547883234841629, 0.2558016305833299, -0.2797390439288355, -0.6476899405310043, 0.9992040740465359, -0.9992040740465353, 3.801022456004028, 0.5428666560071834 },
            { 0.2642536539854511, 0.6534529395391917, -2.42771710183056, 3.694127852964522, -0.1428158799362927, -0.1655276462224344, -0.6670470360869514, -3.694127852964525, -0.03924053150419377, 0.1655276462224345, -0.3971550702453358, -0.5205515232793072, 0.8135445056199933, -0.8135445056199933, 3.094764137917514, 0.1820564114404863 },
            { -0.3657334462288282, 0.85658509663605, -3.599498107612836, 6.626101439135848, -0.06803473432647311, -0.0716346248440009, 2.07279138911464, -6.626101439135851, 0.03917818741850543, 0.07163462484400135, -0.2356464510330568, -0.2552051993741652, 0.4013371640538428, -0.4013371640538437, 1.526706718498201, 0.02885654690796817 },
            { -0.0568947526571625, 0.1769589681250645, -0.04005201606877717, -0.1075113772643885, -0.5075279066734087, -0.02250324356083121, -0.258626497550287, 0.1075113772643886, -3.277242391159197, 0.02250324356083125, 0.3786120874717403, -0.498676302939641, 0.2295892688902751, -0.2295892688902752, 0.2986785136190644, 3.784770297832605 },
            { 0.2164851818698336, 0.2506082551572162, -0.2455695064542934, -0.3583652824090255, -0.5462426157118512, -0.1607318658735125, -1.10681770442185, 0.3583652824090254, -2.461995411030853, 0.1607318658735124, 0.1150995781939306, -0.5821930152209795, 1.039557841772362, -1.039557841772363, 1.352387210876144, 3.008238026742704 },
            { 0.4651377828347785, 0.3777607370139305, -0.7212210045101616, -0.1261469244300149, -0.5605666043282181, -0.311836831432784, -1.775928950366719, 0.1261469244300145, -1.380334814168908, 0.3118368314327838, -0.1965042636116842, -0.6463942562370243, 1.919518165209494, -1.919518165209494, 2.497149954876882, 1.940901418497126 },
            { 0.4464900798809367, 0.5447785580164282, -1.532807624445889, 1.207430084781702, -0.4981937280320017, -0.3749799245674634, -1.425371475099109, -1.207430084781703, -0.4632747891417882, 0.3749799245674634, -0.3842028315020526, -0.6070658063953125, 2.273903698266148, -2.273903698266149, 2.958179099545, 0.9614685171737898 },
            { 0.07821471106248912, 0.7263746188062195, -2.603524178172511, 3.694127852964521, -0.3485442395416019, -0.3072231109541975, 0.1949968156603274, -3.694127852964523, 0.02610500697368995, 0.3072231109541977, -0.3649248679473387, -0.4396644619213702, 1.851395433709225, -1.851395433709225, 2.408527362512187, 0.3224392325679122 },
            { -0.4914299064747577, 0.8877644281612075, -3.686227122377558, 6.626101439135846, -0.1585581995752144, -0.1520086632203166, 2.498054214147971, -6.62610143913585, 0.1074505084703254, 0.152008663220317, -0.1922440236929168, -0.204090497993533, 0.9133290038518984, -0.9133290038518997, 1.188172908229591, 0.05110769110488921 },
            { 0.4923913402203182, 0.4161904484303368, -0.06563685447925605, -0.1075113772643895, -1.378890140783031, 1.549167836755936, -0.1331750475369543, 0.1075113772643896, -2.797723344665514, -1.549167836755935, -0.2599388182644873, -0.6486429703861669, 0.3806255573140888, -0.3806255573140891, 0.1988119020162104, 4.176613485448544 },
            { 0.4969660812089811, 0.4725926314404956, -0.3614151621709162, -0.3583652824090256, -1.332796583301377, 0.9945032683129273, -0.538785760884453, 0.3583652824090257, -1.986889030678359, -0.9945032683129267, -0.3303030579566659, -0.63925565469281, 1.723435441026384, -1.723435441026384, 0.9002009230553696, 3.319685613979736 },
            { 0.4186476104774463, 0.5673717370166228, -0.9351271784365163, -0.1261469244300149, -1.204969058156711, 0.2965941636064939, -0.7270718399433767, 0.1261469244300148, -0.9368769194085711, -0.2965941636064937, -0.393342272443879, -0.5926770750501896, 3.182281449559193, -3.182281449559194, 1.662199018379894, 2.141845977565282 },
            { 0.1824852303054029, 0.6878515093369473, -1.786205611914276, 1.207430084781701, -0.9624726871335477, -0.2186400789894122, -0.1828721304346147, -1.207430084781702, -0.09853816918232869, 0.2186400789894125, -0.3857959145134187, -0.4845408251289314, 3.769801030399031, -3.769801030399032, 1.969077742348893, 1.061010856315877 },
            { -0.2086381490432974, 0.8148007014423291, -2.809838929878046, 3.694127852964519, -0.6236258090262596, -0.3741732153688104, 1.206630516266281, -3.694127852964521, 0.2678039384752177, 0.3741732153688108, -0.2865236705004537, -0.319638881898578, 3.069343886020717, -3.069343886020718, 1.603208413611769, 0.3558218705510425 },
            { -0.6498007290260892, 0.9248060776822036, -3.78800616062313, 6.626101439135845, -0.2701242990788851, -0.2305852330650384, 2.997112590988799, -6.626101439135849, 0.2137253487909231, 0.2305852330650389, -0.1348782387382465, -0.1401271099178678, 1.5141664189383, -1.514166418938303, 0.7908935696343354, 0.05639895028796259 },
            { 0.2097722488902515, 0.676871524024155, -0.08993781797936901, -0.1075113772643904, -2.601513688109778, 4.207844896470938, -0.01401888720094085, 0.1075113772643905, -0.405506023658342, -4.207844896470937, -0.3901833686294477, -0.4964604042849586, 0.5240826811502128, -0.5240826811502137, 0.1039567051803098, 3.007019711768119 },
            { 0.1240597867820572, 0.710028126850871, -0.4714475573750679, -0.358365282409025, -2.393826965402006, 3.018435819368075, 0.0007417243134249241, 0.3583652824090252, 0.003766187001277184, -3.018435819368074, -0.3748080224175562, -0.4592798912153718, 2.372995321428411, -2.372995321428413, 0.4707058330616434, 2.390060778400728 },
            { -0.03799104476891581, 0.7646239436047702, -1.138299308806659, -0.1261469244300136, -2.019591573737551, 1.472375625285542, 0.269152484334199, 0.1261469244300138, 0.4775352890108857, -1.472375625285542, -0.3360660176842548, -0.3905668811515994, 4.38167790420691, -4.381677904206912, 0.8691468244724615, 1.542056284726666 },
            { -0.2726033746696097, 0.8322435552047383, -2.026887813836995, 1.207430084781701, -1.503794660639994, 0.2260286538609333, 0.9972772509755041, -1.207430084781701, 0.7399029166570849, -0.2260286538609328, -0.2663209851911166, -0.2933191953440119, 5.190632613731871, -5.190632613731872, 1.029610562861493, 0.7638917439829105 },
            { -0.5496213804355995, 0.9016395849690618, -3.00580058381905, 3.694127852964518, -0.9185539771031952, -0.3384383601662106, 2.167499341759404, -3.694127852964519, 0.662374327644853, 0.3384383601662111, -0.1714820262330861, -0.1805361783003763, 4.226174365454849, -4.226174365454851, 0.8383012420596494, 0.2561796494583432 },
            { -0.811085766036752, 0.9604406902078821, -3.884677816460874, 6.626101439135844, -0.381425605420715, -0.2894753501139531, 3.471127677793755, -6.626101439135847, 0.3408202786817673, 0.2894753501139536, -0.07395990547283082, -0.07539501869829934, 2.084853161581002, -2.084853161581004, 0.4135501386671228, 0.04060532673894851 },
            { -0.5151981526926712, 0.8934712849905205, -0.1081393105244084, -0.107511377264391, -3.769322107784856, 6.943200588586851, 0.0752294244572011, 0.1075113772643911, 2.622209549768421, -6.94320058858685, -0.1838111054831598, -0.1944620268146903, 0.631532485353389, -0.6315324853533906, 0.03290988606720769, 1.147112558016435 },
            { -0.5632232344827319, 0.9048366700171602, -0.5538621423363508, -0.3583652824090239, -3.388885791237159, 5.125717632918914, 0.4048493844737594, 0.3583652824090242, 2.47712963526772, -5.125717632918912, -0.1665738972724429, -0.1750395382619858, 2.859517566550025, -2.859517566550027, 0.149012757862592, 0.9117561559694387 },
            { -0.6432384106744112, 0.9233145264619549, -1.290475827086461, -0.1261469244300119, -2.759007230418674, 2.734575962457613, 1.015327409103735, 0.1261469244300123, 2.170746327952547, -2.734575962457612, -0.1373070614667918, -0.142769054320752, 5.280029347256246, -5.280029347256248, 0.2751484179827273, 0.5882609024661281 },
            { -0.7438597492692897, 0.9458170049773236, -2.207159485122762, 1.207430084781702, -1.97327870592284, 0.7480894357499608, 1.881212580028113, -1.207430084781702, 1.681870635314402, -0.7480894357499599, -0.09962576827030516, -0.1023314874377289, 6.254839614070249, -6.254839614070252, 0.3259469050946507, 0.2914080706084395 },
            { -0.8487477966164053, 0.9685009553309807, -3.152576434221197, 3.694127852964517, -1.160929986759394, -0.2482887099393701, 2.88719289481097, -3.694127852964519, 1.063203027454185, 0.2482887099393707, -0.05942288274824623, -0.06033027596632903, 5.092643768908563, -5.092643768908564, 0.2653835394102295, 0.09772695930521001 },
            { -0.938819918223333, 0.9874194037213062, -3.957085168664789, 6.626101439135843, -0.4681943012797224, -0.3235376225814702, 3.826166360464752, -6.626101439135845, 0.4527042530960271, 0.3235376225814708, -0.0242278303270283, -0.02437165517094492, 2.512299196455918, -2.512299196455919, 0.130918808200042, 0.01549004818369613 },
            { -0.358990160898333, -0.4904306359360823, 0.1351919934217871, -0.1075113772643891, 0.1490346965259478, -0.1174972127670475, -0.292998335983975, 0.107511377264389, -0.3229992914576023, 0.1174972127670474, -2.077261165815522, 2.926681962649937, 0.01997342096601978, -0.01997342096601948, 0.1578063425621877, 0.1739645949316542 },
            { 0.01914245142577784, -0.4979174640291159, 0.5479182953497785, -0.3583652824090257, 0.1060297687230435, -0.1058170176815838, -1.262450040168989, 0.3583652824090256, -0.2443015444448055, 0.1058170176815838, -1.749247314063515, 2.228022326666854, 0.09043770422115092, -0.0904377042211504, 0.7145317448192107, 0.1382717757217617 },
            { 0.4001325007598043, -0.4229183491114283, 0.743934841785299, -0.1261469244300139, 0.0503030854438705, -0.08637949239123971, -2.063300257240119, 0.1261469244300134, -0.1395154028372111, 0.08637949239123952, -1.271665168105161, 1.294451016456784, 0.1669910120406341, -0.1669910120406332, 1.319365415454821, 0.08921231739334026 },
            { 0.4803118287087437, -0.1884751098418225, 0.2028484156020079, 1.207430084781704, 0.005735655968904407, -0.06197308708326433, -1.765797884871419, -1.207430084781705, -0.04992895383574399, 0.06197308708326427, -0.7815096108368565, 0.4896728919699349, 0.1978212484459408, -0.1978212484459405, 1.562949469269412, 0.04419329786683955 },
            { 0.1438928252088835, 0.2034409520363504, -1.190365973854221, 3.694127852964523, -0.01386365265472062, -0.03657053775591421, -0.08217582847893867, -3.694127852964526, -0.0009570646067412203, 0.03657053775591435, -0.3868195313444026, 0.03948575409916841, 0.1610645852516683, -0.1610645852516686, 1.272541802333162, 0.01482071726146218 },
            { -0.4500857687921526, 0.6471617467581133, -2.989088979150469, 6.626101439135848, -0.01118526632335159, -0.01478438315682595, 2.361319613663658, -6.626101439135851, 0.00883613332945532, 0.01478438315682645, -0.1323233920049986, -0.06475258596096228, 0.07945626014049489, -0.07945626014049534, 0.6277693654868157, 0.002349132993896668 },
            { 0.05966724712072961, -0.4959050550982904, 0.1043891022791608, -0.1075113772643885, 0.5812632104655566, -0.3682117308030888, -0.2428879953256433, 0.1075113772643884, -1.352457803200255, 0.3682117308030888, -1.709077893369634, 2.145315701347195, 0.1008866527669785, -0.1008866527669782, 0.1384988930464826, 0.7711945927346984 },
            { 0.2895474800957153, -0.4639388416873151, 0.4084458052314315, -0.3583652824090256, 0.3992341746070278, -0.3554342461949694, -1.035555299674176, 0.3583652824090256, -1.012200541736736, 0.3554342461949694, -1.444592574399061, 1.618983935990661, 0.4568049348343117, -0.4568049348343113, 0.6271094944427444, 0.6129663671297074 },
            { 0.4837418728029613, -0.345146986101086, 0.4864022951857486, -0.1261469244300145, 0.1661256137387354, -0.3207830003431059, -1.644344660476261, 0.1261469244300141, -0.5616087107798582, 0.3207830003431056, -1.057600220895485, 0.9190053341936102, 0.8434791554040426, -0.8434791554040422, 1.157942365290513, 0.3954830970411227 },
            { 0.4254745384587085, -0.09078124167341792, -0.1022303384053568, 1.207430084781703, -0.01460066142596528, -0.2558016305833298, -1.269493813278189, -1.207430084781704, -0.1813106523871068, 0.2558016305833296, -0.6569243245119532, 0.3222310277266626, 0.9992040740465369, -0.999204074046537, 1.371724151683547, 0.1959113138130722 },
            { 0.04628721040880401, 0.2848974413704952, -1.438758820271424, 3.694127852964521, -0.08463820054578503, -0.1655276462224342, 0.3219112454721831, -3.694127852964524, 0.01893714788631357, 0.1655276462224343, -0.3297776812607376, -0.001406970518561729, 0.8135445056199953, -0.8135445056199959, 1.116847574799244, 0.06570105265947167 },
            { -0.5106548454704412, 0.6877948312376283, -3.111625951453379, 6.626101439135847, -0.05881337858818492, -0.07163462484400079, 2.560663545274096, -6.626101439135851, 0.04839954315679362, 0.07163462484400129, -0.1145939179482521, -0.06254606781893496, 0.4013371640538446, -0.4013371640538455, 0.5509624061792885, 0.01041383543139193 },
            { 0.4400449426948964, -0.3967158158569031, 0.05539325097057363, -0.1075113772643886, 0.7019277296967551, -0.02250324356083111, -0.1631812305109363, 0.1075113772643886, -2.067786754789033, 0.0225032435608312, -1.188942087214345, 1.145612960376353, 0.2295892688902753, -0.2295892688902753, 0.1077879795403624, 1.365859025092278 },
            { 0.492698194012675, -0.3241321420939847, 0.1865973639329937, -0.3583652824090255, 0.4150655088711805, -0.1607318658735127, -0.6746508340345637, 0.3583652824090255, -1.500687286447821, 0.1607318658735127, -1.012066843342954, 0.8435007914242638, 1.039557841772362, -1.039557841772362, 0.4880534701015701, 1.085621777576641 },
            { 0.4702979942995489, -0.1661102999415646, 0.07676456663979558, -0.1261469244300147, 0.05966500169143479, -0.3118368314327841, -0.9779433792167627, 0.1261469244300147, -0.7601032081492556, 0.3118368314327841, -0.7506957234967208, 0.4465080291387368, 1.919518165209494, -1.919518165209494, 0.9011788125769677, 0.7004382064578207 },
            { 0.2657091263581487, 0.09202281212657029, -0.5874962570992424, 1.207430084781702, -0.1909482611263285, -0.3749799245674633, -0.4800601077524626, -1.207430084781703, -0.1560293222361144, 0.3749799245674634, -0.4753966703463349, 0.1176647318616158, 2.273903698266149, -2.27390369826615, 1.067556364851706, 0.3469775833624432 },
            { -0.1332937772822717, 0.4236563386042763, -1.833858712447866, 3.694127852964521, -0.2455060320605677, -0.3072231109541973, 0.9646622813849719, -3.694127852964523, 0.1291432144547239, 0.3072231109541976, -0.2446261714597601, -0.04573638986224457, 1.851395433709226, -1.851395433709227, 0.8691964310628971, 0.1163628176058443 },
            { -0.6108534562604548, 0.7538838229146919, -3.30653633330548, 6.626101439135846, -0.1422263008853335, -0.1520086632203164, 2.877745003220049, -6.62610143913585, 0.1237824071602068, 0.152008663220317, -0.08727752936803784, -0.05575283728619901, 0.9133290038518997, -0.9133290038519015, 0.428791330085436, 0.01844389372512743 },
            { 0.4392272888395431, -0.1113356234527032, -0.002104815134972737, -0.1075113772643896, -0.04421767101435242, 1.549167836755935, -0.06964300819267166, 0.1075113772643897, -1.463050874896836, -1.549167836755934, -0.681136787385977, 0.3532451219991377, 0.380625557314089, -0.3806255573140891, 0.07174782332764408, 1.507268545911188 },
            { 0.3756532195513171, -0.02575602267585457, -0.07374827763675387, -0.3583652824090255, -0.2719627252720052, 0.9945032683129267, -0.2511188763502911, 0.3583652824090257, -0.9260551726489867, -0.994503268312926, -0.5860259887576887, 0.2361287918822264, 1.723435441026383, -1.723435441026383, 0.3248671539870449, 1.198017897920992 },
            { 0.2251876008755339, 0.1306499582655356, -0.4039573019714185, -0.1261469244300145, -0.5205239040382277, 0.2965941636064939, -0.1959019634782789, 0.1261469244300147, -0.2524317652900883, -0.2965941636064934, -0.4431440319911417, 0.08730647285007243, 3.182281449559192, -3.182281449559192, 0.5998592654496983, 0.7729556693283163 },
            { -0.03538574631496118, 0.34947542604814, -1.156970021236895, 1.207430084781701, -0.623417616563998, -0.2186400789894125, 0.4463634602427663, -1.207430084781701, 0.2405169013872213, 0.2186400789894128, -0.2884300445614986, -0.02565963517168034, 3.769801030399032, -3.769801030399033, 0.71060656099413, 0.3829007151767773 },
            { -0.3821361954125886, 0.6008899182848353, -2.29752000441268, 3.694127852964519, -0.5099198947919988, -0.3741732153688105, 1.718949441731645, -3.69412785296452, 0.3815098527094785, 0.3741732153688108, -0.1534383609193644, -0.06531536195288226, 3.069343886020717, -3.06934388602072, 0.5785705626810387, 0.1284100420825212 },
            { -0.7344782576305999, 0.8337229958451481, -3.535269373370555, 6.626101439135845, -0.2521015333775695, -0.2305852330650383, 3.249849378241374, -6.626101439135848, 0.231748114492239, 0.2305852330650388, -0.05660626336628022, -0.04263847484826766, 1.514166418938301, -1.514166418938303, 0.2854199951291853, 0.02035341888533125 },
            { -0.008713797996016445, 0.3286884078080062, -0.05671756598922956, -0.1075113772643905, -1.640594886470261, 4.207844896470937, 0.01920136478919726, 0.1075113772643905, 0.5554127779811742, -4.207844896470935, -0.3013943910730608, -0.01858021873892926, 0.5240826811502118, -0.5240826811502127, 0.03751620120003224, 1.085182108489086 },
            { -0.09093674837886004, 0.391944845279303, -0.3210294928508529, -0.358365282409025, -1.630062654167739, 3.018435819368074, 0.1511597888376393, 0.3583652824090253, 0.7675304982355425, -3.018435819368074, -0.2628982336672897, -0.03810986323315332, 2.372995321428411, -2.372995321428412, 0.169869704013214, 0.8625321559321963 },
            { -0.2369372377734339, 0.4991666532209896, -0.8605560263957222, -0.1261469244300134, -1.526814332743363, 1.472375625285542, 0.5468957667451362, 0.1261469244300137, 0.9703125300050724, -1.472375625285541, -0.2036309220589996, -0.05859849338855617, 4.38167790420691, -4.381677904206912, 0.3136602596505868, 0.5565018027382915 },
            { -0.4349672958233302, 0.6369318884502355, -1.697866974915222, 1.207430084781701, -1.259686537125645, 0.226028653860933, 1.326298089897278, -1.207430084781701, 0.9840110401714351, -0.2260286538609325, -0.1369048096381789, -0.06505978298872661, 5.190632613731872, -5.190632613731874, 0.3715688850179454, 0.2756754969542112 },
            { -0.6565871030474115, 0.7836244669619779, -2.737914270410339, 3.694127852964518, -0.8366895846622178, -0.3384383601662108, 2.435385655168115, -3.694127852964519, 0.7442387200858307, 0.3384383601662113, -0.07556569901654608, -0.0514716648980201, 4.226174365454849, -4.226174365454851, 0.3025286152422288, 0.09245086457638843 },
            { -0.8579377232299543, 0.9118373670836173, -3.752524341672968, 6.626101439135844, -0.3684498268591478, -0.2894753501139531, 3.603281152581661, -6.626101439135847, 0.3537960572433345, 0.2894753501139536, -0.02885931421069088, -0.02504032964297187, 2.084853161581003, -2.084853161581004, 0.1492431890913107, 0.01465376961581441 },
            { -0.629579538575613, 0.7660918579612265, -0.09762267567894128, -0.107511377264391, -3.402752503907311, 6.943200588586851, 0.08574605930266765, 0.107511377264391, 2.988779153645965, -6.943200588586849, -0.08242776074657074, -0.05408455863904348, 0.6315324853533887, -0.6315324853533895, 0.01187661637627382, 0.4139733502613459 },
            { -0.6672231243749919, 0.7905055846829955, -0.5062438443405179, -0.3583652824090239, -3.097526333448152, 5.125717632918914, 0.4524676824695922, 0.3583652824090242, 2.768489093056726, -5.125717632918912, -0.07290520282208729, -0.05037725748591674, 2.859517566550025, -2.859517566550027, 0.0537761618709262, 0.3290372403914264 },
            { -0.7294063027626975, 0.830480994318026, -1.202549802841841, -0.1261469244300118, -2.571023440609476, 2.734575962457613, 1.103253433348355, 0.1261469244300122, 2.358730117761745, -2.734575962457612, -0.05780480943414813, -0.0432698821211808, 5.280029347256246, -5.280029347256248, 0.09929636949348791, 0.212293322847732 },
            { -0.8067459269812264, 0.8796288547905173, -2.103000370962016, 1.207430084781702, -1.880156770971342, 0.7480894357499608, 1.985371694188859, -1.207430084781702, 1.7749925702659, -0.7480894357499599, -0.0400415630332381, -0.03284136477605297, 6.254839614070249, -6.254839614070252, 0.1176286767731598, 0.1051642007054439 },
            { -0.8864622633718017, 0.9296791351347384, -3.067770860228137, 3.694127852964517, -1.129700503209313, -0.2482887099393699, 2.97199846880403, -3.694127852964519, 1.094432511004267, 0.2482887099393705, -0.02281576943369554, -0.020401102329241, 5.092643768908563, -5.092643768908566, 0.09577239142410958, 0.03526799220504738 },
            { -0.9542625388118933, 0.9718012639282496, -3.915248946642253, 6.626101439135843, -0.4632443242377488, -0.3235376225814702, 3.868002582487289, -6.626101439135845, 0.4576542301380008, 0.3235376225814707, -0.00896072894296418, -0.008577996173392166, 2.512299196455918, -2.512299196455919, 0.0472463641549689, 0.005590094099749041 },
            { 0.490430635936087, 0.3589901608983357, 0.292998335983969, -0.1075113772643881, 0.3229992914576012, -0.1174972127670472, -0.1351919934217906, 0.107511377264388, -0.1490346965259478, 0.1174972127670471, -2.926681962649944, 2.077261165815521, 0.019973420966022, -0.01997342096602187, -0.1578063425621785, -0.1739645949316536 },
            { 0.497917464029119, -0.01914245142577778, 1.262450040168988, -0.3583652824090252, 0.2443015444448038, -0.1058170176815837, -0.5479182953497788, 0.3583652824090253, -0.1060297687230445, 0.1058170176815836, -2.228022326666858, 1.749247314063518, 0.09043770422115092, -0.09043770422115079, -0.7145317448192097, -0.1382717757217593 },
            { 0.4229183491114304, -0.4001325007598043, 2.063300257240122, -0.1261469244300138, 0.1395154028372092, -0.08637949239123958, -0.7439348417852967, 0.1261469244300139, -0.0503030854438718, 0.08637949239123943, -1.294451016456788, 1.271665168105162, 0.1669910120406332, -0.1669910120406329, -1.319365415454825, -0.0892123173933372 },
            { 0.1884751098418245, -0.4803118287087434, 1.765797884871422, 1.207430084781704, 0.04992895383574249, -0.06197308708326414, -0.2028484156020054, -1.207430084781704, -0.005735655968906364, 0.06197308708326425, -0.4896728919699383, 0.7815096108368573, 0.1978212484459412, -0.1978212484459412, -1.562949469269416, -0.0441932978668358 },
            { -0.2034409520363491, -0.1438928252088829, 0.08217582847894356, 3.694127852964523, 0.0009570646067403321, -0.03657053775591393, 1.190365973854227, -3.694127852964525, 0.01386365265471928, 0.03657053775591423, -0.03948575409917077, 0.3868195313444029, 0.1610645852516701, -0.1610645852516708, -1.272541802333168, -0.01482071726145916 },
            { -0.647161746758115, 0.4500857687921507, -2.361319613663641, 6.626101439135848, -0.008836133329455542, -0.01478438315682573, 2.989088979150487, -6.626101439135851, 0.01118526632335104, 0.01478438315682623, 0.06475258596096339, 0.1323233920050008, 0.07945626014049667, -0.07945626014049756, -0.6277693654868418, -0.002349132993894896 },
            { 0.4959050550982932, -0.05966724712072941, 0.2428879953256383, -0.107511377264388, 1.352457803200254, -0.3682117308030882, -0.1043891022791641, 0.1075113772643879, -0.5812632104655557, 0.3682117308030882, -2.1453157013472, 1.709077893369637, 0.1008866527669795, -0.1008866527669792, -0.1384988930464746, -0.7711945927346979 },
            { 0.4639388416873167, -0.2895474800957159, 1.035555299674174, -0.3583652824090252, 1.012200541736735, -0.3554342461949691, -0.4084458052314323, 0.3583652824090254, -0.3992341746070275, 0.3554342461949691, -1.618983935990664, 1.444592574399064, 0.4568049348343114, -0.4568049348343112, -0.6271094944427424, -0.6129663671297068 },
            { 0.3451469861010872, -0.4837418728029618, 1.644344660476261, -0.1261469244300142, 0.561608710779858, -0.3207830003431056, -0.4864022951857474, 0.1261469244300142, -0.1661256137387351, 0.3207830003431057, -0.9190053341936127, 1.057600220895488, 0.8434791554040419, -0.8434791554040419, -1.157942365290514, -0.3954830970411223 },
            { 0.09078124167341924, -0.4254745384587085, 1.26949381327819, 1.207430084781703, 0.1813106523871064, -0.2558016305833297, 0.1022303384053581, -1.207430084781703, 0.01460066142596456, 0.2558016305833298, -0.322231027726665, 0.6569243245119543, 0.9992040740465378, -0.9992040740465378, -1.371724151683547, -0.1959113138130704 },
            { -0.2848974413704941, -0.04628721040880368, -0.3219112454721795, 3.694127852964522, -0.01893714788631462, -0.1655276462224339, 1.438758820271428, -3.694127852964523, 0.0846382005457843, 0.1655276462224341, 0.001406970518559814, 0.3297776812607379, 0.8135445056199975, -0.8135445056199979, -1.116847574799246, -0.06570105265946909 },
            { -0.6877948312376303, 0.5106548454704392, -2.560663545274077, 6.626101439135847, -0.04839954315679362, -0.07163462484400063, 3.111625951453397, -6.626101439135851, 0.05881337858818458, 0.07163462484400107, 0.0625460678189364, 0.1145939179482549, 0.4013371640538463, -0.4013371640538472, -0.5509624061793156, -0.01041383543139031 },
            { 0.3967158158569044, -0.4400449426948962, 0.1631812305109333, -0.1075113772643884, 2.067786754789033, -0.0225032435608308, -0.05539325097057635, 0.1075113772643885, -0.7019277296967547, 0.02250324356083106, -1.145612960376356, 1.188942087214348, 0.2295892688902759, -0.2295892688902754, -0.1077879795403574, -1.365859025092278 },
            { 0.3241321420939853, -0.4926981940126751, 0.6746508340345626, -0.3583652824090253, 1.500687286447821, -0.1607318658735126, -0.1865973639329943, 0.3583652824090254, -0.4150655088711793, 0.1607318658735128, -0.8435007914242656, 1.012066843342956, 1.039557841772362, -1.039557841772361, -0.4880534701015687, -1.085621777576642 },
            { 0.1661102999415649, -0.4702979942995493, 0.9779433792167629, -0.1261469244300146, 0.760103208149256, -0.3118368314327841, -0.07676456663979503, 0.1261469244300149, -0.05966500169143351, 0.3118368314327842, -0.4465080291387379, 0.7506957234967226, 1.919518165209494, -1.919518165209494, -0.9011788125769677, -0.700438206457822 },
            { -0.0920228121265704, -0.2657091263581492, 0.4800601077524649, 1.207430084781701, 0.1560293222361149, -0.3749799245674634, 0.5874962570992444, -1.207430084781702, 0.1909482611263288, 0.3749799245674635, -0.1176647318616162, 0.475396670346336, 2.27390369826615, -2.27390369826615, -1.067556364851708, -0.3469775833624428 },
            { -0.4236563386042774, 0.1332937772822703, -0.9646622813849635, 3.694127852964521, -0.1291432144547239, -0.307223110954197, 1.833858712447874, -3.694127852964523, 0.2455060320605676, 0.3072231109541974, 0.04573638986224535, 0.2446261714597618, 1.851395433709228, -1.851395433709228, -0.8691964310629081, -0.1163628176058427 },
            { -0.7538838229146945, 0.6108534562604521, -2.87774500322003, 6.626101439135846, -0.1237824071602068, -0.1520086632203162, 3.3065363333055, -6.62610143913585, 0.1422263008853334, 0.1520086632203168, 0.05575283728620173, 0.0872775293680409, 0.9133290038519011, -0.9133290038519029, -0.4287913300854652, -0.01844389372512573 },
            { 0.1113356234527025, -0.4392272888395443, 0.06964300819266889, -0.1075113772643897, 1.463050874896838, 1.549167836755935, 0.002104815134970517, 0.1075113772643899, 0.04421767101435403, -1.549167836755934, -0.3532451219991377, 0.6811367873859797, 0.3806255573140886, -0.3806255573140883, -0.07174782332764, -1.507268545911191 },
            { 0.02575602267585499, -0.3756532195513175, 0.25111887635029, -0.3583652824090253, 0.9260551726489865, 0.9945032683129262, 0.07374827763675268, 0.3583652824090257, 0.2719627252720053, -0.9945032683129256, -0.2361287918822277, 0.5860259887576901, 1.723435441026383, -1.723435441026382, -0.3248671539870431, -1.198017897920991 },
            { -0.1306499582655352, -0.2251876008755337, 0.1959019634782793, -0.1261469244300142, 0.2524317652900882, 0.2965941636064935, 0.4039573019714194, 0.1261469244300146, 0.5205239040382281, -0.2965941636064931, -0.08730647285007347, 0.4431440319911424, 3.182281449559191, -3.182281449559192, -0.5998592654496983, -0.7729556693283156 },
            { -0.3494754260481407, 0.03538574631496053, -0.4463634602427626, 1.207430084781701, -0.2405169013872215, -0.2186400789894124, 1.156970021236899, -1.207430084781702, 0.6234176165639984, 0.2186400789894128, 0.02565963517168084, 0.2884300445614995, 3.769801030399032, -3.769801030399033, -0.7106065609941346, -0.3829007151767759 },
            { -0.6008899182848371, 0.3821361954125869, -1.718949441731636, 3.694127852964519, -0.381509852709479, -0.3741732153688103, 2.29752000441269, -3.69412785296452, 0.5099198947919983, 0.3741732153688108, 0.06531536195288373, 0.1534383609193667, 3.069343886020718, -3.069343886020721, -0.578570562681051, -0.1284100420825183 },
            { -0.8337229958451515, 0.7344782576305964, -3.249849378241354, 6.626101439135845, -0.2317481144922391, -0.2305852330650381, 3.535269373370575, -6.626101439135848, 0.252101533377569, 0.2305852330650387, 0.04263847484827132, 0.05660626336628422, 1.514166418938302, -1.514166418938304, -0.285419995129217, -0.02035341888532928 },
            { -0.3286884078080112, 0.008713797996010839, -0.0192013647892017, -0.1075113772643906, -0.5554127779811689, 4.207844896470937, 0.05671756598922534, 0.1075113772643908, 1.640594886470265, -4.207844896470935, 0.01858021873893382, 0.3013943910730663, 0.5240826811502116, -0.5240826811502131, -0.03751620120002408, -1.085182108489096 },
            { -0.3919448452793057, 0.09093674837885748, -0.1511597888376409, -0.3583652824090249, -0.7675304982355393, 3.018435819368074, 0.3210294928508517, 0.3583652824090252, 1.630062654167742, -3.018435819368074, 0.03810986323315554, 0.2628982336672921, 2.372995321428411, -2.372995321428411, -0.1698697040132107, -0.8625321559322022 },
            { -0.4991666532209899, 0.2369372377734338, -0.5468957667451348, -0.1261469244300132, -0.9703125300050726, 1.472375625285542, 0.8605560263957239, 0.1261469244300136, 1.526814332743364, -1.472375625285541, 0.05859849338855615, 0.2036309220589999, 4.38167790420691, -4.381677904206912, -0.3136602596505885, -0.5565018027382904 },
            { -0.6369318884502366, 0.4349672958233293, -1.326298089897272, 1.207430084781701, -0.9840110401714359, 0.226028653860933, 1.697866974915228, -1.207430084781702, 1.259686537125644, -0.2260286538609325, 0.0650597829887275, 0.1369048096381798, 5.190632613731872, -5.190632613731874, -0.3715688850179539, -0.2756754969542073 },
            { -0.7836244669619803, 0.6565871030474091, -2.435385655168103, 3.694127852964518, -0.7442387200858316, -0.3384383601662106, 2.737914270410351, -3.694127852964519, 0.8366895846622167, 0.3384383601662111, 0.05147166489802246, 0.07556569901654905, 4.22617436545485, -4.226174365454851, -0.3025286152422457, -0.09245086457638348 },
            { -0.9118373670836217, 0.8579377232299499, -3.60328115258164, 6.626101439135844, -0.3537960572433347, -0.2894753501139529, 3.752524341672989, -6.626101439135847, 0.3684498268591474, 0.2894753501139535, 0.02504032964297648, 0.02885931421069537, 2.084853161581003, -2.084853161581004, -0.1492431890913451, -0.01465376961581191 },
            { -0.7660918579612411, 0.6295795385755986, -0.08574605930267543, -0.1075113772643911, -2.988779153645948, 6.943200588586851, 0.09762267567893357, 0.1075113772643911, 3.40275250390733, -6.943200588586849, 0.05408455863905758, 0.08242776074658431, 0.6315324853533888, -0.6315324853533895, -0.01187661637625805, -0.4139733502613813 },
            { -0.7905055846830028, 0.6672231243749845, -0.4524676824695955, -0.3583652824090239, -2.768489093056718, 5.125717632918914, 0.5062438443405148, 0.3583652824090242, 3.097526333448161, -5.125717632918912, 0.05037725748592353, 0.07290520282209415, 2.859517566550025, -2.859517566550026, -0.05377616187091901, -0.3290372403914427 },
            { -0.8304809943180281, 0.7294063027626955, -1.103253433348352, -0.1261469244300118, -2.358730117761743, 2.734575962457613, 1.202549802841844, 0.1261469244300122, 2.571023440609478, -2.734575962457612, 0.04326988212118253, 0.05780480943414969, 5.280029347256246, -5.280029347256248, -0.09929636949349113, -0.2122933228477333 },
            { -0.8796288547905189, 0.8067459269812249, -1.98537169418885, 1.207430084781702, -1.774992570265902, 0.7480894357499608, 2.103000370962025, -1.207430084781702, 1.880156770971341, -0.7480894357499599, 0.03284136477605441, 0.04004156303323948, 6.254839614070249, -6.254839614070252, -0.1176286767731729, -0.1051642007054378 },
            { -0.9296791351347413, 0.8864622633717988, -2.971998468804016, 3.694127852964517, -1.094432511004269, -0.2482887099393699, 3.06777086022815, -3.694127852964519, 1.12970050320931, 0.2482887099393705, 0.02040110232924405, 0.02281576943369881, 5.092643768908563, -5.092643768908566, -0.09577239142413066, -0.03526799220504031 },
            { -0.9718012639282547, 0.9542625388118882, -3.868002582487266, 6.626101439135843, -0.4576542301380012, -0.3235376225814701, 3.915248946642276, -6.626101439135845, 0.4632443242377483, 0.3235376225814707, 0.008577996173397329, 0.008960728942969343, 2.512299196455918, -2.512299196455919, -0.04724636415500533, -0.005590094099745963 },
            { 0.0951941590365427, 2.258535283870657, 0.4327344046122106, -0.1075113772643879, 0.4770433443236944, -0.1174972127670474, 0.004544075206450005, 0.1075113772643879, 0.005009356340143538, 0.1174972127670473, -0.236663885878532, -2.117065557028668, 0.01997342096602645, -0.01997342096602614, -0.4372784798186605, -0.4820527006638377 },
            { 0.009891035232638876, 1.316785740156483, 1.895161345113962, -0.3583652824090253, 0.366739933345371, -0.1058170176815844, 0.08479300959519284, 0.3583652824090258, 0.01640862017752039, 0.1058170176815844, 0.08395872250836335, -1.410635497897485, 0.09043770422115224, -0.09043770422115215, -1.979954354709154, -0.383148553522891 },
            { -0.1453085813673923, 0.2084477490763892, 3.231586228807278, -0.1261469244300143, 0.2185120914579329, -0.08637949239124008, 0.424351129781857, 0.1261469244300149, 0.02869360317685024, 0.08637949239124021, 0.4505830943370515, -0.5137222620460482, 0.1669910120406327, -0.1669910120406328, -3.655937358589134, -0.2472056946347822 },
            { -0.3614223815311955, -0.4472518118467199, 3.149775301458716, 1.207430084781703, 0.08906171366886124, -0.06197308708326434, 1.181129000985287, -1.207430084781703, 0.03339710386421113, 0.06197308708326445, 0.6431821076381256, 0.1654920857397902, 0.1978212484459414, -0.1978212484459418, -4.330904302444003, -0.1224588175330719 },
            { -0.6087524891689253, -0.3537030347186515, 1.208999920185269, 3.694127852964523, 0.0140806737769556, -0.03657053775591382, 2.31719006556055, -3.694127852964524, 0.02698726182493466, 0.03657053775591415, 0.5613271106562139, 0.4011284132313632, 0.1610645852516717, -0.1610645852516728, -3.526189985745818, -0.04106793560188975 },
            { -0.8371645227047526, 0.2910706036990944, -1.805435599662071, 6.626101439135848, -0.006755997614235398, -0.01478438315682568, 3.544972993152055, -6.626101439135851, 0.01326540203857141, 0.01478438315682629, 0.2857429727611832, 0.2603509462444754, 0.07945626014049845, -0.07945626014049934, -1.73953739348998, -0.006509404424335309 },
            { -0.001612528860249429, 1.21041949070138, 0.3655274945336756, -0.1075113772643875, 2.035343540151152, -0.368211730803088, 0.01825039692887345, 0.1075113772643876, 0.1016225264853432, 0.3682117308030881, 0.1198062043919953, -1.328613166233126, 0.1008866527669824, -0.1008866527669817, -0.3837778914625494, -2.136966066636495 },
            { -0.08410912224514785, 0.5673443854934063, 1.590855003919845, -0.358365282409025, 1.55497663649533, -0.3554342461949691, 0.1468538990142381, 0.3583652824090255, 0.1435419201515683, 0.3554342461949692, 0.3340038574633871, -0.8172391207116455, 0.4568049348343119, -0.4568049348343116, -1.737708902934084, -1.698518556646898 },
            { -0.2308078912905137, -0.1532359968298526, 2.66969200201306, -0.1261469244300144, 0.9118053650598991, -0.320783000343106, 0.5389450463510499, 0.126146924430015, 0.1840710405413055, 0.3207830003431061, 0.5634102965626983, -0.1793664084423317, 0.8434791554040409, -0.8434791554040413, -3.20863704836411, -1.095876405601204 },
            { -0.4301043103039862, -0.497324674155854, 2.484142965438431, 1.207430084781703, 0.3547883234841626, -0.2558016305833297, 1.316879490565598, -1.207430084781703, 0.1880783325230203, 0.2558016305833299, 0.6476899405310003, 0.2797390439288401, 0.9992040740465377, -0.9992040740465382, -3.801022456004029, -0.542866656007182 },
            { -0.6534529395391899, -0.2642536539854522, 0.6670470360869567, 3.694127852964521, 0.0392405315041931, -0.1655276462224337, 2.427717101830563, -3.694127852964523, 0.1428158799362916, 0.1655276462224342, 0.5205515232793038, 0.3971550702453388, 0.8135445056199988, -0.8135445056199997, -3.094764137917518, -0.182056411440484 },
            { -0.8565850966360518, 0.3657334462288256, -2.072791389114621, 6.626101439135848, -0.03917818741850554, -0.07163462484400046, 3.599498107612854, -6.626101439135851, 0.06803473432647289, 0.07163462484400102, 0.2552051993741666, 0.2356464510330598, 0.4013371640538477, -0.401337164053849, -1.526706718498228, -0.02885654690796647 },
            { -0.1769589681250613, 0.05689475265716316, 0.2586264975502849, -0.1075113772643881, 3.277242391159196, -0.02250324356083017, 0.04005201606877706, 0.1075113772643882, 0.5075279066734113, 0.02250324356083053, 0.4986763029396348, -0.3786120874717367, 0.2295892688902765, -0.2295892688902752, -0.2986785136190626, -3.784770297832607 },
            { -0.2506082551572138, -0.2164851818698345, 1.10681770442185, -0.358365282409025, 2.461995411030852, -0.1607318658735124, 0.2455695064542931, 0.3583652824090253, 0.5462426157118527, 0.1607318658735126, 0.5821930152209729, -0.1150995781939247, 1.039557841772361, -1.039557841772361, -1.352387210876143, -3.008238026742704 },
            { -0.3777607370139299, -0.4651377828347795, 1.77592895036672, -0.1261469244300145, 1.380334814168909, -0.3118368314327842, 0.7212210045101614, 0.126146924430015, 0.5605666043282194, 0.3118368314327845, 0.6463942562370211, 0.1965042636116885, 1.919518165209493, -1.919518165209493, -2.497149954876882, -1.940901418497127 },
            { -0.5447785580164279, -0.4464900798809378, 1.425371475099111, 1.207430084781701, 0.4632747891417879, -0.3749799245674634, 1.53280762444589, -1.207430084781701, 0.4981937280320021, 0.3749799245674637, 0.60706580639531, 0.3842028315020559, 2.27390369826615, -2.273903698266151, -2.958179099545001, -0.961468517173789 },
            { -0.7263746188062203, -0.07821471106249089, -0.1949968156603192, 3.694127852964521, -0.02610500697369023, -0.3072231109541971, 2.603524178172518, -3.694127852964522, 0.3485442395416017, 0.3072231109541975, 0.43966446192137, 0.3649248679473416, 1.851395433709229, -1.85139543370923, -2.408527362512197, -0.3224392325679104 },
            { -0.88776442816121, 0.4914299064747547, -2.498054214147953, 6.626101439135846, -0.1074505084703261, -0.1520086632203161, 3.686227122377577, -6.62610143913585, 0.1585581995752142, 0.1520086632203168, 0.2040904979935353, 0.1922440236929203, 0.9133290038519024, -0.9133290038519033, -1.18817290822962, -0.05110769110488751 },
            { -0.4161904484303361, -0.4923913402203194, 0.1331750475369526, -0.1075113772643895, 2.797723344665514, 1.549167836755935, 0.06563685447925477, 0.1075113772643896, 1.378890140783033, -1.549167836755934, 0.6486429703861643, 0.2599388182644908, 0.380625557314088, -0.3806255573140873, -0.1988119020162084, -4.176613485448547 },
            { -0.4725926314404945, -0.4969660812089812, 0.5387857608844526, -0.358365282409025, 1.986889030678359, 0.9945032683129258, 0.3614151621709158, 0.3583652824090254, 1.332796583301379, -0.9945032683129253, 0.639255654692807, 0.3303030579566683, 1.723435441026381, -1.723435441026381, -0.9002009230553691, -3.319685613979736 },
            { -0.5673717370166218, -0.4186476104774458, 0.7270718399433769, -0.1261469244300139, 0.9368769194085705, 0.2965941636064933, 0.9351271784365169, 0.1261469244300145, 1.204969058156711, -0.2965941636064928, 0.5926770750501872, 0.3933422724438802, 3.18228144955919, -3.182281449559191, -1.662199018379894, -2.14184597756528 },
            { -0.6878515093369491, -0.1824852303054039, 0.1828721304346197, 1.207430084781702, 0.09853816918232952, -0.2186400789894127, 1.786205611914281, -1.207430084781701, 0.9624726871335494, 0.2186400789894132, 0.4845408251289324, 0.3857959145134207, 3.769801030399033, -3.769801030399034, -1.9690777423489, -1.061010856315878 },
            { -0.8148007014423307, 0.2086381490432951, -1.206630516266271, 3.694127852964519, -0.2678039384752182, -0.3741732153688104, 2.809838929878054, -3.694127852964519, 0.623625809026259, 0.3741732153688109, 0.3196388818985789, 0.2865236705004568, 3.06934388602072, -3.069343886020722, -1.603208413611781, -0.3558218705510396 },
            { -0.924806077682207, 0.6498007290260854, -2.997112590988779, 6.626101439135845, -0.2137253487909233, -0.230585233065038, 3.78800616062315, -6.626101439135848, 0.2701242990788847, 0.2305852330650387, 0.1401271099178712, 0.1348782387382507, 1.514166418938303, -1.514166418938304, -0.790893569634367, -0.05639895028796068 },
            { -0.6768715240241602, -0.2097722488902582, 0.01401888720093802, -0.1075113772643908, 0.4055060236583509, 4.207844896470936, 0.08993781797936473, 0.1075113772643909, 2.601513688109785, -4.207844896470935, 0.4964604042849631, 0.3901833686294546, 0.5240826811502115, -0.5240826811502113, -0.1039567051803031, -3.007019711768135 },
            { -0.7100281268508728, -0.12405978678206, -0.0007417243134261731, -0.3583652824090248, -0.003766187001273066, 3.018435819368074, 0.4714475573750664, 0.3583652824090252, 2.393826965402008, -3.018435819368073, 0.4592798912153728, 0.3748080224175594, 2.37299532142841, -2.372995321428411, -0.4707058330616406, -2.390060778400735 },
            { -0.7646239436047709, 0.03799104476891552, -0.2691524843341969, -0.126146924430013, -0.4775352890108845, 1.472375625285541, 1.138299308806662, 0.1261469244300135, 2.019591573737551, -1.47237562528554, 0.3905668811515995, 0.3360660176842555, 4.38167790420691, -4.381677904206912, -0.8691468244724641, -1.542056284726666 },
            { -0.8322435552047392, 0.272603374669609, -0.9972772509754986, 1.207430084781702, -0.7399029166570861, 0.226028653860933, 2.026887813837002, -1.207430084781702, 1.503794660639994, -0.2260286538609323, 0.293319195344013, 0.2663209851911176, 5.190632613731873, -5.190632613731874, -1.029610562861502, -0.7638917439829064 },
            { -0.9016395849690645, 0.5496213804355969, -2.167499341759393, 3.694127852964518, -0.6623743276448544, -0.3384383601662105, 3.005800583819062, -3.694127852964519, 0.9185539771031939, 0.3384383601662111, 0.1805361783003788, 0.1714820262330891, 4.226174365454851, -4.226174365454852, -0.8383012420596662, -0.2561796494583383 },
            { -0.9604406902078866, 0.8110857660367474, -3.471127677793734, 6.626101439135844, -0.3408202786817676, -0.2894753501139529, 3.884677816460895, -6.626101439135847, 0.3814256054207144, 0.2894753501139535, 0.07539501869830373, 0.07395990547283549, 2.084853161581003, -2.084853161581005, -0.4135501386671572, -0.04060532673894598 },
            { -0.8934712849905354, 0.5151981526926569, -0.07522942445720837, -0.1075113772643911, -2.622209549768403, 6.943200588586851, 0.1081393105244002, 0.1075113772643911, 3.769322107784873, -6.943200588586849, 0.1944620268147034, 0.1838111054831741, 0.6315324853533879, -0.6315324853533895, -0.03290988606719194, -1.14711255801647 },
            { -0.9048366700171672, 0.5632232344827246, -0.4048493844737625, -0.3583652824090239, -2.477129635267711, 5.125717632918914, 0.5538621423363476, 0.3583652824090242, 3.388885791237167, -5.125717632918912, 0.1750395382619923, 0.1665738972724495, 2.859517566550025, -2.859517566550026, -0.1490127578625848, -0.9117561559694547 },
            { -0.9233145264619567, 0.6432384106744097, -1.015327409103733, -0.1261469244300117, -2.170746327952547, 2.734575962457614, 1.290475827086463, 0.1261469244300121, 2.759007230418675, -2.734575962457612, 0.1427690543207538, 0.1373070614667928, 5.280029347256246, -5.280029347256248, -0.2751484179827294, -0.5882609024661275 },
            { -0.9458170049773248, 0.7438597492692887, -1.881212580028106, 1.207430084781702, -1.681870635314405, 0.7480894357499608, 2.20715948512277, -1.207430084781702, 1.973278705922838, -0.7480894357499599, 0.1023314874377298, 0.09962576827030609, 6.254839614070249, -6.254839614070252, -0.3259469050946624, -0.291408070608432 },
            { -0.9685009553309831, 0.8487477966164028, -2.887192894810958, 3.694127852964517, -1.063203027454188, -0.2482887099393698, 3.152576434221209, -3.694127852964519, 1.160929986759391, 0.2482887099393704, 0.06033027596633175, 0.05942288274824872, 5.092643768908563, -5.092643768908566, -0.2653835394102483, -0.0977269593052021 },
            { -0.9874194037213111, 0.9388199182233279, -3.826166360464729, 6.626101439135843, -0.4527042530960278, -0.3235376225814701, 3.957085168664813, -6.626101439135845, 0.4681943012797219, 0.3235376225814707, 0.02437165517095008, 0.02422783032703335, 2.512299196455918, -2.512299196455919, -0.1309188082000784, -0.01549004818369306 },
            { -0.7264234090591867, 4.045766714094543, 0.5224308144939104, -0.1075113772643886, 0.5759240316176446, -0.1174972127670486, 0.09424048508814642, 0.1075113772643889, 0.1038900436340889, 0.1174972127670485, 3.193802680536813, -6.513145985572169, 0.01997342096603122, -0.01997342096603036, -0.6166712995820567, -0.6798140752517331 },
            { -0.7547673686263279, 2.625711238408817, 2.301297950374494, -0.3583652824090262, 0.4453329839721036, -0.1058170176815853, 0.4909296148557221, 0.3583652824090269, 0.09500167080424962, 0.1058170176815853, 2.92220102847863, -4.793144898261119, 0.09043770422115435, -0.09043770422115416, -2.792227565230217, -0.5403346547763525 },
            { -0.8012906341175038, 0.8903325476865926, 3.98150755115041, -0.126146924430015, 0.2692199683245156, -0.0863794923912409, 1.174272452124988, 0.1261469244300159, 0.07940148004342985, 0.08637949239124094, 2.444431998447478, -2.533473912016567, 0.1669910120406322, -0.1669910120406326, -5.155780003275399, -0.3486214483679448 },
            { -0.8586720420688795, -0.2817594879154627, 4.03814869598639, 1.207430084781703, 0.1141809838776982, -0.06197308708326461, 2.069502395512959, -1.207430084781703, 0.05851637407304676, 0.06197308708326478, 1.803173752644751, -0.6627422226604086, 0.1978212484459412, -0.197821248445942, -6.107651091499349, -0.172697357950744 },
            { -0.9173044064511072, -0.4399970069452351, 1.932306913050188, 3.694127852964522, 0.0225047022959674, -0.0365705377559136, 3.040497058425467, -3.694127852964523, 0.03541129034394491, 0.03657053775591404, 1.092136972993994, 0.2651644404023488, 0.1610645852516721, -0.1610645852516734, -4.972803971475654, -0.05791599263991158 },
            { -0.9667959272344049, 0.1966678229043538, -1.448614337578209, 6.626101439135848, -0.00542076106755407, -0.01478438315682551, 3.901794255235918, -6.626101439135851, 0.01460063858525218, 0.01478438315682612, 0.4506030010257471, 0.3195251033043044, 0.07945626014049934, -0.07945626014050022, -2.453179917657706, -0.009179877517697329 },
            { -0.7584176427420373, 2.463135790343375, 0.4442496376184075, -0.1075113772643878, 2.473687051352038, -0.3682117308030883, 0.09697254001360328, 0.107511377264388, 0.5399660376862279, 0.3682117308030882, 2.886132731797566, -4.590850879398905, 0.1008866527669854, -0.1008866527669842, -0.5412221776320112, -3.013653089038264 },
            { -0.783596908566965, 1.465078690873644, 1.947301198293009, -0.3583652824090252, 1.903383941405104, -0.3554342461949695, 0.5033000933874007, 0.3583652824090259, 0.4919492250613412, 0.3554342461949696, 2.63071373548726, -3.312195517793939, 0.4568049348343127, -0.4568049348343121, -2.45060129168041, -2.395333166466444 },
            { -0.8248447915523485, 0.2832474925452233, 3.32786119426557, -0.1261469244300148, 1.13659616495759, -0.3207830003431064, 1.197114238603558, 0.1261469244300156, 0.4088618404389944, 0.3207830003431066, 2.187967586461444, -1.646370287454318, 0.8434791554040408, -0.8434791554040412, -4.524975432869129, -1.545458005396583 },
            { -0.875588016043509, -0.4323172743199273, 3.263824756146822, 1.207430084781702, 0.4661434263205008, -0.2558016305833299, 2.096561281273988, -1.207430084781702, 0.2994334353593574, 0.2558016305833302, 1.603664751845973, -0.2957594614825357, 0.9992040740465374, -0.9992040740465382, -5.360386037420811, -0.7655768616798571 },
            { -0.9272962486228677, -0.3668980549672441, 1.30185813567944, 3.694127852964521, 0.07658471205688794, -0.1655276462224338, 3.062528201423047, -3.694127852964522, 0.180160060488986, 0.1655276462224342, 0.9655937404648672, 0.3286005631252448, 0.8135445056199997, -0.813544505620001, -4.364386337102485, -0.2567447725458731 },
            { -0.9708384599421426, 0.2786156794290393, -1.759626854586558, 6.626101439135848, -0.03325901055825675, -0.07163462484400035, 3.912662642140918, -6.626101439135851, 0.07395391118672145, 0.07163462484400096, 0.3965941591865616, 0.2956286213265421, 0.4013371640538477, -0.401337164053849, -2.153035787554356, -0.04069490062846397 },
            { -0.8101572730647295, 0.6408368989713333, 0.319892696590176, -0.1075113772643882, 4.053590470495807, -0.0225032435608301, 0.1013182151086676, 0.1075113772643883, 1.283875986010024, 0.02250324356083041, 2.349015059133141, -2.179694685039746, 0.2295892688902777, -0.2295892688902764, -0.421210911698844, -5.337466456505831 },
            { -0.8301285469532639, 0.1714107500994923, 1.384225084807483, -0.3583652824090249, 3.079057909007672, -0.1607318658735124, 0.5229768868399265, 0.3583652824090255, 1.163305113688674, 0.1607318658735127, 2.129129530782399, -1.470411733928628, 1.039557841772361, -1.039557841772361, -1.907201971647411, -4.242363022696344 },
            { -0.8627459056477514, -0.3259504277881967, 2.28815490299438, -0.1261469244300145, 1.778460716101411, -0.3118368314327844, 1.233446957137821, 0.1261469244300152, 0.9586925062607219, 0.3118368314327847, 1.755551948551246, -0.5668556151152983, 1.919518165209492, -1.919518165209493, -3.521601860132201, -2.737153222362131 },
            { -0.9027106143802327, -0.4952244484671194, 2.032165674361517, 1.207430084781702, 0.6604952749075814, -0.3749799245674635, 2.139601823708296, -1.207430084781701, 0.6954142137977956, 0.3749799245674638, 1.274195550536738, 0.1237395123106146, 2.27390369826615, -2.27390369826615, -4.171767498069812, -1.355909488705376 },
            { -0.9432618359467716, -0.1914090215940486, 0.2990504962694986, 3.69412785296452, 0.04003509115861148, -0.307223110954197, 3.097571490102336, -3.694127852964522, 0.4146843376739033, 0.3072231109541975, 0.7602445856709144, 0.3744262718699062, 1.85139543370923, -1.851395433709232, -3.396621986371833, -0.4547194288325136 },
            { -0.9772800756463589, 0.4183499296694269, -2.254331165551821, 6.626101439135846, -0.0969670828708038, -0.1520086632203161, 3.929950170973709, -6.62610143913585, 0.1690416251747361, 0.1520086632203168, 0.3100418161585053, 0.2488883298184271, 0.9133290038519024, -0.9133290038519042, -1.675619005421884, -0.07207454230393165 },
            { -0.8722045591516201, -0.4091215024833704, 0.1739561851314677, -0.1075113772643893, 3.654447954720776, 1.549167836755935, 0.1064179920737704, 0.1075113772643895, 2.235614750838296, -1.549167836755934, 1.643941029565681, -0.3626149679306911, 0.3806255573140881, -0.3806255573140872, -0.2803741772052389, -5.890062705559071 },
            { -0.8857913626150299, -0.4815273117423193, 0.7234387788050644, -0.3583652824090249, 2.667836974042434, 0.994503268312926, 0.5460681800915278, 0.3583652824090254, 2.013744526665454, -0.9945032683129253, 1.481091886508539, -0.1137732121511905, 1.723435441026381, -1.723435441026381, -1.269506958896593, -4.681581500707885 },
            { -0.9079056705083028, -0.4826265886697996, 1.068029127663961, -0.1261469244300138, 1.376221418563483, 0.2965941636064933, 1.276084466157101, 0.1261469244300145, 1.644313557311624, -0.2965941636064927, 1.209765963841195, 0.1807662953369071, 3.18228144955919, -3.182281449559191, -2.344113593821062, -3.020534975875105 },
            { -0.934877471748119, -0.2925135686978346, 0.5867776789992073, 1.207430084781701, 0.3161772002558493, -0.2186400789894128, 2.190111160478868, -1.207430084781701, 1.180111718207068, 0.2186400789894133, 0.8685644115588416, 0.3588266288871122, 3.769801030399032, -3.769801030399034, -2.776888839478075, -1.496288918462917 },
            { -0.9621111696307385, 0.1072713679992943, -0.8777736307119324, 3.694127852964519, -0.1948162525523885, -0.3741732153688104, 3.138695815432393, -3.69412785296452, 0.6966134949490888, 0.3741732153688109, 0.5128930372313938, 0.3419467644000506, 3.069343886020719, -3.069343886020722, -2.260922184720458, -0.5017972423966992 },
            { -0.984857450705939, 0.5970315832676147, -2.834881159375366, 6.626101439135845, -0.2021565577449423, -0.230585233065038, 3.950237592236563, -6.626101439135848, 0.2816930901248655, 0.2305852330650386, 0.2074607102068644, 0.1803651572314603, 1.514166418938303, -1.514166418938305, -1.115356432861194, -0.07953653237992239 },
            { -0.932467448542731, -0.3179205603439773, 0.03534292592717486, -0.1075113772643908, 1.022318615718533, 4.207844896470936, 0.1112618567056016, 0.1075113772643909, 3.218326280169967, -4.207844896470935, 0.8995039418683857, 0.350884067018322, 0.5240826811502106, -0.5240826811502108, -0.1466047826327772, -4.240644895888499 },
            { -0.9397174447288171, -0.2365537449236045, 0.09581144554187944, -0.3583652824090247, 0.4864931811489596, 3.018435819368074, 0.5680007272303721, 0.358365282409025, 2.88408633355224, -3.018435819368072, 0.8061645688297169, 0.3701066208227041, 2.37299532142841, -2.37299532142841, -0.6638121727722518, -3.370579514701199 },
            { -0.9514809099244433, -0.07325201137093104, -0.09086941436106771, -0.1261469244300127, -0.1612221865850717, 1.472375625285541, 1.316582378779791, 0.1261469244300133, 2.335904676163364, -1.47237562528554, 0.6530377576510977, 0.3716951636442766, 4.38167790420691, -4.381677904206911, -1.225712964418723, -2.174682489578291 },
            { -0.9657678270778781, 0.1765361283854373, -0.7860791808046453, 1.207430084781702, -0.5832102136410428, 0.226028653860933, 2.238085884007855, -1.207430084781702, 1.660487363656037, -0.2260286538609323, 0.4643004928061185, 0.3249312058863225, 5.190632613731873, -5.190632613731874, -1.452006703203208, -1.077277150014993 },
            { -0.9801278633069848, 0.4836947350263189, -1.995543448015667, 3.694127852964518, -0.609825675237599, -0.3384383601662105, 3.177756477562787, -3.694127852964519, 0.971102629510449, 0.3384383601662111, 0.271586089566941, 0.2248470387137251, 4.226174365454851, -4.226174365454852, -1.182213029547118, -0.3612769542728486 },
            { -0.992072533788888, 0.7814449830670035, -3.386298525533824, 6.626101439135844, -0.3324911424478805, -0.2894753501139529, 3.969506968720804, -6.626101439135847, 0.3897547416546017, 0.2894753501139534, 0.1090179228905624, 0.1016096278313223, 2.084853161581004, -2.084853161581005, -0.5832084431869751, -0.05726359920672018 },
            { -0.9784527553025456, 0.444993655765247, -0.06847880953770086, -0.1075113772643911, -2.386908973744286, 6.94320058858685, 0.1148899254439078, 0.1075113772643912, 4.004622683808989, -6.943200588586849, 0.2942204705113149, 0.2392386290259824, 0.6315324853533879, -0.6315324853533895, -0.04641111590620691, -1.617713710064703 },
            { -0.9807824312025171, 0.4990226123038761, -0.3742832577977208, -0.3583652824090239, -2.290106359135058, 5.125717632918914, 0.584428269012389, 0.3583652824090242, 3.575909067369819, -5.125717632918912, 0.2627304384538432, 0.219029380444797, 2.859517566550025, -2.859517566550026, -0.2101450112146683, -1.28580270823476 },
            { -0.9845538780268543, 0.5895769690872168, -0.9588878027276931, -0.1261469244300116, -2.050079765429602, 2.734575962457614, 1.346915433462503, 0.126146924430012, 2.87967379294162, -2.734575962457612, 0.2115863158633562, 0.1833905930762809, 5.280029347256246, -5.280029347256247, -0.3880276307348091, -0.8295940275120171 },
            { -0.989120273610321, 0.7043103662278554, -1.814352973282391, 1.207430084781702, -1.622095780272448, 0.7480894357499608, 2.274019091868484, -1.207430084781702, 2.033053560964795, -0.7480894357499599, 0.149388641662289, 0.1354212657201765, 6.254839614070249, -6.254839614070252, -0.4596661185860918, -0.4109577806923452 },
            { -0.9936946831500963, 0.824812976361782, -2.832756301597711, 3.694127852964517, -1.043156860531071, -0.2482887099393698, 3.207013027434456, -3.694127852964519, 1.180976153682507, 0.2482887099393705, 0.08678291134993732, 0.08209879543837748, 5.092643768908563, -5.092643768908566, -0.3742567258367414, -0.1378192931514343 },
            { -0.9974881061047896, 0.9289507568771582, -3.799311741215218, 6.626101439135843, -0.4495268689458906, -0.3235376225814701, 3.983939787914324, -6.626101439135845, 0.4713716854298587, 0.3235376225814707, 0.03463989859173727, 0.03389745063589411, 2.512299196455918, -2.512299196455919, -0.1846280466991013, -0.02184481648396715 } } };
    alignas(32) static const double FE17_C0_Q216[1][216][20] =
        { { { 0.5891312624021253, 0.02748596633367296, 0.0249920358298531, 0.02296307237135092, -0.003043713021476369, -0.003070202202425251, -0.003365211066803472, -0.003432444281718169, -0.003709784857762037, -0.003751255414469148, 0.1853994503836215, -0.09822369638470635, 0.2043830416627825, -0.1073468766426305, 0.228497459249235, -0.118685597070301, 0.0006376781353341736, 0.01824795930114288, 0.02040097017282968, 0.02248988510034432 },
            { 0.2607532295919632, 0.024921359333854, 0.02261687872759303, 0.06392074638852524, -0.01392170394068189, -0.009123780282608136, -0.01541241783914386, -0.01020026219574482, -0.002982516029883927, -0.00301190259800889, 0.6961075931619861, -0.2918932908235646, 0.1347064475410572, -0.08618936887128335, 0.1505999752093276, -0.09541838930035837, 0.002574156428423385, 0.07366271342520649, 0.08235391117642454, 0.01593662089691711 },
            { -0.01173137615871549, 0.02056446192161105, 0.01860662089780795, 0.01531548752577637, -0.02612434745918838, -0.002579711830559165, -0.02898143503678088, -0.002884082720769489, -0.001959654960429925, -0.001974884465555407, 0.8572447940904817, -0.0825316428360048, 0.05796483200055991, -0.05651379489909349, 0.06480389336699356, -0.06269442243901781, 0.003817896429313385, 0.1092538928303914, 0.1221443654117936, 0.008259108331385746 },
            { -0.05432329294336549, 0.01494504628085996, 0.01347446475470751, -0.06344250344999287, -0.03154655796161142, 0.01737890130402368, -0.03508083283041857, 0.01942937515855441, -0.0009919307854630429, -0.0009972406467677487, 0.402339840269586, 0.5559959288146353, 0.01137639108258633, -0.02853729135016481, 0.0127186504156524, -0.03173442720775795, 0.003183242904772066, 0.09109248655904892, 0.1018401603484311, 0.002879589282683971 },
            { 0.03200073162399739, 0.008931528706510251, 0.008025178421052067, 0.06035522808896732, -0.02617284368754665, 0.03079134442950866, -0.02917233986857431, 0.03442430405072119, -0.0003397570125041297, -0.0003407882350357461, -0.1717666835972433, 0.9850946182410428, -0.002000488665964525, -0.009752082592544734, -0.002236519105063372, -0.01086970415642987, 0.001500905349027758, 0.04295028825093683, 0.04801783777909433, 0.0005592419800478647 },
            { 0.06083029181935731, 0.003648279187554178, 0.003269064709676153, 0.4862210033879991, -0.01311087401518943, 0.02198841884311198, -0.01464038861464298, 0.02458275303901603, -5.478480128033592e-5, -5.484987564973592e-5, -0.2887309971010954, 0.7034662976658252, -0.001080440602775408, -0.001569597957129791, -0.00120791789081616, -0.001752707259218812, 0.0002947817262353714, 0.008435548664750797, 0.009430828612723624, 3.529046154825133e-5 },
            { 0.2284926697139655, 0.02458609043941672, 0.06412087895770723, 0.02296307237135094, -0.009538361066723209, -0.01550773020042077, -0.002991757165262322, -0.003012488127809868, -0.01665881147404843, -0.01031735892320321, 0.131371904280451, -0.08620612454061913, 0.731509833687587, -0.2952441604842249, 0.1421010464381343, -0.09260488531013616, 0.002826862155877682, 0.08089420463406988, 0.01571428106623552, 0.08750083354765245 },
            { 0.05914639447514595, 0.02224281004035087, 0.06374948636215386, 0.06392074638852524, -0.04676233042964471, -0.04608462690790788, -0.01368123635031353, -0.008952270231710191, -0.01337268502201001, -0.008879050448614111, 0.4844107417114626, -0.2561804361622995, 0.4734858827314281, -0.2540851602731925, 0.09197803817707079, -0.07433759393225535, 0.01141137666105724, 0.3265508496254846, 0.06343485119416874, 0.06200421239109996 },
            { -0.05754804686186037, 0.01829015637176041, 0.06024010720028762, 0.01531548752577639, -0.09701662197790471, -0.01303024114553214, -0.02566475266865543, -0.002531218060032335, -0.008765527693295758, -0.006436714390689311, 0.5646988015549621, -0.07243397818176901, 0.1928669661191093, -0.1841946520133042, 0.0374657953273371, -0.04872680671037125, 0.01692494431446989, 0.4843285004004169, 0.09408429464272222, 0.03213350624657224 },
            { -0.03380570604521269, 0.01323787477574462, 0.05064577825811678, -0.06344250344999283, -0.1302123445138328, 0.08778161659503851, -0.03097980040668975, 0.01705221037604467, -0.004424572820922089, -0.003612617636598661, 0.1966464547309714, 0.4879703783061303, 0.02808528613842973, -0.1033795828183621, 0.005455768830429328, -0.02459581580991713, 0.01411149042416215, 0.4038179900956043, 0.07844454895959287, 0.01120354601126324 },
            { 0.04524183250064848, 0.007879991398255083, 0.034460931747505, 0.06035522808896736, -0.118465012449725, 0.1555284735135184, -0.02569322416543094, 0.03021252458874744, -0.00151146128798101, -0.001353772332920117, -0.2245259394687873, 0.8645692686190068, -0.01320823978608495, -0.03873989253401419, -0.002565795576180986, -0.008402081951779019, 0.00665359574936196, 0.1904009839963821, 0.03698676056389364, 0.002175828786616911 },
            { 0.05774842342934181, 0.003208520405327993, 0.01551856697265685, 0.4862210033879992, -0.06352598762442813, 0.1110644981895546, -0.01286684572333993, 0.02157507758344418, -0.0002431984694075684, -0.0002332476498989808, -0.2678945972026824, 0.6173978937749544, -0.005063521969808599, -0.006674673924975519, -0.0009836255610470024, -0.001351919157148593, 0.001306783563626096, 0.03739524999073521, 0.00726429626887104, 0.0001373037162252927 },
            { -0.0348028935679302, 0.01971367264521794, 0.002538451497458244, 0.02296307237135093, -0.0005829365126078373, -0.03529117421593721, -0.002375744243553145, -0.002344495335258594, -0.03010476428081911, -0.0004907271295279889, 0.06343990541373712, -0.06709067331765389, 0.8038926764362297, -0.01404277203718326, 0.05340492833764023, -0.05723099189930894, 0.005006641935345717, 0.143271335818502, 0.009517931493224836, 0.1206085565910737 },
            { -0.06159497748062469, 0.01777375010761428, 0.02003881732295942, 0.06392074638852524, -0.02114651782436196, -0.1048754766728734, -0.01083881616782925, -0.006967182909191429, -0.02410976582647119, -0.003124879456370521, 0.220364669312392, -0.1993746737198528, 0.4901772012075251, -0.08942234331265045, 0.03256389698595481, -0.0458341344193199, 0.02021063418762109, 0.5783526353976364, 0.03842164750675695, 0.08546476937256051 },
            { -0.05018519649115342, 0.01453598989815953, 0.0448627786625976, 0.0153154875257764, -0.09431097022455499, -0.02965311521412529, -0.0202575096210518, -0.001969942679436384, -0.01574508134040262, -0.00486972382430532, 0.2071704781848354, -0.05637237949377184, 0.1610225586150273, -0.1393532524165275, 0.01069719684684936, -0.02993235935152847, 0.02997568727644789, 0.8577918720040767, 0.05698560864625822, 0.04429187299682928 },
            { 0.009374109420468887, 0.01045349133390651, 0.06264907773642718, -0.06344250344999279, -0.1908784358106109, 0.1997659415127075, -0.02434683397270689, 0.0132710324443835, -0.007913217411757042, -0.004121456643866002, -0.04065210119013039, 0.3797672313201223, -0.0132127616807533, -0.1179406489439593, -0.0008777621831699452, -0.0150435086408658, 0.02499279265560875, 0.7152000953622468, 0.04751282224540108, 0.01544263589653983 },
            { 0.06004327302348123, 0.006183860780599839, 0.05846000695609108, 0.06035522808896745, -0.219873782383911, 0.3539384799301844, -0.02010750274448095, 0.02351316252861094, -0.002691872160017778, -0.001955478323419309, -0.2660663568017396, 0.6728586242624771, -0.03561937191770587, -0.05595846381234181, -0.002366298463035945, -0.005117413056182076, 0.01178415135323435, 0.3372182647906266, 0.0224023900119653, 0.002999097936595837 },
            { 0.05056822905446816, 0.002505244759322567, 0.03184692421737122, 0.4862210033879992, -0.1348021362514161, 0.2527511443748776, -0.01003563954504844, 0.01679099355953401, -0.0004316698035746885, -0.0003852003336458285, -0.2264281978113558, 0.4804953316135417, -0.009739510395353201, -0.01102299047382248, -0.0006470239995386567, -0.0008206306085346074, 0.002314438069244806, 0.06623054696779845, 0.004399887843559297, 0.000189255374573212 },
            { -0.03853815083965881, 0.01358115327022941, -0.06324079300900326, 0.02296307237135093, 0.04013050357658117, -0.05850762502593039, -0.001618399730220623, -0.001560586234419889, -0.03399912213271305, 0.02248701544304453, 0.01191844824741089, -0.04465813160849954, 0.2503811450468287, 0.6434941389260269, 0.00667846914218773, -0.02595110073436111, 0.005524987404374928, 0.1581044412656846, 0.004217153140817637, 0.08859338148026952 },
            { -0.01826781369054213, 0.01219718851415015, -0.0601661797401889, 0.06392074638852524, 0.1308407699709968, -0.173868260263814, -0.007364145610852798, -0.004637624813004955, -0.02715687977815714, 0.0128699214464597, 0.02433051323755516, -0.1327114482250987, 0.08972403016574938, 0.3682889372407507, 0.00239322799910747, -0.02072850351850102, 0.02230307275076262, 0.6382303881769983, 0.01702365388675529, 0.06277840586234912 },
            { 0.01772907986214486, 0.009913603164373612, -0.02738137943100374, 0.0153154875257764, 0.08970102474472431, -0.04916054465014845, -0.01370578102120153, -0.001311269586205241, -0.01766074436637795, 0.003083031218878146, -0.04356847292825844, -0.03752362315097985, -0.05614066514189508, 0.08822480353157217, -0.001497451813721591, -0.01348022323360786, 0.03307911705661414, 0.9466004059406302, 0.02524887247350288, 0.03253472980518328 },
            { 0.05341236676857451, 0.007077021620096558, 0.02859661327419247, -0.06344250344999276, -0.1112957615828295, 0.3311828256963826, -0.0163909550704713, 0.008833709428967711, -0.008832044007775205, -0.001599598147886259, -0.1783628812699541, 0.2527876701518631, -0.09610842137977389, -0.04577450642166647, -0.002563520213829107, -0.006741387699406142, 0.02758033556335319, 0.7892458796758832, 0.02105172197382698, 0.01134343509044459 },
            { 0.06311356722833038, 0.004156360963195695, 0.06333827208906659, 0.06035522808896751, -0.2677887085849992, 0.5867784318905249, -0.01347144458614099, 0.01565126499421271, -0.002989901107658573, -0.001585295469071066, -0.2484437933685787, 0.4478805698365349, -0.05514051356807003, -0.04536521733606635, -0.001470774559641428, -0.0022821537723165, 0.01300418297106983, 0.3721309990914499, 0.009925928702894059, 0.002202996496296559 },
            { 0.03829062326422529, 0.00167399146125425, 0.04638054314881033, 0.4862210033879991, -0.2044842796896845, 0.4190245722479253, -0.006697217663471589, 0.011176730879847, -0.0004775813846158092, -0.0003889450106533757, -0.1647306361965127, 0.3198361664201811, -0.01174701036707971, -0.01113014910110453, -0.0003133304875447274, -0.00036453184210581, 0.002554055461906984, 0.07308749906771073, 0.001949478292832929, 0.0001390181100798804 },
            { 0.05101895376946722, 0.007332758805866319, 0.1159128503118907, 0.02296307237135093, 0.1090023499462376, -0.08055904918128892, -0.0008646271638577813, -0.0008160145415580522, -0.02500993967191653, 0.0319376675428223, -0.008821241789726673, -0.02335127914600279, -0.2551605295490323, 0.9139363970655773, -0.002584622145615246, -0.00724951558687525, 0.003977803090975448, 0.1138298224291978, 0.001153027391822391, 0.03335211605066609 },
            { 0.05757989555733776, 0.006562089471259455, 0.001372137073580029, 0.0639207463885252, 0.3971173140377131, -0.2393989112265287, -0.00392484221293208, -0.002424966465957058, -0.01992881918102881, 0.02042498534569761, -0.04804435425362265, -0.06939345560943186, -0.243950507216544, 0.5844865625185387, -0.002471071385924518, -0.005776674681191496, 0.01605745411400917, 0.4595041807397582, 0.004654499987289548, 0.02363373699945276 },
            { 0.06360617994244232, 0.005303104348027702, -0.06384099147382731, 0.01531548752577639, 0.4453007462833851, -0.06768907014248239, -0.007276672013856147, -0.0006856494224069601, -0.01291040534799476, 0.008002838766023762, -0.1129082444572363, -0.01962071782244418, -0.2003238843660444, 0.2290112644672521, -0.002029160030131758, -0.003742279510904181, 0.02381583964704401, 0.6815201094734521, 0.00690338733322278, 0.01224811680070253 },
            { 0.06144717309055386, 0.00375992273803258, -0.02177415774563864, -0.06344250344999275, 0.1150568152338248, 0.456005068253048, -0.008662426646856885, 0.004619056089915904, -0.006426853450299986, 0.0008646786619538171, -0.1684089825046474, 0.1321800809342495, -0.1249464952946176, 0.02474386396144717, -0.00126563257775898, -0.00186292229704281, 0.01985690392111462, 0.568230200349095, 0.005755828937278527, 0.004270381796341751 },
            { 0.04645672474414766, 0.002193340429715737, 0.05053549886072311, 0.06035522808896756, -0.2422139471292826, 0.8079342227998206, -0.007087347300560577, 0.008183885995767123, -0.002165849286571753, -0.0007497685695885949, -0.1653396632588289, 0.2341921579256847, -0.05052677349151849, -0.02145556760536861, -0.000511805716752065, -0.0006278047195552379, 0.009362569619066986, 0.2679216675248041, 0.002713884770495822, 0.0008293463188336731 },
            { 0.02244515577055549, 0.0008784989133120008, 0.05592603105981409, 0.4862210033879993, -0.2567083662260169, 0.5769542193676214, -0.003510404211698098, 0.005844197983987665, -0.0003446767312451152, -0.0002553162327938938, -0.09309469191575945, 0.1672390521963439, -0.009140706360501606, -0.007306194091948034, -9.258983796475023e-5, -9.99098505782281e-5, 0.001838833099031378, 0.05262051447809232, 0.0005330140491326962, 5.233515261589272e-5 },
            { 0.04894679446121797, 0.002376880404256221, 0.5468161352780181, 0.02296307237135093, 0.1798605221734306, -0.09707563019542723, -0.0002780763744504658, -0.0002583281717641814, -0.009692677166022588, 0.01668311168436259, -0.006361911024262701, -0.007392384501658328, -0.2217518472720546, 0.4774081565037678, -0.0005901043256253619, -0.0007381048808791967, 0.001517445283487007, 0.04342359921163855, 0.0001155546348056355, 0.004027791905809546 },
            { 0.04542737520948244, 0.002121562996817875, 0.2363406523412855, 0.06392074638852518, 0.6743596156126488, -0.2884815599438856, -0.001260094358656906, -0.0007676789099174755, -0.007710069963724272, 0.01098015214680538, -0.02961814652961963, -0.02196809444811459, -0.18122292221239, 0.3142108195229922, -0.0004822527145345629, -0.0005871278053182021, 0.006125569177969355, 0.1752908416678464, 0.0004664668420272383, 0.002854144979761224 },
            { 0.03886624121229092, 0.001707376513200256, -0.01828846790103174, 0.01531548752577637, 0.82703672618516, -0.08156698978207606, -0.002329694584879125, -0.0002170580948512579, -0.004980832704833574, 0.004705321602720162, -0.05711402182565618, -0.006211389510406135, -0.1221084470299942, 0.1346486767344176, -0.0003249430553757412, -0.000379294272088914, 0.009085224360823029, 0.2599850852517556, 0.0006918468788081819, 0.001479152496241417 },
            { 0.02943860136490044, 0.001204466492767727, -0.05275778434852091, -0.06344250344999273, 0.3808047631006006, 0.5494972920218519, -0.002764049002132039, 0.00146226844524841, -0.002471157646195888, 0.0009059800562437083, -0.07113164292553972, 0.04184464481011298, -0.06359420660282142, 0.02592575513870378, -0.000169230682236475, -0.0001881805706344802, 0.007574976566363453, 0.2167674512121439, 0.0005768403383721622, 0.0005157156807648923 },
            { 0.01829325894195257, 0.0006991167281845819, 0.03336325895824156, 0.06035522808896757, -0.1776955438281812, 0.9735805552799658, -0.002253922026485729, 0.002590797344341964, -0.0008300022927156413, -0.000174131961844423, -0.06074325135028259, 0.07413891409696464, -0.02236858120879355, -0.004983004397822675, -5.952508036262448e-5, -6.32053180869706e-5, 0.003571616489012142, 0.1022062835769367, 0.000271981364695628, 0.0001001565953127387 },
            { 0.007705129605640008, 0.0002788655344798247, 0.06058151635655214, 0.4862210033879993, -0.2869149807499818, 0.6952439857250874, -0.001113314132727389, 0.001850115290530085, -0.0001317250729412217, -9.033696632901322e-5, -0.03112127922919541, 0.05294336853233572, -0.003682206715950188, -0.002585105547167892, -9.798728342898244e-6, -1.003096643020784e-5, 0.0007014747963708934, 0.02007358073872198, 5.341784959383977e-5, 6.320291755256002e-6 },
            { 0.1896341408806126, 0.06321590579140661, 0.0249920358298531, 0.02296307237135092, -0.003043713021476362, -0.003070202202425258, -0.009699446978515408, -0.01722007313292477, -0.01069260168686559, -0.01881950216103836, 0.1241526136873042, -0.08443606753349964, 0.1368649624542642, -0.0922786298960612, 0.7676447697600116, -0.2940657255172989, 0.003199138347039939, 0.01568649908943735, 0.08798204278085903, 0.09699078113796596 },
            { 0.03873729948516197, 0.06414055318999867, 0.02261687872759303, 0.06392074638852524, -0.01392170394068191, -0.009123780282608154, -0.04832445726264528, -0.0511732300859989, -0.009351450883665064, -0.01511027674453541, 0.4562107610651783, -0.2509203229333106, 0.08828309237935797, -0.07409099472475676, 0.4951599949906883, -0.2571816728310626, 0.01291416795580153, 0.06332270189782847, 0.355162782696734, 0.06872891091239741 },
            { -0.06044290951852892, 0.06228807721966877, 0.01860662089780793, 0.01531548752577638, -0.02612434745918835, -0.002579711830559193, -0.102387738291666, -0.01446902303340428, -0.006923212704126762, -0.009907707783363707, 0.5260307700949621, -0.07094670252337007, 0.03556893599806595, -0.04858097158128526, 0.1994981563960773, -0.1904007674063459, 0.01915383042832649, 0.09391795883137848, 0.5267646926621986, 0.03561856207757649 },
            { -0.03015502801637204, 0.05376920677277586, 0.01347446475470749, -0.06344250344999283, -0.03154655796161145, 0.01737890130402365, -0.1401367840566334, 0.0974743458879567, -0.003962448410319036, -0.005003011107836297, 0.1700359888680398, 0.477950958085233, 0.004807865674403371, -0.02453152088909622, 0.02696623644563427, -0.1089744386566492, 0.01596986611319431, 0.07830586335062673, 0.4391999629761922, 0.01241863231572287 },
            { 0.04697350016615411, 0.03737496137186565, 0.008025178421052067, 0.06035522808896738, -0.02617284368754665, 0.03079134442950866, -0.1294459583857907, 0.1727017205962398, -0.001507598372294764, -0.001709684949996425, -0.2305588817514029, 0.8468172016955241, -0.002685214735021726, -0.008383185877584052, -0.01506076507864969, -0.04146165939035574, 0.007529823576019511, 0.03692137002394512, 0.2070836544504705, 0.002411809408895738 },
            { 0.05720348252809401, 0.01708257417850013, 0.003269064709676167, 0.4862210033879992, -0.01311087401518943, 0.02198841884311198, -0.0701280358372138, 0.1233280922854734, -0.0002624213474553272, -0.0002751738389604949, -0.2644842912568506, 0.6047209584193678, -0.0009897086559436247, -0.00134927399381899, -0.005551053094214511, -0.007217057755503131, 0.00147887699475735, 0.007251453396228763, 0.04067176999104963, 0.0001521950608914732 },
            { 0.02496601025308548, 0.06414977996934323, 0.0641208789577072, 0.02296307237135093, -0.009538361066723174, -0.01550773020042077, -0.009476099752194413, -0.01511321426228286, -0.05276516460427313, -0.05176068731617146, 0.08580048869885198, -0.07410539840614611, 0.4777574136736528, -0.2538008320912566, 0.4656032871946721, -0.2521441561357203, 0.01418195579173255, 0.06953911099821497, 0.06777003923476668, 0.3773596066918112 },
            { -0.0405514595190903, 0.06350422041219009, 0.06374948636215383, 0.06392074638852523, -0.04676233042964469, -0.04608462690790788, -0.04630090759823703, -0.0449122361335431, -0.04525668862742907, -0.04454490314392766, 0.3068935788718513, -0.2202204702604666, 0.2999722437684895, -0.218419307577879, 0.2923409637786904, -0.2162640759114779, 0.05724921499742242, 0.2807130112891195, 0.2735716852817036, 0.2674018549594575 },
            { -0.06160941072275691, 0.05965519851214507, 0.06024010720028761, 0.01531548752577639, -0.09701662197790469, -0.01303024114553216, -0.09562857660029862, -0.01269875241421831, -0.03266093958832917, -0.03229205879139165, 0.3229952148850679, -0.06226644382758309, 0.1103156355110657, -0.1583393076126018, 0.1075092108523653, -0.1560739005148875, 0.08490998103542748, 0.4163434636794593, 0.4057517052442597, 0.1385802487496493 },
            { -0.007026130061565782, 0.04986238662143877, 0.05064577825811677, -0.06344250344999282, -0.1302123445138328, 0.08778161659503848, -0.1278002629816135, 0.08554845633401476, -0.01825258919269949, -0.01812397661773029, 0.03360835597125861, 0.4194741323481601, 0.004799986327677869, -0.0888682238372305, 0.004677874897788482, -0.08722200970661732, 0.07079529255956356, 0.3471341879602028, 0.3383031102942295, 0.04831686219379251 },
            { 0.05568889026001487, 0.0337655649448358, 0.034460931747505, 0.0603552280889674, -0.1184650124497249, 0.1555284735135184, -0.1158758623851271, 0.1515718363498356, -0.006816656371300458, -0.006791678659542359, -0.2568671287939838, 0.7432099568579186, -0.01511078247039583, -0.03330198620739197, -0.01472636486412708, -0.03257414396978007, 0.03338012098584658, 0.1636744587598975, 0.1595105881087865, 0.009383566554247214 },
            { 0.05353967983754095, 0.0151540831700666, 0.01551856697265685, 0.4862210033879992, -0.06352598762442813, 0.1110644981895546, -0.0619932808823459, 0.1082390224989929, -0.001171745690305058, -0.001170169494297373, -0.2428321614237952, 0.5307339488594057, -0.0045898125501024, -0.005737752080577127, -0.004473047931381383, -0.005599315959751966, 0.006555942846442869, 0.0321460907079186, 0.03132829564899003, 0.0005921415174165862 },
            { -0.06384965943606125, 0.06143481023065264, 0.002538451497458192, 0.02296307237135092, -0.0005829365126077818, -0.03529117421593722, -0.008567431445764705, -0.01176199169436928, -0.1085640867558488, -0.002461906549741044, 0.03810211073971253, -0.05767317695854324, 0.4828192536016073, -0.01207159261697019, 0.1609160413874562, -0.1774164766664284, 0.02511759352838385, 0.1231603842254639, 0.04104741336946108, 0.5201413019007258 },
            { -0.05876335259913518, 0.05890164636225354, 0.02003881732295939, 0.06392074638852521, -0.02114651782436191, -0.1048754766728735, -0.04084822662969809, -0.03495334210252194, -0.09086243028936497, -0.01567706519137994, 0.1230969881518043, -0.1713885145265223, 0.2738158404321586, -0.07687015757764104, 0.09125850053171039, -0.1484882591012042, 0.1013938086707741, 0.4971694609144833, 0.1656987391292135, 0.3685787946108209 },
            { -0.02481806004819344, 0.05288802479084666, 0.04486277866259759, 0.0153154875257764, -0.09431097022455495, -0.02965311521412531, -0.08156393720486721, -0.009882915562021978, -0.06339529634973126, -0.02443069530314655, 0.07970409139217896, -0.04845940661118629, 0.06194973743606519, -0.1197922809376863, 0.02064687031190651, -0.1036012041522326, 0.150383658041998, 0.7373839012385265, 0.2457584230227302, 0.19101490918512 },
            { 0.03035599495192353, 0.04221304655041525, 0.06264907773642718, -0.06344250344999278, -0.1908784358106109, 0.1997659415127075, -0.1054149175570878, 0.06657883726150562, -0.03426199735073512, -0.02067674782065948, -0.1169768995509059, 0.3264594265030001, -0.03801987721841998, -0.1013853577671659, -0.01267142536340005, -0.05599128620859906, 0.1253852013324384, 0.6148076866854171, 0.2049057041905576, 0.06659853137318457 },
            { 0.06352765554127161, 0.02749032140768099, 0.05846000695609109, 0.06035522808896748, -0.219873782383911, 0.3539384799301844, -0.09298837215216166, 0.1179621124472685, -0.01244872689476472, -0.009810349994165926, -0.2673965436902117, 0.5784096743438195, -0.0357974493795469, -0.04810359214159517, -0.0119307252205764, -0.02034382944351315, 0.05911937134506743, 0.2898830447987935, 0.0966134463081182, 0.01293403013318382 },
            { 0.04594028515371189, 0.01199500022058041, 0.03184692421737121, 0.4862210033879991, -0.1348021362514161, 0.2527511443748776, -0.04879811037129397, 0.08423796960366176, -0.002098986379915221, -0.001932493981486087, -0.2022409720496205, 0.4130483555694139, -0.008699128768779277, -0.00947569682598217, -0.002899282401332713, -0.003430183767242155, 0.01161119876768041, 0.05693378626936274, 0.01897513290806949, 0.0008161903243398272 },
            { -0.01180996645149387, 0.05069626182080483, -0.0632407930090033, 0.02296307237135093, 0.04013050357658124, -0.05850762502593039, -0.006634386119137334, -0.007829233887372625, -0.1393742841945275, 0.1128140819453015, 0.002964523882360827, -0.03838948395554678, 0.06227831583238455, 0.5531670724237699, 0.008333811200630668, -0.09144973573154426, 0.02771805726565215, 0.1359113714044075, 0.01818706389478437, 0.382071372756528 },
            { 0.007480416801563532, 0.04718712761236265, -0.06016617974018893, 0.06392074638852521, 0.1308407699709968, -0.173868260263814, -0.0309506963854844, -0.02326628836143448, -0.1141373874454782, 0.06456652179422918, -0.008476175114596429, -0.1140827846766692, -0.03125772910118203, 0.3165923368929813, -0.00418277227648243, -0.07489067283322917, 0.111891268243639, 0.5486421926841218, 0.07341689301353853, 0.2707406727966017 },
            { 0.03670891504111474, 0.04054941549128142, -0.02738137943100375, 0.01531548752577639, 0.08970102474472434, -0.04916054465014846, -0.05986959972854036, -0.006578448568473819, -0.07714567265356866, 0.01546711867777101, -0.08104508256560657, -0.03225644416871129, -0.1044315886215485, 0.07584071607267931, -0.01397457736808873, -0.05061874518511841, 0.1659531133313368, 0.8137264096659076, 0.1088893008181899, 0.1403105815720274 },
            { 0.06044906001614881, 0.03086413978776941, 0.02859661327419247, -0.06344250344999276, -0.1112957615828295, 0.3311828256963826, -0.07481857350739313, 0.04431743385086617, -0.04031497438527558, -0.00802495097636504, -0.1896720419756249, 0.2173039457299646, -0.1022022093630883, -0.03934915359318769, -0.01367625160917432, -0.02645246771930806, 0.1383665273056702, 0.6784596879335661, 0.09078850111641967, 0.0489201534512594 },
            { 0.06043649029637845, 0.01926553891515532, 0.0633382720890666, 0.06035522808896752, -0.2677887085849992, 0.5867784318905249, -0.06408928559831403, 0.07852011735736367, -0.01422420771389126, -0.007953196519488002, -0.2307069821647716, 0.3850117174733838, -0.05120394157495573, -0.0389973162856494, -0.00685188698683332, -0.009333142365132292, 0.06524009231219403, 0.3198950897503256, 0.04280695851126008, 0.009500731109414975 },
            { 0.03406735283559087, 0.008142775849777385, 0.04638054314881033, 0.4862210033879993, -0.2044842796896845, 0.4190245722479253, -0.03291254058452187, 0.05607203128192795, -0.002347006995056328, -0.001951280480737685, -0.1449732333125774, 0.2749408660180999, -0.01033810172772199, -0.009567813631020244, -0.001383399451642751, -0.001539976837896521, 0.01281332433386748, 0.06282823019575037, 0.008407398329947885, 0.0005995350811626859 },
            { 0.05912687788879308, 0.03180179404222475, 0.1159128503118907, 0.02296307237135092, 0.1090023499462377, -0.08055904918128892, -0.003931719417892977, -0.004093826127929349, -0.1137277078014316, 0.1602266273371639, -0.009573714351759688, -0.0200734675596315, -0.2769263196697683, 0.7856474372712355, -0.01407276047193886, -0.02833833661623596, 0.01995605886446618, 0.09785156665570688, 0.004972592207890609, 0.1438356743009172 },
            { 0.06252600254358653, 0.0289377971385459, 0.001372137073580015, 0.0639207463885252, 0.3971173140377131, -0.2393989112265287, -0.01805147925380405, -0.01216570363897289, -0.09165837668933641, 0.1024691772172832, -0.04933640068369695, -0.05965271843641603, -0.2505110154564937, 0.5024423706469533, -0.01273039529180683, -0.02283916542884438, 0.08055790902260716, 0.3950037258311602, 0.02007318345823585, 0.1019238027477101 },
            { 0.06401452085726679, 0.02401346569938592, -0.06384099147382731, 0.01531548752577638, 0.4453007462833851, -0.06768907014248239, -0.03407527202316353, -0.003439803308762181, -0.06045697446916851, 0.04014907672527485, -0.1089780824023751, -0.01686656393608894, -0.1933509185493983, 0.196865026508001, -0.009825650256067331, -0.01506449155115129, 0.1194805994749664, 0.5858553496455298, 0.02977182528766903, 0.05282172010523024 },
            { 0.05800446738054349, 0.01756640489401686, -0.02177415774563863, -0.06344250344999272, 0.1150568152338248, 0.4560050682530478, -0.04143146470978584, 0.02317313178165139, -0.03073895604272494, 0.004337966933543467, -0.1547069343953466, 0.1136260052425139, -0.1147806308368346, 0.02127057568985755, -0.005832888425018687, -0.007659442895757026, 0.099619195433491, 0.4884679088367183, 0.02482281889090664, 0.01841661993098378 },
            { 0.04186064933513221, 0.0105645351094573, 0.05053549886072312, 0.06035522808896757, -0.2422139471292825, 0.8079342227998206, -0.03460061119824488, 0.04105736431301436, -0.01057373173637731, -0.003761479733218302, -0.1468165229763913, 0.2013186796084374, -0.04486621694413256, -0.01844385644173889, -0.002279998250400192, -0.002634731456633209, 0.04697064841260318, 0.2303135887312679, 0.01170400838574248, 0.003576672221253318 },
            { 0.01962420598725295, 0.004337130891051276, 0.05592603105981409, 0.4862210033879993, -0.2567083662260169, 0.5769542193676214, -0.01742350870606221, 0.02931949026050379, -0.001710765389243328, -0.001280884361080516, -0.08094727115360836, 0.1437637599198278, -0.007947985229583, -0.006280625963661423, -0.0004038983817205855, -0.0004262835012591587, 0.009225157889150515, 0.0452341896879733, 0.002298697781345671, 0.0002257026796955094 },
            { 0.04431507987801304, 0.01140847411394417, 0.5468161352780181, 0.02296307237135093, 0.1798605221734306, -0.09707563019542723, -0.001354381067504129, -0.001295994820299538, -0.04720853568746388, 0.08369674194555921, -0.005668397252368063, -0.006354717853122915, -0.1975786138772873, 0.4103945262425712, -0.002637746050903383, -0.003090342282084259, 0.007612802018675497, 0.03732824247645013, 0.0004983455559646605, 0.01737041703248366 },
            { 0.0408586128471236, 0.01023279818990667, 0.2363406523412855, 0.06392074638852518, 0.6743596156126489, -0.2884815599438856, -0.006157463606410521, -0.003851333302565797, -0.03767533350050391, 0.05508582440382104, -0.02626601406488226, -0.01888444005546626, -0.1607124138895545, 0.2701051472659767, -0.002145568929497643, -0.00246628442108507, 0.03073108856777107, 0.1506853222780447, 0.002011703625043514, 0.01230890019370532 },
            { 0.03460655390859928, 0.008299948653127002, -0.01828846790103174, 0.01531548752577637, 0.82703672618516, -0.08156698978207606, -0.01144413427121369, -0.001088948854127261, -0.02446729224788955, 0.02360591329750898, -0.05029142187803355, -0.005339498751130132, -0.1075218874132648, 0.1157480850396287, -0.001435456137404466, -0.001601666026295292, 0.04557924763867875, 0.2234910619738998, 0.002983686617520111, 0.006379052422567918 },
            { 0.0259164432194567, 0.005910599499533101, -0.05275778434852091, -0.06344250344999273, 0.3808047631006006, 0.5494972920218519, -0.01366372175442971, 0.007335987856018189, -0.0122158508994974, 0.004545170014435568, -0.06214283463020207, 0.03597092539934321, -0.05555789381239086, 0.0222865651805119, -0.0007417180034027943, -0.000799668110789839, 0.03800255437436421, 0.1863398734041433, 0.002487704795332158, 0.00222409614363581 },
            { 0.01593598620529179, 0.003462951108658061, 0.03336325895824156, 0.06035522808896757, -0.1776955438281812, 0.9735805552799658, -0.01121183201771195, 0.01299765300773344, -0.004128734788023088, -0.0008735946956843403, -0.05268631774399352, 0.06373205843357314, -0.0194016314710052, -0.004283541663982758, -0.0002590188066888964, -0.000270273235573396, 0.01791827983082634, 0.0878596202351225, 0.00117295774963268, 0.000431939352831775 },
            { 0.00665771399860509, 0.001391969784304864, 0.06058151635655214, 0.4862210033879993, -0.2869149807499818, 0.6952439857250874, -0.005566526079097772, 0.009281759000999867, -0.0006586200895538977, -0.0004532074053109278, -0.02684502139536829, 0.04551172482186594, -0.003176248551477294, -0.00222223510818597, -4.240406848166761e-5, -4.311426908151783e-5, 0.003519196905465871, 0.01725585862962689, 0.0002303719621372102, 2.725714389505141e-5 },
            { -0.05389775195933151, -0.013227116196942, 0.0249920358298531, 0.02296307237135093, -0.003043713021476355, -0.003070202202425279, 0.00335147270198656, -0.03869951756012165, 0.00369463978164143, -0.04229399310513542, 0.05165639762498746, -0.06295662310630287, 0.05694564706686826, -0.06880413895196408, 0.717792810810932, 0.07576114826007367, 0.007189581001361394, 0.01169605643511585, 0.1474273391626737, 0.1625228550568548 },
            { -0.06411430991414301, 0.006201489332696592, 0.02261687872759301, 0.06392074638852521, -0.01392170394068187, -0.009123780282608174, -0.007079253710885174, -0.1150041176384304, -0.001369933510283196, -0.03395806833685169, 0.1749988982510967, -0.1870894353808792, 0.03386470732193036, -0.05524320313244054, 0.4268604310941388, -0.02809143567790597, 0.02902264500981321, 0.0472142248438169, 0.5951294419590555, 0.1151657785964431 },
            { -0.04014145269974601, 0.03583994583296031, 0.01860662089780792, 0.01531548752577638, -0.02612434745918833, -0.002579711830559221, -0.07952621128876297, -0.03251694732285554, -0.005377371211551091, -0.02226607914978766, 0.1472593063703764, -0.05289877823391889, 0.009957320258018064, -0.03622260021486128, 0.1255107855347554, -0.1102667219770985, 0.0430453454687918, 0.07002644379091323, 0.8826746293838812, 0.05968433632504863 },
            { 0.01884376849512766, 0.06017946570132739, 0.01347446475470749, -0.06344250344999279, -0.03154655796161145, 0.01737890130402362, -0.1893917279089017, 0.2190588931437155, -0.005355160361585842, -0.01124351300523818, -0.07745566629912019, 0.3563664108294741, -0.00219010364668522, -0.01829101899169433, -0.0276059845395271, -0.1098112731115391, 0.03588986581588235, 0.05838586364793877, 0.7359465619956207, 0.02080931358807826 },
            { 0.06192807194017279, 0.06060991292077848, 0.008025178421052081, 0.06035522808896745, -0.02617284368754665, 0.03079134442950866, -0.2317157609088892, 0.3881210734290426, -0.002698688381912684, -0.003842259102730207, -0.2682056897723328, 0.6313978488627213, -0.003123670034841124, -0.00625061172485027, -0.03937347294906638, -0.05533847484287058, 0.01692214298135734, 0.02752905061860732, 0.3470002649944992, 0.004041354718333012 },
            { 0.04862820360401147, 0.03428466045675862, 0.003269064709676139, 0.4862210033879992, -0.01311087401518943, 0.02198841884311198, -0.1459762289690912, 0.277161289398504, -0.0005462477060022564, -0.0006184117065435313, -0.2161160854618543, 0.4508877613063371, -0.0008087132867279911, -0.001006036126235975, -0.01019373056800913, -0.01120118763588444, 0.003323553029425885, 0.005406777361560172, 0.06815175732793077, 0.0002550260502227689 },
            { -0.06379282976782499, 0.008684402068769009, 0.06412087895770717, 0.02296307237135094, -0.00953836106672314, -0.01550773020042077, -0.00192415488124429, -0.03396466996500823, -0.0107141494589547, -0.1163243391740413, 0.03245954029053062, -0.05525394270342076, 0.1807423973151231, -0.1892371802333869, 0.3958577944131346, -0.0381744454326982, 0.03187180698725667, 0.05184925980269096, 0.113559042772138, 0.6323236079050223 },
            { -0.05366934107792429, 0.02522055451733842, 0.06374948636215381, 0.06392074638852521, -0.04676233042964466, -0.04608462690790789, -0.02585430724321401, -0.1009334778951179, -0.0252712180663295, -0.1001079523951794, 0.1016075567526703, -0.1641992284988918, 0.09931601337172273, -0.1628562583266273, 0.2175196223312791, -0.09004118701038084, 0.1286589774615912, 0.209303248824951, 0.4584111070458615, 0.4480726147951247 },
            { -0.01716348491443621, 0.04802213177632996, 0.06024010720028761, 0.01531548752577638, -0.09701662197790466, -0.01303024114553217, -0.09892737104940026, -0.02853853106500777, -0.03378760831065838, -0.07257153245537241, 0.05214681277783824, -0.04642666517679368, 0.01781019818981131, -0.1180598339486211, 0.03900748179845921, -0.120385030533487, 0.1908223778578111, 0.310431066857076, 0.6798989018005912, 0.2322123547932327 },
            { 0.03530397953037387, 0.06330343672526852, 0.05064577825811677, -0.06344250344999278, -0.1302123445138328, 0.08778161659503846, -0.1905084506694938, 0.1922572548086026, -0.02720864892358002, -0.04073090433257388, -0.1322588340281061, 0.3127653338735721, -0.0188893677391553, -0.06626129612238689, -0.04137105384324198, -0.0969442406613563, 0.1591017440189834, 0.2588277365007831, 0.5668784879814749, 0.08096227599150621 },
            { 0.0639371521799965, 0.05747601502754914, 0.034460931747505, 0.06035522808896746, -0.1184650124497249, 0.1555284735135184, -0.2148176965315738, 0.3406348449952281, -0.01263713071548187, -0.01526327359464699, -0.2656990389987793, 0.554146948212526, -0.01563033931104462, -0.02483039127228733, -0.03423320558712823, -0.04502601524947391, 0.07501678815642414, 0.12203779158932, 0.2672843324600289, 0.01572359773907744 },
            { 0.04463017446997676, 0.03086900743731761, 0.01551856697265683, 0.4862210033879993, -0.06352598762442813, 0.1110644981895546, -0.1303654101671914, 0.2432508805018478, -0.002464059094051972, -0.002629779475575696, -0.1956270766985979, 0.3957220908565506, -0.003697581105017021, -0.004278142099298797, -0.008098356128051876, -0.008779426662768309, 0.01473349290392761, 0.02396854065043375, 0.0524953402086383, 0.0009922234760781287 },
            { -0.03198901138868429, 0.04072272426009146, 0.00253845149745814, 0.02296307237135092, -0.0005829365126077124, -0.03529117421593723, -0.007520676986714736, -0.02643330261170249, -0.09529990803159989, -0.005532763712304889, 0.00932156451667638, -0.04300186604121, 0.1181202493763715, -0.009000735454406338, 0.08847278011297714, -0.1161217774687651, 0.05644800369408115, 0.09182997405976662, 0.06878120513344724, 0.8715761274017124 },
            { -0.01157174921785281, 0.05037747843137192, 0.02003881732295936, 0.06392074638852518, -0.02114651782436185, -0.1048754766728735, -0.04443552699092775, -0.07855236537266296, -0.09884198915624272, -0.03523183989880843, 0.01472950380585276, -0.1277894912563813, 0.03276417664073568, -0.05731538287021255, 0.02454056616729772, -0.1204377601871922, 0.2278672946887632, 0.3706959748964943, 0.2776535238363947, 0.6176100172691215 },
            { 0.02298847246979982, 0.06112980401274633, 0.04486277866259757, 0.01531548752577638, -0.09431097022455491, -0.02965311521412532, -0.1130530222319415, -0.02221036237101679, -0.08787008196557482, -0.05490430351787452, -0.05485414225123192, -0.03613195980219151, -0.04263519789748013, -0.08931867272295832, -0.03193402069985449, -0.1070686248803646, 0.3379645934269699, 0.5498029658535547, 0.4118057416932155, 0.3200746301345088 },
            { 0.05558062915139155, 0.06338055227821583, 0.06264907773642718, -0.06344250344999276, -0.1908784358106108, 0.1997659415127075, -0.1783321839268185, 0.1496258965827333, -0.0579615955203167, -0.04646787265042858, -0.1825047059589363, 0.2434123671817724, -0.05931775024797074, -0.07559423293739674, -0.04442935315657239, -0.07062549834269531, 0.281784331767232, 0.4584085562506235, 0.3433507769683189, 0.1115960025723169 },
            { 0.06257291481702323, 0.05025144905995921, 0.05846000695609109, 0.06035522808896752, -0.219873782383911, 0.3539384799301844, -0.1813605545641774, 0.2651020589078487, -0.02427946592675177, -0.0220472822002282, -0.2443014879364104, 0.4312697278832393, -0.03270562149779866, -0.03586665993553288, -0.02449670801162248, -0.0295842335804969, 0.1328618718312719, 0.216140544312589, 0.1618905729663329, 0.02167294128342263 },
            { 0.03720946484049108, 0.02500234083768603, 0.03184692421737122, 0.4862210033879993, -0.1348021362514161, 0.2527511443748776, -0.1042423848224755, 0.1893121335049863, -0.004483848745114052, -0.004342988801154198, -0.1596172955744829, 0.3079741916680895, -0.006865727522245339, -0.007065202006314084, -0.005142471376400122, -0.005463515096059551, 0.02609441824870967, 0.04245056678833356, 0.03179573088411361, 0.001367651443004748 },
            { 0.0321881155460626, 0.06285567073415067, -0.06324079300900334, 0.02296307237135093, 0.04013050357658134, -0.05850762502593039, -0.009711041087530001, -0.01759502250471649, -0.2040082346811198, 0.2535326366833879, -0.006246958243690738, -0.02862369533820291, -0.1312352519091381, 0.4124485176856836, -0.0394664321057306, -0.09980698333608527, 0.06229215379077595, 0.1013372748792837, 0.03047520098922862, 0.6402188909846429 },
            { 0.04400865568168001, 0.06408506789230306, -0.06016617974018897, 0.06392074638852518, 0.1308407699709969, -0.173868260263814, -0.04857092888528941, -0.05228747451023485, -0.1791158059812511, 0.145103521029434, -0.04046025761679815, -0.08506159852786879, -0.1492059513697447, 0.2360553376577765, -0.04487076805843308, -0.08762885621133538, 0.2514587520502307, 0.40907470887753, 0.1230212080155453, 0.453667313600937 },
            { 0.05826833599130734, 0.06263264117780594, -0.02738137943100375, 0.01531548752577637, 0.0897010247447244, -0.04916054465014846, -0.1034220757833111, -0.01478407112030481, -0.1332657248371149, 0.03476001676963943, -0.1110639462451082, -0.02405082161688029, -0.1431127463602223, 0.0565478179808109, -0.04303835597161733, -0.06519761321830694, 0.3729545962986337, 0.6067249266986104, 0.1824606405524624, 0.2351117914942473 },
            { 0.06403227592366881, 0.05439399762242052, 0.02859661327419247, -0.06344250344999275, -0.1112957615828295, 0.3311828256963826, -0.1421917227992349, 0.09959674946164501, -0.07661808283317377, -0.01803486714787288, -0.1836403799503232, 0.1620246301191857, -0.09895213002247319, -0.02933923742167985, -0.02975791538048961, -0.03748387769016393, 0.3109579042937159, 0.5058683109455205, 0.1521299883829599, 0.08197318255854248 },
            { 0.05264685547309843, 0.03799063097909498, 0.0633382720890666, 0.06035522808896755, -0.2677887085849992, 0.5867784318905249, -0.1317947084550398, 0.1764621228398918, -0.02925099400242877, -0.01787360982669338, -0.1919241923303776, 0.2870697119908556, -0.04259634900813949, -0.02907690297844402, -0.01281001782391283, -0.01431046876871242, 0.1466172691933787, 0.2385179128691409, 0.07172959153359201, 0.01591992483113626 },
            { 0.02676416341778012, 0.01742115207246918, 0.04638054314881033, 0.4862210033879993, -0.2044842796896845, 0.4190245722479253, -0.07156273122095388, 0.1260134345816273, -0.005103168208166409, -0.004385208625197229, -0.1120035232574901, 0.2049994627184004, -0.007987017953877386, -0.007133885486560701, -0.002401939244359504, -0.002496623850060817, 0.02879601417684652, 0.04684554035277141, 0.01408787891129268, 0.001004612520428161 },
            { 0.06414276554877692, 0.05544107460291958, 0.1159128503118907, 0.0229630723713509, 0.1090023499462378, -0.08055904918128891, -0.007414539469575515, -0.009200256869000667, -0.2144706904670097, 0.3600851825871689, -0.009450639178020227, -0.0149670368185601, -0.273366285010898, 0.5857888820212306, -0.03121983274361793, -0.03984643256523562, 0.04484823290207776, 0.07295939261809517, 0.008332337085833707, 0.241018622307625 },
            { 0.06339813205069471, 0.05209833398446392, 0.001372137073579994, 0.06392074638852518, 0.3971173140377132, -0.2393989112265287, -0.03483009213216362, -0.02734058432699003, -0.1768536339813464, 0.2302840233302728, -0.04612028649581972, -0.04447783774839887, -0.2341808409836039, 0.3746275245339636, -0.02674465392459224, -0.03285757314908515, 0.1810417523062836, 0.2945198825474837, 0.03363568214871818, 0.1707888855668302 },
            { 0.05942748792151317, 0.04541758778139662, -0.06384099147382732, 0.01531548752577637, 0.4453007462833851, -0.06768907014248239, -0.06806880972505218, -0.00773043921028907, -0.1207689344019534, 0.09022899541475636, -0.09509995600619099, -0.01257592803456205, -0.1687280913965105, 0.1467851078185195, -0.01926961399917675, -0.02243761695429893, 0.2685146295130721, 0.436821319607424, 0.04988723659337359, 0.08851085288512721 },
            { 0.04956597535350792, 0.03512102572295893, -0.02177415774563864, -0.06344250344999275, 0.1150568152338249, 0.456005068253048, -0.08601540851676494, 0.05207811914528779, -0.06381680879289209, 0.009748926512914159, -0.1268945928308544, 0.08472101787887759, -0.09414601531492076, 0.01585961611048687, -0.01075195813372799, -0.01185650198895421, 0.2238791190516141, 0.3642079852185952, 0.04159442113339366, 0.03085985715923718 },
            { 0.0335056181581008, 0.02224021621500654, 0.05053549886072312, 0.06035522808896757, -0.2422139471292825, 0.8079342227998206, -0.07441408499192803, 0.09227023479742506, -0.02274048188352638, -0.00845335846509254, -0.1149108929353092, 0.1501058091240267, -0.03511605469984201, -0.01375197770986464, -0.004010433672539823, -0.004224945963011446, 0.1055594490814504, 0.1717247880624208, 0.0196118521383436, 0.005993260124111884 },
            { 0.0150186383032591, 0.009503613126750486, 0.05592603105981409, 0.4862210033879993, -0.2567083662260169, 0.5769542193676214, -0.03849962948623528, 0.06589113294883359, -0.003780170500378516, -0.00287859444274615, -0.06142427151708332, 0.107192117231498, -0.006031076721897791, -0.004682915881995785, -0.0006887799148826909, -0.0007023165198023901, 0.02073215119182448, 0.03372719638529939, 0.003851818924993811, 0.000378199283145482 },
            { 0.03571619931334923, 0.02387755248140032, 0.5468161352780181, 0.0229630723713509, 0.1798605221734306, -0.09707563019542723, -0.002901315978539633, -0.002912552921166975, -0.1011287607304589, 0.1880958059611319, -0.004458170814318013, -0.004738159752255507, -0.1553947563490089, 0.3059954622269984, -0.004662297330722564, -0.004935988805057382, 0.01710862451798511, 0.02783241997714044, 0.0008350540289500871, 0.02910678454720032 },
            { 0.03261684444761611, 0.02159057731875926, 0.2363406523412855, 0.06392074638852516, 0.6743596156126489, -0.2884815599438856, -0.01326292884770312, -0.008655290812183167, -0.08115115240152369, 0.1237970833441732, -0.02051976161796564, -0.01408048254584888, -0.1255531354668172, 0.2013938883256244, -0.003766961396278299, -0.003960902683649488, 0.06906348727382615, 0.1123529235719895, 0.003370916419419487, 0.02062544067198771 },
            { 0.02721931899497909, 0.01773922306779173, -0.01828846790103174, 0.01531548752577636, 0.82703672618516, -0.08156698978207606, -0.02486608424789922, -0.002447248334956145, -0.05316310836061714, 0.05305073033824544, -0.0388854075364265, -0.003981199270301241, -0.08313609468609537, 0.08630326799889229, -0.002494326072825398, -0.002594835591918925, 0.1024324856668357, 0.1666378239457428, 0.004999622252598597, 0.01068907580812611 },
            { 0.02004177095114049, 0.01282671331092898, -0.05275778434852091, -0.06344250344999273, 0.3808047631006006, 0.5494972920218519, -0.0299960479594073, 0.01648652643129585, -0.02681752863764923, 0.01021458419076469, -0.04749133265020086, 0.02682038682406555, -0.0424589324270452, 0.01661715100418285, -0.001273892195405545, -0.001308935461866716, 0.0854050101290361, 0.1389374176494714, 0.004168529020308526, 0.003726812496441915 },
            { 0.012128472842776, 0.007628082018236185, 0.03336325895824156, 0.06035522808896759, -0.1776955438281812, 0.9735805552799658, -0.02486161372787461, 0.02921026507439177, -0.009155239689866106, -0.001963272339501601, -0.03982904799270793, 0.04751944636691484, -0.01466696751802502, -0.003193864020165511, -0.0004400519368588794, -0.0004468576524657435, 0.0402686318233112, 0.06550926824263764, 0.001965469708509737, 0.0007237803016946398 },
            { 0.00500386199532981, 0.003103602475114139, 0.06058151635655214, 0.4862210033879993, -0.2869149807499818, 0.6952439857250874, -0.01244407649140392, 0.02085935365519548, -0.001472357922467957, -0.001018515299256929, -0.02012312239935646, 0.03393413016767033, -0.002380927078835721, -0.001656927214239975, -7.143477827131067e-5, -7.186424682587012e-5, 0.007908864346238109, 0.01286619118885476, 0.0003860233784315215, 4.567350416753713e-5 },
            { -0.01322711619694193, -0.05389775195933141, 0.02499203582985307, 0.02296307237135093, -0.003043713021476342, -0.003070202202425307, 0.05165639762498781, -0.06295662310630289, 0.05694564706686869, -0.06880413895196405, 0.003351472701986234, -0.03869951756012163, 0.003694639781641091, -0.04229399310513553, 0.07576114826007302, 0.7177928108109325, 0.01169605643511596, 0.007189581001361325, 0.1474273391626736, 0.1625228550568547 },
            { 0.006201489332696641, -0.06411430991414306, 0.02261687872759301, 0.06392074638852518, -0.01392170394068189, -0.009123780282608168, 0.1749988982510969, -0.1870894353808791, 0.03386470732193069, -0.05524320313244052, -0.007079253710885389, -0.1150041176384304, -0.001369933510283508, -0.03395806833685176, -0.02809143567790605, 0.426860431094139, 0.04721422484381702, 0.02902264500981312, 0.5951294419590556, 0.1151657785964431 },
            { 0.03583994583296044, -0.04014145269974614, 0.01860662089780795, 0.01531548752577637, -0.02612434745918835, -0.002579711830559214, 0.1472593063703767, -0.05289877823391882, 0.009957320258018369, -0.03622260021486127, -0.07952621128876321, -0.03251694732285563, -0.005377371211551338, -0.02226607914978769, -0.1102667219770987, 0.1255107855347557, 0.07002644379091347, 0.04304534546879173, 0.8826746293838812, 0.0596843363250486 },
            { 0.06017946570132747, 0.01884376849512754, 0.01347446475470749, -0.06344250344999275, -0.03154655796161145, 0.01737890130402362, -0.07745566629911969, 0.3563664108294742, -0.00219010364668501, -0.01829101899169433, -0.1893917279089019, 0.2190588931437153, -0.005355160361586038, -0.0112435130052382, -0.1098112731115393, -0.0276059845395269, 0.05838586364793905, 0.03588986581588219, 0.7359465619956206, 0.02080931358807825 },
            { 0.06060991292077854, 0.06192807194017275, 0.008025178421052081, 0.06035522808896753, -0.02617284368754659, 0.03079134442950866, -0.2682056897723324, 0.6313978488627213, -0.00312367003484096, -0.006250611724850259, -0.2317157609088895, 0.3881210734290424, -0.002698688381912829, -0.003842259102730197, -0.05533847484287081, -0.03937347294906619, 0.02752905061860734, 0.01692214298135712, 0.3470002649944992, 0.004041354718333011 },
            { 0.0342846604567586, 0.04862820360401148, 0.003269064709676153, 0.4862210033879993, -0.01311087401518943, 0.02198841884311198, -0.216116085461854, 0.4508877613063377, -0.0008087132867278315, -0.001006036126235947, -0.1459762289690912, 0.2771612893985034, -0.000546247706002416, -0.000618411706543566, -0.01120118763588466, -0.01019373056800891, 0.005406777361560394, 0.003323553029425746, 0.06815175732793075, 0.0002550260502227897 },
            { 0.00868440206876904, -0.06379282976782495, 0.06412087895770714, 0.02296307237135092, -0.009538361066723119, -0.01550773020042077, 0.03245954029053082, -0.05525394270342075, 0.1807423973151233, -0.1892371802333868, -0.00192415488124455, -0.03396466996500825, -0.01071414945895491, -0.1163243391740414, -0.03817444543269832, 0.3958577944131348, 0.05184925980269099, 0.0318718069872567, 0.113559042772138, 0.6323236079050224 },
            { 0.02522055451733846, -0.05366934107792429, 0.0637494863621538, 0.06392074638852517, -0.04676233042964464, -0.04608462690790789, 0.1016075567526705, -0.1641992284988918, 0.0993160133717229, -0.1628562583266272, -0.02585430724321424, -0.100933477895118, -0.02527121806632969, -0.1001079523951795, -0.0900411870103809, 0.2175196223312791, 0.209303248824951, 0.1286589774615911, 0.4584111070458617, 0.4480726147951247 },
            { 0.04802213177633005, -0.0171634849144363, 0.06024010720028761, 0.01531548752577636, -0.09701662197790466, -0.01303024114553217, 0.05214681277783857, -0.0464266651767936, 0.01781019818981155, -0.1180598339486211, -0.09892737104940051, -0.02853853106500787, -0.03378760831065856, -0.07257153245537247, -0.1203850305334872, 0.03900748179845939, 0.3104310668570762, 0.1908223778578108, 0.6798989018005912, 0.2322123547932327 },
            { 0.06330343672526859, 0.03530397953037382, 0.05064577825811677, -0.06344250344999275, -0.1302123445138328, 0.08778161659503846, -0.1322588340281057, 0.3127653338735722, -0.01888936773915513, -0.06626129612238689, -0.1905084506694941, 0.1922572548086025, -0.02720864892358015, -0.04073090433257394, -0.0969442406613565, -0.04137105384324181, 0.2588277365007834, 0.1591017440189831, 0.5668784879814749, 0.08096227599150618 },
            { 0.0574760150275492, 0.0639371521799965, 0.03446093174750501, 0.06035522808896753, -0.1184650124497249, 0.1555284735135184, -0.2656990389987788, 0.5541469482125257, -0.01563033931104447, -0.02483039127228729, -0.2148176965315743, 0.3406348449952283, -0.01263713071548199, -0.01526327359464702, -0.0450260152494741, -0.03423320558712808, 0.1220377915893201, 0.07501678815642404, 0.267284332460029, 0.01572359773907744 },
            { 0.03086900743731763, 0.04463017446997677, 0.01551856697265683, 0.4862210033879993, -0.06352598762442813, 0.1110644981895546, -0.1956270766985978, 0.3957220908565511, -0.003697581105016882, -0.004278142099298769, -0.1303654101671915, 0.2432508805018473, -0.002464059094052076, -0.002629779475575716, -0.008779426662768541, -0.008098356128051647, 0.02396854065043394, 0.01473349290392742, 0.05249534020863827, 0.0009922234760781148 },
            { 0.04072272426009162, -0.03198901138868439, 0.002538451497458112, 0.02296307237135092, -0.0005829365126076708, -0.03529117421593723, 0.009321564516676623, -0.04300186604120998, 0.1181202493763718, -0.009000735454406328, -0.007520676986715019, -0.02643330261170255, -0.0952999080316001, -0.005532763712304853, -0.1161217774687653, 0.08847278011297732, 0.09182997405976687, 0.05644800369408106, 0.06878120513344721, 0.8715761274017124 },
            { 0.05037747843137204, -0.01157174921785292, 0.02003881732295934, 0.06392074638852516, -0.02114651782436181, -0.1048754766728735, 0.01472950380585309, -0.1277894912563812, 0.032764176640736, -0.05731538287021251, -0.04443552699092802, -0.078552365372663, -0.0988419891562429, -0.03523183989880845, -0.1204377601871924, 0.02454056616729795, 0.3706959748964946, 0.2278672946887629, 0.2776535238363947, 0.6176100172691213 },
            { 0.0611298040127464, 0.02298847246979975, 0.04486277866259757, 0.01531548752577635, -0.09431097022455488, -0.02965311521412531, -0.05485414225123152, -0.03613195980219142, -0.04263519789747987, -0.08931867272295829, -0.1130530222319418, -0.02221036237101687, -0.08787008196557494, -0.05490430351787454, -0.1070686248803648, -0.03193402069985425, 0.549802965853555, 0.3379645934269695, 0.4118057416932154, 0.3200746301345088 },
            { 0.06338055227821583, 0.05558062915139152, 0.06264907773642718, -0.06344250344999275, -0.1908784358106108, 0.1997659415127075, -0.1825047059589359, 0.2434123671817726, -0.05931775024797056, -0.07559423293739671, -0.1783321839268187, 0.1496258965827331, -0.05796159552031676, -0.0464678726504286, -0.07062549834269551, -0.04442935315657217, 0.4584085562506238, 0.2817843317672316, 0.3433507769683188, 0.1115960025723169 },
            { 0.0502514490599592, 0.06257291481702323, 0.0584600069560911, 0.06035522808896757, -0.2198737823839109, 0.3539384799301844, -0.2443014879364101, 0.4312697278832396, -0.03270562149779855, -0.03586665993553283, -0.1813605545641775, 0.2651020589078483, -0.02427946592675182, -0.02204728220022823, -0.02958423358049713, -0.02449670801162226, 0.2161405443125893, 0.1328618718312716, 0.1618905729663329, 0.02167294128342261 },
            { 0.02500234083768605, 0.0372094648404911, 0.03184692421737122, 0.4862210033879993, -0.1348021362514161, 0.2527511443748776, -0.1596172955744828, 0.3079741916680898, -0.006865727522245221, -0.007065202006314032, -0.1042423848224756, 0.1893121335049858, -0.004483848745114184, -0.004342988801154232, -0.005463515096059773, -0.00514247137639991, 0.04245056678833389, 0.02609441824870934, 0.03179573088411358, 0.001367651443004762 },
            { 0.06285567073415085, 0.03218811554606239, -0.06324079300900338, 0.0229630723713509, 0.04013050357658139, -0.05850762502593036, -0.006246958243690561, -0.02862369533820285, -0.1312352519091377, 0.4124485176856837, -0.009711041087530193, -0.01759502250471656, -0.20400823468112, 0.2535326366833878, -0.09980698333608548, -0.03946643210573036, 0.1013372748792842, 0.06229215379077557, 0.0304752009892286, 0.6402188909846427 },
            { 0.06408506789230317, 0.04400865568167988, -0.06016617974018899, 0.06392074638852516, 0.130840769970997, -0.173868260263814, -0.04046025761679789, -0.08506159852786871, -0.1492059513697445, 0.2360553376577765, -0.04857092888528967, -0.05228747451023492, -0.1791158059812513, 0.1451035210294341, -0.08762885621133557, -0.04487076805843287, 0.4090747088775303, 0.2514587520502304, 0.1230212080155453, 0.453667313600937 },
            { 0.06263264117780602, 0.05826833599130728, -0.02738137943100377, 0.01531548752577635, 0.08970102474472445, -0.04916054465014846, -0.1110639462451079, -0.02405082161688018, -0.143112746360222, 0.05654781798081096, -0.1034220757833113, -0.0147840711203049, -0.133265724837115, 0.03476001676963943, -0.06519761321830712, -0.04303835597161712, 0.6067249266986108, 0.3729545962986334, 0.1824606405524624, 0.2351117914942473 },
            { 0.05439399762242054, 0.06403227592366881, 0.02859661327419247, -0.06344250344999275, -0.1112957615828294, 0.3311828256963826, -0.183640379950323, 0.1620246301191859, -0.09895213002247309, -0.02933923742167979, -0.1421917227992351, 0.09959674946164483, -0.0766180828331738, -0.0180348671478729, -0.03748387769016413, -0.02975791538048941, 0.5058683109455209, 0.3109579042937154, 0.1521299883829599, 0.08197318255854243 },
            { 0.03799063097909502, 0.05264685547309841, 0.0633382720890666, 0.06035522808896758, -0.2677887085849991, 0.5867784318905249, -0.1919241923303773, 0.2870697119908557, -0.0425963490081394, -0.02907690297844394, -0.13179470845504, 0.1764621228398918, -0.02925099400242882, -0.01787360982669343, -0.01431046876871264, -0.01281001782391262, 0.238517912869141, 0.1466172691933784, 0.07172959153359201, 0.01591992483113626 },
            { 0.01742115207246916, 0.02676416341778014, 0.04638054314881033, 0.4862210033879993, -0.2044842796896845, 0.4190245722479253, -0.1120035232574899, 0.2049994627184009, -0.007987017953877257, -0.007133885486560618, -0.07156273122095394, 0.1260134345816268, -0.005103168208166503, -0.004385208625197291, -0.002496623850061032, -0.002401939244359295, 0.04684554035277166, 0.02879601417684621, 0.01408787891129262, 0.001004612520428161 },
            { 0.05544107460291982, 0.06414276554877674, 0.1159128503118906, 0.02296307237135092, 0.1090023499462379, -0.08055904918128892, -0.009450639178020047, -0.01496703681856004, -0.2733662850108978, 0.5857888820212304, -0.007414539469575709, -0.009200256869000799, -0.21447069046701, 0.3600851825871692, -0.03984643256523581, -0.03121983274361774, 0.07295939261809568, 0.04484823290207746, 0.008332337085833676, 0.2410186223076251 },
            { 0.0520983339844641, 0.06339813205069451, 0.001372137073579987, 0.06392074638852516, 0.3971173140377132, -0.2393989112265287, -0.04612028649581942, -0.04447783774839878, -0.2341808409836036, 0.3746275245339635, -0.03483009213216386, -0.02734058432699011, -0.1768536339813466, 0.2302840233302729, -0.03285757314908538, -0.026744653924592, 0.294519882547484, 0.1810417523062834, 0.03363568214871817, 0.1707888855668302 },
            { 0.04541758778139677, 0.05942748792151299, -0.06384099147382732, 0.01531548752577634, 0.4453007462833851, -0.06768907014248239, -0.09509995600619066, -0.01257592803456194, -0.1687280913965103, 0.1467851078185195, -0.06806880972505248, -0.007730439210289177, -0.1207689344019535, 0.09022899541475643, -0.02243761695429916, -0.01926961399917651, 0.4368213196074242, 0.268514629513072, 0.04988723659337359, 0.08851085288512721 },
            { 0.03512102572295898, 0.04956597535350787, -0.02177415774563865, -0.06344250344999275, 0.1150568152338249, 0.456005068253048, -0.1268945928308541, 0.08472101787887776, -0.09414601531492066, 0.01585961611048694, -0.08601540851676516, 0.05207811914528758, -0.06381680879289213, 0.009748926512914109, -0.01185650198895443, -0.01075195813372776, 0.3642079852185958, 0.2238791190516138, 0.04159442113339365, 0.03085985715923713 },
            { 0.02224021621500662, 0.03350561815810076, 0.05053549886072312, 0.06035522808896759, -0.2422139471292825, 0.8079342227998206, -0.1149108929353089, 0.1501058091240268, -0.03511605469984194, -0.01375197770986457, -0.07441408499192825, 0.09227023479742501, -0.02274048188352645, -0.008453358465092603, -0.004224945963011664, -0.004010433672539618, 0.1717247880624209, 0.1055594490814502, 0.0196118521383436, 0.005993260124111881 },
            { 0.009503613126750479, 0.01501863830325909, 0.05592603105981409, 0.4862210033879993, -0.2567083662260169, 0.5769542193676214, -0.06142427151708327, 0.1071921172314986, -0.006031076721897694, -0.004682915881995695, -0.03849962948623534, 0.06589113294883298, -0.003780170500378599, -0.002878594442746227, -0.0007023165198026052, -0.0006887799148824758, 0.03372719638529972, 0.02073215119182412, 0.003851818924993811, 0.000378199283145482 },
            { 0.02387755248140052, 0.03571619931334902, 0.5468161352780181, 0.0229630723713509, 0.1798605221734306, -0.09707563019542723, -0.00445817081431777, -0.00473815975225543, -0.1553947563490088, 0.3059954622269984, -0.00290131597853989, -0.002912552921167051, -0.1011287607304589, 0.1880958059611321, -0.004935988805057649, -0.004662297330722297, 0.02783241997714063, 0.01710862451798491, 0.0008350540289500871, 0.02910678454720032 },
            { 0.02159057731875951, 0.03261684444761587, 0.2363406523412855, 0.06392074638852516, 0.6743596156126489, -0.2884815599438856, -0.02051976161796528, -0.01408048254584877, -0.1255531354668169, 0.2013938883256242, -0.01326292884770347, -0.008655290812183275, -0.08115115240152389, 0.1237970833441736, -0.003960902683649769, -0.003766961396278053, 0.1123529235719894, 0.06906348727382618, 0.003370916419419487, 0.02062544067198774 },
            { 0.01773922306779196, 0.02721931899497886, -0.01828846790103174, 0.01531548752577635, 0.82703672618516, -0.08156698978207606, -0.03888540753642614, -0.003981199270301147, -0.08313609468609519, 0.08630326799889226, -0.02486608424789954, -0.002447248334956253, -0.05316310836061724, 0.05305073033824551, -0.002594835591919178, -0.002494326072825145, 0.1666378239457429, 0.1024324856668357, 0.004999622252598597, 0.01068907580812611 },
            { 0.01282671331092906, 0.02004177095114036, -0.05275778434852091, -0.06344250344999275, 0.3808047631006006, 0.5494972920218519, -0.04749133265020072, 0.02682038682406573, -0.0424589324270452, 0.01661715100418289, -0.02999604795940747, 0.01648652643129564, -0.0268175286376492, 0.0102145841907647, -0.001308935461866938, -0.001273892195405323, 0.1389374176494718, 0.08540501012903552, 0.004168529020308512, 0.003726812496441915 },
            { 0.007628082018236318, 0.01212847284277586, 0.03336325895824156, 0.06035522808896759, -0.1776955438281812, 0.9735805552799658, -0.03982904799270771, 0.04751944636691495, -0.01466696751802489, -0.003193864020165435, -0.02486161372787477, 0.02921026507439166, -0.009155239689866162, -0.001963272339501663, -0.0004468576524659794, -0.0004400519368586435, 0.0655092682426377, 0.04026863182331115, 0.001965469708509737, 0.0007237803016946398 },
            { 0.003103602475114174, 0.005003861995329775, 0.06058151635655214, 0.4862210033879993, -0.2869149807499818, 0.6952439857250874, -0.02012312239935651, 0.03393413016767072, -0.00238092707883563, -0.001656927214239899, -0.01244407649140392, 0.02085935365519498, -0.001472357922468033, -0.001018515299256999, -7.186424682608522e-5, -7.143477827109557e-5, 0.01286619118885524, 0.007908864346237665, 0.0003860233784315215, 4.567350416753713e-5 },
            { 0.06321590579140675, 0.1896341408806131, 0.0249920358298531, 0.02296307237135092, -0.003043713021476335, -0.003070202202425286, 0.1241526136873045, -0.08443606753349973, 0.1368649624542647, -0.09227862989606112, -0.009699446978515672, -0.01722007313292476, -0.0106926016868659, -0.01881950216103839, -0.2940657255172992, 0.7676447697600115, 0.01568649908943746, 0.003199138347039897, 0.08798204278085903, 0.09699078113796587 },
            { 0.06414055318999878, 0.03873729948516186, 0.02261687872759301, 0.06392074638852516, -0.01392170394068191, -0.009123780282608154, 0.4562107610651785, -0.2509203229333106, 0.08828309237935829, -0.07409099472475678, -0.04832445726264555, -0.0511732300859989, -0.00935145088366532, -0.01511027674453547, -0.2571816728310629, 0.4951599949906886, 0.06332270189782875, 0.01291416795580148, 0.3551627826967338, 0.06872891091239733 },
            { 0.06228807721966893, -0.0604429095185291, 0.01860662089780793, 0.01531548752577635, -0.02612434745918835, -0.002579711830559165, 0.5260307700949627, -0.07094670252337003, 0.03556893599806623, -0.0485809715812853, -0.1023877382916661, -0.01446902303340438, -0.006923212704127, -0.009907707783363709, -0.1904007674063461, 0.1994981563960776, 0.09391795883137886, 0.01915383042832634, 0.5267646926621982, 0.03561856207757635 },
            { 0.0537692067727759, -0.0301550280163722, 0.01347446475470751, -0.06344250344999272, -0.03154655796161145, 0.01737890130402363, 0.1700359888680407, 0.4779509580852331, 0.004807865674403639, -0.02453152088909626, -0.1401367840566333, 0.09747434588795638, -0.003962448410319149, -0.005003011107836302, -0.1089744386566494, 0.02696623644563451, 0.078305863350627, 0.01596986611319414, 0.4391999629761916, 0.0124186323157228 },
            { 0.03737496137186573, 0.0469735001661541, 0.008025178421052095, 0.0603552280889676, -0.02617284368754659, 0.03079134442950866, -0.2305588817514023, 0.846817201695524, -0.002685214735021556, -0.008383185877584028, -0.1294459583857909, 0.1727017205962395, -0.001507598372294854, -0.001709684949996408, -0.04146165939035602, -0.01506076507864951, 0.03692137002394512, 0.007529823576019332, 0.2070836544504705, 0.002411809408895673 },
            { 0.01708257417850013, 0.05720348252809403, 0.003269064709676139, 0.4862210033879993, -0.01311087401518943, 0.02198841884311198, -0.2644842912568502, 0.6047209584193682, -0.0009897086559434443, -0.001349273993818935, -0.07012803583721372, 0.1233280922854729, -0.000262421347455459, -0.0002751738389605088, -0.007217057755503374, -0.005551053094214293, 0.007251453396228957, 0.0014788769947571, 0.04067176999104954, 0.0001521950608914524 },
            { 0.06414977996934333, 0.02496601025308557, 0.06412087895770716, 0.0229630723713509, -0.009538361066723133, -0.01550773020042078, 0.08580048869885235, -0.07410539840614609, 0.4777574136736529, -0.2538008320912566, -0.009476099752194701, -0.0151132142622829, -0.05276516460427329, -0.05176068731617153, -0.2521441561357205, 0.4656032871946723, 0.06953911099821516, 0.01418195579173266, 0.06777003923476663, 0.3773596066918112 },
            { 0.06350422041219021, -0.04055145951909035, 0.06374948636215381, 0.06392074638852514, -0.04676233042964466, -0.04608462690790787, 0.3068935788718515, -0.2202204702604666, 0.2999722437684897, -0.218419307577879, -0.04630090759823731, -0.04491223613354312, -0.04525668862742924, -0.04454490314392775, -0.2162640759114782, 0.2923409637786907, 0.2807130112891197, 0.0572492149974224, 0.2735716852817036, 0.2674018549594575 },
            { 0.05965519851214519, -0.06160941072275701, 0.06024010720028762, 0.01531548752577633, -0.09701662197790466, -0.01303024114553214, 0.3229952148850684, -0.06226644382758303, 0.1103156355110659, -0.1583393076126019, -0.09562857660029885, -0.01269875241421839, -0.03266093958832926, -0.03229205879139169, -0.1560739005148877, 0.1075092108523655, 0.4163434636794597, 0.08490998103542734, 0.4057517052442596, 0.1385802487496491 },
            { 0.0498623866214388, -0.007026130061565855, 0.05064577825811679, -0.06344250344999273, -0.1302123445138328, 0.08778161659503846, 0.03360835597125926, 0.4194741323481602, 0.004799986327678122, -0.08886822383723048, -0.1278002629816135, 0.08554845633401452, -0.01825258919269954, -0.01812397661773031, -0.08722200970661756, 0.004677874897788713, 0.3471341879602031, 0.07079529255956329, 0.3383031102942293, 0.04831686219379239 },
            { 0.03376556494483592, 0.05568889026001487, 0.034460931747505, 0.06035522808896759, -0.1184650124497249, 0.1555284735135184, -0.2568671287939833, 0.7432099568579184, -0.01511078247039565, -0.03330198620739194, -0.1158758623851273, 0.1515718363498355, -0.006816656371300522, -0.006791678659542362, -0.03257414396978033, -0.01472636486412693, 0.1636744587598975, 0.0333801209858464, 0.1595105881087866, 0.009383566554247165 },
            { 0.01515408317006661, 0.05353967983754095, 0.01551856697265682, 0.4862210033879993, -0.06352598762442813, 0.1110644981895546, -0.242832161423795, 0.5307339488594061, -0.004589812550102226, -0.005737752080577075, -0.06199328088234582, 0.1082390224989924, -0.001171745690305162, -0.001170169494297386, -0.005599315959752198, -0.004473047931381174, 0.03214609070791871, 0.006555942846442536, 0.03132829564898995, 0.0005921415174165584 },
            { 0.06143481023065276, -0.06384965943606118, 0.002538451497458109, 0.02296307237135092, -0.0005829365126076569, -0.03529117421593725, 0.03810211073971277, -0.05767317695854315, 0.482819253601608, -0.01207159261697013, -0.008567431445765002, -0.01176199169436932, -0.1085640867558489, -0.00246190654974104, -0.1774164766664286, 0.1609160413874564, 0.1231603842254641, 0.02511759352838377, 0.04104741336946095, 0.5201413019007248 },
            { 0.05890164636225365, -0.05876335259913521, 0.02003881732295935, 0.06392074638852513, -0.02114651782436179, -0.1048754766728734, 0.1230969881518046, -0.1713885145265222, 0.2738158404321589, -0.07687015757764096, -0.04084822662969832, -0.03495334210252197, -0.090862430289365, -0.01567706519137996, -0.1484882591012044, 0.09125850053171058, 0.4971694609144837, 0.1013938086707739, 0.1656987391292134, 0.3685787946108207 },
            { 0.05288802479084669, -0.02481806004819354, 0.04486277866259758, 0.01531548752577632, -0.09431097022455485, -0.02965311521412529, 0.07970409139217957, -0.04845940661118621, 0.06194973743606562, -0.1197922809376863, -0.08156393720486735, -0.009882915562022058, -0.06339529634973121, -0.02443069530314656, -0.1036012041522328, 0.02064687031190678, 0.7373839012385268, 0.1503836580419975, 0.2457584230227299, 0.1910149091851196 },
            { 0.04221304655041525, 0.0303559949519235, 0.06264907773642718, -0.06344250344999273, -0.1908784358106108, 0.1997659415127075, -0.1169768995509053, 0.3264594265030002, -0.03801987721841971, -0.1013853577671658, -0.1054149175570878, 0.06657883726150539, -0.03426199735073505, -0.02067674782065949, -0.05599128620859928, -0.01267142536339981, 0.6148076866854173, 0.125385201332438, 0.2049057041905574, 0.06659853137318436 },
            { 0.02749032140768099, 0.06352765554127163, 0.0584600069560911, 0.06035522808896761, -0.2198737823839109, 0.3539384799301844, -0.2673965436902111, 0.5784096743438197, -0.03579744937954674, -0.04810359214159514, -0.0929883721521616, 0.1179621124472681, -0.01244872689476473, -0.009810349994165926, -0.02034382944351337, -0.01193072522057618, 0.2898830447987937, 0.05911937134506703, 0.09661344630811804, 0.01293403013318376 },
            { 0.01199500022058043, 0.04594028515371191, 0.03184692421737124, 0.4862210033879993, -0.1348021362514161, 0.2527511443748776, -0.2022409720496202, 0.4130483555694143, -0.008699128768779138, -0.009475696825982111, -0.04879811037129389, 0.08423796960366126, -0.002098986379915346, -0.001932493981486143, -0.003430183767242405, -0.002899282401332505, 0.05693378626936298, 0.01161119876768019, 0.01897513290806943, 0.0008161903243398758 },
            { 0.05069626182080495, -0.01180996645149404, -0.0632407930090034, 0.0229630723713509, 0.04013050357658143, -0.05850762502593036, 0.002964523882361025, -0.03838948395554669, 0.0622783158323851, 0.5531670724237701, -0.006634386119137539, -0.007829233887372687, -0.1393742841945274, 0.1128140819453015, -0.09144973573154444, 0.008333811200630897, 0.1359113714044079, 0.02771805726565181, 0.01818706389478434, 0.3820713727565274 },
            { 0.04718712761236273, 0.007480416801563404, -0.06016617974018899, 0.06392074638852514, 0.130840769970997, -0.173868260263814, -0.008476175114596106, -0.1140827846766691, -0.03125772910118164, 0.3165923368929814, -0.03095069638548464, -0.02326628836143451, -0.1141373874454782, 0.06456652179422931, -0.07489067283322937, -0.004182772276482167, 0.5486421926841223, 0.1118912682436386, 0.07341689301353842, 0.2707406727966013 },
            { 0.04054941549128151, 0.03670891504111468, -0.02738137943100376, 0.01531548752577632, 0.08970102474472451, -0.04916054465014844, -0.08104508256560616, -0.03225644416871117, -0.1044315886215483, 0.07584071607267935, -0.0598695997285406, -0.006578448568473911, -0.07714567265356864, 0.01546711867777103, -0.05061874518511864, -0.01397457736808849, 0.8137264096659076, 0.1659531133313364, 0.1088893008181899, 0.1403105815720272 },
            { 0.03086413978776931, 0.06044906001614876, 0.02859661327419248, -0.06344250344999275, -0.1112957615828294, 0.3311828256963826, -0.1896720419756244, 0.2173039457299649, -0.1022022093630881, -0.03934915359318765, -0.074818573507393, 0.0443174338508658, -0.04031497438527537, -0.00802495097636504, -0.0264524677193082, -0.01367625160917402, 0.6784596879335673, 0.1383665273056692, 0.09078850111641931, 0.04892015345125907 },
            { 0.01926553891515538, 0.06043649029637842, 0.0633382720890666, 0.0603552280889676, -0.2677887085849991, 0.5867784318905249, -0.2307069821647711, 0.3850117174733839, -0.05120394157495559, -0.03899731628564931, -0.06408928559831409, 0.07852011735736353, -0.0142242077138913, -0.007953196519488065, -0.00933314236513254, -0.00685188698683311, 0.3198950897503257, 0.06524009231219363, 0.04280695851126007, 0.009500731109414948 },
            { 0.008142775849777399, 0.03406735283559089, 0.04638054314881033, 0.4862210033879993, -0.2044842796896845, 0.4190245722479253, -0.1449732333125772, 0.2749408660181002, -0.01033810172772186, -0.009567813631020178, -0.03291254058452173, 0.05607203128192756, -0.002347006995056432, -0.001951280480737741, -0.00153997683789675, -0.00138339945164255, 0.06282823019575073, 0.01281332433386714, 0.008407398329947829, 0.0005995350811627068 },
            { 0.0318017940422249, 0.05912687788879281, 0.1159128503118906, 0.02296307237135092, 0.1090023499462379, -0.08055904918128892, -0.009573714351759514, -0.02007346755963141, -0.2769263196697681, 0.7856474372712358, -0.003931719417893172, -0.004093826127929426, -0.1137277078014315, 0.1602266273371639, -0.02833833661623618, -0.01407276047193857, 0.09785156665570734, 0.01995605886446567, 0.004972592207890592, 0.1438356743009169 },
            { 0.02893779713854605, 0.06252600254358634, 0.001372137073579974, 0.06392074638852514, 0.3971173140377132, -0.2393989112265287, -0.0493364006836967, -0.05965271843641592, -0.2505110154564935, 0.5024423706469533, -0.01805147925380427, -0.01216570363897295, -0.09165837668933653, 0.1024691772172834, -0.0228391654288446, -0.01273039529180657, 0.3950037258311604, 0.08055790902260691, 0.02007318345823582, 0.1019238027477099 },
            { 0.02401346569938601, 0.06401452085726664, -0.06384099147382732, 0.01531548752577633, 0.4453007462833852, -0.06768907014248239, -0.1089780824023748, -0.01686656393608883, -0.1933509185493982, 0.196865026508001, -0.03407527202316372, -0.003439803308762274, -0.0604569744691684, 0.04014907672527492, -0.01506449155115151, -0.009825650256067058, 0.5858553496455301, 0.1194805994749659, 0.02977182528766893, 0.05282172010523003 },
            { 0.0175664048940169, 0.05800446738054343, -0.02177415774563864, -0.06344250344999275, 0.1150568152338249, 0.456005068253048, -0.1547069343953462, 0.1136260052425141, -0.1147806308368344, 0.0212705756898576, -0.04143146470978595, 0.0231731317816512, -0.03073895604272486, 0.004337966933543439, -0.007659442895757235, -0.005832888425018454, 0.4884679088367189, 0.09961919543349063, 0.02482281889090656, 0.01841661993098367 },
            { 0.01056453510945736, 0.04186064933513217, 0.05053549886072312, 0.06035522808896759, -0.2422139471292825, 0.8079342227998206, -0.1468165229763909, 0.2013186796084375, -0.04486621694413243, -0.01844385644173882, -0.03460061119824504, 0.04105736431301425, -0.01057373173637736, -0.003761479733218357, -0.00263473145663342, -0.002279998250399981, 0.2303135887312682, 0.04697064841260282, 0.01170400838574248, 0.003576672221253282 },
            { 0.004337130891051311, 0.01962420598725297, 0.05592603105981409, 0.4862210033879993, -0.2567083662260169, 0.5769542193676214, -0.08094727115360825, 0.1437637599198283, -0.007947985229582909, -0.006280625963661329, -0.0174235087060621, 0.0293194902605034, -0.001710765389243397, -0.001280884361080585, -0.0004262835012594016, -0.0004038983817203634, 0.04523418968797371, 0.009225157889150098, 0.002298697781345671, 0.0002257026796955233 },
            { 0.01140847411394436, 0.04431507987801281, 0.5468161352780181, 0.0229630723713509, 0.1798605221734306, -0.09707563019542723, -0.005668397252367841, -0.006354717853122853, -0.1975786138772871, 0.4103945262425712, -0.001354381067504379, -0.001295994820299629, -0.04720853568746403, 0.08369674194555925, -0.003090342282084519, -0.002637746050903109, 0.03732824247645035, 0.007612802018675272, 0.0004983455559646882, 0.01737041703248361 },
            { 0.0102327981899069, 0.04085861284712333, 0.2363406523412855, 0.06392074638852516, 0.6743596156126489, -0.2884815599438856, -0.02626601406488192, -0.01888444005546615, -0.1607124138895542, 0.2701051472659763, -0.006157463606410885, -0.003851333302565887, -0.03767533350050414, 0.05508582440382138, -0.002466284421085309, -0.002145568929497356, 0.1506853222780445, 0.03073108856777103, 0.002011703625043548, 0.01230890019370529 },
            { 0.008299948653127259, 0.03460655390859903, -0.01828846790103174, 0.01531548752577634, 0.82703672618516, -0.08156698978207606, -0.05029142187803316, -0.005339498751130031, -0.1075218874132645, 0.1157480850396285, -0.01144413427121409, -0.001088948854127362, -0.0244672922478898, 0.02360591329750926, -0.001601666026295559, -0.001435456137404212, 0.2234910619738995, 0.04557924763867895, 0.002983686617520104, 0.006379052422567946 },
            { 0.005910599499533278, 0.02591644321945652, -0.05275778434852091, -0.06344250344999275, 0.3808047631006006, 0.5494972920218519, -0.06214283463020176, 0.03597092539934332, -0.05555789381239072, 0.022286565180512, -0.01366372175442993, 0.007335987856018071, -0.01221585089949751, 0.004545170014435541, -0.000799668110790068, -0.0007417180034025583, 0.1863398734041434, 0.03800255437436402, 0.002487704795332158, 0.002224096143635754 },
            { 0.003462951108658236, 0.01593598620529162, 0.03336325895824156, 0.06035522808896759, -0.1776955438281812, 0.9735805552799658, -0.05268631774399308, 0.06373205843357309, -0.01940163147100503, -0.004283541663982681, -0.01121183201771223, 0.01299765300773352, -0.004128734788023241, -0.0008735946956844166, -0.000270273235573618, -0.0002590188066886883, 0.08785962023512234, 0.01791827983082653, 0.001172957749632708, 0.000431939352831775 },
            { 0.001391969784304885, 0.006657713998605069, 0.06058151635655214, 0.4862210033879993, -0.2869149807499818, 0.6952439857250874, -0.02684502139536829, 0.04551172482186622, -0.003176248551477183, -0.002222235108185901, -0.005566526079097772, 0.009281759000999479, -0.0006586200895539879, -0.0004532074053110249, -4.311426908171906e-5, -4.240406848143863e-5, 0.01725585862962736, 0.003519196905465538, 0.0002303719621372102, 2.725714389505141e-5 },
            { 0.02748596633367319, 0.5891312624021247, 0.02499203582985311, 0.02296307237135092, -0.003043713021476383, -0.003070202202425279, 0.1853994503836216, -0.09822369638470628, 0.2043830416627825, -0.1073468766426303, -0.003365211066803625, -0.003432444281718135, -0.003709784857762126, -0.003751255414469212, -0.1186855970703016, 0.228497459249236, 0.01824795930114314, 0.0006376781353342569, 0.02040097017282976, 0.02248988510034441 },
            { 0.02492135933385428, 0.2607532295919627, 0.02261687872759303, 0.06392074638852513, -0.01392170394068193, -0.009123780282608109, 0.6961075931619859, -0.2918932908235646, 0.1347064475410574, -0.08618936887128328, -0.01541241783914418, -0.01020026219574488, -0.002982516029884156, -0.003011902598008961, -0.09541838930035929, 0.1505999752093288, 0.07366271342520672, 0.002574156428423518, 0.0823539111764251, 0.01593662089691712 },
            { 0.02056446192161139, -0.01173137615871587, 0.01860662089780795, 0.01531548752577633, -0.02612434745918838, -0.002579711830559123, 0.8572447940904814, -0.08253164283600478, 0.05796483200056018, -0.0565137948990935, -0.02898143503678124, -0.002884082720769562, -0.001959654960430115, -0.001974884465555493, -0.0626944224390186, 0.06480389336699439, 0.1092538928303917, 0.003817896429313457, 0.1221443654117945, 0.008259108331385691 },
            { 0.0149450462808601, -0.05432329294336563, 0.01347446475470751, -0.06344250344999271, -0.03154655796161147, 0.01737890130402365, 0.4023398402695866, 0.5559959288146353, 0.0113763910825866, -0.02853729135016475, -0.03508083283041871, 0.01942937515855417, -0.0009919307854631626, -0.000997240646767773, -0.03173442720775829, 0.01271865041565266, 0.09109248655904909, 0.003183242904771965, 0.101840160348431, 0.002879589282683873 },
            { 0.0089315287065104, 0.0320007316239974, 0.008025178421052095, 0.06035522808896764, -0.02617284368754659, 0.0307913444295086, -0.1717666835972427, 0.9850946182410426, -0.002000488665964303, -0.009752082592544668, -0.02917233986857449, 0.03442430405072091, -0.000339757012504206, -0.0003407882350357461, -0.01086970415643022, -0.002236519105063185, 0.04295028825093687, 0.001500905349027607, 0.04801783777909464, 0.0005592419800478196 },
            { 0.003648279187554268, 0.06083029181935733, 0.003269064709676139, 0.4862210033879994, -0.01311087401518937, 0.02198841884311198, -0.2887309971010948, 0.7034662976658252, -0.001080440602775262, -0.001569597957129749, -0.01464038861464306, 0.02458275303901575, -5.478480128044694e-5, -5.484987564972205e-5, -0.001752707259219097, -0.001207917890815952, 0.008435548664751047, 0.0002947817262350105, 0.009430828612723624, 3.529046154825133e-5 },
            { 0.02458609043941708, 0.2284926697139651, 0.06412087895770716, 0.0229630723713509, -0.00953836106672316, -0.01550773020042076, 0.1313719042804512, -0.08620612454061903, 0.7315098336875863, -0.2952441604842247, -0.002991757165262569, -0.003012488127809916, -0.0166588114740486, -0.01031735892320341, -0.09260488531013704, 0.1421010464381355, 0.08089420463407004, 0.002826862155877893, 0.01571428106623555, 0.08750083354765312 },
            { 0.0222428100403511, 0.05914639447514573, 0.0637494863621538, 0.0639207463885251, -0.04676233042964468, -0.04608462690790779, 0.4844107417114625, -0.2561804361622994, 0.4734858827314279, -0.2540851602731923, -0.01368123635031385, -0.008952270231710226, -0.01337268502201009, -0.008879050448614229, -0.07433759393225592, 0.09197803817707144, 0.3265508496254848, 0.01141137666105729, 0.06343485119416885, 0.06200421239110004 },
            { 0.01829015637176069, -0.05754804686186052, 0.06024010720028765, 0.01531548752577631, -0.09701662197790466, -0.01303024114553211, 0.564698801554962, -0.07243397818176892, 0.1928669661191094, -0.1841946520133041, -0.02566475266865575, -0.002531218060032429, -0.008765527693295845, -0.006436714390689431, -0.04872680671037187, 0.03746579532733765, 0.4843285004004171, 0.01692494431446998, 0.0940842946427228, 0.03213350624657235 },
            { 0.01323787477574476, -0.03380570604521271, 0.05064577825811681, -0.06344250344999272, -0.1302123445138328, 0.08778161659503848, 0.1966464547309718, 0.4879703783061302, 0.02808528613842999, -0.1033795828183621, -0.03097980040668998, 0.01705221037604457, -0.00442457282092208, -0.003612617636598689, -0.02459581580991749, 0.005455768830429592, 0.4038179900956045, 0.01411149042416191, 0.07844454895959323, 0.01120354601126314 },
            { 0.007879991398255282, 0.0452418325006485, 0.034460931747505, 0.06035522808896761, -0.1184650124497249, 0.1555284735135183, -0.2245259394687868, 0.8645692686190062, -0.01320823978608478, -0.03873989253401416, -0.02569322416543135, 0.03021252458874755, -0.00151146128798105, -0.001353772332920113, -0.008402081951779411, -0.002565795576180837, 0.1904009839963822, 0.006653595749361763, 0.03698676056389414, 0.002175828786616872 },
            { 0.003208520405328014, 0.05774842342934183, 0.01551856697265682, 0.4862210033879994, -0.06352598762442813, 0.1110644981895546, -0.2678945972026819, 0.6173978937749547, -0.005063521969808433, -0.006674673924975453, -0.01286684572333979, 0.02157507758344351, -0.0002431984694076517, -0.0002332476498990155, -0.00135191915714885, -0.0009836255610467803, 0.03739524999073546, 0.001306783563625818, 0.007264296268870957, 0.0001373037162253066 },
            { 0.01971367264521813, -0.03480289356793011, 0.002538451497458112, 0.0229630723713509, -0.0005829365126076708, -0.03529117421593723, 0.06343990541373737, -0.0670906733176538, 0.8038926764362297, -0.01404277203718313, -0.002375744243553437, -0.002344495335258656, -0.03010476428081913, -0.0004907271295279915, -0.05723099189930921, 0.05340492833764046, 0.1432713358185022, 0.005006641935345824, 0.00951793149322476, 0.1206085565910737 },
            { 0.0177737501076144, -0.06159497748062465, 0.02003881732295936, 0.0639207463885251, -0.0211465178243618, -0.1048754766728734, 0.2203646693123923, -0.1993746737198527, 0.4901772012075253, -0.08942234331265037, -0.01083881616782952, -0.006967182909191443, -0.02410976582647111, -0.003124879456370564, -0.0458341344193202, 0.03256389698595508, 0.5783526353976366, 0.02021063418762101, 0.03842164750675683, 0.08546476937256037 },
            { 0.0145359898981596, -0.05018519649115343, 0.04486277866259759, 0.0153154875257763, -0.09431097022455488, -0.02965311521412526, 0.2071704781848359, -0.05637237949377175, 0.1610225586150276, -0.1393532524165274, -0.02025750962105197, -0.001969942679436457, -0.01574508134040252, -0.00486972382430538, -0.02993235935152871, 0.01069719684684964, 0.8577918720040767, 0.02997568727644764, 0.05698560864625814, 0.04429187299682906 },
            { 0.01045349133390656, 0.009374109420468886, 0.06264907773642721, -0.06344250344999273, -0.1908784358106108, 0.1997659415127075, -0.0406521011901298, 0.3797672313201222, -0.01321276168075304, -0.1179406489439593, -0.02434683397270696, 0.0132710324443833, -0.007913217411756971, -0.00412145664386603, -0.01504350864086607, -0.0008777621831696954, 0.7152000953622468, 0.02499279265560845, 0.047512822245401, 0.01544263589653967 },
            { 0.006183860780599904, 0.06004327302348126, 0.05846000695609111, 0.06035522808896764, -0.2198737823839109, 0.3539384799301844, -0.2660663568017389, 0.6728586242624771, -0.03561937191770567, -0.05595846381234173, -0.02010750274448095, 0.02351316252861072, -0.002691872160017765, -0.001955478323419325, -0.005117413056182352, -0.002366298463035741, 0.3372182647906268, 0.01178415135323411, 0.02240239001196529, 0.00299909793659573 },
            { 0.002505244759322581, 0.05056822905446815, 0.03184692421737121, 0.4862210033879994, -0.1348021362514161, 0.2527511443748776, -0.2264281978113556, 0.4804953316135421, -0.009739510395352993, -0.01102299047382242, -0.01003563954504838, 0.01679099355953334, -0.0004316698035747579, -0.0003852003336458493, -0.0008206306085348364, -0.0006470239995384555, 0.06623054696779861, 0.002314438069244501, 0.004399887843559214, 0.0001892553745731843 },
            { 0.01358115327022956, -0.03853815083965892, -0.0632407930090034, 0.0229630723713509, 0.04013050357658147, -0.05850762502593036, 0.01191844824741104, -0.04465813160849945, 0.2503811450468292, 0.643494138926027, -0.001618399730220862, -0.001560586234419938, -0.03399912213271289, 0.02248701544304462, -0.02595110073436121, 0.006678469142187973, 0.158104441265685, 0.005524987404374709, 0.004217153140817546, 0.08859338148026891 },
            { 0.01219718851415025, -0.0182678136905422, -0.06016617974018898, 0.06392074638852513, 0.130840769970997, -0.173868260263814, 0.02433051323755546, -0.1327114482250986, 0.08972403016574962, 0.3682889372407508, -0.007364145610852992, -0.004637624813005, -0.02715687977815709, 0.01286992144645985, -0.02072850351850125, 0.002393227999107755, 0.6382303881769985, 0.02230307275076227, 0.01702365388675518, 0.06277840586234892 },
            { 0.009913603164373692, 0.01772907986214481, -0.02738137943100375, 0.01531548752577631, 0.08970102474472451, -0.04916054465014842, -0.04356847292825798, -0.03752362315097973, -0.05614066514189478, 0.08822480353157225, -0.0137057810212017, -0.001311269586205307, -0.01766074436637782, 0.003083031218878159, -0.0134802232336081, -0.001497451813721323, 0.9466004059406302, 0.03307911705661373, 0.02524887247350276, 0.03253472980518303 },
            { 0.007077021620096572, 0.05341236676857447, 0.02859661327419248, -0.06344250344999275, -0.1112957615828294, 0.3311828256963826, -0.1783628812699535, 0.2527876701518632, -0.09610842137977359, -0.04577450642166639, -0.01639095507047138, 0.008833709428967482, -0.008832044007775099, -0.001599598147886277, -0.006741387699406343, -0.002563520213828847, 0.7892458796758837, 0.02758033556335264, 0.02105172197382681, 0.0113434350904443 },
            { 0.004156360963195759, 0.06311356722833038, 0.06333827208906662, 0.06035522808896761, -0.2677887085849991, 0.5867784318905249, -0.2484437933685782, 0.4478805698365348, -0.05514051356806988, -0.04536521733606626, -0.01347144458614107, 0.0156512649942124, -0.002989901107658546, -0.001585295469071107, -0.002282153772316758, -0.001470774559641227, 0.3721309990914498, 0.01300418297106951, 0.009925928702894046, 0.002202996496296503 },
            { 0.001673991461254222, 0.03829062326422532, 0.04638054314881033, 0.4862210033879993, -0.2044842796896845, 0.4190245722479253, -0.1647306361965126, 0.3198361664201817, -0.01174701036707956, -0.01113014910110448, -0.006697217663471283, 0.011176730879846, -0.0004775813846159133, -0.0003889450106534034, -0.0003645318421060598, -0.0003133304875445123, 0.07308749906771114, 0.002554055461906596, 0.001949478292832735, 0.0001390181100799012 },
            { 0.00733275880586643, 0.05101895376946698, 0.1159128503118906, 0.02296307237135092, 0.109002349946238, -0.08055904918128892, -0.008821241789726493, -0.0233512791460027, -0.2551605295490321, 0.9139363970655774, -0.0008646271638580033, -0.0008160145415581424, -0.02500993967191641, 0.03193766754282251, -0.007249515586875495, -0.00258462214561497, 0.1138298224291981, 0.003977803090974997, 0.001153027391822371, 0.03335211605066592 },
            { 0.006562089471259562, 0.05757989555733756, 0.001372137073579967, 0.06392074638852514, 0.3971173140377133, -0.2393989112265287, -0.04804435425362234, -0.06939345560943175, -0.2439505072165437, 0.5844865625185388, -0.003924842212932298, -0.002424966465957114, -0.01992881918102882, 0.02042498534569781, -0.00577667468119173, -0.002471071385924236, 0.4595041807397584, 0.01605745411400888, 0.004654499987289513, 0.02363373699945252 },
            { 0.005303104348027836, 0.06360617994244219, -0.06384099147382732, 0.01531548752577632, 0.4453007462833852, -0.06768907014248239, -0.1129082444572359, -0.01962071782244405, -0.2003238843660441, 0.2290112644672521, -0.007276672013856358, -0.0006856494224070468, -0.01291040534799474, 0.008002838766023871, -0.003742279510904422, -0.002029160030131507, 0.6815201094734522, 0.02381583964704372, 0.006903387333222724, 0.01224811680070233 },
            { 0.003759922738032632, 0.06144717309055379, -0.02177415774563864, -0.06344250344999276, 0.1150568152338249, 0.456005068253048, -0.168408982504647, 0.1321800809342496, -0.1249464952946174, 0.02474386396144724, -0.008662426646856947, 0.004619056089915738, -0.006426853450299846, 0.0008646786619538084, -0.001862922297043034, -0.001265632577758739, 0.5682302003490954, 0.019856903921114, 0.005755828937278443, 0.004270381796341578 },
            { 0.002193340429715871, 0.04645672474414761, 0.05053549886072312, 0.0603552280889676, -0.2422139471292825, 0.8079342227998206, -0.1653396632588284, 0.2341921579256845, -0.05052677349151833, -0.02145556760536849, -0.00708734730056091, 0.008183885995767153, -0.002165849286571845, -0.0007497685695886573, -0.0006278047195555016, -0.0005118057167518776, 0.2679216675248041, 0.009362569619067, 0.002713884770495878, 0.0008293463188336679 },
            { 0.0008784989133120424, 0.02244515577055548, 0.05592603105981409, 0.4862210033879993, -0.2567083662260169, 0.5769542193676214, -0.09309469191575934, 0.1672390521963444, -0.009140706360501506, -0.007306194091947955, -0.003510404211698043, 0.005844197983987165, -0.0003446767312451984, -0.0002553162327939631, -9.990985057847096e-5, -9.2589837964549e-5, 0.05262051447809274, 0.001838833099031045, 0.0005330140491326407, 5.233515261591354e-5 },
            { 0.002376880404256417, 0.04894679446121769, 0.5468161352780181, 0.0229630723713509, 0.1798605221734307, -0.09707563019542723, -0.006361911024262465, -0.007392384501658231, -0.2217518472720543, 0.4774081565037673, -0.0002780763744507156, -0.0002583281717642508, -0.00969267716602284, 0.01668311168436308, -0.0007381048808795124, -0.0005901043256250878, 0.04342359921163878, 0.001517445283486726, 0.0001155546348056008, 0.004027791905809574 },
            { 0.002121562996818114, 0.04542737520948217, 0.2363406523412855, 0.06392074638852516, 0.6743596156126489, -0.2884815599438856, -0.02961814652961926, -0.02196809444811448, -0.1812229222123897, 0.314210819522992, -0.001260094358657253, -0.0007676789099175657, -0.007710069963724505, 0.01098015214680572, -0.0005871278053184684, -0.0004822527145342897, 0.1752908416678461, 0.006125569177969414, 0.0004664668420272557, 0.002854144979761224 },
            { 0.001707376513200447, 0.03886624121229067, -0.01828846790103174, 0.01531548752577634, 0.8270367261851601, -0.08156698978207606, -0.05711402182565585, -0.006211389510406035, -0.1221084470299941, 0.1346486767344175, -0.002329694584879423, -0.0002170580948513447, -0.004980832704833685, 0.004705321602720249, -0.0003792942720891603, -0.000324943055375481, 0.2599850852517556, 0.009085224360822916, 0.0006918468788081542, 0.001479152496241417 },
            { 0.001204466492767883, 0.02943860136490023, -0.05275778434852091, -0.06344250344999275, 0.3808047631006006, 0.5494972920218519, -0.07113164292553939, 0.0418446448101131, -0.06359420660282129, 0.02592575513870387, -0.002764049002132316, 0.001462268445248292, -0.00247115764619594, 0.0009059800562436736, -0.0001881805706347092, -0.000169230682236246, 0.2167674512121442, 0.007574976566363256, 0.0005768403383721622, 0.0005157156807648368 },
            { 0.0006991167281847018, 0.01829325894195245, 0.03336325895824156, 0.06035522808896759, -0.1776955438281812, 0.9735805552799658, -0.06074325135028236, 0.0741389140969647, -0.02236858120879344, -0.004983004397822613, -0.002253922026485951, 0.00259079734434191, -0.0008300022927157109, -0.0001741319618444993, -6.32053180872204e-5, -5.952508036240244e-5, 0.1022062835769367, 0.003571616489012032, 0.000271981364695628, 0.0001001565953127248 },
            { 0.0002788655344798455, 0.007705129605640001, 0.06058151635655214, 0.4862210033879993, -0.2869149807499818, 0.6952439857250874, -0.03112127922919541, 0.05294336853233611, -0.003682206715950098, -0.002585105547167788, -0.001113314132727278, 0.001850115290529586, -0.0001317250729412911, -9.033696632911037e-5, -1.003096643042295e-5, -9.798728342669261e-6, 0.02007358073872245, 0.0007014747963704493, 5.341784959383977e-5, 6.320291755262941e-6 } } };
    alignas(32) static const double FE27_C0_D001_Q216[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE27_C0_D001_Q216[0][0][0] + coordinate_dofs[7] * FE27_C0_D001_Q216[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE27_C0_D001_Q216[0][0][0] + coordinate_dofs[11] * FE27_C0_D001_Q216[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE27_C0_D001_Q216[0][0][0] + coordinate_dofs[10] * FE27_C0_D001_Q216[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE27_C0_D001_Q216[0][0][0] + coordinate_dofs[8] * FE27_C0_D001_Q216[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE27_C0_D001_Q216[0][0][0] + coordinate_dofs[3] * FE27_C0_D001_Q216[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE27_C0_D001_Q216[0][0][0] + coordinate_dofs[6] * FE27_C0_D001_Q216[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE27_C0_D001_Q216[0][0][0] + coordinate_dofs[5] * FE27_C0_D001_Q216[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE27_C0_D001_Q216[0][0][0] + coordinate_dofs[4] * FE27_C0_D001_Q216[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE27_C0_D001_Q216[0][0][0] + coordinate_dofs[9] * FE27_C0_D001_Q216[0][0][1];
    alignas(32) double sp[44];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = std::abs(sp[13]);
    alignas(32) double BF0[20] = {};
    alignas(32) double BF1[20] = {};
    alignas(32) double BF2[20] = {};
    for (int iq = 0; iq < 216; ++iq)
    {
        // Quadrature loop body setup (num_points=216)
        // Unstructured varying computations for num_points=216
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w2_c0 += w[2][ic] * FE17_C0_Q216[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w2_c1 += w[2][ic + 20] * FE17_C0_Q216[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w2_c2 += w[2][ic + 40] * FE17_C0_Q216[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w1_c0 += w[1][ic] * FE17_C0_Q216[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w3 += w[3][ic] * FE17_C0_Q216[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w1_c1 += w[1][ic + 20] * FE17_C0_Q216[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w1_c2 += w[1][ic + 40] * FE17_C0_Q216[0][iq][ic];
        const double w1_d0_c0 = w[1][0] * FE17_C0_D100_Q216[0][iq][0] + w[1][1] * FE17_C0_D100_Q216[0][iq][1] + w[1][6] * FE17_C0_D100_Q216[0][iq][2] + w[1][7] * FE17_C0_D100_Q216[0][iq][3] + w[1][8] * FE17_C0_D100_Q216[0][iq][4] + w[1][9] * FE17_C0_D100_Q216[0][iq][5] + w[1][10] * FE17_C0_D100_Q216[0][iq][6] + w[1][11] * FE17_C0_D100_Q216[0][iq][7] + w[1][12] * FE17_C0_D100_Q216[0][iq][8] + w[1][13] * FE17_C0_D100_Q216[0][iq][9] + w[1][14] * FE17_C0_D100_Q216[0][iq][10] + w[1][15] * FE17_C0_D100_Q216[0][iq][11] + w[1][16] * FE17_C0_D100_Q216[0][iq][12] + w[1][17] * FE17_C0_D100_Q216[0][iq][13] + w[1][18] * FE17_C0_D100_Q216[0][iq][14] + w[1][19] * FE17_C0_D100_Q216[0][iq][15];
        const double w1_d1_c0 = w[1][0] * FE17_C0_D010_Q216[0][iq][0] + w[1][2] * FE17_C0_D010_Q216[0][iq][1] + w[1][4] * FE17_C0_D010_Q216[0][iq][2] + w[1][5] * FE17_C0_D010_Q216[0][iq][3] + w[1][8] * FE17_C0_D010_Q216[0][iq][4] + w[1][9] * FE17_C0_D010_Q216[0][iq][5] + w[1][10] * FE17_C0_D010_Q216[0][iq][6] + w[1][11] * FE17_C0_D010_Q216[0][iq][7] + w[1][12] * FE17_C0_D010_Q216[0][iq][8] + w[1][13] * FE17_C0_D010_Q216[0][iq][9] + w[1][14] * FE17_C0_D010_Q216[0][iq][10] + w[1][15] * FE17_C0_D010_Q216[0][iq][11] + w[1][16] * FE17_C0_D010_Q216[0][iq][12] + w[1][17] * FE17_C0_D010_Q216[0][iq][13] + w[1][18] * FE17_C0_D010_Q216[0][iq][14] + w[1][19] * FE17_C0_D010_Q216[0][iq][15];
        const double w1_d2_c0 = w[1][0] * FE17_C0_D001_Q216[0][iq][0] + w[1][3] * FE17_C0_D001_Q216[0][iq][1] + w[1][4] * FE17_C0_D001_Q216[0][iq][2] + w[1][5] * FE17_C0_D001_Q216[0][iq][3] + w[1][6] * FE17_C0_D001_Q216[0][iq][4] + w[1][7] * FE17_C0_D001_Q216[0][iq][5] + w[1][10] * FE17_C0_D001_Q216[0][iq][6] + w[1][11] * FE17_C0_D001_Q216[0][iq][7] + w[1][12] * FE17_C0_D001_Q216[0][iq][8] + w[1][13] * FE17_C0_D001_Q216[0][iq][9] + w[1][14] * FE17_C0_D001_Q216[0][iq][10] + w[1][15] * FE17_C0_D001_Q216[0][iq][11] + w[1][16] * FE17_C0_D001_Q216[0][iq][12] + w[1][17] * FE17_C0_D001_Q216[0][iq][13] + w[1][18] * FE17_C0_D001_Q216[0][iq][14] + w[1][19] * FE17_C0_D001_Q216[0][iq][15];
        const double w1_d0_c1 = w[1][20] * FE17_C0_D100_Q216[0][iq][0] + w[1][21] * FE17_C0_D100_Q216[0][iq][1] + w[1][26] * FE17_C0_D100_Q216[0][iq][2] + w[1][27] * FE17_C0_D100_Q216[0][iq][3] + w[1][28] * FE17_C0_D100_Q216[0][iq][4] + w[1][29] * FE17_C0_D100_Q216[0][iq][5] + w[1][30] * FE17_C0_D100_Q216[0][iq][6] + w[1][31] * FE17_C0_D100_Q216[0][iq][7] + w[1][32] * FE17_C0_D100_Q216[0][iq][8] + w[1][33] * FE17_C0_D100_Q216[0][iq][9] + w[1][34] * FE17_C0_D100_Q216[0][iq][10] + w[1][35] * FE17_C0_D100_Q216[0][iq][11] + w[1][36] * FE17_C0_D100_Q216[0][iq][12] + w[1][37] * FE17_C0_D100_Q216[0][iq][13] + w[1][38] * FE17_C0_D100_Q216[0][iq][14] + w[1][39] * FE17_C0_D100_Q216[0][iq][15];
        const double w1_d1_c1 = w[1][20] * FE17_C0_D010_Q216[0][iq][0] + w[1][22] * FE17_C0_D010_Q216[0][iq][1] + w[1][24] * FE17_C0_D010_Q216[0][iq][2] + w[1][25] * FE17_C0_D010_Q216[0][iq][3] + w[1][28] * FE17_C0_D010_Q216[0][iq][4] + w[1][29] * FE17_C0_D010_Q216[0][iq][5] + w[1][30] * FE17_C0_D010_Q216[0][iq][6] + w[1][31] * FE17_C0_D010_Q216[0][iq][7] + w[1][32] * FE17_C0_D010_Q216[0][iq][8] + w[1][33] * FE17_C0_D010_Q216[0][iq][9] + w[1][34] * FE17_C0_D010_Q216[0][iq][10] + w[1][35] * FE17_C0_D010_Q216[0][iq][11] + w[1][36] * FE17_C0_D010_Q216[0][iq][12] + w[1][37] * FE17_C0_D010_Q216[0][iq][13] + w[1][38] * FE17_C0_D010_Q216[0][iq][14] + w[1][39] * FE17_C0_D010_Q216[0][iq][15];
        const double w1_d2_c1 = w[1][20] * FE17_C0_D001_Q216[0][iq][0] + w[1][23] * FE17_C0_D001_Q216[0][iq][1] + w[1][24] * FE17_C0_D001_Q216[0][iq][2] + w[1][25] * FE17_C0_D001_Q216[0][iq][3] + w[1][26] * FE17_C0_D001_Q216[0][iq][4] + w[1][27] * FE17_C0_D001_Q216[0][iq][5] + w[1][30] * FE17_C0_D001_Q216[0][iq][6] + w[1][31] * FE17_C0_D001_Q216[0][iq][7] + w[1][32] * FE17_C0_D001_Q216[0][iq][8] + w[1][33] * FE17_C0_D001_Q216[0][iq][9] + w[1][34] * FE17_C0_D001_Q216[0][iq][10] + w[1][35] * FE17_C0_D001_Q216[0][iq][11] + w[1][36] * FE17_C0_D001_Q216[0][iq][12] + w[1][37] * FE17_C0_D001_Q216[0][iq][13] + w[1][38] * FE17_C0_D001_Q216[0][iq][14] + w[1][39] * FE17_C0_D001_Q216[0][iq][15];
        const double w1_d0_c2 = w[1][40] * FE17_C0_D100_Q216[0][iq][0] + w[1][41] * FE17_C0_D100_Q216[0][iq][1] + w[1][46] * FE17_C0_D100_Q216[0][iq][2] + w[1][47] * FE17_C0_D100_Q216[0][iq][3] + w[1][48] * FE17_C0_D100_Q216[0][iq][4] + w[1][49] * FE17_C0_D100_Q216[0][iq][5] + w[1][50] * FE17_C0_D100_Q216[0][iq][6] + w[1][51] * FE17_C0_D100_Q216[0][iq][7] + w[1][52] * FE17_C0_D100_Q216[0][iq][8] + w[1][53] * FE17_C0_D100_Q216[0][iq][9] + w[1][54] * FE17_C0_D100_Q216[0][iq][10] + w[1][55] * FE17_C0_D100_Q216[0][iq][11] + w[1][56] * FE17_C0_D100_Q216[0][iq][12] + w[1][57] * FE17_C0_D100_Q216[0][iq][13] + w[1][58] * FE17_C0_D100_Q216[0][iq][14] + w[1][59] * FE17_C0_D100_Q216[0][iq][15];
        const double w1_d1_c2 = w[1][40] * FE17_C0_D010_Q216[0][iq][0] + w[1][42] * FE17_C0_D010_Q216[0][iq][1] + w[1][44] * FE17_C0_D010_Q216[0][iq][2] + w[1][45] * FE17_C0_D010_Q216[0][iq][3] + w[1][48] * FE17_C0_D010_Q216[0][iq][4] + w[1][49] * FE17_C0_D010_Q216[0][iq][5] + w[1][50] * FE17_C0_D010_Q216[0][iq][6] + w[1][51] * FE17_C0_D010_Q216[0][iq][7] + w[1][52] * FE17_C0_D010_Q216[0][iq][8] + w[1][53] * FE17_C0_D010_Q216[0][iq][9] + w[1][54] * FE17_C0_D010_Q216[0][iq][10] + w[1][55] * FE17_C0_D010_Q216[0][iq][11] + w[1][56] * FE17_C0_D010_Q216[0][iq][12] + w[1][57] * FE17_C0_D010_Q216[0][iq][13] + w[1][58] * FE17_C0_D010_Q216[0][iq][14] + w[1][59] * FE17_C0_D010_Q216[0][iq][15];
        const double w1_d2_c2 = w[1][40] * FE17_C0_D001_Q216[0][iq][0] + w[1][43] * FE17_C0_D001_Q216[0][iq][1] + w[1][44] * FE17_C0_D001_Q216[0][iq][2] + w[1][45] * FE17_C0_D001_Q216[0][iq][3] + w[1][46] * FE17_C0_D001_Q216[0][iq][4] + w[1][47] * FE17_C0_D001_Q216[0][iq][5] + w[1][50] * FE17_C0_D001_Q216[0][iq][6] + w[1][51] * FE17_C0_D001_Q216[0][iq][7] + w[1][52] * FE17_C0_D001_Q216[0][iq][8] + w[1][53] * FE17_C0_D001_Q216[0][iq][9] + w[1][54] * FE17_C0_D001_Q216[0][iq][10] + w[1][55] * FE17_C0_D001_Q216[0][iq][11] + w[1][56] * FE17_C0_D001_Q216[0][iq][12] + w[1][57] * FE17_C0_D001_Q216[0][iq][13] + w[1][58] * FE17_C0_D001_Q216[0][iq][14] + w[1][59] * FE17_C0_D001_Q216[0][iq][15];
        alignas(32) double sv216[84];
        sv216[0] = -1 * w1_c0 * w3;
        sv216[1] = -1 * w1_c1 * w3;
        sv216[2] = -1 * w1_c2 * w3;
        sv216[3] = sv216[0] * (1 / w[0][0]);
        sv216[4] = sv216[1] * (1 / w[0][0]);
        sv216[5] = sv216[2] * (1 / w[0][0]);
        sv216[6] = -1 * (-1 * w2_c0) + -1 * sv216[3];
        sv216[7] = -1 * (-1 * w2_c1) + -1 * sv216[4];
        sv216[8] = -1 * (-1 * w2_c2) + -1 * sv216[5];
        sv216[9] = w1_d0_c0 * sp[14];
        sv216[10] = w1_d1_c0 * sp[17];
        sv216[11] = sv216[9] + sv216[10];
        sv216[12] = w1_d2_c0 * sp[18];
        sv216[13] = sv216[11] + sv216[12];
        sv216[14] = sv216[13] * w3;
        sv216[15] = w1_c0 * sv216[14];
        sv216[16] = w1_d0_c0 * sp[22];
        sv216[17] = w1_d1_c0 * sp[26];
        sv216[18] = sv216[16] + sv216[17];
        sv216[19] = w1_d2_c0 * sp[30];
        sv216[20] = sv216[18] + sv216[19];
        sv216[21] = sv216[20] * w3;
        sv216[22] = w1_c1 * sv216[21];
        sv216[23] = sv216[15] + sv216[22];
        sv216[24] = w1_d0_c0 * sp[34];
        sv216[25] = w1_d1_c0 * sp[38];
        sv216[26] = sv216[24] + sv216[25];
        sv216[27] = w1_d2_c0 * sp[42];
        sv216[28] = sv216[26] + sv216[27];
        sv216[29] = sv216[28] * w3;
        sv216[30] = w1_c2 * sv216[29];
        sv216[31] = sv216[23] + sv216[30];
        sv216[32] = w1_d0_c1 * sp[14];
        sv216[33] = w1_d1_c1 * sp[17];
        sv216[34] = sv216[32] + sv216[33];
        sv216[35] = w1_d2_c1 * sp[18];
        sv216[36] = sv216[34] + sv216[35];
        sv216[37] = sv216[36] * w3;
        sv216[38] = w1_c0 * sv216[37];
        sv216[39] = w1_d0_c1 * sp[22];
        sv216[40] = w1_d1_c1 * sp[26];
        sv216[41] = sv216[39] + sv216[40];
        sv216[42] = w1_d2_c1 * sp[30];
        sv216[43] = sv216[41] + sv216[42];
        sv216[44] = sv216[43] * w3;
        sv216[45] = w1_c1 * sv216[44];
        sv216[46] = sv216[38] + sv216[45];
        sv216[47] = w1_d0_c1 * sp[34];
        sv216[48] = w1_d1_c1 * sp[38];
        sv216[49] = sv216[47] + sv216[48];
        sv216[50] = w1_d2_c1 * sp[42];
        sv216[51] = sv216[49] + sv216[50];
        sv216[52] = sv216[51] * w3;
        sv216[53] = w1_c2 * sv216[52];
        sv216[54] = sv216[46] + sv216[53];
        sv216[55] = w1_d0_c2 * sp[14];
        sv216[56] = w1_d1_c2 * sp[17];
        sv216[57] = sv216[55] + sv216[56];
        sv216[58] = w1_d2_c2 * sp[18];
        sv216[59] = sv216[57] + sv216[58];
        sv216[60] = sv216[59] * w3;
        sv216[61] = w1_c0 * sv216[60];
        sv216[62] = w1_d0_c2 * sp[22];
        sv216[63] = w1_d1_c2 * sp[26];
        sv216[64] = sv216[62] + sv216[63];
        sv216[65] = w1_d2_c2 * sp[30];
        sv216[66] = sv216[64] + sv216[65];
        sv216[67] = sv216[66] * w3;
        sv216[68] = w1_c1 * sv216[67];
        sv216[69] = sv216[61] + sv216[68];
        sv216[70] = w1_d0_c2 * sp[34];
        sv216[71] = w1_d1_c2 * sp[38];
        sv216[72] = sv216[70] + sv216[71];
        sv216[73] = w1_d2_c2 * sp[42];
        sv216[74] = sv216[72] + sv216[73];
        sv216[75] = sv216[74] * w3;
        sv216[76] = w1_c2 * sv216[75];
        sv216[77] = sv216[69] + sv216[76];
        sv216[78] = sv216[6] + -1 * sv216[31];
        sv216[79] = sv216[7] + -1 * sv216[54];
        sv216[80] = sv216[8] + -1 * sv216[77];
        sv216[81] = sv216[78] * sp[43];
        sv216[82] = sv216[79] * sp[43];
        sv216[83] = sv216[80] * sp[43];
        const double fw0 = sv216[81] * weights216[iq];
        for (int i = 0; i < 20; ++i)
            BF0[i] += fw0 * FE17_C0_Q216[0][iq][i];
        const double fw1 = sv216[82] * weights216[iq];
        for (int i = 0; i < 20; ++i)
            BF1[i] += fw1 * FE17_C0_Q216[0][iq][i];
        const double fw2 = sv216[83] * weights216[iq];
        for (int i = 0; i < 20; ++i)
            BF2[i] += fw2 * FE17_C0_Q216[0][iq][i];
    }
    std::fill_n(A, 60, 0.0);
    for (int i = 0; i < 20; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 20; ++i)
        A[i + 20] += BF1[i];
    for (int i = 0; i < 20; ++i)
        A[i + 40] += BF2[i];
  }

};


class tentativevelocity_form_0: public ufc::form
{
public:

  tentativevelocity_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~tentativevelocity_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "28b86f86395b6ab807a06b9beee354930ac1960c26a86752b3b1c658a5eb91e72562a65388adc6eadea5c6fcd5c2e209f05d8d85c5638cb09f256212e2c2495b";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 2;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 2)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new tentativevelocity_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new tentativevelocity_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new tentativevelocity_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_finite_element_1();
    case 1:
        return new tentativevelocity_finite_element_1();
    case 2:
        return new tentativevelocity_finite_element_4();
    case 3:
        return new tentativevelocity_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_dofmap_1();
    case 1:
        return new tentativevelocity_dofmap_1();
    case 2:
        return new tentativevelocity_dofmap_4();
    case 3:
        return new tentativevelocity_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new tentativevelocity_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class tentativevelocity_form_1: public ufc::form
{
public:

  tentativevelocity_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~tentativevelocity_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "40e9cbc631915d8e25fb16b06bff0a74d91acfd8ca21fd0baab6305a2704c6c72f527251253adaa582aa254c17acd25ac80ec439e540b333b78cccbfb2fe7184";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 4;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 4)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new tentativevelocity_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new tentativevelocity_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new tentativevelocity_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_finite_element_1();
    case 1:
        return new tentativevelocity_finite_element_4();
    case 2:
        return new tentativevelocity_finite_element_1();
    case 3:
        return new tentativevelocity_finite_element_1();
    case 4:
        return new tentativevelocity_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_dofmap_1();
    case 1:
        return new tentativevelocity_dofmap_4();
    case 2:
        return new tentativevelocity_dofmap_1();
    case 3:
        return new tentativevelocity_dofmap_1();
    case 4:
        return new tentativevelocity_dofmap_0();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new tentativevelocity_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace TentativeVelocity
{

class CoefficientSpace_f: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_rho: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_rho(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_rho(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_k Form_a_FunctionSpace_2;

typedef CoefficientSpace_rho Form_a_FunctionSpace_3;

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 2), k(*this, 0), rho(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const tentativevelocity_form_0>();
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> rho):
    dolfin::Form(2, 2), k(*this, 0), rho(*this, 1)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->k = k;
    this->rho = rho;

    _ufc_form = std::make_shared<const tentativevelocity_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "rho")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "rho";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_k;
  typedef Form_a_FunctionSpace_3 CoefficientSpace_rho;

  // Coefficients
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner rho;
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), k(*this, 0), rho(*this, 1)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> rho):
    dolfin::MultiMeshForm(V1, V0), k(*this, 0), rho(*this, 1)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->k = k;
    this->rho = rho;

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "rho")
      return 1;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "rho";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_k;
  typedef Form_a_FunctionSpace_3 CoefficientSpace_rho;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner rho;
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_k Form_L_FunctionSpace_1;

typedef CoefficientSpace_u0 Form_L_FunctionSpace_2;

typedef CoefficientSpace_f Form_L_FunctionSpace_3;

typedef CoefficientSpace_rho Form_L_FunctionSpace_4;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 4), k(*this, 0), u0(*this, 1), f(*this, 2), rho(*this, 3)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const tentativevelocity_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> rho):
    dolfin::Form(1, 4), k(*this, 0), u0(*this, 1), f(*this, 2), rho(*this, 3)
  {
    _function_spaces[0] = V0;

    this->k = k;
    this->u0 = u0;
    this->f = f;
    this->rho = rho;

    _ufc_form = std::make_shared<const tentativevelocity_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "u0")
      return 1;
    else if (name == "f")
      return 2;
    else if (name == "rho")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "u0";
    case 2:
      return "f";
    case 3:
      return "rho";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u0;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_f;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_rho;

  // Coefficients
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner u0;
  dolfin::CoefficientAssigner f;
  dolfin::CoefficientAssigner rho;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), k(*this, 0), u0(*this, 1), f(*this, 2), rho(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> rho):
    dolfin::MultiMeshForm(V0), k(*this, 0), u0(*this, 1), f(*this, 2), rho(*this, 3)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->k = k;
    this->u0 = u0;
    this->f = f;
    this->rho = rho;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "u0")
      return 1;
    else if (name == "f")
      return 2;
    else if (name == "rho")
      return 3;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "u0";
    case 2:
      return "f";
    case 3:
      return "rho";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u0;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_f;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_rho;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner u0;
  dolfin::MultiMeshCoefficientAssigner f;
  dolfin::MultiMeshCoefficientAssigner rho;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
