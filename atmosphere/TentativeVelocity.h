// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.2.0.dev0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __TENTATIVEVELOCITY_H
#define __TENTATIVEVELOCITY_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class tentativevelocity_finite_element_0: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 20;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][20] = { { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 } };
    static const double coefficients1[1][20] = { { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 } };
    static const double coefficients2[1][20] = { { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 } };
    static const double coefficients3[1][20] = { { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 } };
    static const double coefficients9[1][20] = { { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 } };
    static const double coefficients13[1][20] = { { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 } };
    static const double coefficients14[1][20] = { { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 } };
    static const double coefficients15[1][20] = { { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 } };
    static const double coefficients16[1][20] = { { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 } };
    static const double coefficients17[1][20] = { { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 } };
    for (std::size_t k = 0; k < num_points * 20; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 9] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 10] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 11] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 12] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 13] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 14] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 15] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 16] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 17] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 18] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[20 * ip + 19] += coefficients19[0][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 20 * num_derivatives, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][20][20] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.499090833947008, 0.0, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.898979485566347, 0.0, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][20] = { { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 } };
    static const double coefficients1[1][20] = { { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 } };
    static const double coefficients2[1][20] = { { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 } };
    static const double coefficients3[1][20] = { { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 } };
    static const double coefficients9[1][20] = { { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 } };
    static const double coefficients13[1][20] = { { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 } };
    static const double coefficients14[1][20] = { { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 } };
    static const double coefficients15[1][20] = { { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 } };
    static const double coefficients16[1][20] = { { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 } };
    static const double coefficients17[1][20] = { { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 } };
    const std::size_t reference_offset[20] = {};
    const std::size_t num_components[20] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 20; ++i)
        {
            double derivatives[27] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[20 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    std::fill_n(values, num_points * 20 * num_derivatives, 0.0);
    const std::size_t reference_offsets[20] = {};
    const std::size_t physical_offsets[20] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[27][27];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 20; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[20 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[20 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[20];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[20];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    // Declare transformation matrix
    double transform[27][27] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 20, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[27] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 20; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 6 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 6 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 7] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 9 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 9 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 10] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 10 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 10 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 11] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 12] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 13] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 13 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 13 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 14] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 14 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 14 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 15] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 15 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 15 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 16] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 16 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 16 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 17] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 18 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 18 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 19] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 19 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 19 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[60] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0 };
    std::copy_n(dof_X, 60, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_0();
  }

};


class tentativevelocity_finite_element_1: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 3), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 60;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 3;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][20] = { { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 } };
    static const double coefficients1[1][20] = { { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 } };
    static const double coefficients2[1][20] = { { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 } };
    static const double coefficients3[1][20] = { { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 } };
    static const double coefficients9[1][20] = { { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 } };
    static const double coefficients13[1][20] = { { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 } };
    static const double coefficients14[1][20] = { { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 } };
    static const double coefficients15[1][20] = { { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 } };
    static const double coefficients16[1][20] = { { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 } };
    static const double coefficients17[1][20] = { { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 } };
    for (std::size_t k = 0; k < num_points * 60 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 6] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 7] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 8] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 9] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 10] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 11] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 12] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 13] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 14] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 15] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 16] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 17] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 18] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 19] += coefficients19[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 20 + 1] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 21 + 1] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 22 + 1] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 23 + 1] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 24 + 1] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 25 + 1] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 26 + 1] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 27 + 1] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 28 + 1] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 29 + 1] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 30 + 1] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 31 + 1] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 32 + 1] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 33 + 1] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 34 + 1] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 35 + 1] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 36 + 1] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 37 + 1] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 38 + 1] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 39 + 1] += coefficients19[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 40 + 2] += coefficients0[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 41 + 2] += coefficients1[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 42 + 2] += coefficients2[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 43 + 2] += coefficients3[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 44 + 2] += coefficients4[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 45 + 2] += coefficients5[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 46 + 2] += coefficients6[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 47 + 2] += coefficients7[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 48 + 2] += coefficients8[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 49 + 2] += coefficients9[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 50 + 2] += coefficients10[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 51 + 2] += coefficients11[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 52 + 2] += coefficients12[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 53 + 2] += coefficients13[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 54 + 2] += coefficients14[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 55 + 2] += coefficients15[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 56 + 2] += coefficients16[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 57 + 2] += coefficients17[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 58 + 2] += coefficients18[0][r] * basisvalues3[r];
        for (std::size_t r = 0; r < 20; ++r)
            reference_values[60 * 3 * ip + 3 * 59 + 2] += coefficients19[0][r] * basisvalues3[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 60 * num_derivatives * 3, 0.0);
    if (order > 3)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][20][20] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.499090833947008, 0.0, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.898979485566347, 0.0, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 4.2426406871192786, 0.0, 0.0, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][20] = { { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 } };
    static const double coefficients1[1][20] = { { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 } };
    static const double coefficients2[1][20] = { { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 } };
    static const double coefficients3[1][20] = { { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 } };
    static const double coefficients4[1][20] = { { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 } };
    static const double coefficients5[1][20] = { { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 } };
    static const double coefficients6[1][20] = { { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 } };
    static const double coefficients7[1][20] = { { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 } };
    static const double coefficients8[1][20] = { { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 } };
    static const double coefficients9[1][20] = { { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 } };
    static const double coefficients10[1][20] = { { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 } };
    static const double coefficients11[1][20] = { { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 } };
    static const double coefficients12[1][20] = { { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 } };
    static const double coefficients13[1][20] = { { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 } };
    static const double coefficients14[1][20] = { { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 } };
    static const double coefficients15[1][20] = { { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 } };
    static const double coefficients16[1][20] = { { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 } };
    static const double coefficients17[1][20] = { { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 } };
    static const double coefficients18[1][20] = { { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 } };
    static const double coefficients19[1][20] = { { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 } };
    const std::size_t reference_offset[60] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t num_components[60] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues3[20] = {};
        basisvalues3[0] = 1.0;
        const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues3[1] = tmp1_3;
        const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues3[4] = 1.5 * tmp1_3 * basisvalues3[1] - 0.5 * tmp2_3 * basisvalues3[0];
        basisvalues3[10] = 1.6666666666666667 * tmp1_3 * basisvalues3[4] - 0.6666666666666666 * tmp2_3 * basisvalues3[1];
        basisvalues3[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues3[0];
        basisvalues3[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues3[1];
        basisvalues3[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues3[4];
        const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_3 = 0.5 * (1.0 - Y[2]);
        const double tmp5_3 = tmp4_3 * tmp4_3;
        basisvalues3[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues3[2] - 0.5555555555555556 * tmp5_3 * basisvalues3[0];
        basisvalues3[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues3[7] - 0.7 * tmp5_3 * basisvalues3[2];
        basisvalues3[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues3[5] - 0.56 * tmp5_3 * basisvalues3[1];
        basisvalues3[3] = (2.0 * Y[2] + 1.0) * basisvalues3[0];
        basisvalues3[8] = (3.0 * Y[2] + 2.0) * basisvalues3[2];
        basisvalues3[17] = (4.0 * Y[2] + 3.0) * basisvalues3[7];
        basisvalues3[6] = (3.0 * Y[2] + 2.0) * basisvalues3[1];
        basisvalues3[14] = (4.0 * Y[2] + 3.0) * basisvalues3[5];
        basisvalues3[12] = (4.0 * Y[2] + 3.0) * basisvalues3[4];
        basisvalues3[9] = (0.3125 + 1.875 * Y[2]) * basisvalues3[3] - 0.5625 * basisvalues3[0];
        basisvalues3[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues3[9] - 0.7111111111111111 * basisvalues3[3];
        basisvalues3[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[8] - 0.5555555555555556 * basisvalues3[2];
        basisvalues3[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues3[6] - 0.5555555555555556 * basisvalues3[1];
        basisvalues3[0] *= std::sqrt(0.75);
        basisvalues3[3] *= std::sqrt(1.25);
        basisvalues3[9] *= std::sqrt(1.75);
        basisvalues3[19] *= std::sqrt(2.25);
        basisvalues3[2] *= std::sqrt(2.5);
        basisvalues3[8] *= std::sqrt(3.5);
        basisvalues3[18] *= std::sqrt(4.5);
        basisvalues3[7] *= std::sqrt(5.25);
        basisvalues3[17] *= std::sqrt(6.75);
        basisvalues3[16] *= std::sqrt(9.0);
        basisvalues3[1] *= std::sqrt(7.5);
        basisvalues3[6] *= std::sqrt(10.5);
        basisvalues3[15] *= std::sqrt(13.5);
        basisvalues3[5] *= std::sqrt(15.75);
        basisvalues3[14] *= std::sqrt(20.25);
        basisvalues3[13] *= std::sqrt(27.0);
        basisvalues3[4] *= std::sqrt(26.25);
        basisvalues3[12] *= std::sqrt(33.75);
        basisvalues3[11] *= std::sqrt(45.0);
        basisvalues3[10] *= std::sqrt(63.0);
        // Loop over all dofs
        for (std::size_t i = 0; i < 60; ++i)
        {
            double derivatives[27] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 21:
                // Compute reference derivatives for dof 21.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 22:
                // Compute reference derivatives for dof 22.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 23:
                // Compute reference derivatives for dof 23.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 24:
                // Compute reference derivatives for dof 24.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 25:
                // Compute reference derivatives for dof 25.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 26:
                // Compute reference derivatives for dof 26.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 27:
                // Compute reference derivatives for dof 27.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 28:
                // Compute reference derivatives for dof 28.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 29:
                // Compute reference derivatives for dof 29.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 30:
                // Compute reference derivatives for dof 30.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 31:
                // Compute reference derivatives for dof 31.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 32:
                // Compute reference derivatives for dof 32.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 33:
                // Compute reference derivatives for dof 33.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 34:
                // Compute reference derivatives for dof 34.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 35:
                // Compute reference derivatives for dof 35.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 36:
                // Compute reference derivatives for dof 36.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 37:
                // Compute reference derivatives for dof 37.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 38:
                // Compute reference derivatives for dof 38.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 39:
                // Compute reference derivatives for dof 39.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            case 40:
                // Compute reference derivatives for dof 40.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 41:
                // Compute reference derivatives for dof 41.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 42:
                // Compute reference derivatives for dof 42.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 43:
                // Compute reference derivatives for dof 43.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 44:
                // Compute reference derivatives for dof 44.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 45:
                // Compute reference derivatives for dof 45.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 46:
                // Compute reference derivatives for dof 46.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 47:
                // Compute reference derivatives for dof 47.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 48:
                // Compute reference derivatives for dof 48.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 49:
                // Compute reference derivatives for dof 49.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 50:
                // Compute reference derivatives for dof 50.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients10[0][s] * aux[s];
                }
                break;
            case 51:
                // Compute reference derivatives for dof 51.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients11[0][s] * aux[s];
                }
                break;
            case 52:
                // Compute reference derivatives for dof 52.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients12[0][s] * aux[s];
                }
                break;
            case 53:
                // Compute reference derivatives for dof 53.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients13[0][s] * aux[s];
                }
                break;
            case 54:
                // Compute reference derivatives for dof 54.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients14[0][s] * aux[s];
                }
                break;
            case 55:
                // Compute reference derivatives for dof 55.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients15[0][s] * aux[s];
                }
                break;
            case 56:
                // Compute reference derivatives for dof 56.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients16[0][s] * aux[s];
                }
                break;
            case 57:
                // Compute reference derivatives for dof 57.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients17[0][s] * aux[s];
                }
                break;
            case 58:
                // Compute reference derivatives for dof 58.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients18[0][s] * aux[s];
                }
                break;
            case 59:
                // Compute reference derivatives for dof 59.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[20] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[20][20] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 400, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[20][20];
                        std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 400, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 20; ++s)
                        for (std::size_t t = 0; t < 20; ++t)
                            aux[s] += dmats[s][t] * basisvalues3[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 20; ++s)
                        derivatives[r] += coefficients19[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[60 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    std::fill_n(values, num_points * 60 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[60] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t physical_offsets[60] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[27][27];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 60; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[60 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[60 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[180];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[180];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 60; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[3][27][3] =
        { { { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 },
            { 0, 0, 0 },
            { 1, 0, 0 },
            { 2, 0, 0 } },
          { { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
            { 0, 2, 0 },
            { 1, 0, 0 },
            { 1, 1, 0 },
            { 1, 2, 0 },
            { 2, 0, 0 },
            { 2, 1, 0 },
            { 2, 2, 0 } },
          { { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 2, 0, 0 },
            { 2, 0, 1 },
            { 2, 0, 2 },
            { 2, 1, 0 },
            { 2, 1, 1 },
            { 2, 1, 2 },
            { 2, 2, 0 },
            { 2, 2, 1 },
            { 2, 2, 2 } } };
    // Declare transformation matrix
    double transform[27][27] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 21:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 22:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 23:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 24:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 25:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 26:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 27:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 28:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 29:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 30:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 31:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 32:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 33:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 34:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 35:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 36:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 37:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 38:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 39:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 40:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481412, 0.013041013273932558, 0.00752923252421043, 0.005323971374999481, 0.01829812636778499, 0.014173667737846037, 0.01157275124715687, 0.008183170883849723, 0.006681531047810595, 0.004724555912615334, -0.02834733547569204, -0.023957871187497762, -0.020748125068968306, -0.01855768722395227, -0.01607142857142857, -0.013122266479195593, -0.010714285714285711, -0.00927884361197611, -0.007576144084141573, -0.005357142857142849 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 41:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.028867513459481315, -0.013041013273932525, 0.007529232524210402, 0.005323971374999499, 0.018298126367784984, -0.014173667737846028, -0.011572751247156888, 0.008183170883849704, 0.0066815310478106175, 0.0047245559126153445, 0.02834733547569204, -0.02395787118749775, -0.02074812506896831, 0.01855768722395225, 0.016071428571428573, 0.013122266479195609, -0.010714285714285704, -0.009278843611976135, -0.007576144084141586, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 42:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.02886751345948121, 0.0, -0.015058465048420865, 0.005323971374999522, 0.0, 0.0, 0.0, 0.02454951265154916, -0.013363062095621216, 0.004724555912615375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04285714285714285, -0.027836530835928377, 0.01515228816828318, -0.005357142857142875 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 43:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0288675134594813, 0.0, 0.0, -0.01597191412499851, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02834733547569204, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.053571428571428575 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 44:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, 0.1129384878631564, -0.063887656499994, 0.0, 0.0, 0.0, 0.07364853795464739, 0.026726124191242425, -0.02362277956307674, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06495190528383286, -0.06060915267313263, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 45:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0, -0.02258769757263129, 0.12777531299998798, 0.0, 0.0, 0.0, 0.0, 0.06681531047810611, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07576144084141581, -0.05357142857142858 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 46:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.09780759955449396, -0.056469243931578164, -0.06388765649999398, 0.05489437910335499, -0.04252100321353805, 0.023145502494313804, 0.024549512651549133, -0.013363062095621195, -0.023622779563076728, 0.0, 0.0, 0.04841229182759271, 0.0, -0.037499999999999985, -0.05248906591678237, 0.0, 0.02165063509461095, 0.03030457633656631, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 47:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.019561519910898835, 0.01129384878631566, 0.12777531299998804, 0.0, 0.0, 0.05786375623578445, 0.0, -0.03340765523905305, 0.04724555912615342, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06561133239597798, 0.0, 0.0, -0.037880720420707906, -0.053571428571428596 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 48:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.097807599554494, -0.0790569415042095, -0.03194382824999701, 0.054894379103354984, 0.014173667737846028, -0.04629100498862755, -0.02454951265154915, 0.013363062095621221, 0.023622779563076724, 0.0, 0.04791574237499548, -0.006916041689656095, -0.061858957413174195, -0.016071428571428556, 0.008748177652797059, 0.04285714285714285, 0.015464739353293538, 0.0, -0.005357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 49:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.01956151991089879, 0.12423233664947207, -0.031943828249997, 0.0, 0.056694670951384085, -0.011572751247156888, 0.02454951265154916, -0.04677071733467426, 0.02362277956307669, 0.0, 0.0, 0.0, 0.061858957413174195, -0.021428571428571425, 0.00437408882639853, -0.0642857142857143, 0.009278843611976131, 0.0075761440841415825, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 50:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449392, -0.056469243931578164, -0.063887656499994, 0.054894379103355, 0.04252100321353806, -0.023145502494313724, 0.02454951265154914, -0.013363062095621202, -0.02362277956307671, 0.0, 0.0, 0.048412291827592706, 0.0, 0.037500000000000006, 0.052489065916782394, 0.0, 0.021650635094610952, 0.030304576336566323, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 51:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.01956151991089883, 0.011293848786315638, 0.127775312999988, 0.0, 0.0, -0.05786375623578448, 0.0, -0.03340765523905304, 0.04724555912615343, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06561133239597801, 0.0, 0.0, -0.037880720420707906, -0.05357142857142859 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 52:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.09780759955449395, -0.07905694150420947, -0.03194382824999698, 0.054894379103355026, -0.014173667737845987, 0.04629100498862759, -0.024549512651549178, 0.01336306209562123, 0.023622779563076728, 0.0, 0.047915742374995504, -0.0069160416896561, 0.06185895741317421, 0.016071428571428584, -0.008748177652797067, 0.04285714285714287, 0.01546473935329353, 0.0, -0.00535714285714287 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 53:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.0195615199108988, 0.12423233664947211, -0.03194382824999701, 0.0, -0.05669467095138405, 0.011572751247156884, 0.02454951265154916, -0.04677071733467428, 0.02362277956307669, 0.0, 0.0, 0.0, -0.06185895741317418, 0.021428571428571425, -0.004374088826398523, -0.06428571428571431, 0.009278843611976144, 0.0075761440841415765, -0.005357142857142853 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 54:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, -0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.018298126367785, 0.04252100321353806, 0.034718253741470674, 0.04091585441924857, 0.033407655239053057, 0.02362277956307671, 0.08504200642707613, 0.023957871187497738, 0.020748125068968306, -0.006185895741317409, -0.005357142857142849, -0.0043740888263985285, -0.010714285714285713, -0.009278843611976128, -0.007576144084141586, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 55:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.0, 0.1173691194653928, -0.04517539514526255, -0.03194382824999699, -0.01829812636778498, -0.04252100321353806, -0.03471825374147068, 0.04091585441924858, 0.03340765523905306, 0.02362277956307671, -0.08504200642707613, 0.023957871187497756, 0.020748125068968323, 0.006185895741317413, 0.005357142857142851, 0.004374088826398521, -0.010714285714285714, -0.009278843611976131, -0.00757614408414159, -0.0053571428571428615 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 56:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.25980762113533173, 0.11736911946539279, 0.06776309271789387, 0.04791574237499546, 0.0, 0.08504200642707614, 0.06943650748294135, -0.07364853795464743, 0.040089186286863636, -0.09921567416492215, 0.0, 0.0, 0.0, 0.0, 0.075, -0.026244532958391194, 0.0, -0.06495190528383289, -0.015152288168283158, 0.026785714285714295 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 57:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353315, -0.11736911946539275, 0.0677630927178938, 0.04791574237499544, 0.0, -0.08504200642707617, -0.06943650748294138, -0.0736485379546474, 0.04008918628686367, -0.09921567416492214, 0.0, 0.0, 0.0, 0.0, -0.07500000000000002, 0.026244532958391187, 0.0, -0.06495190528383286, -0.015152288168283172, 0.026785714285714298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 58:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353318, 0.0, -0.13552618543578768, 0.0479157423749955, -0.10978875820671002, 0.0, 0.0, 0.024549512651549112, -0.08017837257372733, -0.09921567416492216, 0.0, 0.0, -0.09682458365518544, 0.0, 0.0, 0.0, 0.0, 0.021650635094610966, 0.030304576336566316, 0.02678571428571428 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 59:
        {
            double basisvalues[20] = {};
            basisvalues[0] = 1.0;
            const double tmp1_3 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_3;
            const double tmp2_3 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_3 * basisvalues[1] - 0.5 * tmp2_3 * basisvalues[0];
            basisvalues[10] = 1.6666666666666667 * tmp1_3 * basisvalues[4] - 0.6666666666666666 * tmp2_3 * basisvalues[1];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            basisvalues[11] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + 2.0 * (1.0 + Y[1])) * basisvalues[4];
            const double tmp3_3 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_3 = 0.5 * (1.0 - Y[2]);
            const double tmp5_3 = tmp4_3 * tmp4_3;
            basisvalues[7] = (1.6666666666666667 * tmp3_3 + 0.1111111111111111 * tmp4_3) * basisvalues[2] - 0.5555555555555556 * tmp5_3 * basisvalues[0];
            basisvalues[16] = (1.75 * tmp3_3 + 0.05 * tmp4_3) * basisvalues[7] - 0.7 * tmp5_3 * basisvalues[2];
            basisvalues[13] = (2.1 * tmp3_3 + 0.54 * tmp4_3) * basisvalues[5] - 0.56 * tmp5_3 * basisvalues[1];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[17] = (4.0 * Y[2] + 3.0) * basisvalues[7];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[14] = (4.0 * Y[2] + 3.0) * basisvalues[5];
            basisvalues[12] = (4.0 * Y[2] + 3.0) * basisvalues[4];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[19] = (0.15555555555555556 + 1.8666666666666667 * Y[2]) * basisvalues[9] - 0.7111111111111111 * basisvalues[3];
            basisvalues[18] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[8] - 0.5555555555555556 * basisvalues[2];
            basisvalues[15] = (0.7777777777777778 + 2.3333333333333335 * Y[2]) * basisvalues[6] - 0.5555555555555556 * basisvalues[1];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[19] *= std::sqrt(2.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[18] *= std::sqrt(4.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[17] *= std::sqrt(6.75);
            basisvalues[16] *= std::sqrt(9.0);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[15] *= std::sqrt(13.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[14] *= std::sqrt(20.25);
            basisvalues[13] *= std::sqrt(27.0);
            basisvalues[4] *= std::sqrt(26.25);
            basisvalues[12] *= std::sqrt(33.75);
            basisvalues[11] *= std::sqrt(45.0);
            basisvalues[10] *= std::sqrt(63.0);
            // Table(s) of coefficients
            static const double coefficients0[20] = { 0.2598076211353316, 0.0, 0.0, -0.14374722712498653, -0.10978875820670997, 0.0, 0.0, -0.12274756325774569, 0.0, 0.042521003213538064, 0.0, -0.09583148474999097, 0.013832083379312202, 0.0, 0.0, 0.0, 0.04285714285714285, 0.01546473935329356, 0.0, -0.005357142857142836 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336763, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321833, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.5825756949558585, 0.0, 8.366600265340765, -1.1832159566199305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.741657386773955, 0.0, 0.0, 8.694826047713672, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.499090833947008, -3.850600329705499e-14, -3.346640106136313, -2.366431913239855, 15.491933384829663, 0.0, 0.0, 0.6928203230275515, 0.565685424949236, 0.39999999999999813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 4.898979485566347, 1.2299242789325978e-14, 0.0, 0.0, 14.19859147943907, -0.8280786712108237, 1.1930015729761685e-14, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0757894836241504e-14, -1.0406229208201282e-14, 0.0, 0.0 },
                  { 0.0, 4.2426406871192786, 0.0, 1.687538997430238e-14, 0.0, 0.0, 14.342743312012729, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.6000000000000156, 0.0, 8.763560920082682, -1.5491933384829757, 0.0, 0.0, 0.0, 9.524704719832535, -1.4813121596360836, 0.2618614682831917, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.117691453623981, 0.0, 3.1622776601683755, 4.919349550499536, 0.0, 0.0, 0.0, 0.0, 10.69044967649698, -2.4189726272590555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.545584412271561, 0.0, 0.0, 7.66811580507229, 0.0, 0.0, 0.0, 0.0, 0.0, 10.369185117452583, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.4772255750516665, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477957, 7.24568837309473, 4.183300132670382, -0.5916079783099732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869775, 0.0, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.64575131106463, 0.0, 9.660917830792958, 0.6831300510639831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.52994023880669, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.3237900077244564, 2.4494897427831757, 2.828427124746207, -1.0000000000000142, 9.165151389911683, 7.0992957397195315, -0.4140393356054131, -2.0493901531919283, -0.47809144373376256, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498098, 2.121320343559639, -0.408248290463863, 3.175426480542941, 0.0, 0.0, 7.171371656006364, 0.0, -1.3801311186847098, -1.5614401167176535, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000147, -5.6920997883031195, 4.38178046004135, -0.7745966692414925, 0.0, 10.998181667893984, 0.9621404708847352, 4.762352359916274, -0.7406560798180446, 0.13093073414159573, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 2.73861278752583, 1.5811388300841913, 2.4596747752497734, 0.0, 0.0, 9.258200997725519, 0.0, 5.34522483824849, -1.2094863136295242, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.272792206135776, 0.0, 0.0, 3.834057902536144, 0.0, 0.0, 0.0, 0.0, 0.0, 5.184592558726291, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.196152422706663, 0.0, -3.1622776601684097, -2.2360679774997996, 0.0, 0.0, 0.0, 13.747727084867519, 0.5345224838248517, 0.37796447300922775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -1.7999999999999923, 0.0, 3.6514837167010725, -2.8401877872187704, 0.0, 0.0, 0.0, 0.0, 12.344267996967345, 1.3965944975103488, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2045407685048564, 0.0, 0.0, 6.640783086353622, 0.0, 0.0, 0.0, 0.0, 0.0, 8.979977728257495, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[20][20] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.163977794943226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.9580398915498103, 5.612486080160917, -1.0801234497346446, -0.7637626158259732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477918, 1.4491376746189448, 4.183300132670376, -0.5916079783099621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.870828693387009, 7.099295739719547, 0.0, 4.347413023856837, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.322875655532307, 0.0, 3.8643671323171924, -0.3415650255319924, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346295, 0.0, 7.099295739719546, 2.509980079602213, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.818813079129915, 0.0, 0.0, 8.874119674649437, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.7495454169734748, 5.796550698475762, -1.6733200530681371, -1.1832159566199116, 7.745966692414838, -1.1999999999999984, -0.9797958971132712, 0.346410161513773, 0.28284271247461523, 0.19999999999999796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.323790007724462, 2.449489742783174, 2.8284271247462063, -1.0000000000000098, 1.3093073414159537, 7.099295739719536, -0.4140393356054113, -2.049390153191928, -0.4780914437337618, 0.16903085094570436, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.0124611797498067, 2.121320343559643, -0.4082482904638687, 3.175426480542937, 9.071147352221454, 0.0, 7.171371656006362, 0.0, -1.38013111868471, -1.561440116717654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8000000000000107, 0.6324555320336751, 4.381780460041345, -0.7745966692414882, 0.0, 3.1423376193982904, -0.1069044967649698, 4.762352359916271, -0.7406560798180433, 0.13093073414159628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.5588457268119902, 0.5477225575051651, 1.5811388300841975, 2.459674775249767, 0.0, 9.071147352221452, 1.8516401995451048, 0.0, 5.345224838248488, -1.2094863136295269, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.2727922061357804, -6.260990336999455, 0.0, 3.8340579025361494, 0.0, 0.0, 10.583005244258311, 0.0, 0.0, 5.184592558726294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0392304845413307, 0.0, 3.1622776601683653, -0.4472135954999614, 0.0, 0.0, 0.0, 5.891883036371792, -0.5345224838248452, 0.07559289460184615, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.8999999999999931, 0.0, 1.4605934866803592, 1.4200938936093825, 0.0, 0.0, 0.0, 9.071147352221436, 4.937707198786949, -0.6982972487551765, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.734846922834953, 0.0, -6.2609903369993996, 2.213594362117876, 0.0, 0.0, 0.0, 0.0, 10.583005244258363, 2.9933259094191658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.715767664977287, 0.0, 0.0, -4.695742752749561, 0.0, 0.0, 0.0, 0.0, 0.0, 12.699606293110026, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[27] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[20][20] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 400, 0.0);
                for (std::size_t t = 0; t < 20; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 400, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 400, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 20; ++t)
                            for (std::size_t u = 0; u < 20; ++u)
                                for (std::size_t tu = 0; tu < 20; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 20; ++s)
                    for (std::size_t t = 0; t < 20; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 60, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 3)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[81] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 60; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 21:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 22:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 23:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 24:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 25:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 26:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 27:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 28:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 29:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 30:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 31:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 32:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 33:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 34:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 35:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 36:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 37:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 38:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 39:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 40:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 41:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 42:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 43:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 44:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 45:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 46:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 47:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 48:
        {
            y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 49:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 50:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 51:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 52:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 53:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 54:
        {
            y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
            y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
            y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 55:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
            y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
            y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 56:
        {
            y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 57:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 58:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 59:
        {
            y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
            y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
            y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[20] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[21] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[22] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[23] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[24] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[25] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[26] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[40] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[41] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[42] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[43] = vals[2];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[44] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[45] = vals[2];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[46] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[47] = vals[2];
    y[0] = -5.551115123125783e-17 * coordinate_dofs[0] + 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = -5.551115123125783e-17 * coordinate_dofs[1] + 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = -5.551115123125783e-17 * coordinate_dofs[2] + 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[48] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[49] = vals[2];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[50] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[51] = vals[2];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[52] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[53] = vals[2];
    y[0] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    y[1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    y[2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[54] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    y[1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    y[2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[55] = vals[2];
    y[0] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[56] = vals[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[57] = vals[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[58] = vals[2];
    y[0] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    y[1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    y[2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[59] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[20];
    vertex_values[4] = dof_values[21];
    vertex_values[7] = dof_values[22];
    vertex_values[10] = dof_values[23];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[40];
    vertex_values[5] = dof_values[41];
    vertex_values[8] = dof_values[42];
    vertex_values[11] = dof_values[43];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 6 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 6 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 7] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 9 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 9 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 10] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 10 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 10 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 11] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 12] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 13] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 13 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 13 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 14] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 14 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 14 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 15] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 15 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 15 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 16] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 16 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 16 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 17] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 18 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 18 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 19] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 19 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 19 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 20] = coordinate_dofs[0];
    dof_coordinates[3 * 20 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 20 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 21] = coordinate_dofs[3];
    dof_coordinates[3 * 21 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 21 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 22] = coordinate_dofs[6];
    dof_coordinates[3 * 22 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 22 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 23] = coordinate_dofs[9];
    dof_coordinates[3 * 23 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 23 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 24] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 24 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 24 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 25] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 25 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 25 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 26] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 26 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 26 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 27] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 27 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 27 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 28] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 28 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 28 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 29] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 29 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 29 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 30] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 30 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 30 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 31] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 31 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 31 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 32] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 32 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 32 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 33] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 33 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 33 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 34] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 34 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 34 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 35] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 35 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 35 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 36] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 36 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 36 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 37] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 37 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 37 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 38] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 38 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 38 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 39] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 39 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 39 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 40] = coordinate_dofs[0];
    dof_coordinates[3 * 40 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 40 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 41] = coordinate_dofs[3];
    dof_coordinates[3 * 41 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 41 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 42] = coordinate_dofs[6];
    dof_coordinates[3 * 42 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 42 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 43] = coordinate_dofs[9];
    dof_coordinates[3 * 43 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 43 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 44] = 0.6666666666666667 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 44 + 1] = 0.6666666666666667 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 44 + 2] = 0.6666666666666667 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 45] = 0.33333333333333337 * coordinate_dofs[6] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 45 + 1] = 0.33333333333333337 * coordinate_dofs[7] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 45 + 2] = 0.33333333333333337 * coordinate_dofs[8] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 46] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 46 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 46 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 47] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 47 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 47 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 48] = 0.6666666666666667 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 48 + 1] = 0.6666666666666667 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 48 + 2] = 0.6666666666666667 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 49] = 0.33333333333333337 * coordinate_dofs[3] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 49 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 49 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 50] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 50 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 50 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 51] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[9];
    dof_coordinates[3 * 51 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[10];
    dof_coordinates[3 * 51 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[11];
    dof_coordinates[3 * 52] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 52 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 52 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8];
    dof_coordinates[3 * 53] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[6];
    dof_coordinates[3 * 53 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[7];
    dof_coordinates[3 * 53 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[8];
    dof_coordinates[3 * 54] = 0.6666666666666667 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3];
    dof_coordinates[3 * 54 + 1] = 0.6666666666666667 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4];
    dof_coordinates[3 * 54 + 2] = 0.6666666666666667 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5];
    dof_coordinates[3 * 55] = 0.33333333333333337 * coordinate_dofs[0] + 0.6666666666666666 * coordinate_dofs[3];
    dof_coordinates[3 * 55 + 1] = 0.33333333333333337 * coordinate_dofs[1] + 0.6666666666666666 * coordinate_dofs[4];
    dof_coordinates[3 * 55 + 2] = 0.33333333333333337 * coordinate_dofs[2] + 0.6666666666666666 * coordinate_dofs[5];
    dof_coordinates[3 * 56] = 0.33333333333333337 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 56 + 1] = 0.33333333333333337 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 56 + 2] = 0.33333333333333337 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 57] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[6] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 57 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[7] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 57 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[8] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 58] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[9];
    dof_coordinates[3 * 58 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[10];
    dof_coordinates[3 * 58 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[11];
    dof_coordinates[3 * 59] = 0.3333333333333334 * coordinate_dofs[0] + 0.3333333333333333 * coordinate_dofs[3] + 0.3333333333333333 * coordinate_dofs[6];
    dof_coordinates[3 * 59 + 1] = 0.3333333333333334 * coordinate_dofs[1] + 0.3333333333333333 * coordinate_dofs[4] + 0.3333333333333333 * coordinate_dofs[7];
    dof_coordinates[3 * 59 + 2] = 0.3333333333333334 * coordinate_dofs[2] + 0.3333333333333333 * coordinate_dofs[5] + 0.3333333333333333 * coordinate_dofs[8];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[180] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.6666666666666667, 0.0, 0.3333333333333333, 0.33333333333333337, 0.0, 0.6666666666666666, 0.6666666666666667, 0.3333333333333333, 0.0, 0.33333333333333337, 0.6666666666666666, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.33333333333333337, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0 };
    std::copy_n(dof_X, 180, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_finite_element_0();
    case 1:
        return new tentativevelocity_finite_element_0();
    case 2:
        return new tentativevelocity_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_1();
  }

};


class tentativevelocity_finite_element_2: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505542, 0.0, 0.0, 0.0 },
            { 5.163977794943223, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 4, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_2();
  }

};


class tentativevelocity_finite_element_3: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505542, 0.0, 0.0, 0.0 },
            { 5.163977794943223, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[36];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[36];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_finite_element_2();
    case 1:
        return new tentativevelocity_finite_element_2();
    case 2:
        return new tentativevelocity_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_3();
  }

};


class tentativevelocity_finite_element_4: public ufc::finite_element
{
public:

  tentativevelocity_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~tentativevelocity_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[3] = { 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new tentativevelocity_finite_element_4();
  }

};


class tentativevelocity_dofmap_0: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + 2 * num_global_entities[1] + num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 20;
  }

  std::size_t num_element_dofs() const final override
  {
    return 20;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 10;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 1, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 4, 10, 20 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + 2 * entity_indices[1][0];
    dofs[5] = offset + 2 * entity_indices[1][0] + 1;
    dofs[6] = offset + 2 * entity_indices[1][1];
    dofs[7] = offset + 2 * entity_indices[1][1] + 1;
    dofs[8] = offset + 2 * entity_indices[1][2];
    dofs[9] = offset + 2 * entity_indices[1][2] + 1;
    dofs[10] = offset + 2 * entity_indices[1][3];
    dofs[11] = offset + 2 * entity_indices[1][3] + 1;
    dofs[12] = offset + 2 * entity_indices[1][4];
    dofs[13] = offset + 2 * entity_indices[1][4] + 1;
    dofs[14] = offset + 2 * entity_indices[1][5];
    dofs[15] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[16] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[18] = offset + entity_indices[2][2];
    dofs[19] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 7;
        dofs[7] = 8;
        dofs[8] = 9;
        dofs[9] = 16;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 17;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 18;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 8;
        dofs[4] = 9;
        dofs[5] = 12;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 19;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 5;
            break;
        case 1:
            dofs[0] = 6;
            dofs[1] = 7;
            break;
        case 2:
            dofs[0] = 8;
            dofs[1] = 9;
            break;
        case 3:
            dofs[0] = 10;
            dofs[1] = 11;
            break;
        case 4:
            dofs[0] = 12;
            dofs[1] = 13;
            break;
        case 5:
            dofs[0] = 14;
            dofs[1] = 15;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 16;
            break;
        case 1:
            dofs[0] = 17;
            break;
        case 2:
            dofs[0] = 18;
            break;
        case 3:
            dofs[0] = 19;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 9;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 10;
            dofs[3] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 12;
            dofs[3] = 13;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 14;
            dofs[3] = 15;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 7;
            dofs[7] = 8;
            dofs[8] = 9;
            dofs[9] = 16;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 17;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 18;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 8;
            dofs[4] = 9;
            dofs[5] = 12;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 19;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_0();
  }

};


class tentativevelocity_dofmap_1: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 3), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0] + 6 * num_global_entities[1] + 3 * num_global_entities[2];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 60;
  }

  std::size_t num_element_dofs() const final override
  {
    return 60;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 30;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 3, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 12, 30, 60 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + 2 * entity_indices[1][0];
    dofs[5] = offset + 2 * entity_indices[1][0] + 1;
    dofs[6] = offset + 2 * entity_indices[1][1];
    dofs[7] = offset + 2 * entity_indices[1][1] + 1;
    dofs[8] = offset + 2 * entity_indices[1][2];
    dofs[9] = offset + 2 * entity_indices[1][2] + 1;
    dofs[10] = offset + 2 * entity_indices[1][3];
    dofs[11] = offset + 2 * entity_indices[1][3] + 1;
    dofs[12] = offset + 2 * entity_indices[1][4];
    dofs[13] = offset + 2 * entity_indices[1][4] + 1;
    dofs[14] = offset + 2 * entity_indices[1][5];
    dofs[15] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[16] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[18] = offset + entity_indices[2][2];
    dofs[19] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
    dofs[20] = offset + entity_indices[0][0];
    dofs[21] = offset + entity_indices[0][1];
    dofs[22] = offset + entity_indices[0][2];
    dofs[23] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[24] = offset + 2 * entity_indices[1][0];
    dofs[25] = offset + 2 * entity_indices[1][0] + 1;
    dofs[26] = offset + 2 * entity_indices[1][1];
    dofs[27] = offset + 2 * entity_indices[1][1] + 1;
    dofs[28] = offset + 2 * entity_indices[1][2];
    dofs[29] = offset + 2 * entity_indices[1][2] + 1;
    dofs[30] = offset + 2 * entity_indices[1][3];
    dofs[31] = offset + 2 * entity_indices[1][3] + 1;
    dofs[32] = offset + 2 * entity_indices[1][4];
    dofs[33] = offset + 2 * entity_indices[1][4] + 1;
    dofs[34] = offset + 2 * entity_indices[1][5];
    dofs[35] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[36] = offset + entity_indices[2][0];
    dofs[37] = offset + entity_indices[2][1];
    dofs[38] = offset + entity_indices[2][2];
    dofs[39] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
    dofs[40] = offset + entity_indices[0][0];
    dofs[41] = offset + entity_indices[0][1];
    dofs[42] = offset + entity_indices[0][2];
    dofs[43] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[44] = offset + 2 * entity_indices[1][0];
    dofs[45] = offset + 2 * entity_indices[1][0] + 1;
    dofs[46] = offset + 2 * entity_indices[1][1];
    dofs[47] = offset + 2 * entity_indices[1][1] + 1;
    dofs[48] = offset + 2 * entity_indices[1][2];
    dofs[49] = offset + 2 * entity_indices[1][2] + 1;
    dofs[50] = offset + 2 * entity_indices[1][3];
    dofs[51] = offset + 2 * entity_indices[1][3] + 1;
    dofs[52] = offset + 2 * entity_indices[1][4];
    dofs[53] = offset + 2 * entity_indices[1][4] + 1;
    dofs[54] = offset + 2 * entity_indices[1][5];
    dofs[55] = offset + 2 * entity_indices[1][5] + 1;
    offset += 2 * num_global_entities[1];
    dofs[56] = offset + entity_indices[2][0];
    dofs[57] = offset + entity_indices[2][1];
    dofs[58] = offset + entity_indices[2][2];
    dofs[59] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 7;
        dofs[7] = 8;
        dofs[8] = 9;
        dofs[9] = 16;
        dofs[10] = 21;
        dofs[11] = 22;
        dofs[12] = 23;
        dofs[13] = 24;
        dofs[14] = 25;
        dofs[15] = 26;
        dofs[16] = 27;
        dofs[17] = 28;
        dofs[18] = 29;
        dofs[19] = 36;
        dofs[20] = 41;
        dofs[21] = 42;
        dofs[22] = 43;
        dofs[23] = 44;
        dofs[24] = 45;
        dofs[25] = 46;
        dofs[26] = 47;
        dofs[27] = 48;
        dofs[28] = 49;
        dofs[29] = 56;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 17;
        dofs[10] = 20;
        dofs[11] = 22;
        dofs[12] = 23;
        dofs[13] = 24;
        dofs[14] = 25;
        dofs[15] = 30;
        dofs[16] = 31;
        dofs[17] = 32;
        dofs[18] = 33;
        dofs[19] = 37;
        dofs[20] = 40;
        dofs[21] = 42;
        dofs[22] = 43;
        dofs[23] = 44;
        dofs[24] = 45;
        dofs[25] = 50;
        dofs[26] = 51;
        dofs[27] = 52;
        dofs[28] = 53;
        dofs[29] = 57;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 6;
        dofs[4] = 7;
        dofs[5] = 10;
        dofs[6] = 11;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 18;
        dofs[10] = 20;
        dofs[11] = 21;
        dofs[12] = 23;
        dofs[13] = 26;
        dofs[14] = 27;
        dofs[15] = 30;
        dofs[16] = 31;
        dofs[17] = 34;
        dofs[18] = 35;
        dofs[19] = 38;
        dofs[20] = 40;
        dofs[21] = 41;
        dofs[22] = 43;
        dofs[23] = 46;
        dofs[24] = 47;
        dofs[25] = 50;
        dofs[26] = 51;
        dofs[27] = 54;
        dofs[28] = 55;
        dofs[29] = 58;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 8;
        dofs[4] = 9;
        dofs[5] = 12;
        dofs[6] = 13;
        dofs[7] = 14;
        dofs[8] = 15;
        dofs[9] = 19;
        dofs[10] = 20;
        dofs[11] = 21;
        dofs[12] = 22;
        dofs[13] = 28;
        dofs[14] = 29;
        dofs[15] = 32;
        dofs[16] = 33;
        dofs[17] = 34;
        dofs[18] = 35;
        dofs[19] = 39;
        dofs[20] = 40;
        dofs[21] = 41;
        dofs[22] = 42;
        dofs[23] = 48;
        dofs[24] = 49;
        dofs[25] = 52;
        dofs[26] = 53;
        dofs[27] = 54;
        dofs[28] = 55;
        dofs[29] = 59;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 20;
            dofs[2] = 40;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 21;
            dofs[2] = 41;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 22;
            dofs[2] = 42;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 23;
            dofs[2] = 43;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 24;
            dofs[3] = 25;
            dofs[4] = 44;
            dofs[5] = 45;
            break;
        case 1:
            dofs[0] = 6;
            dofs[1] = 7;
            dofs[2] = 26;
            dofs[3] = 27;
            dofs[4] = 46;
            dofs[5] = 47;
            break;
        case 2:
            dofs[0] = 8;
            dofs[1] = 9;
            dofs[2] = 28;
            dofs[3] = 29;
            dofs[4] = 48;
            dofs[5] = 49;
            break;
        case 3:
            dofs[0] = 10;
            dofs[1] = 11;
            dofs[2] = 30;
            dofs[3] = 31;
            dofs[4] = 50;
            dofs[5] = 51;
            break;
        case 4:
            dofs[0] = 12;
            dofs[1] = 13;
            dofs[2] = 32;
            dofs[3] = 33;
            dofs[4] = 52;
            dofs[5] = 53;
            break;
        case 5:
            dofs[0] = 14;
            dofs[1] = 15;
            dofs[2] = 34;
            dofs[3] = 35;
            dofs[4] = 54;
            dofs[5] = 55;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 16;
            dofs[1] = 36;
            dofs[2] = 56;
            break;
        case 1:
            dofs[0] = 17;
            dofs[1] = 37;
            dofs[2] = 57;
            break;
        case 2:
            dofs[0] = 18;
            dofs[1] = 38;
            dofs[2] = 58;
            break;
        case 3:
            dofs[0] = 19;
            dofs[1] = 39;
            dofs[2] = 59;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 20;
            dofs[2] = 40;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 21;
            dofs[2] = 41;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 22;
            dofs[2] = 42;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 23;
            dofs[2] = 43;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 22;
            dofs[5] = 23;
            dofs[6] = 24;
            dofs[7] = 25;
            dofs[8] = 42;
            dofs[9] = 43;
            dofs[10] = 44;
            dofs[11] = 45;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 21;
            dofs[5] = 23;
            dofs[6] = 26;
            dofs[7] = 27;
            dofs[8] = 41;
            dofs[9] = 43;
            dofs[10] = 46;
            dofs[11] = 47;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 9;
            dofs[4] = 21;
            dofs[5] = 22;
            dofs[6] = 28;
            dofs[7] = 29;
            dofs[8] = 41;
            dofs[9] = 42;
            dofs[10] = 48;
            dofs[11] = 49;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 10;
            dofs[3] = 11;
            dofs[4] = 20;
            dofs[5] = 23;
            dofs[6] = 30;
            dofs[7] = 31;
            dofs[8] = 40;
            dofs[9] = 43;
            dofs[10] = 50;
            dofs[11] = 51;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 12;
            dofs[3] = 13;
            dofs[4] = 20;
            dofs[5] = 22;
            dofs[6] = 32;
            dofs[7] = 33;
            dofs[8] = 40;
            dofs[9] = 42;
            dofs[10] = 52;
            dofs[11] = 53;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 14;
            dofs[3] = 15;
            dofs[4] = 20;
            dofs[5] = 21;
            dofs[6] = 34;
            dofs[7] = 35;
            dofs[8] = 40;
            dofs[9] = 41;
            dofs[10] = 54;
            dofs[11] = 55;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 7;
            dofs[7] = 8;
            dofs[8] = 9;
            dofs[9] = 16;
            dofs[10] = 21;
            dofs[11] = 22;
            dofs[12] = 23;
            dofs[13] = 24;
            dofs[14] = 25;
            dofs[15] = 26;
            dofs[16] = 27;
            dofs[17] = 28;
            dofs[18] = 29;
            dofs[19] = 36;
            dofs[20] = 41;
            dofs[21] = 42;
            dofs[22] = 43;
            dofs[23] = 44;
            dofs[24] = 45;
            dofs[25] = 46;
            dofs[26] = 47;
            dofs[27] = 48;
            dofs[28] = 49;
            dofs[29] = 56;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 17;
            dofs[10] = 20;
            dofs[11] = 22;
            dofs[12] = 23;
            dofs[13] = 24;
            dofs[14] = 25;
            dofs[15] = 30;
            dofs[16] = 31;
            dofs[17] = 32;
            dofs[18] = 33;
            dofs[19] = 37;
            dofs[20] = 40;
            dofs[21] = 42;
            dofs[22] = 43;
            dofs[23] = 44;
            dofs[24] = 45;
            dofs[25] = 50;
            dofs[26] = 51;
            dofs[27] = 52;
            dofs[28] = 53;
            dofs[29] = 57;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 6;
            dofs[4] = 7;
            dofs[5] = 10;
            dofs[6] = 11;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 18;
            dofs[10] = 20;
            dofs[11] = 21;
            dofs[12] = 23;
            dofs[13] = 26;
            dofs[14] = 27;
            dofs[15] = 30;
            dofs[16] = 31;
            dofs[17] = 34;
            dofs[18] = 35;
            dofs[19] = 38;
            dofs[20] = 40;
            dofs[21] = 41;
            dofs[22] = 43;
            dofs[23] = 46;
            dofs[24] = 47;
            dofs[25] = 50;
            dofs[26] = 51;
            dofs[27] = 54;
            dofs[28] = 55;
            dofs[29] = 58;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 8;
            dofs[4] = 9;
            dofs[5] = 12;
            dofs[6] = 13;
            dofs[7] = 14;
            dofs[8] = 15;
            dofs[9] = 19;
            dofs[10] = 20;
            dofs[11] = 21;
            dofs[12] = 22;
            dofs[13] = 28;
            dofs[14] = 29;
            dofs[15] = 32;
            dofs[16] = 33;
            dofs[17] = 34;
            dofs[18] = 35;
            dofs[19] = 39;
            dofs[20] = 40;
            dofs[21] = 41;
            dofs[22] = 42;
            dofs[23] = 48;
            dofs[24] = 49;
            dofs[25] = 52;
            dofs[26] = 53;
            dofs[27] = 54;
            dofs[28] = 55;
            dofs[29] = 59;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            dofs[30] = 30;
            dofs[31] = 31;
            dofs[32] = 32;
            dofs[33] = 33;
            dofs[34] = 34;
            dofs[35] = 35;
            dofs[36] = 36;
            dofs[37] = 37;
            dofs[38] = 38;
            dofs[39] = 39;
            dofs[40] = 40;
            dofs[41] = 41;
            dofs[42] = 42;
            dofs[43] = 43;
            dofs[44] = 44;
            dofs[45] = 45;
            dofs[46] = 46;
            dofs[47] = 47;
            dofs[48] = 48;
            dofs[49] = 49;
            dofs[50] = 50;
            dofs[51] = 51;
            dofs[52] = 52;
            dofs[53] = 53;
            dofs[54] = 54;
            dofs[55] = 55;
            dofs[56] = 56;
            dofs[57] = 57;
            dofs[58] = 58;
            dofs[59] = 59;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_dofmap_0();
    case 1:
        return new tentativevelocity_dofmap_0();
    case 2:
        return new tentativevelocity_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_1();
  }

};


class tentativevelocity_dofmap_2: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 4;
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_2();
  }

};


class tentativevelocity_dofmap_3: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_dofmap_2();
    case 1:
        return new tentativevelocity_dofmap_2();
    case 2:
        return new tentativevelocity_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_3();
  }

};


class tentativevelocity_dofmap_4: public ufc::dofmap
{
public:

  tentativevelocity_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~tentativevelocity_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = {};
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new tentativevelocity_dofmap_4();
  }

};


class tentativevelocity_coordinate_mapping_3: public ufc::coordinate_mapping
{
public:

  tentativevelocity_coordinate_mapping_3() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~tentativevelocity_coordinate_mapping_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new tentativevelocity_coordinate_mapping_3();
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new tentativevelocity_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new tentativevelocity_dofmap_3();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    tentativevelocity_finite_element_2 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    tentativevelocity_finite_element_2 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[4] = { 0.25000000000000006, 0.24999999999999997, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
  }

};


class tentativevelocity_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  tentativevelocity_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~tentativevelocity_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 6
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 6
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           6
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE33_C0_D001_Q24[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double PI0[1][20][20] =
        { { { 0.0005952380952380996, 7.440476190476251e-5, 7.440476190476235e-5, 7.440476190476264e-5, 0.0001116071428571436, 0.0001116071428571425, 0.0001116071428571441, 0.0001116071428571424, 0.000111607142857144, 0.0001116071428571431, -0.0004464285714285714, 0.0002232142857142852, -0.0004464285714285724, 0.0002232142857142858, -0.0004464285714285729, 0.0002232142857142868, 0.001339285714285718, 0.0006696428571428612, 0.0006696428571428632, 0.0006696428571428627 },
            { 7.440476190476251e-5, 0.0005952380952380979, 7.440476190476197e-5, 7.440476190476214e-5, 0.0001116071428571426, 0.0001116071428571431, -0.0004464285714285709, 0.0002232142857142861, -0.0004464285714285713, 0.0002232142857142851, 0.0001116071428571425, 0.0001116071428571425, 0.0001116071428571429, 0.0001116071428571424, 0.0002232142857142852, -0.0004464285714285709, 0.0006696428571428582, 0.001339285714285715, 0.0006696428571428591, 0.0006696428571428587 },
            { 7.440476190476235e-5, 7.440476190476197e-5, 0.0005952380952380974, 7.440476190476179e-5, -0.0004464285714285716, 0.0002232142857142867, 0.0001116071428571432, 0.0001116071428571435, 0.0002232142857142857, -0.0004464285714285718, 0.0001116071428571422, 0.0001116071428571433, 0.0002232142857142854, -0.0004464285714285715, 0.0001116071428571427, 0.0001116071428571435, 0.0006696428571428542, 0.0006696428571428542, 0.001339285714285712, 0.0006696428571428543 },
            { 7.440476190476264e-5, 7.440476190476214e-5, 7.440476190476179e-5, 0.000595238095238098, 0.0002232142857142858, -0.0004464285714285714, 0.0002232142857142857, -0.0004464285714285715, 0.0001116071428571428, 0.0001116071428571427, 0.0002232142857142853, -0.0004464285714285721, 0.0001116071428571427, 0.0001116071428571427, 0.0001116071428571426, 0.0001116071428571432, 0.0006696428571428579, 0.0006696428571428579, 0.0006696428571428587, 0.001339285714285715 },
            { 0.0001116071428571436, 0.0001116071428571426, -0.0004464285714285716, 0.0002232142857142858, 0.004017857142857141, -0.002008928571428572, 0.0, -0.001004464285714287, -0.001004464285714286, 0.002008928571428572, 0.0, -0.001004464285714288, -0.001004464285714288, 0.002008928571428574, 0.0, 0.0, 0.0, 0.0, -0.002008928571428568, 0.0 },
            { 0.0001116071428571425, 0.0001116071428571431, 0.0002232142857142867, -0.0004464285714285714, -0.002008928571428572, 0.004017857142857146, -0.001004464285714286, 0.002008928571428573, 0.0, -0.001004464285714286, -0.001004464285714287, 0.002008928571428575, 0.0, -0.001004464285714287, 0.0, 0.0, 0.0, 0.0, 0.0, -0.002008928571428573 },
            { 0.0001116071428571441, -0.0004464285714285709, 0.0001116071428571432, 0.0002232142857142857, 0.0, -0.001004464285714286, 0.004017857142857138, -0.002008928571428572, 0.002008928571428571, -0.001004464285714285, 0.0, -0.001004464285714286, 0.0, 0.0, -0.001004464285714288, 0.002008928571428573, 0.0, -0.002008928571428565, 0.0, 0.0 },
            { 0.0001116071428571424, 0.0002232142857142861, 0.0001116071428571435, -0.0004464285714285715, -0.001004464285714287, 0.002008928571428573, -0.002008928571428572, 0.004017857142857147, -0.001004464285714286, 0.0, -0.001004464285714286, 0.002008928571428574, 0.0, 0.0, 0.0, -0.001004464285714287, 0.0, 0.0, 0.0, -0.002008928571428573 },
            { 0.000111607142857144, -0.0004464285714285713, 0.0002232142857142857, 0.0001116071428571428, -0.001004464285714286, 0.0, 0.002008928571428571, -0.001004464285714286, 0.004017857142857142, -0.002008928571428571, 0.0, 0.0, 0.0, -0.001004464285714286, -0.001004464285714288, 0.002008928571428575, 0.0, -0.002008928571428571, 0.0, 0.0 },
            { 0.0001116071428571431, 0.0002232142857142851, -0.0004464285714285718, 0.0001116071428571427, 0.002008928571428572, -0.001004464285714286, -0.001004464285714285, 0.0, -0.002008928571428571, 0.004017857142857142, 0.0, 0.0, -0.001004464285714286, 0.002008928571428575, 0.0, -0.001004464285714287, 0.0, 0.0, -0.002008928571428573, 0.0 },
            { -0.0004464285714285714, 0.0001116071428571425, 0.0001116071428571422, 0.0002232142857142853, 0.0, -0.001004464285714287, 0.0, -0.001004464285714286, 0.0, 0.0, 0.004017857142857144, -0.002008928571428574, 0.002008928571428572, -0.001004464285714286, 0.002008928571428573, -0.001004464285714287, -0.002008928571428573, 0.0, 0.0, 0.0 },
            { 0.0002232142857142852, 0.0001116071428571425, 0.0001116071428571433, -0.0004464285714285721, -0.001004464285714288, 0.002008928571428575, -0.001004464285714286, 0.002008928571428574, 0.0, 0.0, -0.002008928571428574, 0.004017857142857149, -0.001004464285714286, 0.0, -0.001004464285714286, 0.0, 0.0, 0.0, 0.0, -0.002008928571428576 },
            { -0.0004464285714285724, 0.0001116071428571429, 0.0002232142857142854, 0.0001116071428571427, -0.001004464285714288, 0.0, 0.0, 0.0, 0.0, -0.001004464285714286, 0.002008928571428572, -0.001004464285714286, 0.004017857142857147, -0.002008928571428574, 0.002008928571428574, -0.001004464285714288, -0.002008928571428575, 0.0, 0.0, 0.0 },
            { 0.0002232142857142858, 0.0001116071428571424, -0.0004464285714285715, 0.0001116071428571427, 0.002008928571428574, -0.001004464285714287, 0.0, 0.0, -0.001004464285714286, 0.002008928571428575, -0.001004464285714286, 0.0, -0.002008928571428574, 0.004017857142857147, -0.001004464285714287, 0.0, 0.0, 0.0, -0.002008928571428574, 0.0 },
            { -0.0004464285714285729, 0.0002232142857142852, 0.0001116071428571427, 0.0001116071428571426, 0.0, 0.0, -0.001004464285714288, 0.0, -0.001004464285714288, 0.0, 0.002008928571428573, -0.001004464285714286, 0.002008928571428574, -0.001004464285714287, 0.004017857142857149, -0.002008928571428574, -0.002008928571428577, 0.0, 0.0, 0.0 },
            { 0.0002232142857142868, -0.0004464285714285709, 0.0001116071428571435, 0.0001116071428571432, 0.0, 0.0, 0.002008928571428573, -0.001004464285714287, 0.002008928571428575, -0.001004464285714287, -0.001004464285714287, 0.0, -0.001004464285714288, 0.0, -0.002008928571428574, 0.004017857142857148, 0.0, -0.002008928571428568, 0.0, 0.0 },
            { 0.001339285714285718, 0.0006696428571428582, 0.0006696428571428542, 0.0006696428571428579, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.002008928571428573, 0.0, -0.002008928571428575, 0.0, -0.002008928571428577, 0.0, 0.01607142857142859, 0.008035714285714283, 0.008035714285714299, 0.008035714285714288 },
            { 0.0006696428571428612, 0.001339285714285715, 0.0006696428571428542, 0.0006696428571428579, 0.0, 0.0, -0.002008928571428565, 0.0, -0.002008928571428571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.002008928571428568, 0.008035714285714283, 0.01607142857142857, 0.008035714285714294, 0.008035714285714287 },
            { 0.0006696428571428632, 0.0006696428571428591, 0.001339285714285712, 0.0006696428571428587, -0.002008928571428568, 0.0, 0.0, 0.0, 0.0, -0.002008928571428573, 0.0, 0.0, 0.0, -0.002008928571428574, 0.0, 0.0, 0.008035714285714299, 0.008035714285714294, 0.01607142857142858, 0.008035714285714301 },
            { 0.0006696428571428627, 0.0006696428571428587, 0.0006696428571428543, 0.001339285714285715, 0.0, -0.002008928571428573, 0.0, -0.002008928571428573, 0.0, 0.0, 0.0, -0.002008928571428576, 0.0, 0.0, 0.0, 0.0, 0.008035714285714288, 0.008035714285714287, 0.008035714285714301, 0.01607142857142858 } } };
    alignas(32) static const double PI1[1][16][16] =
        { { { 0.05952380952380969, -0.01130952380952379, -0.013392857142857, -0.0133928571428571, -0.01339285714285685, -0.01339285714285729, -0.03482142857142844, 0.01339285714285709, -0.03482142857142851, 0.01339285714285729, -0.09642857142857164, 0.04821428571428574, -0.03214285714285705, 0.03214285714285708, 0.04821428571428544, 0.04821428571428533 },
            { -0.01130952380952379, 0.05952380952380958, -0.03482142857142864, 0.01339285714285706, -0.03482142857142856, 0.01339285714285714, -0.01339285714285727, -0.01339285714285708, -0.01339285714285721, -0.01339285714285714, 0.04821428571428567, -0.09642857142857145, 0.03214285714285706, -0.03214285714285705, 0.04821428571428594, 0.04821428571428577 },
            { -0.013392857142857, -0.03482142857142864, 0.2410714285714285, -0.07232142857142818, 0.1205357142857142, -0.02410714285714306, 0.04821428571428585, 0.07232142857142827, 0.02410714285714294, 0.02410714285714305, 0.02410714285714255, 0.0241071428571431, -0.04821428571428531, 0.04821428571428531, -0.2892857142857145, -0.1446428571428571 },
            { -0.0133928571428571, 0.01339285714285706, -0.07232142857142818, 0.1928571428571427, -0.02410714285714285, -0.02410714285714288, 0.07232142857142855, -0.1928571428571428, 0.02410714285714284, 0.02410714285714289, 0.0, 0.0, 0.09642857142857143, -0.09642857142857152, 0.0, 0.0 },
            { -0.01339285714285685, -0.03482142857142856, 0.1205357142857142, -0.02410714285714285, 0.2410714285714288, -0.07232142857142897, 0.02410714285714282, 0.02410714285714288, 0.04821428571428538, 0.07232142857142895, 0.02410714285714242, 0.024107142857143, -0.04821428571428609, 0.04821428571428615, -0.1446428571428572, -0.289285714285714 },
            { -0.01339285714285729, 0.01339285714285714, -0.02410714285714306, -0.02410714285714288, -0.07232142857142897, 0.1928571428571439, 0.02410714285714294, 0.0241071428571429, 0.07232142857142909, -0.1928571428571438, 0.0, 0.0, 0.096428571428572, -0.09642857142857206, 0.0, 0.0 },
            { -0.03482142857142844, -0.01339285714285727, 0.04821428571428585, 0.07232142857142855, 0.02410714285714282, 0.02410714285714294, 0.2410714285714286, -0.07232142857142852, 0.1205357142857144, -0.0241071428571429, 0.02410714285714244, 0.02410714285714328, 0.04821428571428563, -0.04821428571428574, -0.2892857142857145, -0.1446428571428571 },
            { 0.01339285714285709, -0.01339285714285708, 0.07232142857142827, -0.1928571428571428, 0.02410714285714288, 0.0241071428571429, -0.07232142857142852, 0.1928571428571429, -0.02410714285714282, -0.02410714285714291, 0.0, 0.0, -0.09642857142857147, 0.09642857142857154, 0.0, 0.0 },
            { -0.03482142857142851, -0.01339285714285721, 0.02410714285714294, 0.02410714285714284, 0.04821428571428538, 0.07232142857142909, 0.1205357142857144, -0.02410714285714282, 0.241071428571429, -0.07232142857142906, 0.02410714285714241, 0.02410714285714325, 0.04821428571428611, -0.04821428571428618, -0.1446428571428574, -0.2892857142857143 },
            { 0.01339285714285729, -0.01339285714285714, 0.02410714285714305, 0.02410714285714289, 0.07232142857142895, -0.1928571428571438, -0.0241071428571429, -0.02410714285714291, -0.07232142857142906, 0.1928571428571437, 0.0, 0.0, -0.0964285714285719, 0.09642857142857193, 0.0, 0.0 },
            { -0.09642857142857164, 0.04821428571428567, 0.02410714285714255, 0.0, 0.02410714285714242, 0.0, 0.02410714285714244, 0.0, 0.02410714285714241, 0.0, 0.2410714285714289, -0.1928571428571429, 0.0, 0.0, -0.04821428571428502, -0.04821428571428479 },
            { 0.04821428571428574, -0.09642857142857145, 0.0241071428571431, 0.0, 0.024107142857143, 0.0, 0.02410714285714328, 0.0, 0.02410714285714325, 0.0, -0.1928571428571429, 0.2410714285714285, 0.0, 0.0, -0.0482142857142864, -0.04821428571428623 },
            { -0.03214285714285705, 0.03214285714285706, -0.04821428571428531, 0.09642857142857143, -0.04821428571428609, 0.096428571428572, 0.04821428571428563, -0.09642857142857147, 0.04821428571428611, -0.0964285714285719, 0.0, 0.0, 0.5785714285714305, -0.5785714285714306, 0.0, 0.0 },
            { 0.03214285714285708, -0.03214285714285705, 0.04821428571428531, -0.09642857142857152, 0.04821428571428615, -0.09642857142857206, -0.04821428571428574, 0.09642857142857154, -0.04821428571428618, 0.09642857142857193, 0.0, 0.0, -0.5785714285714306, 0.5785714285714307, 0.0, 0.0 },
            { 0.04821428571428544, 0.04821428571428594, -0.2892857142857145, 0.0, -0.1446428571428572, 0.0, -0.2892857142857145, 0.0, -0.1446428571428574, 0.0, -0.04821428571428502, -0.0482142857142864, 0.0, 0.0, 0.5785714285714293, 0.2892857142857144 },
            { 0.04821428571428533, 0.04821428571428577, -0.1446428571428571, 0.0, -0.289285714285714, 0.0, -0.1446428571428571, 0.0, -0.2892857142857143, 0.0, -0.04821428571428479, -0.04821428571428623, 0.0, 0.0, 0.2892857142857144, 0.5785714285714282 } } };
    alignas(32) static const double PI2[1][16][16] =
        { { { 0.05952380952380967, -0.01130952380952392, -0.01339285714285708, -0.01339285714285714, -0.01339285714285699, -0.01339285714285709, -0.03482142857142848, 0.01339285714285711, -0.09642857142857175, 0.04821428571428599, -0.03482142857142835, 0.01339285714285696, -0.03214285714285697, 0.04821428571428558, 0.0321428571428569, 0.04821428571428545 },
            { -0.01130952380952382, 0.01130952380952384, 0.01339285714285703, 0.01339285714285712, 0.06160714285714292, -0.03482142857142855, -0.01339285714285727, -0.01339285714285708, 0.0, 0.0, 0.03482142857142838, -0.06160714285714297, -0.01607142857142864, 0.0, 0.01607142857142876, 0.0 },
            { -0.01339285714285697, 0.01339285714285704, -0.04821428571428544, -0.07232142857142854, 0.09642857142857186, -0.0482142857142862, 0.0482142857142859, 0.07232142857142843, 0.0, 0.0, 0.04821428571428558, -0.09642857142857132, 0.2410714285714292, 0.0, -0.2410714285714293, 0.0 },
            { -0.01339285714285714, 0.01339285714285728, -0.07232142857142894, 0.1928571428571436, -0.02410714285714284, -0.02410714285714286, 0.07232142857142869, -0.1928571428571432, 0.0, 0.0, 0.0241071428571428, 0.02410714285714268, 0.09642857142857138, 0.0, -0.09642857142857127, 0.0 },
            { -0.01339285714285683, -0.03482142857142868, -0.04821428571428577, -0.02410714285714299, 0.09642857142857224, 0.07232142857142784, 0.02410714285714286, 0.02410714285714294, 0.02410714285714241, 0.02410714285714326, 0.04821428571428536, -0.09642857142857156, 0.1205357142857143, 0.02410714285714301, -0.1205357142857142, -0.1205357142857138 },
            { -0.01339285714285723, 0.06160714285714301, 0.09642857142857145, -0.02410714285714302, -0.02410714285714309, 0.09642857142857222, 0.02410714285714289, 0.02410714285714297, 0.04821428571428604, -0.09642857142857193, 0.02410714285714304, 0.02410714285714286, -0.02410714285714222, -0.1205357142857146, 0.02410714285714266, -0.1205357142857148 },
            { -0.03482142857142845, -0.01339285714285709, 0.04821428571428547, 0.07232142857142886, 0.02410714285714291, 0.0241071428571429, 0.2410714285714287, -0.07232142857142868, 0.02410714285714247, 0.0241071428571434, 0.1205357142857144, -0.02410714285714288, 0.0482142857142856, -0.2892857142857143, -0.04821428571428556, -0.1446428571428576 },
            { 0.01339285714285714, -0.01339285714285729, 0.07232142857142899, -0.1928571428571436, 0.02410714285714287, 0.02410714285714287, -0.07232142857142866, 0.1928571428571433, 0.0, 0.0, -0.02410714285714277, -0.02410714285714271, -0.09642857142857138, 0.0, 0.09642857142857127, 0.0 },
            { -0.03482142857142839, 0.0348214285714287, 0.04821428571428588, 0.02410714285714298, 0.02410714285714292, 0.04821428571428574, 0.1205357142857144, -0.02410714285714289, 0.1446428571428567, -0.1446428571428568, 0.1205357142857146, -0.02410714285714288, 0.02410714285714297, -0.1687500000000004, -0.02410714285714298, -0.1687500000000005 },
            { 0.01339285714285722, -0.061607142857143, -0.09642857142857138, 0.02410714285714303, 0.02410714285714308, -0.09642857142857215, -0.02410714285714285, -0.02410714285714298, -0.04821428571428603, 0.09642857142857193, -0.02410714285714302, -0.02410714285714285, 0.02410714285714225, 0.1205357142857145, -0.0241071428571427, 0.1205357142857147 },
            { -0.0964285714285717, 0.0, 0.0, 0.0, 0.04821428571428538, 0.0241071428571428, 0.02410714285714248, 0.0, 0.1205357142857147, -0.024107142857143, 0.1446428571428567, -0.04821428571428534, 0.02410714285714255, -0.02410714285714238, -0.02410714285714264, -0.1687499999999995 },
            { 0.04821428571428586, 0.0, 0.0, 0.0, -0.09642857142857131, 0.02410714285714284, 0.02410714285714327, 0.0, -0.02410714285714312, -0.02410714285714267, -0.1446428571428568, 0.09642857142857136, 0.02410714285714313, -0.02410714285714342, -0.02410714285714309, 0.1205357142857139 },
            { -0.03214285714285703, -0.01607142857142865, 0.2410714285714284, 0.09642857142857181, -0.0241071428571427, 0.1205357142857148, 0.04821428571428554, -0.09642857142857153, 0.02410714285714337, 0.02410714285714218, 0.02410714285714272, 0.02410714285714259, 0.289285714285717, -0.2892857142857145, -0.2892857142857159, -0.1446428571428568 },
            { 0.03214285714285704, 0.01607142857142863, -0.2410714285714284, -0.09642857142857189, 0.02410714285714273, -0.1205357142857148, -0.04821428571428563, 0.0964285714285716, -0.02410714285714336, -0.02410714285714217, -0.02410714285714277, -0.02410714285714262, -0.289285714285717, 0.2892857142857148, 0.2892857142857159, 0.1446428571428569 },
            { 0.04821428571428542, 0.0, 0.0, 0.0, -0.1205357142857148, 0.0241071428571432, -0.2892857142857146, 0.0, -0.02410714285714248, -0.02410714285714334, -0.1687500000000001, 0.1205357142857143, -0.2892857142857146, 0.2892857142857146, 0.2892857142857146, 0.1446428571428577 },
            { 0.0482142857142852, 0.0, 0.0, 0.0, -0.1205357142857151, -0.1205357142857135, -0.1446428571428572, 0.0, -0.168749999999999, 0.1205357142857134, -0.1687499999999999, 0.1205357142857144, -0.1446428571428572, 0.1446428571428573, 0.1446428571428571, 0.2892857142857142 } } };
    alignas(32) static const double PI3[1][16][16] =
        { { { 0.05952380952380963, -0.0113095238095238, -0.01339285714285723, -0.01339285714285704, -0.01339285714285706, -0.01339285714285699, -0.09642857142857159, 0.04821428571428579, -0.03482142857142854, 0.01339285714285727, -0.03482142857142837, 0.01339285714285695, -0.03214285714285708, 0.04821428571428563, 0.0482142857142854, 0.03214285714285695 },
            { -0.01130952380952381, 0.01130952380952383, 0.01339285714285708, 0.01339285714285704, 0.06160714285714288, -0.03482142857142868, 0.0, 0.0, -0.01339285714285729, -0.01339285714285712, 0.03482142857142836, -0.06160714285714293, -0.01607142857142854, 0.0, 0.0, 0.01607142857142855 },
            { -0.01339285714285697, -0.03482142857142873, -0.02410714285714254, -0.04821428571428554, 0.09642857142857206, 0.07232142857142858, 0.0241071428571425, 0.02410714285714348, 0.02410714285714317, 0.02410714285714306, 0.04821428571428554, -0.09642857142857131, 0.1205357142857144, 0.0241071428571419, -0.1205357142857149, -0.1205357142857142 },
            { -0.01339285714285712, 0.06160714285714304, -0.02410714285714314, 0.09642857142857135, -0.02410714285714262, 0.09642857142857127, 0.04821428571428574, -0.09642857142857171, 0.02410714285714287, 0.02410714285714298, 0.02410714285714277, 0.02410714285714256, -0.02410714285714268, -0.1205357142857143, -0.1205357142857137, 0.02410714285714284 },
            { -0.01339285714285698, 0.01339285714285703, -0.07232142857142837, -0.04821428571428595, 0.09642857142857199, -0.04821428571428598, 0.0, 0.0, 0.04821428571428568, 0.07232142857142893, 0.04821428571428528, -0.0964285714285715, 0.2410714285714283, 0.0, 0.0, -0.2410714285714283 },
            { -0.01339285714285718, 0.0133928571428571, 0.1928571428571429, -0.07232142857142874, -0.02410714285714303, -0.02410714285714303, 0.0, 0.0, 0.0723214285714288, -0.1928571428571436, 0.02410714285714314, 0.02410714285714311, 0.09642857142857297, 0.0, 0.0, -0.09642857142857271 },
            { -0.03482142857142841, 0.0348214285714287, 0.02410714285714237, 0.04821428571428594, 0.0241071428571433, 0.04821428571428495, 0.1446428571428567, -0.1446428571428567, 0.1205357142857144, -0.02410714285714281, 0.1205357142857145, -0.02410714285714293, 0.02410714285714323, -0.1687500000000001, -0.1687500000000001, -0.02410714285714294 },
            { 0.01339285714285711, -0.06160714285714307, 0.02410714285714316, -0.09642857142857141, 0.02410714285714265, -0.09642857142857129, -0.04821428571428571, 0.09642857142857172, -0.02410714285714284, -0.02410714285714299, -0.02410714285714274, -0.0241071428571426, 0.02410714285714273, 0.1205357142857143, 0.1205357142857138, -0.02410714285714288 },
            { -0.0348214285714285, -0.01339285714285712, 0.07232142857142845, 0.04821428571428596, 0.0241071428571429, 0.02410714285714263, 0.0241071428571425, 0.02410714285714326, 0.2410714285714289, -0.07232142857142899, 0.1205357142857146, -0.02410714285714284, 0.04821428571428621, -0.2892857142857148, -0.1446428571428577, -0.0482142857142859 },
            { 0.01339285714285716, -0.01339285714285708, -0.1928571428571428, 0.07232142857142873, 0.02410714285714302, 0.02410714285714304, 0.0, 0.0, -0.07232142857142876, 0.1928571428571436, -0.02410714285714313, -0.0241071428571431, -0.09642857142857286, 0.0, 0.0, 0.09642857142857261 },
            { -0.09642857142857165, 0.0, 0.0, 0.0, 0.04821428571428542, 0.02410714285714276, 0.1205357142857146, -0.02410714285714292, 0.02410714285714248, 0.0, 0.1446428571428567, -0.04821428571428534, 0.02410714285714258, -0.02410714285714248, -0.1687499999999995, -0.02410714285714257 },
            { 0.04821428571428585, 0.0, 0.0, 0.0, -0.09642857142857125, 0.02410714285714292, -0.02410714285714306, -0.02410714285714267, 0.02410714285714328, 0.0, -0.1446428571428567, 0.09642857142857134, 0.02410714285714306, -0.02410714285714341, 0.1205357142857137, -0.02410714285714298 },
            { -0.03214285714285699, -0.01607142857142894, 0.09642857142857099, 0.2410714285714287, -0.02410714285714238, 0.1205357142857146, 0.0241071428571425, 0.02410714285714247, 0.04821428571428598, -0.09642857142857152, 0.02410714285714274, 0.02410714285714282, 0.2892857142857169, -0.2892857142857144, -0.1446428571428568, -0.2892857142857164 },
            { 0.032142857142857, 0.01607142857142892, -0.09642857142857102, -0.2410714285714288, 0.0241071428571424, -0.1205357142857147, -0.02410714285714256, -0.02410714285714238, -0.04821428571428604, 0.09642857142857159, -0.02410714285714277, -0.02410714285714284, -0.2892857142857169, 0.2892857142857144, 0.1446428571428569, 0.2892857142857164 },
            { 0.04821428571428538, 0.0, 0.0, 0.0, -0.1205357142857154, -0.1205357142857133, -0.1687499999999992, 0.1205357142857132, -0.1446428571428576, 0.0, -0.1687500000000001, 0.1205357142857143, -0.1446428571428577, 0.1446428571428579, 0.2892857142857148, 0.1446428571428572 },
            { 0.04821428571428545, 0.0, 0.0, 0.0, -0.1205357142857148, 0.02410714285714333, -0.0241071428571424, -0.02410714285714343, -0.2892857142857145, 0.0, -0.1687499999999998, 0.1205357142857143, -0.2892857142857143, 0.2892857142857148, 0.1446428571428574, 0.289285714285714 } } };
    alignas(32) static const double PI4[1][16][16] =
        { { { 0.05952380952380965, -0.01130952380952387, -0.01339285714285703, -0.01339285714285718, -0.01339285714285699, -0.01339285714285708, -0.03482142857142847, 0.01339285714285715, -0.09642857142857161, 0.04821428571428582, -0.03482142857142845, 0.01339285714285696, -0.03214285714285697, 0.04821428571428552, 0.0321428571428569, 0.04821428571428552 },
            { -0.01130952380952387, 0.05952380952380957, -0.03482142857142866, 0.01339285714285733, 0.01339285714285712, -0.03482142857142854, -0.01339285714285703, -0.01339285714285729, 0.04821428571428592, -0.09642857142857172, -0.01339285714285721, -0.01339285714285719, 0.03214285714285709, 0.04821428571428569, -0.03214285714285701, 0.04821428571428583 },
            { -0.01339285714285703, -0.03482142857142866, 0.2410714285714281, -0.07232142857142926, -0.0241071428571429, 0.1205357142857143, 0.04821428571428527, 0.07232142857142915, 0.02410714285714291, 0.02410714285714271, 0.02410714285714298, 0.02410714285714275, -0.04821428571428483, -0.2892857142857137, 0.04821428571428531, -0.1446428571428568 },
            { -0.01339285714285718, 0.01339285714285733, -0.07232142857142926, 0.1928571428571444, -0.02410714285714298, -0.02410714285714301, 0.07232142857142902, -0.192857142857144, 0.0, 0.0, 0.02410714285714292, 0.02410714285714281, 0.09642857142857174, 0.0, -0.09642857142857164, 0.0 },
            { -0.01339285714285699, 0.01339285714285712, -0.0241071428571429, -0.02410714285714298, 0.1928571428571439, -0.07232142857142881, 0.02410714285714294, 0.02410714285714294, 0.0, 0.0, 0.07232142857142836, -0.1928571428571435, 0.0964285714285724, 0.0, -0.09642857142857225, 0.0 },
            { -0.01339285714285708, -0.03482142857142854, 0.1205357142857143, -0.02410714285714301, -0.07232142857142881, 0.241071428571429, 0.0241071428571428, 0.02410714285714294, 0.0241071428571426, 0.02410714285714301, 0.04821428571428588, 0.07232142857142887, -0.04821428571428548, -0.1446428571428574, 0.04821428571428587, -0.2892857142857146 },
            { -0.03482142857142847, -0.01339285714285703, 0.04821428571428527, 0.07232142857142902, 0.02410714285714294, 0.0241071428571428, 0.2410714285714288, -0.07232142857142881, 0.02410714285714251, 0.02410714285714332, 0.1205357142857145, -0.0241071428571429, 0.04821428571428575, -0.2892857142857142, -0.04821428571428571, -0.1446428571428576 },
            { 0.01339285714285715, -0.01339285714285729, 0.07232142857142915, -0.192857142857144, 0.02410714285714294, 0.02410714285714294, -0.07232142857142881, 0.1928571428571436, 0.0, 0.0, -0.02410714285714285, -0.02410714285714277, -0.09642857142857143, 0.0, 0.09642857142857134, 0.0 },
            { -0.09642857142857161, 0.04821428571428592, 0.02410714285714291, 0.0, 0.0, 0.0241071428571426, 0.02410714285714251, 0.0, 0.2410714285714286, -0.1928571428571429, 0.02410714285714251, 0.0, 0.0, -0.04821428571428547, 0.0, -0.04821428571428506 },
            { 0.04821428571428582, -0.09642857142857172, 0.02410714285714271, 0.0, 0.0, 0.02410714285714301, 0.02410714285714332, 0.0, -0.1928571428571429, 0.2410714285714288, 0.0241071428571434, 0.0, 0.0, -0.04821428571428599, 0.0, -0.04821428571428655 },
            { -0.03482142857142845, -0.01339285714285721, 0.02410714285714298, 0.02410714285714292, 0.07232142857142836, 0.04821428571428588, 0.1205357142857145, -0.02410714285714285, 0.02410714285714251, 0.0241071428571434, 0.241071428571429, -0.0723214285714283, 0.04821428571428511, -0.1446428571428574, -0.04821428571428522, -0.2892857142857153 },
            { 0.01339285714285696, -0.01339285714285719, 0.02410714285714275, 0.02410714285714281, -0.1928571428571435, 0.07232142857142887, -0.0241071428571429, -0.02410714285714277, 0.0, 0.0, -0.0723214285714283, 0.192857142857143, -0.09642857142857184, 0.0, 0.09642857142857167, 0.0 },
            { -0.03214285714285697, 0.03214285714285709, -0.04821428571428483, 0.09642857142857174, 0.0964285714285724, -0.04821428571428548, 0.04821428571428575, -0.09642857142857143, 0.0, 0.0, 0.04821428571428511, -0.09642857142857184, 0.5785714285714313, 0.0, -0.5785714285714307, 0.0 },
            { 0.04821428571428552, 0.04821428571428569, -0.2892857142857137, 0.0, 0.0, -0.1446428571428574, -0.2892857142857142, 0.0, -0.04821428571428547, -0.04821428571428599, -0.1446428571428574, 0.0, 0.0, 0.5785714285714282, 0.0, 0.2892857142857146 },
            { 0.0321428571428569, -0.03214285714285701, 0.04821428571428531, -0.09642857142857164, -0.09642857142857225, 0.04821428571428587, -0.04821428571428571, 0.09642857142857134, 0.0, 0.0, -0.04821428571428522, 0.09642857142857167, -0.5785714285714307, 0.0, 0.5785714285714301, 0.0 },
            { 0.04821428571428552, 0.04821428571428583, -0.1446428571428568, 0.0, 0.0, -0.2892857142857146, -0.1446428571428576, 0.0, -0.04821428571428506, -0.04821428571428655, -0.2892857142857153, 0.0, 0.0, 0.2892857142857146, 0.0, 0.5785714285714297 } } };
    alignas(32) static const double PI5[1][16][16] =
        { { { 0.0595238095238096, -0.01130952380952381, -0.01339285714285717, -0.01339285714285705, -0.01339285714285706, -0.01339285714285704, -0.09642857142857156, 0.04821428571428579, -0.03482142857142843, 0.0133928571428572, -0.03482142857142846, 0.01339285714285695, -0.03214285714285701, 0.04821428571428553, 0.04821428571428552, 0.03214285714285689 },
            { -0.01130952380952384, 0.0113095238095239, 0.06160714285714283, -0.03482142857142866, 0.01339285714285716, 0.01339285714285707, 0.0, 0.0, 0.03482142857142862, -0.06160714285714296, -0.01339285714285719, -0.01339285714285714, -0.01607142857142843, 0.0, 0.0, 0.01607142857142859 },
            { -0.01339285714285703, -0.03482142857142899, 0.09642857142857066, 0.07232142857142859, -0.02410714285714288, -0.04821428571428567, 0.02410714285714243, 0.02410714285714316, 0.0482142857142857, -0.09642857142857124, 0.02410714285714304, 0.02410714285714296, 0.1205357142857149, -0.1205357142857138, 0.0241071428571427, -0.1205357142857147 },
            { -0.01339285714285716, 0.06160714285714327, -0.02410714285714329, 0.09642857142857184, -0.02410714285714275, 0.09642857142857174, 0.0482142857142859, -0.09642857142857206, 0.024107142857143, 0.02410714285714312, 0.02410714285714289, 0.0241071428571427, -0.02410714285714292, -0.1205357142857149, -0.1205357142857143, 0.02410714285714306 },
            { -0.01339285714285705, 0.0133928571428571, -0.02410714285714264, -0.02410714285714308, 0.1928571428571439, -0.07232142857142887, 0.0, 0.0, 0.02410714285714301, 0.02410714285714305, 0.07232142857142829, -0.1928571428571434, 0.0964285714285724, 0.0, 0.0, -0.09642857142857228 },
            { -0.01339285714285713, 0.01339285714285699, 0.09642857142857142, -0.04821428571428574, -0.07232142857142904, -0.04821428571428568, 0.0, 0.0, 0.04821428571428567, -0.096428571428572, 0.04821428571428595, 0.07232142857142908, 0.2410714285714291, 0.0, 0.0, -0.2410714285714292 },
            { -0.03482142857142844, 0.03482142857142877, 0.02410714285714233, 0.04821428571428595, 0.02410714285714332, 0.04821428571428508, 0.1446428571428567, -0.1446428571428568, 0.1205357142857144, -0.02410714285714277, 0.1205357142857145, -0.02410714285714295, 0.02410714285714317, -0.1687500000000002, -0.1687500000000002, -0.02410714285714288 },
            { 0.01339285714285713, -0.06160714285714316, 0.02410714285714324, -0.09642857142857154, 0.02410714285714271, -0.09642857142857147, -0.04821428571428582, 0.09642857142857188, -0.02410714285714291, -0.02410714285714307, -0.02410714285714282, -0.02410714285714266, 0.02410714285714289, 0.1205357142857146, 0.120535714285714, -0.02410714285714304 },
            { -0.09642857142857164, 0.0, 0.04821428571428585, 0.0241071428571428, 0.0, 0.0, 0.1205357142857145, -0.02410714285714298, 0.1446428571428567, -0.04821428571428604, 0.02410714285714254, 0.0, 0.02410714285714335, -0.1687499999999996, -0.02410714285714256, -0.02410714285714306 },
            { 0.04821428571428583, 0.0, -0.09642857142857167, 0.02410714285714303, 0.0, 0.0, -0.02410714285714296, -0.0241071428571427, -0.1446428571428566, 0.09642857142857197, 0.02410714285714336, 0.0, 0.02410714285714199, 0.1205357142857137, -0.02410714285714342, -0.02410714285714233 },
            { -0.03482142857142849, -0.01339285714285719, 0.02410714285714254, 0.0241071428571431, 0.07232142857142845, 0.04821428571428546, 0.02410714285714251, 0.02410714285714335, 0.1205357142857146, -0.02410714285714294, 0.241071428571429, -0.0723214285714283, 0.0482142857142854, -0.1446428571428575, -0.289285714285715, -0.04821428571428532 },
            { 0.01339285714285702, -0.01339285714285709, 0.02410714285714241, 0.02410714285714293, -0.1928571428571434, 0.0723214285714287, 0.0, 0.0, -0.02410714285714296, -0.02410714285714283, -0.07232142857142823, 0.1928571428571429, -0.09642857142857167, 0.0, 0.0, 0.09642857142857154 },
            { -0.03214285714285693, -0.01607142857142884, -0.02410714285714194, 0.120535714285714, 0.09642857142857292, 0.2410714285714285, 0.02410714285714239, 0.02410714285714315, 0.02410714285714327, 0.02410714285714249, 0.048214285714285, -0.09642857142857179, 0.2892857142857174, -0.144642857142858, -0.2892857142857137, -0.2892857142857168 },
            { 0.04821428571428549, 0.0, -0.1205357142857132, -0.1205357142857148, 0.0, 0.0, -0.1687499999999992, 0.1205357142857138, -0.1687500000000003, 0.1205357142857143, -0.1446428571428576, 0.0, -0.1446428571428585, 0.2892857142857143, 0.1446428571428575, 0.144642857142858 },
            { 0.03214285714285686, 0.01607142857142898, 0.02410714285714239, -0.1205357142857139, -0.09642857142857278, -0.2410714285714286, -0.02410714285714234, -0.0241071428571433, -0.02410714285714329, -0.02410714285714293, -0.0482142857142851, 0.09642857142857163, -0.2892857142857163, 0.1446428571428579, 0.2892857142857139, 0.2892857142857158 },
            { 0.04821428571428561, 0.0, -0.1205357142857135, 0.02410714285714274, 0.0, 0.0, -0.02410714285714248, -0.02410714285714297, -0.1687500000000004, 0.1205357142857145, -0.2892857142857153, 0.0, -0.2892857142857146, 0.1446428571428571, 0.2892857142857153, 0.2892857142857146 } } };
    alignas(32) static const double PI6[1][16][16] =
        { { { 0.05952380952380956, -0.01130952380952379, -0.01339285714285711, -0.01339285714285706, -0.01339285714285712, -0.01339285714285696, -0.09642857142857142, 0.04821428571428566, -0.03482142857142854, 0.01339285714285714, -0.03482142857142851, 0.01339285714285701, -0.03214285714285711, 0.04821428571428565, 0.04821428571428549, 0.03214285714285697 },
            { -0.01130952380952379, 0.05952380952380958, 0.013392857142857, -0.03482142857142852, 0.01339285714285711, -0.03482142857142858, 0.04821428571428583, -0.09642857142857171, -0.01339285714285711, -0.01339285714285706, -0.01339285714285716, -0.01339285714285706, 0.03214285714285674, 0.04821428571428565, 0.04821428571428582, -0.03214285714285671 },
            { -0.01339285714285711, 0.013392857142857, 0.1928571428571418, -0.07232142857142881, -0.02410714285714259, -0.0241071428571432, 0.0, 0.0, 0.07232142857142815, -0.1928571428571426, 0.02410714285714264, 0.02410714285714267, 0.09642857142857263, 0.0, 0.0, -0.09642857142857236 },
            { -0.01339285714285706, -0.03482142857142852, -0.07232142857142881, 0.2410714285714287, -0.02410714285714284, 0.1205357142857143, 0.02410714285714286, 0.02410714285714276, 0.048214285714286, 0.0723214285714288, 0.02410714285714304, 0.02410714285714278, -0.04821428571428603, -0.2892857142857148, -0.1446428571428571, 0.04821428571428624 },
            { -0.01339285714285712, 0.01339285714285711, -0.02410714285714259, -0.02410714285714284, 0.1928571428571438, -0.07232142857142838, 0.0, 0.0, 0.02410714285714299, 0.024107142857143, 0.07232142857142837, -0.1928571428571433, 0.09642857142857225, 0.0, 0.0, -0.09642857142857213 },
            { -0.01339285714285696, -0.03482142857142858, -0.0241071428571432, 0.1205357142857143, -0.07232142857142838, 0.2410714285714282, 0.02410714285714209, 0.02410714285714357, 0.0241071428571427, 0.02410714285714316, 0.04821428571428543, 0.07232142857142854, -0.04821428571428556, -0.1446428571428573, -0.2892857142857137, 0.04821428571428579 },
            { -0.09642857142857142, 0.04821428571428583, 0.0, 0.02410714285714286, 0.0, 0.02410714285714209, 0.2410714285714283, -0.1928571428571426, 0.02410714285714262, 0.0, 0.02410714285714259, 0.0, 0.0, -0.04821428571428549, -0.04821428571428487, 0.0 },
            { 0.04821428571428566, -0.09642857142857171, 0.0, 0.02410714285714276, 0.0, 0.02410714285714357, -0.1928571428571426, 0.2410714285714286, 0.02410714285714317, 0.0, 0.02410714285714326, 0.0, 0.0, -0.048214285714286, -0.04821428571428672, 0.0 },
            { -0.03482142857142854, -0.01339285714285711, 0.07232142857142815, 0.048214285714286, 0.02410714285714299, 0.0241071428571427, 0.02410714285714262, 0.02410714285714317, 0.2410714285714289, -0.07232142857142872, 0.1205357142857146, -0.02410714285714292, 0.04821428571428638, -0.2892857142857146, -0.1446428571428577, -0.04821428571428606 },
            { 0.01339285714285714, -0.01339285714285706, -0.1928571428571426, 0.0723214285714288, 0.024107142857143, 0.02410714285714316, 0.0, 0.0, -0.07232142857142872, 0.1928571428571434, -0.02410714285714304, -0.02410714285714308, -0.09642857142857258, 0.0, 0.0, 0.09642857142857232 },
            { -0.03482142857142851, -0.01339285714285716, 0.02410714285714264, 0.02410714285714304, 0.07232142857142837, 0.04821428571428543, 0.02410714285714259, 0.02410714285714326, 0.1205357142857146, -0.02410714285714304, 0.241071428571429, -0.07232142857142822, 0.04821428571428539, -0.1446428571428574, -0.2892857142857149, -0.04821428571428532 },
            { 0.01339285714285701, -0.01339285714285706, 0.02410714285714267, 0.02410714285714278, -0.1928571428571433, 0.07232142857142854, 0.0, 0.0, -0.02410714285714292, -0.02410714285714308, -0.07232142857142822, 0.1928571428571429, -0.09642857142857122, 0.0, 0.0, 0.09642857142857113 },
            { -0.03214285714285711, 0.03214285714285674, 0.09642857142857263, -0.04821428571428603, 0.09642857142857225, -0.04821428571428556, 0.0, 0.0, 0.04821428571428638, -0.09642857142857258, 0.04821428571428539, -0.09642857142857122, 0.5785714285714321, 0.0, 0.0, -0.5785714285714317 },
            { 0.04821428571428565, 0.04821428571428565, 0.0, -0.2892857142857148, 0.0, -0.1446428571428573, -0.04821428571428549, -0.048214285714286, -0.2892857142857146, 0.0, -0.1446428571428574, 0.0, 0.0, 0.5785714285714293, 0.2892857142857149, 0.0 },
            { 0.04821428571428549, 0.04821428571428582, 0.0, -0.1446428571428571, 0.0, -0.2892857142857137, -0.04821428571428487, -0.04821428571428672, -0.1446428571428577, 0.0, -0.2892857142857149, 0.0, 0.0, 0.2892857142857149, 0.578571428571429, 0.0 },
            { 0.03214285714285697, -0.03214285714285671, -0.09642857142857236, 0.04821428571428624, -0.09642857142857213, 0.04821428571428579, 0.0, 0.0, -0.04821428571428606, 0.09642857142857232, -0.04821428571428532, 0.09642857142857113, -0.5785714285714317, 0.0, 0.0, 0.5785714285714316 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE33_C0_D001_Q24[0][0][0] + coordinate_dofs[7] * FE33_C0_D001_Q24[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE33_C0_D001_Q24[0][0][0] + coordinate_dofs[11] * FE33_C0_D001_Q24[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE33_C0_D001_Q24[0][0][0] + coordinate_dofs[10] * FE33_C0_D001_Q24[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE33_C0_D001_Q24[0][0][0] + coordinate_dofs[8] * FE33_C0_D001_Q24[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE33_C0_D001_Q24[0][0][0] + coordinate_dofs[3] * FE33_C0_D001_Q24[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE33_C0_D001_Q24[0][0][0] + coordinate_dofs[6] * FE33_C0_D001_Q24[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE33_C0_D001_Q24[0][0][0] + coordinate_dofs[5] * FE33_C0_D001_Q24[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE33_C0_D001_Q24[0][0][0] + coordinate_dofs[4] * FE33_C0_D001_Q24[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE33_C0_D001_Q24[0][0][0] + coordinate_dofs[9] * FE33_C0_D001_Q24[0][0][1];
    alignas(32) double sp[81];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = sp[14] * sp[14];
    sp[20] = sp[14] * sp[17];
    sp[21] = sp[18] * sp[14];
    sp[22] = sp[17] * sp[17];
    sp[23] = sp[18] * sp[17];
    sp[24] = sp[18] * sp[18];
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = J_c0 * J_c8;
    sp[30] = J_c6 * (-1 * J_c2);
    sp[31] = sp[29] + sp[30];
    sp[32] = sp[31] / sp[13];
    sp[33] = J_c1 * J_c6;
    sp[34] = J_c0 * J_c7;
    sp[35] = sp[33] + -1 * sp[34];
    sp[36] = sp[35] / sp[13];
    sp[37] = sp[28] * sp[28];
    sp[38] = sp[28] * sp[32];
    sp[39] = sp[28] * sp[36];
    sp[40] = sp[32] * sp[32];
    sp[41] = sp[32] * sp[36];
    sp[42] = sp[36] * sp[36];
    sp[43] = sp[37] + sp[19];
    sp[44] = sp[38] + sp[20];
    sp[45] = sp[39] + sp[21];
    sp[46] = sp[40] + sp[22];
    sp[47] = sp[41] + sp[23];
    sp[48] = sp[24] + sp[42];
    sp[49] = J_c1 * J_c5;
    sp[50] = J_c2 * J_c4;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = J_c2 * J_c3;
    sp[54] = J_c0 * J_c5;
    sp[55] = sp[53] + -1 * sp[54];
    sp[56] = sp[55] / sp[13];
    sp[57] = J_c0 * J_c4;
    sp[58] = J_c1 * J_c3;
    sp[59] = sp[57] + -1 * sp[58];
    sp[60] = sp[59] / sp[13];
    sp[61] = sp[52] * sp[52];
    sp[62] = sp[52] * sp[56];
    sp[63] = sp[60] * sp[52];
    sp[64] = sp[56] * sp[56];
    sp[65] = sp[60] * sp[56];
    sp[66] = sp[60] * sp[60];
    sp[67] = sp[43] + sp[61];
    sp[68] = sp[44] + sp[62];
    sp[69] = sp[45] + sp[63];
    sp[70] = sp[46] + sp[64];
    sp[71] = sp[47] + sp[65];
    sp[72] = sp[48] + sp[66];
    sp[73] = std::abs(sp[13]);
    sp[74] = 0.01 * sp[67] * sp[73];
    sp[75] = 0.01 * sp[68] * sp[73];
    sp[76] = 0.01 * sp[69] * sp[73];
    sp[77] = 0.01 * sp[70] * sp[73];
    sp[78] = 0.01 * sp[71] * sp[73];
    sp[79] = 0.01 * sp[72] * sp[73];
    sp[80] = 1 / w[0][0] * sp[73];
    A[0] = sp[80] * PI0[0][0][0] + sp[74] * PI1[0][0][0] + sp[75] * PI2[0][0][0] + sp[76] * PI3[0][0][0] + sp[75] * PI2[0][0][0] + sp[77] * PI4[0][0][0] + sp[78] * PI5[0][0][0] + sp[76] * PI3[0][0][0] + sp[78] * PI5[0][0][0] + sp[79] * PI6[0][0][0];
    A[1] = sp[80] * PI0[0][0][1] + sp[74] * PI1[0][0][1] + sp[75] * PI2[0][1][0] + sp[76] * PI3[0][1][0];
    A[2] = sp[80] * PI0[0][0][2] + sp[75] * PI2[0][0][1] + sp[77] * PI4[0][0][1] + sp[78] * PI5[0][1][0];
    A[3] = sp[80] * PI0[0][0][3] + sp[76] * PI3[0][0][1] + sp[78] * PI5[0][0][1] + sp[79] * PI6[0][0][1];
    A[4] = sp[80] * PI0[0][0][4] + sp[75] * PI2[0][0][2] + sp[76] * PI3[0][0][2] + sp[77] * PI4[0][0][2] + sp[78] * PI5[0][0][2] + sp[78] * PI5[0][2][0] + sp[79] * PI6[0][0][2];
    A[5] = sp[80] * PI0[0][0][5] + sp[75] * PI2[0][0][3] + sp[76] * PI3[0][0][3] + sp[77] * PI4[0][0][3] + sp[78] * PI5[0][0][3] + sp[78] * PI5[0][3][0] + sp[79] * PI6[0][0][3];
    A[6] = sp[80] * PI0[0][0][6] + sp[74] * PI1[0][0][2] + sp[76] * PI3[0][0][4] + sp[75] * PI2[0][2][0] + sp[78] * PI5[0][0][4] + sp[76] * PI3[0][2][0] + sp[79] * PI6[0][0][4];
    A[7] = sp[80] * PI0[0][0][7] + sp[74] * PI1[0][0][3] + sp[76] * PI3[0][0][5] + sp[75] * PI2[0][3][0] + sp[78] * PI5[0][0][5] + sp[76] * PI3[0][3][0] + sp[79] * PI6[0][0][5];
    A[8] = sp[80] * PI0[0][0][8] + sp[74] * PI1[0][0][4] + sp[75] * PI2[0][0][4] + sp[75] * PI2[0][4][0] + sp[77] * PI4[0][0][4] + sp[76] * PI3[0][4][0] + sp[78] * PI5[0][4][0];
    A[9] = sp[80] * PI0[0][0][9] + sp[74] * PI1[0][0][5] + sp[75] * PI2[0][0][5] + sp[75] * PI2[0][5][0] + sp[77] * PI4[0][0][5] + sp[76] * PI3[0][5][0] + sp[78] * PI5[0][5][0];
    A[10] = sp[80] * PI0[0][0][10] + sp[74] * PI1[0][0][6] + sp[75] * PI2[0][0][6] + sp[76] * PI3[0][0][6] + sp[75] * PI2[0][6][0] + sp[77] * PI4[0][0][6] + sp[78] * PI5[0][0][6] + sp[76] * PI3[0][6][0] + sp[78] * PI5[0][6][0] + sp[79] * PI6[0][0][6];
    A[11] = sp[80] * PI0[0][0][11] + sp[74] * PI1[0][0][7] + sp[75] * PI2[0][0][7] + sp[76] * PI3[0][0][7] + sp[75] * PI2[0][7][0] + sp[77] * PI4[0][0][7] + sp[78] * PI5[0][0][7] + sp[76] * PI3[0][7][0] + sp[78] * PI5[0][7][0] + sp[79] * PI6[0][0][7];
    A[12] = sp[80] * PI0[0][0][12] + sp[74] * PI1[0][0][8] + sp[75] * PI2[0][0][8] + sp[76] * PI3[0][0][8] + sp[75] * PI2[0][8][0] + sp[77] * PI4[0][0][8] + sp[78] * PI5[0][0][8] + sp[76] * PI3[0][8][0] + sp[78] * PI5[0][8][0] + sp[79] * PI6[0][0][8];
    A[13] = sp[80] * PI0[0][0][13] + sp[74] * PI1[0][0][9] + sp[75] * PI2[0][0][9] + sp[76] * PI3[0][0][9] + sp[75] * PI2[0][9][0] + sp[77] * PI4[0][0][9] + sp[78] * PI5[0][0][9] + sp[76] * PI3[0][9][0] + sp[78] * PI5[0][9][0] + sp[79] * PI6[0][0][9];
    A[14] = sp[80] * PI0[0][0][14] + sp[74] * PI1[0][0][10] + sp[75] * PI2[0][0][10] + sp[76] * PI3[0][0][10] + sp[75] * PI2[0][10][0] + sp[77] * PI4[0][0][10] + sp[78] * PI5[0][0][10] + sp[76] * PI3[0][10][0] + sp[78] * PI5[0][10][0] + sp[79] * PI6[0][0][10];
    A[15] = sp[80] * PI0[0][0][15] + sp[74] * PI1[0][0][11] + sp[75] * PI2[0][0][11] + sp[76] * PI3[0][0][11] + sp[75] * PI2[0][11][0] + sp[77] * PI4[0][0][11] + sp[78] * PI5[0][0][11] + sp[76] * PI3[0][11][0] + sp[78] * PI5[0][11][0] + sp[79] * PI6[0][0][11];
    A[16] = sp[80] * PI0[0][0][16] + sp[74] * PI1[0][0][12] + sp[75] * PI2[0][0][12] + sp[76] * PI3[0][0][12] + sp[75] * PI2[0][12][0] + sp[77] * PI4[0][0][12] + sp[78] * PI5[0][0][12] + sp[76] * PI3[0][12][0] + sp[78] * PI5[0][12][0] + sp[79] * PI6[0][0][12];
    A[17] = sp[80] * PI0[0][0][17] + sp[74] * PI1[0][0][13] + sp[75] * PI2[0][0][13] + sp[76] * PI3[0][0][13] + sp[75] * PI2[0][13][0] + sp[77] * PI4[0][0][13] + sp[78] * PI5[0][0][13] + sp[76] * PI3[0][13][0] + sp[78] * PI5[0][13][0] + sp[79] * PI6[0][0][13];
    A[18] = sp[80] * PI0[0][0][18] + sp[74] * PI1[0][0][14] + sp[75] * PI2[0][0][14] + sp[76] * PI3[0][0][14] + sp[75] * PI2[0][14][0] + sp[77] * PI4[0][0][14] + sp[78] * PI5[0][0][14] + sp[76] * PI3[0][14][0] + sp[78] * PI5[0][14][0] + sp[79] * PI6[0][0][14];
    A[19] = sp[80] * PI0[0][0][19] + sp[74] * PI1[0][0][15] + sp[75] * PI2[0][0][15] + sp[76] * PI3[0][0][15] + sp[75] * PI2[0][15][0] + sp[77] * PI4[0][0][15] + sp[78] * PI5[0][0][15] + sp[76] * PI3[0][15][0] + sp[78] * PI5[0][15][0] + sp[79] * PI6[0][0][15];
    std::fill(A + 20, A + 60, 0.0);
    A[60] = sp[80] * PI0[0][1][0] + sp[74] * PI1[0][1][0] + sp[75] * PI2[0][1][0] + sp[76] * PI3[0][1][0];
    A[61] = sp[80] * PI0[0][1][1] + sp[74] * PI1[0][1][1];
    A[62] = sp[80] * PI0[0][1][2] + sp[75] * PI2[0][1][1];
    A[63] = sp[80] * PI0[0][1][3] + sp[76] * PI3[0][1][1];
    A[64] = sp[80] * PI0[0][1][4] + sp[75] * PI2[0][1][2] + sp[76] * PI3[0][1][2];
    A[65] = sp[80] * PI0[0][1][5] + sp[75] * PI2[0][1][3] + sp[76] * PI3[0][1][3];
    A[66] = sp[80] * PI0[0][1][6] + sp[74] * PI1[0][1][2] + sp[76] * PI3[0][1][4];
    A[67] = sp[80] * PI0[0][1][7] + sp[74] * PI1[0][1][3] + sp[76] * PI3[0][1][5];
    A[68] = sp[80] * PI0[0][1][8] + sp[74] * PI1[0][1][4] + sp[75] * PI2[0][1][4];
    A[69] = sp[80] * PI0[0][1][9] + sp[74] * PI1[0][1][5] + sp[75] * PI2[0][1][5];
    A[70] = sp[80] * PI0[0][1][10] + sp[74] * PI1[0][1][6] + sp[75] * PI2[0][1][6] + sp[76] * PI3[0][1][6];
    A[71] = sp[80] * PI0[0][1][11] + sp[74] * PI1[0][1][7] + sp[75] * PI2[0][1][7] + sp[76] * PI3[0][1][7];
    A[72] = sp[80] * PI0[0][1][12] + sp[74] * PI1[0][1][8] + sp[75] * PI2[0][1][8] + sp[76] * PI3[0][1][8];
    A[73] = sp[80] * PI0[0][1][13] + sp[74] * PI1[0][1][9] + sp[75] * PI2[0][1][9] + sp[76] * PI3[0][1][9];
    A[74] = sp[80] * PI0[0][1][14] + sp[74] * PI1[0][1][10] + sp[75] * PI2[0][1][10] + sp[76] * PI3[0][1][10];
    A[75] = sp[80] * PI0[0][1][15] + sp[74] * PI1[0][1][11] + sp[75] * PI2[0][1][11] + sp[76] * PI3[0][1][11];
    A[76] = sp[80] * PI0[0][1][16] + sp[74] * PI1[0][1][12] + sp[75] * PI2[0][1][12] + sp[76] * PI3[0][1][12];
    A[77] = sp[80] * PI0[0][1][17] + sp[74] * PI1[0][1][13] + sp[75] * PI2[0][1][13] + sp[76] * PI3[0][1][13];
    A[78] = sp[80] * PI0[0][1][18] + sp[74] * PI1[0][1][14] + sp[75] * PI2[0][1][14] + sp[76] * PI3[0][1][14];
    A[79] = sp[80] * PI0[0][1][19] + sp[74] * PI1[0][1][15] + sp[75] * PI2[0][1][15] + sp[76] * PI3[0][1][15];
    std::fill(A + 80, A + 120, 0.0);
    A[120] = sp[80] * PI0[0][2][0] + sp[75] * PI2[0][0][1] + sp[77] * PI4[0][1][0] + sp[78] * PI5[0][1][0];
    A[121] = sp[80] * PI0[0][2][1] + sp[75] * PI2[0][1][1];
    A[122] = sp[80] * PI0[0][2][2] + sp[77] * PI4[0][1][1];
    A[123] = sp[80] * PI0[0][2][3] + sp[78] * PI5[0][1][1];
    A[124] = sp[80] * PI0[0][2][4] + sp[77] * PI4[0][1][2] + sp[78] * PI5[0][1][2];
    A[125] = sp[80] * PI0[0][2][5] + sp[77] * PI4[0][1][3] + sp[78] * PI5[0][1][3];
    A[126] = sp[80] * PI0[0][2][6] + sp[75] * PI2[0][2][1] + sp[78] * PI5[0][1][4];
    A[127] = sp[80] * PI0[0][2][7] + sp[75] * PI2[0][3][1] + sp[78] * PI5[0][1][5];
    A[128] = sp[80] * PI0[0][2][8] + sp[75] * PI2[0][4][1] + sp[77] * PI4[0][1][4];
    A[129] = sp[80] * PI0[0][2][9] + sp[75] * PI2[0][5][1] + sp[77] * PI4[0][1][5];
    A[130] = sp[80] * PI0[0][2][10] + sp[75] * PI2[0][6][1] + sp[77] * PI4[0][1][6] + sp[78] * PI5[0][1][6];
    A[131] = sp[80] * PI0[0][2][11] + sp[75] * PI2[0][7][1] + sp[77] * PI4[0][1][7] + sp[78] * PI5[0][1][7];
    A[132] = sp[80] * PI0[0][2][12] + sp[75] * PI2[0][8][1] + sp[77] * PI4[0][1][8] + sp[78] * PI5[0][1][8];
    A[133] = sp[80] * PI0[0][2][13] + sp[75] * PI2[0][9][1] + sp[77] * PI4[0][1][9] + sp[78] * PI5[0][1][9];
    A[134] = sp[80] * PI0[0][2][14] + sp[75] * PI2[0][10][1] + sp[77] * PI4[0][1][10] + sp[78] * PI5[0][1][10];
    A[135] = sp[80] * PI0[0][2][15] + sp[75] * PI2[0][11][1] + sp[77] * PI4[0][1][11] + sp[78] * PI5[0][1][11];
    A[136] = sp[80] * PI0[0][2][16] + sp[75] * PI2[0][12][1] + sp[77] * PI4[0][1][12] + sp[78] * PI5[0][1][12];
    A[137] = sp[80] * PI0[0][2][17] + sp[75] * PI2[0][13][1] + sp[77] * PI4[0][1][13] + sp[78] * PI5[0][1][13];
    A[138] = sp[80] * PI0[0][2][18] + sp[75] * PI2[0][14][1] + sp[77] * PI4[0][1][14] + sp[78] * PI5[0][1][14];
    A[139] = sp[80] * PI0[0][2][19] + sp[75] * PI2[0][15][1] + sp[77] * PI4[0][1][15] + sp[78] * PI5[0][1][15];
    std::fill(A + 140, A + 180, 0.0);
    A[180] = sp[80] * PI0[0][3][0] + sp[76] * PI3[0][0][1] + sp[78] * PI5[0][0][1] + sp[79] * PI6[0][1][0];
    A[181] = sp[80] * PI0[0][3][1] + sp[76] * PI3[0][1][1];
    A[182] = sp[80] * PI0[0][3][2] + sp[78] * PI5[0][1][1];
    A[183] = sp[80] * PI0[0][3][3] + sp[79] * PI6[0][1][1];
    A[184] = sp[80] * PI0[0][3][4] + sp[78] * PI5[0][2][1] + sp[79] * PI6[0][1][2];
    A[185] = sp[80] * PI0[0][3][5] + sp[78] * PI5[0][3][1] + sp[79] * PI6[0][1][3];
    A[186] = sp[80] * PI0[0][3][6] + sp[76] * PI3[0][2][1] + sp[79] * PI6[0][1][4];
    A[187] = sp[80] * PI0[0][3][7] + sp[76] * PI3[0][3][1] + sp[79] * PI6[0][1][5];
    A[188] = sp[80] * PI0[0][3][8] + sp[76] * PI3[0][4][1] + sp[78] * PI5[0][4][1];
    A[189] = sp[80] * PI0[0][3][9] + sp[76] * PI3[0][5][1] + sp[78] * PI5[0][5][1];
    A[190] = sp[80] * PI0[0][3][10] + sp[76] * PI3[0][6][1] + sp[78] * PI5[0][6][1] + sp[79] * PI6[0][1][6];
    A[191] = sp[80] * PI0[0][3][11] + sp[76] * PI3[0][7][1] + sp[78] * PI5[0][7][1] + sp[79] * PI6[0][1][7];
    A[192] = sp[80] * PI0[0][3][12] + sp[76] * PI3[0][8][1] + sp[78] * PI5[0][8][1] + sp[79] * PI6[0][1][8];
    A[193] = sp[80] * PI0[0][3][13] + sp[76] * PI3[0][9][1] + sp[78] * PI5[0][9][1] + sp[79] * PI6[0][1][9];
    A[194] = sp[80] * PI0[0][3][14] + sp[76] * PI3[0][10][1] + sp[78] * PI5[0][10][1] + sp[79] * PI6[0][1][10];
    A[195] = sp[80] * PI0[0][3][15] + sp[76] * PI3[0][11][1] + sp[78] * PI5[0][11][1] + sp[79] * PI6[0][1][11];
    A[196] = sp[80] * PI0[0][3][16] + sp[76] * PI3[0][12][1] + sp[78] * PI5[0][12][1] + sp[79] * PI6[0][1][12];
    A[197] = sp[80] * PI0[0][3][17] + sp[76] * PI3[0][13][1] + sp[78] * PI5[0][13][1] + sp[79] * PI6[0][1][13];
    A[198] = sp[80] * PI0[0][3][18] + sp[76] * PI3[0][14][1] + sp[78] * PI5[0][14][1] + sp[79] * PI6[0][1][14];
    A[199] = sp[80] * PI0[0][3][19] + sp[76] * PI3[0][15][1] + sp[78] * PI5[0][15][1] + sp[79] * PI6[0][1][15];
    std::fill(A + 200, A + 240, 0.0);
    A[240] = sp[80] * PI0[0][4][0] + sp[75] * PI2[0][0][2] + sp[77] * PI4[0][2][0] + sp[78] * PI5[0][2][0] + sp[76] * PI3[0][0][2] + sp[78] * PI5[0][0][2] + sp[79] * PI6[0][2][0];
    A[241] = sp[80] * PI0[0][4][1] + sp[75] * PI2[0][1][2] + sp[76] * PI3[0][1][2];
    A[242] = sp[80] * PI0[0][4][2] + sp[77] * PI4[0][2][1] + sp[78] * PI5[0][1][2];
    A[243] = sp[80] * PI0[0][4][3] + sp[78] * PI5[0][2][1] + sp[79] * PI6[0][2][1];
    A[244] = sp[80] * PI0[0][4][4] + sp[77] * PI4[0][2][2] + sp[78] * PI5[0][2][2] + sp[78] * PI5[0][2][2] + sp[79] * PI6[0][2][2];
    A[245] = sp[80] * PI0[0][4][5] + sp[77] * PI4[0][2][3] + sp[78] * PI5[0][2][3] + sp[78] * PI5[0][3][2] + sp[79] * PI6[0][2][3];
    A[246] = sp[80] * PI0[0][4][6] + sp[75] * PI2[0][2][2] + sp[78] * PI5[0][2][4] + sp[76] * PI3[0][2][2] + sp[79] * PI6[0][2][4];
    A[247] = sp[80] * PI0[0][4][7] + sp[75] * PI2[0][3][2] + sp[78] * PI5[0][2][5] + sp[76] * PI3[0][3][2] + sp[79] * PI6[0][2][5];
    A[248] = sp[80] * PI0[0][4][8] + sp[75] * PI2[0][4][2] + sp[77] * PI4[0][2][4] + sp[76] * PI3[0][4][2] + sp[78] * PI5[0][4][2];
    A[249] = sp[80] * PI0[0][4][9] + sp[75] * PI2[0][5][2] + sp[77] * PI4[0][2][5] + sp[76] * PI3[0][5][2] + sp[78] * PI5[0][5][2];
    A[250] = sp[80] * PI0[0][4][10] + sp[75] * PI2[0][6][2] + sp[77] * PI4[0][2][6] + sp[78] * PI5[0][2][6] + sp[76] * PI3[0][6][2] + sp[78] * PI5[0][6][2] + sp[79] * PI6[0][2][6];
    A[251] = sp[80] * PI0[0][4][11] + sp[75] * PI2[0][7][2] + sp[77] * PI4[0][2][7] + sp[78] * PI5[0][2][7] + sp[76] * PI3[0][7][2] + sp[78] * PI5[0][7][2] + sp[79] * PI6[0][2][7];
    A[252] = sp[80] * PI0[0][4][12] + sp[75] * PI2[0][8][2] + sp[77] * PI4[0][2][8] + sp[78] * PI5[0][2][8] + sp[76] * PI3[0][8][2] + sp[78] * PI5[0][8][2] + sp[79] * PI6[0][2][8];
    A[253] = sp[80] * PI0[0][4][13] + sp[75] * PI2[0][9][2] + sp[77] * PI4[0][2][9] + sp[78] * PI5[0][2][9] + sp[76] * PI3[0][9][2] + sp[78] * PI5[0][9][2] + sp[79] * PI6[0][2][9];
    A[254] = sp[80] * PI0[0][4][14] + sp[75] * PI2[0][10][2] + sp[77] * PI4[0][2][10] + sp[78] * PI5[0][2][10] + sp[76] * PI3[0][10][2] + sp[78] * PI5[0][10][2] + sp[79] * PI6[0][2][10];
    A[255] = sp[80] * PI0[0][4][15] + sp[75] * PI2[0][11][2] + sp[77] * PI4[0][2][11] + sp[78] * PI5[0][2][11] + sp[76] * PI3[0][11][2] + sp[78] * PI5[0][11][2] + sp[79] * PI6[0][2][11];
    A[256] = sp[80] * PI0[0][4][16] + sp[75] * PI2[0][12][2] + sp[77] * PI4[0][2][12] + sp[78] * PI5[0][2][12] + sp[76] * PI3[0][12][2] + sp[78] * PI5[0][12][2] + sp[79] * PI6[0][2][12];
    A[257] = sp[80] * PI0[0][4][17] + sp[75] * PI2[0][13][2] + sp[77] * PI4[0][2][13] + sp[78] * PI5[0][2][13] + sp[76] * PI3[0][13][2] + sp[78] * PI5[0][13][2] + sp[79] * PI6[0][2][13];
    A[258] = sp[80] * PI0[0][4][18] + sp[75] * PI2[0][14][2] + sp[77] * PI4[0][2][14] + sp[78] * PI5[0][2][14] + sp[76] * PI3[0][14][2] + sp[78] * PI5[0][14][2] + sp[79] * PI6[0][2][14];
    A[259] = sp[80] * PI0[0][4][19] + sp[75] * PI2[0][15][2] + sp[77] * PI4[0][2][15] + sp[78] * PI5[0][2][15] + sp[76] * PI3[0][15][2] + sp[78] * PI5[0][15][2] + sp[79] * PI6[0][2][15];
    std::fill(A + 260, A + 300, 0.0);
    A[300] = sp[80] * PI0[0][5][0] + sp[75] * PI2[0][0][3] + sp[77] * PI4[0][3][0] + sp[78] * PI5[0][3][0] + sp[76] * PI3[0][0][3] + sp[78] * PI5[0][0][3] + sp[79] * PI6[0][3][0];
    A[301] = sp[80] * PI0[0][5][1] + sp[75] * PI2[0][1][3] + sp[76] * PI3[0][1][3];
    A[302] = sp[80] * PI0[0][5][2] + sp[77] * PI4[0][3][1] + sp[78] * PI5[0][1][3];
    A[303] = sp[80] * PI0[0][5][3] + sp[78] * PI5[0][3][1] + sp[79] * PI6[0][3][1];
    A[304] = sp[80] * PI0[0][5][4] + sp[77] * PI4[0][3][2] + sp[78] * PI5[0][3][2] + sp[78] * PI5[0][2][3] + sp[79] * PI6[0][3][2];
    A[305] = sp[80] * PI0[0][5][5] + sp[77] * PI4[0][3][3] + sp[78] * PI5[0][3][3] + sp[78] * PI5[0][3][3] + sp[79] * PI6[0][3][3];
    A[306] = sp[80] * PI0[0][5][6] + sp[75] * PI2[0][2][3] + sp[78] * PI5[0][3][4] + sp[76] * PI3[0][2][3] + sp[79] * PI6[0][3][4];
    A[307] = sp[80] * PI0[0][5][7] + sp[75] * PI2[0][3][3] + sp[78] * PI5[0][3][5] + sp[76] * PI3[0][3][3] + sp[79] * PI6[0][3][5];
    A[308] = sp[80] * PI0[0][5][8] + sp[75] * PI2[0][4][3] + sp[77] * PI4[0][3][4] + sp[76] * PI3[0][4][3] + sp[78] * PI5[0][4][3];
    A[309] = sp[80] * PI0[0][5][9] + sp[75] * PI2[0][5][3] + sp[77] * PI4[0][3][5] + sp[76] * PI3[0][5][3] + sp[78] * PI5[0][5][3];
    A[310] = sp[80] * PI0[0][5][10] + sp[75] * PI2[0][6][3] + sp[77] * PI4[0][3][6] + sp[78] * PI5[0][3][6] + sp[76] * PI3[0][6][3] + sp[78] * PI5[0][6][3] + sp[79] * PI6[0][3][6];
    A[311] = sp[80] * PI0[0][5][11] + sp[75] * PI2[0][7][3] + sp[77] * PI4[0][3][7] + sp[78] * PI5[0][3][7] + sp[76] * PI3[0][7][3] + sp[78] * PI5[0][7][3] + sp[79] * PI6[0][3][7];
    A[312] = sp[80] * PI0[0][5][12] + sp[75] * PI2[0][8][3] + sp[77] * PI4[0][3][8] + sp[78] * PI5[0][3][8] + sp[76] * PI3[0][8][3] + sp[78] * PI5[0][8][3] + sp[79] * PI6[0][3][8];
    A[313] = sp[80] * PI0[0][5][13] + sp[75] * PI2[0][9][3] + sp[77] * PI4[0][3][9] + sp[78] * PI5[0][3][9] + sp[76] * PI3[0][9][3] + sp[78] * PI5[0][9][3] + sp[79] * PI6[0][3][9];
    A[314] = sp[80] * PI0[0][5][14] + sp[75] * PI2[0][10][3] + sp[77] * PI4[0][3][10] + sp[78] * PI5[0][3][10] + sp[76] * PI3[0][10][3] + sp[78] * PI5[0][10][3] + sp[79] * PI6[0][3][10];
    A[315] = sp[80] * PI0[0][5][15] + sp[75] * PI2[0][11][3] + sp[77] * PI4[0][3][11] + sp[78] * PI5[0][3][11] + sp[76] * PI3[0][11][3] + sp[78] * PI5[0][11][3] + sp[79] * PI6[0][3][11];
    A[316] = sp[80] * PI0[0][5][16] + sp[75] * PI2[0][12][3] + sp[77] * PI4[0][3][12] + sp[78] * PI5[0][3][12] + sp[76] * PI3[0][12][3] + sp[78] * PI5[0][12][3] + sp[79] * PI6[0][3][12];
    A[317] = sp[80] * PI0[0][5][17] + sp[75] * PI2[0][13][3] + sp[77] * PI4[0][3][13] + sp[78] * PI5[0][3][13] + sp[76] * PI3[0][13][3] + sp[78] * PI5[0][13][3] + sp[79] * PI6[0][3][13];
    A[318] = sp[80] * PI0[0][5][18] + sp[75] * PI2[0][14][3] + sp[77] * PI4[0][3][14] + sp[78] * PI5[0][3][14] + sp[76] * PI3[0][14][3] + sp[78] * PI5[0][14][3] + sp[79] * PI6[0][3][14];
    A[319] = sp[80] * PI0[0][5][19] + sp[75] * PI2[0][15][3] + sp[77] * PI4[0][3][15] + sp[78] * PI5[0][3][15] + sp[76] * PI3[0][15][3] + sp[78] * PI5[0][15][3] + sp[79] * PI6[0][3][15];
    std::fill(A + 320, A + 360, 0.0);
    A[360] = sp[80] * PI0[0][6][0] + sp[74] * PI1[0][2][0] + sp[75] * PI2[0][2][0] + sp[76] * PI3[0][2][0] + sp[76] * PI3[0][0][4] + sp[78] * PI5[0][0][4] + sp[79] * PI6[0][4][0];
    A[361] = sp[80] * PI0[0][6][1] + sp[74] * PI1[0][2][1] + sp[76] * PI3[0][1][4];
    A[362] = sp[80] * PI0[0][6][2] + sp[75] * PI2[0][2][1] + sp[78] * PI5[0][1][4];
    A[363] = sp[80] * PI0[0][6][3] + sp[76] * PI3[0][2][1] + sp[79] * PI6[0][4][1];
    A[364] = sp[80] * PI0[0][6][4] + sp[75] * PI2[0][2][2] + sp[76] * PI3[0][2][2] + sp[78] * PI5[0][2][4] + sp[79] * PI6[0][4][2];
    A[365] = sp[80] * PI0[0][6][5] + sp[75] * PI2[0][2][3] + sp[76] * PI3[0][2][3] + sp[78] * PI5[0][3][4] + sp[79] * PI6[0][4][3];
    A[366] = sp[80] * PI0[0][6][6] + sp[74] * PI1[0][2][2] + sp[76] * PI3[0][2][4] + sp[76] * PI3[0][2][4] + sp[79] * PI6[0][4][4];
    A[367] = sp[80] * PI0[0][6][7] + sp[74] * PI1[0][2][3] + sp[76] * PI3[0][2][5] + sp[76] * PI3[0][3][4] + sp[79] * PI6[0][4][5];
    A[368] = sp[80] * PI0[0][6][8] + sp[74] * PI1[0][2][4] + sp[75] * PI2[0][2][4] + sp[76] * PI3[0][4][4] + sp[78] * PI5[0][4][4];
    A[369] = sp[80] * PI0[0][6][9] + sp[74] * PI1[0][2][5] + sp[75] * PI2[0][2][5] + sp[76] * PI3[0][5][4] + sp[78] * PI5[0][5][4];
    A[370] = sp[80] * PI0[0][6][10] + sp[74] * PI1[0][2][6] + sp[75] * PI2[0][2][6] + sp[76] * PI3[0][2][6] + sp[76] * PI3[0][6][4] + sp[78] * PI5[0][6][4] + sp[79] * PI6[0][4][6];
    A[371] = sp[80] * PI0[0][6][11] + sp[74] * PI1[0][2][7] + sp[75] * PI2[0][2][7] + sp[76] * PI3[0][2][7] + sp[76] * PI3[0][7][4] + sp[78] * PI5[0][7][4] + sp[79] * PI6[0][4][7];
    A[372] = sp[80] * PI0[0][6][12] + sp[74] * PI1[0][2][8] + sp[75] * PI2[0][2][8] + sp[76] * PI3[0][2][8] + sp[76] * PI3[0][8][4] + sp[78] * PI5[0][8][4] + sp[79] * PI6[0][4][8];
    A[373] = sp[80] * PI0[0][6][13] + sp[74] * PI1[0][2][9] + sp[75] * PI2[0][2][9] + sp[76] * PI3[0][2][9] + sp[76] * PI3[0][9][4] + sp[78] * PI5[0][9][4] + sp[79] * PI6[0][4][9];
    A[374] = sp[80] * PI0[0][6][14] + sp[74] * PI1[0][2][10] + sp[75] * PI2[0][2][10] + sp[76] * PI3[0][2][10] + sp[76] * PI3[0][10][4] + sp[78] * PI5[0][10][4] + sp[79] * PI6[0][4][10];
    A[375] = sp[80] * PI0[0][6][15] + sp[74] * PI1[0][2][11] + sp[75] * PI2[0][2][11] + sp[76] * PI3[0][2][11] + sp[76] * PI3[0][11][4] + sp[78] * PI5[0][11][4] + sp[79] * PI6[0][4][11];
    A[376] = sp[80] * PI0[0][6][16] + sp[74] * PI1[0][2][12] + sp[75] * PI2[0][2][12] + sp[76] * PI3[0][2][12] + sp[76] * PI3[0][12][4] + sp[78] * PI5[0][12][4] + sp[79] * PI6[0][4][12];
    A[377] = sp[80] * PI0[0][6][17] + sp[74] * PI1[0][2][13] + sp[75] * PI2[0][2][13] + sp[76] * PI3[0][2][13] + sp[76] * PI3[0][13][4] + sp[78] * PI5[0][13][4] + sp[79] * PI6[0][4][13];
    A[378] = sp[80] * PI0[0][6][18] + sp[74] * PI1[0][2][14] + sp[75] * PI2[0][2][14] + sp[76] * PI3[0][2][14] + sp[76] * PI3[0][14][4] + sp[78] * PI5[0][14][4] + sp[79] * PI6[0][4][14];
    A[379] = sp[80] * PI0[0][6][19] + sp[74] * PI1[0][2][15] + sp[75] * PI2[0][2][15] + sp[76] * PI3[0][2][15] + sp[76] * PI3[0][15][4] + sp[78] * PI5[0][15][4] + sp[79] * PI6[0][4][15];
    std::fill(A + 380, A + 420, 0.0);
    A[420] = sp[80] * PI0[0][7][0] + sp[74] * PI1[0][3][0] + sp[75] * PI2[0][3][0] + sp[76] * PI3[0][3][0] + sp[76] * PI3[0][0][5] + sp[78] * PI5[0][0][5] + sp[79] * PI6[0][5][0];
    A[421] = sp[80] * PI0[0][7][1] + sp[74] * PI1[0][3][1] + sp[76] * PI3[0][1][5];
    A[422] = sp[80] * PI0[0][7][2] + sp[75] * PI2[0][3][1] + sp[78] * PI5[0][1][5];
    A[423] = sp[80] * PI0[0][7][3] + sp[76] * PI3[0][3][1] + sp[79] * PI6[0][5][1];
    A[424] = sp[80] * PI0[0][7][4] + sp[75] * PI2[0][3][2] + sp[76] * PI3[0][3][2] + sp[78] * PI5[0][2][5] + sp[79] * PI6[0][5][2];
    A[425] = sp[80] * PI0[0][7][5] + sp[75] * PI2[0][3][3] + sp[76] * PI3[0][3][3] + sp[78] * PI5[0][3][5] + sp[79] * PI6[0][5][3];
    A[426] = sp[80] * PI0[0][7][6] + sp[74] * PI1[0][3][2] + sp[76] * PI3[0][3][4] + sp[76] * PI3[0][2][5] + sp[79] * PI6[0][5][4];
    A[427] = sp[80] * PI0[0][7][7] + sp[74] * PI1[0][3][3] + sp[76] * PI3[0][3][5] + sp[76] * PI3[0][3][5] + sp[79] * PI6[0][5][5];
    A[428] = sp[80] * PI0[0][7][8] + sp[74] * PI1[0][3][4] + sp[75] * PI2[0][3][4] + sp[76] * PI3[0][4][5] + sp[78] * PI5[0][4][5];
    A[429] = sp[80] * PI0[0][7][9] + sp[74] * PI1[0][3][5] + sp[75] * PI2[0][3][5] + sp[76] * PI3[0][5][5] + sp[78] * PI5[0][5][5];
    A[430] = sp[80] * PI0[0][7][10] + sp[74] * PI1[0][3][6] + sp[75] * PI2[0][3][6] + sp[76] * PI3[0][3][6] + sp[76] * PI3[0][6][5] + sp[78] * PI5[0][6][5] + sp[79] * PI6[0][5][6];
    A[431] = sp[80] * PI0[0][7][11] + sp[74] * PI1[0][3][7] + sp[75] * PI2[0][3][7] + sp[76] * PI3[0][3][7] + sp[76] * PI3[0][7][5] + sp[78] * PI5[0][7][5] + sp[79] * PI6[0][5][7];
    A[432] = sp[80] * PI0[0][7][12] + sp[74] * PI1[0][3][8] + sp[75] * PI2[0][3][8] + sp[76] * PI3[0][3][8] + sp[76] * PI3[0][8][5] + sp[78] * PI5[0][8][5] + sp[79] * PI6[0][5][8];
    A[433] = sp[80] * PI0[0][7][13] + sp[74] * PI1[0][3][9] + sp[75] * PI2[0][3][9] + sp[76] * PI3[0][3][9] + sp[76] * PI3[0][9][5] + sp[78] * PI5[0][9][5] + sp[79] * PI6[0][5][9];
    A[434] = sp[80] * PI0[0][7][14] + sp[74] * PI1[0][3][10] + sp[75] * PI2[0][3][10] + sp[76] * PI3[0][3][10] + sp[76] * PI3[0][10][5] + sp[78] * PI5[0][10][5] + sp[79] * PI6[0][5][10];
    A[435] = sp[80] * PI0[0][7][15] + sp[74] * PI1[0][3][11] + sp[75] * PI2[0][3][11] + sp[76] * PI3[0][3][11] + sp[76] * PI3[0][11][5] + sp[78] * PI5[0][11][5] + sp[79] * PI6[0][5][11];
    A[436] = sp[80] * PI0[0][7][16] + sp[74] * PI1[0][3][12] + sp[75] * PI2[0][3][12] + sp[76] * PI3[0][3][12] + sp[76] * PI3[0][12][5] + sp[78] * PI5[0][12][5] + sp[79] * PI6[0][5][12];
    A[437] = sp[80] * PI0[0][7][17] + sp[74] * PI1[0][3][13] + sp[75] * PI2[0][3][13] + sp[76] * PI3[0][3][13] + sp[76] * PI3[0][13][5] + sp[78] * PI5[0][13][5] + sp[79] * PI6[0][5][13];
    A[438] = sp[80] * PI0[0][7][18] + sp[74] * PI1[0][3][14] + sp[75] * PI2[0][3][14] + sp[76] * PI3[0][3][14] + sp[76] * PI3[0][14][5] + sp[78] * PI5[0][14][5] + sp[79] * PI6[0][5][14];
    A[439] = sp[80] * PI0[0][7][19] + sp[74] * PI1[0][3][15] + sp[75] * PI2[0][3][15] + sp[76] * PI3[0][3][15] + sp[76] * PI3[0][15][5] + sp[78] * PI5[0][15][5] + sp[79] * PI6[0][5][15];
    std::fill(A + 440, A + 480, 0.0);
    A[480] = sp[80] * PI0[0][8][0] + sp[74] * PI1[0][4][0] + sp[75] * PI2[0][4][0] + sp[76] * PI3[0][4][0] + sp[75] * PI2[0][0][4] + sp[77] * PI4[0][4][0] + sp[78] * PI5[0][4][0];
    A[481] = sp[80] * PI0[0][8][1] + sp[74] * PI1[0][4][1] + sp[75] * PI2[0][1][4];
    A[482] = sp[80] * PI0[0][8][2] + sp[75] * PI2[0][4][1] + sp[77] * PI4[0][4][1];
    A[483] = sp[80] * PI0[0][8][3] + sp[76] * PI3[0][4][1] + sp[78] * PI5[0][4][1];
    A[484] = sp[80] * PI0[0][8][4] + sp[75] * PI2[0][4][2] + sp[76] * PI3[0][4][2] + sp[77] * PI4[0][4][2] + sp[78] * PI5[0][4][2];
    A[485] = sp[80] * PI0[0][8][5] + sp[75] * PI2[0][4][3] + sp[76] * PI3[0][4][3] + sp[77] * PI4[0][4][3] + sp[78] * PI5[0][4][3];
    A[486] = sp[80] * PI0[0][8][6] + sp[74] * PI1[0][4][2] + sp[76] * PI3[0][4][4] + sp[75] * PI2[0][2][4] + sp[78] * PI5[0][4][4];
    A[487] = sp[80] * PI0[0][8][7] + sp[74] * PI1[0][4][3] + sp[76] * PI3[0][4][5] + sp[75] * PI2[0][3][4] + sp[78] * PI5[0][4][5];
    A[488] = sp[80] * PI0[0][8][8] + sp[74] * PI1[0][4][4] + sp[75] * PI2[0][4][4] + sp[75] * PI2[0][4][4] + sp[77] * PI4[0][4][4];
    A[489] = sp[80] * PI0[0][8][9] + sp[74] * PI1[0][4][5] + sp[75] * PI2[0][4][5] + sp[75] * PI2[0][5][4] + sp[77] * PI4[0][4][5];
    A[490] = sp[80] * PI0[0][8][10] + sp[74] * PI1[0][4][6] + sp[75] * PI2[0][4][6] + sp[76] * PI3[0][4][6] + sp[75] * PI2[0][6][4] + sp[77] * PI4[0][4][6] + sp[78] * PI5[0][4][6];
    A[491] = sp[80] * PI0[0][8][11] + sp[74] * PI1[0][4][7] + sp[75] * PI2[0][4][7] + sp[76] * PI3[0][4][7] + sp[75] * PI2[0][7][4] + sp[77] * PI4[0][4][7] + sp[78] * PI5[0][4][7];
    A[492] = sp[80] * PI0[0][8][12] + sp[74] * PI1[0][4][8] + sp[75] * PI2[0][4][8] + sp[76] * PI3[0][4][8] + sp[75] * PI2[0][8][4] + sp[77] * PI4[0][4][8] + sp[78] * PI5[0][4][8];
    A[493] = sp[80] * PI0[0][8][13] + sp[74] * PI1[0][4][9] + sp[75] * PI2[0][4][9] + sp[76] * PI3[0][4][9] + sp[75] * PI2[0][9][4] + sp[77] * PI4[0][4][9] + sp[78] * PI5[0][4][9];
    A[494] = sp[80] * PI0[0][8][14] + sp[74] * PI1[0][4][10] + sp[75] * PI2[0][4][10] + sp[76] * PI3[0][4][10] + sp[75] * PI2[0][10][4] + sp[77] * PI4[0][4][10] + sp[78] * PI5[0][4][10];
    A[495] = sp[80] * PI0[0][8][15] + sp[74] * PI1[0][4][11] + sp[75] * PI2[0][4][11] + sp[76] * PI3[0][4][11] + sp[75] * PI2[0][11][4] + sp[77] * PI4[0][4][11] + sp[78] * PI5[0][4][11];
    A[496] = sp[80] * PI0[0][8][16] + sp[74] * PI1[0][4][12] + sp[75] * PI2[0][4][12] + sp[76] * PI3[0][4][12] + sp[75] * PI2[0][12][4] + sp[77] * PI4[0][4][12] + sp[78] * PI5[0][4][12];
    A[497] = sp[80] * PI0[0][8][17] + sp[74] * PI1[0][4][13] + sp[75] * PI2[0][4][13] + sp[76] * PI3[0][4][13] + sp[75] * PI2[0][13][4] + sp[77] * PI4[0][4][13] + sp[78] * PI5[0][4][13];
    A[498] = sp[80] * PI0[0][8][18] + sp[74] * PI1[0][4][14] + sp[75] * PI2[0][4][14] + sp[76] * PI3[0][4][14] + sp[75] * PI2[0][14][4] + sp[77] * PI4[0][4][14] + sp[78] * PI5[0][4][14];
    A[499] = sp[80] * PI0[0][8][19] + sp[74] * PI1[0][4][15] + sp[75] * PI2[0][4][15] + sp[76] * PI3[0][4][15] + sp[75] * PI2[0][15][4] + sp[77] * PI4[0][4][15] + sp[78] * PI5[0][4][15];
    std::fill(A + 500, A + 540, 0.0);
    A[540] = sp[80] * PI0[0][9][0] + sp[74] * PI1[0][5][0] + sp[75] * PI2[0][5][0] + sp[76] * PI3[0][5][0] + sp[75] * PI2[0][0][5] + sp[77] * PI4[0][5][0] + sp[78] * PI5[0][5][0];
    A[541] = sp[80] * PI0[0][9][1] + sp[74] * PI1[0][5][1] + sp[75] * PI2[0][1][5];
    A[542] = sp[80] * PI0[0][9][2] + sp[75] * PI2[0][5][1] + sp[77] * PI4[0][5][1];
    A[543] = sp[80] * PI0[0][9][3] + sp[76] * PI3[0][5][1] + sp[78] * PI5[0][5][1];
    A[544] = sp[80] * PI0[0][9][4] + sp[75] * PI2[0][5][2] + sp[76] * PI3[0][5][2] + sp[77] * PI4[0][5][2] + sp[78] * PI5[0][5][2];
    A[545] = sp[80] * PI0[0][9][5] + sp[75] * PI2[0][5][3] + sp[76] * PI3[0][5][3] + sp[77] * PI4[0][5][3] + sp[78] * PI5[0][5][3];
    A[546] = sp[80] * PI0[0][9][6] + sp[74] * PI1[0][5][2] + sp[76] * PI3[0][5][4] + sp[75] * PI2[0][2][5] + sp[78] * PI5[0][5][4];
    A[547] = sp[80] * PI0[0][9][7] + sp[74] * PI1[0][5][3] + sp[76] * PI3[0][5][5] + sp[75] * PI2[0][3][5] + sp[78] * PI5[0][5][5];
    A[548] = sp[80] * PI0[0][9][8] + sp[74] * PI1[0][5][4] + sp[75] * PI2[0][5][4] + sp[75] * PI2[0][4][5] + sp[77] * PI4[0][5][4];
    A[549] = sp[80] * PI0[0][9][9] + sp[74] * PI1[0][5][5] + sp[75] * PI2[0][5][5] + sp[75] * PI2[0][5][5] + sp[77] * PI4[0][5][5];
    A[550] = sp[80] * PI0[0][9][10] + sp[74] * PI1[0][5][6] + sp[75] * PI2[0][5][6] + sp[76] * PI3[0][5][6] + sp[75] * PI2[0][6][5] + sp[77] * PI4[0][5][6] + sp[78] * PI5[0][5][6];
    A[551] = sp[80] * PI0[0][9][11] + sp[74] * PI1[0][5][7] + sp[75] * PI2[0][5][7] + sp[76] * PI3[0][5][7] + sp[75] * PI2[0][7][5] + sp[77] * PI4[0][5][7] + sp[78] * PI5[0][5][7];
    A[552] = sp[80] * PI0[0][9][12] + sp[74] * PI1[0][5][8] + sp[75] * PI2[0][5][8] + sp[76] * PI3[0][5][8] + sp[75] * PI2[0][8][5] + sp[77] * PI4[0][5][8] + sp[78] * PI5[0][5][8];
    A[553] = sp[80] * PI0[0][9][13] + sp[74] * PI1[0][5][9] + sp[75] * PI2[0][5][9] + sp[76] * PI3[0][5][9] + sp[75] * PI2[0][9][5] + sp[77] * PI4[0][5][9] + sp[78] * PI5[0][5][9];
    A[554] = sp[80] * PI0[0][9][14] + sp[74] * PI1[0][5][10] + sp[75] * PI2[0][5][10] + sp[76] * PI3[0][5][10] + sp[75] * PI2[0][10][5] + sp[77] * PI4[0][5][10] + sp[78] * PI5[0][5][10];
    A[555] = sp[80] * PI0[0][9][15] + sp[74] * PI1[0][5][11] + sp[75] * PI2[0][5][11] + sp[76] * PI3[0][5][11] + sp[75] * PI2[0][11][5] + sp[77] * PI4[0][5][11] + sp[78] * PI5[0][5][11];
    A[556] = sp[80] * PI0[0][9][16] + sp[74] * PI1[0][5][12] + sp[75] * PI2[0][5][12] + sp[76] * PI3[0][5][12] + sp[75] * PI2[0][12][5] + sp[77] * PI4[0][5][12] + sp[78] * PI5[0][5][12];
    A[557] = sp[80] * PI0[0][9][17] + sp[74] * PI1[0][5][13] + sp[75] * PI2[0][5][13] + sp[76] * PI3[0][5][13] + sp[75] * PI2[0][13][5] + sp[77] * PI4[0][5][13] + sp[78] * PI5[0][5][13];
    A[558] = sp[80] * PI0[0][9][18] + sp[74] * PI1[0][5][14] + sp[75] * PI2[0][5][14] + sp[76] * PI3[0][5][14] + sp[75] * PI2[0][14][5] + sp[77] * PI4[0][5][14] + sp[78] * PI5[0][5][14];
    A[559] = sp[80] * PI0[0][9][19] + sp[74] * PI1[0][5][15] + sp[75] * PI2[0][5][15] + sp[76] * PI3[0][5][15] + sp[75] * PI2[0][15][5] + sp[77] * PI4[0][5][15] + sp[78] * PI5[0][5][15];
    std::fill(A + 560, A + 600, 0.0);
    A[600] = sp[80] * PI0[0][10][0] + sp[74] * PI1[0][6][0] + sp[75] * PI2[0][6][0] + sp[76] * PI3[0][6][0] + sp[75] * PI2[0][0][6] + sp[77] * PI4[0][6][0] + sp[78] * PI5[0][6][0] + sp[76] * PI3[0][0][6] + sp[78] * PI5[0][0][6] + sp[79] * PI6[0][6][0];
    A[601] = sp[80] * PI0[0][10][1] + sp[74] * PI1[0][6][1] + sp[75] * PI2[0][1][6] + sp[76] * PI3[0][1][6];
    A[602] = sp[80] * PI0[0][10][2] + sp[75] * PI2[0][6][1] + sp[77] * PI4[0][6][1] + sp[78] * PI5[0][1][6];
    A[603] = sp[80] * PI0[0][10][3] + sp[76] * PI3[0][6][1] + sp[78] * PI5[0][6][1] + sp[79] * PI6[0][6][1];
    A[604] = sp[80] * PI0[0][10][4] + sp[75] * PI2[0][6][2] + sp[76] * PI3[0][6][2] + sp[77] * PI4[0][6][2] + sp[78] * PI5[0][6][2] + sp[78] * PI5[0][2][6] + sp[79] * PI6[0][6][2];
    A[605] = sp[80] * PI0[0][10][5] + sp[75] * PI2[0][6][3] + sp[76] * PI3[0][6][3] + sp[77] * PI4[0][6][3] + sp[78] * PI5[0][6][3] + sp[78] * PI5[0][3][6] + sp[79] * PI6[0][6][3];
    A[606] = sp[80] * PI0[0][10][6] + sp[74] * PI1[0][6][2] + sp[76] * PI3[0][6][4] + sp[75] * PI2[0][2][6] + sp[78] * PI5[0][6][4] + sp[76] * PI3[0][2][6] + sp[79] * PI6[0][6][4];
    A[607] = sp[80] * PI0[0][10][7] + sp[74] * PI1[0][6][3] + sp[76] * PI3[0][6][5] + sp[75] * PI2[0][3][6] + sp[78] * PI5[0][6][5] + sp[76] * PI3[0][3][6] + sp[79] * PI6[0][6][5];
    A[608] = sp[80] * PI0[0][10][8] + sp[74] * PI1[0][6][4] + sp[75] * PI2[0][6][4] + sp[75] * PI2[0][4][6] + sp[77] * PI4[0][6][4] + sp[76] * PI3[0][4][6] + sp[78] * PI5[0][4][6];
    A[609] = sp[80] * PI0[0][10][9] + sp[74] * PI1[0][6][5] + sp[75] * PI2[0][6][5] + sp[75] * PI2[0][5][6] + sp[77] * PI4[0][6][5] + sp[76] * PI3[0][5][6] + sp[78] * PI5[0][5][6];
    A[610] = sp[80] * PI0[0][10][10] + sp[74] * PI1[0][6][6] + sp[75] * PI2[0][6][6] + sp[76] * PI3[0][6][6] + sp[75] * PI2[0][6][6] + sp[77] * PI4[0][6][6] + sp[78] * PI5[0][6][6] + sp[76] * PI3[0][6][6] + sp[78] * PI5[0][6][6] + sp[79] * PI6[0][6][6];
    A[611] = sp[80] * PI0[0][10][11] + sp[74] * PI1[0][6][7] + sp[75] * PI2[0][6][7] + sp[76] * PI3[0][6][7] + sp[75] * PI2[0][7][6] + sp[77] * PI4[0][6][7] + sp[78] * PI5[0][6][7] + sp[76] * PI3[0][7][6] + sp[78] * PI5[0][7][6] + sp[79] * PI6[0][6][7];
    A[612] = sp[80] * PI0[0][10][12] + sp[74] * PI1[0][6][8] + sp[75] * PI2[0][6][8] + sp[76] * PI3[0][6][8] + sp[75] * PI2[0][8][6] + sp[77] * PI4[0][6][8] + sp[78] * PI5[0][6][8] + sp[76] * PI3[0][8][6] + sp[78] * PI5[0][8][6] + sp[79] * PI6[0][6][8];
    A[613] = sp[80] * PI0[0][10][13] + sp[74] * PI1[0][6][9] + sp[75] * PI2[0][6][9] + sp[76] * PI3[0][6][9] + sp[75] * PI2[0][9][6] + sp[77] * PI4[0][6][9] + sp[78] * PI5[0][6][9] + sp[76] * PI3[0][9][6] + sp[78] * PI5[0][9][6] + sp[79] * PI6[0][6][9];
    A[614] = sp[80] * PI0[0][10][14] + sp[74] * PI1[0][6][10] + sp[75] * PI2[0][6][10] + sp[76] * PI3[0][6][10] + sp[75] * PI2[0][10][6] + sp[77] * PI4[0][6][10] + sp[78] * PI5[0][6][10] + sp[76] * PI3[0][10][6] + sp[78] * PI5[0][10][6] + sp[79] * PI6[0][6][10];
    A[615] = sp[80] * PI0[0][10][15] + sp[74] * PI1[0][6][11] + sp[75] * PI2[0][6][11] + sp[76] * PI3[0][6][11] + sp[75] * PI2[0][11][6] + sp[77] * PI4[0][6][11] + sp[78] * PI5[0][6][11] + sp[76] * PI3[0][11][6] + sp[78] * PI5[0][11][6] + sp[79] * PI6[0][6][11];
    A[616] = sp[80] * PI0[0][10][16] + sp[74] * PI1[0][6][12] + sp[75] * PI2[0][6][12] + sp[76] * PI3[0][6][12] + sp[75] * PI2[0][12][6] + sp[77] * PI4[0][6][12] + sp[78] * PI5[0][6][12] + sp[76] * PI3[0][12][6] + sp[78] * PI5[0][12][6] + sp[79] * PI6[0][6][12];
    A[617] = sp[80] * PI0[0][10][17] + sp[74] * PI1[0][6][13] + sp[75] * PI2[0][6][13] + sp[76] * PI3[0][6][13] + sp[75] * PI2[0][13][6] + sp[77] * PI4[0][6][13] + sp[78] * PI5[0][6][13] + sp[76] * PI3[0][13][6] + sp[78] * PI5[0][13][6] + sp[79] * PI6[0][6][13];
    A[618] = sp[80] * PI0[0][10][18] + sp[74] * PI1[0][6][14] + sp[75] * PI2[0][6][14] + sp[76] * PI3[0][6][14] + sp[75] * PI2[0][14][6] + sp[77] * PI4[0][6][14] + sp[78] * PI5[0][6][14] + sp[76] * PI3[0][14][6] + sp[78] * PI5[0][14][6] + sp[79] * PI6[0][6][14];
    A[619] = sp[80] * PI0[0][10][19] + sp[74] * PI1[0][6][15] + sp[75] * PI2[0][6][15] + sp[76] * PI3[0][6][15] + sp[75] * PI2[0][15][6] + sp[77] * PI4[0][6][15] + sp[78] * PI5[0][6][15] + sp[76] * PI3[0][15][6] + sp[78] * PI5[0][15][6] + sp[79] * PI6[0][6][15];
    std::fill(A + 620, A + 660, 0.0);
    A[660] = sp[80] * PI0[0][11][0] + sp[74] * PI1[0][7][0] + sp[75] * PI2[0][7][0] + sp[76] * PI3[0][7][0] + sp[75] * PI2[0][0][7] + sp[77] * PI4[0][7][0] + sp[78] * PI5[0][7][0] + sp[76] * PI3[0][0][7] + sp[78] * PI5[0][0][7] + sp[79] * PI6[0][7][0];
    A[661] = sp[80] * PI0[0][11][1] + sp[74] * PI1[0][7][1] + sp[75] * PI2[0][1][7] + sp[76] * PI3[0][1][7];
    A[662] = sp[80] * PI0[0][11][2] + sp[75] * PI2[0][7][1] + sp[77] * PI4[0][7][1] + sp[78] * PI5[0][1][7];
    A[663] = sp[80] * PI0[0][11][3] + sp[76] * PI3[0][7][1] + sp[78] * PI5[0][7][1] + sp[79] * PI6[0][7][1];
    A[664] = sp[80] * PI0[0][11][4] + sp[75] * PI2[0][7][2] + sp[76] * PI3[0][7][2] + sp[77] * PI4[0][7][2] + sp[78] * PI5[0][7][2] + sp[78] * PI5[0][2][7] + sp[79] * PI6[0][7][2];
    A[665] = sp[80] * PI0[0][11][5] + sp[75] * PI2[0][7][3] + sp[76] * PI3[0][7][3] + sp[77] * PI4[0][7][3] + sp[78] * PI5[0][7][3] + sp[78] * PI5[0][3][7] + sp[79] * PI6[0][7][3];
    A[666] = sp[80] * PI0[0][11][6] + sp[74] * PI1[0][7][2] + sp[76] * PI3[0][7][4] + sp[75] * PI2[0][2][7] + sp[78] * PI5[0][7][4] + sp[76] * PI3[0][2][7] + sp[79] * PI6[0][7][4];
    A[667] = sp[80] * PI0[0][11][7] + sp[74] * PI1[0][7][3] + sp[76] * PI3[0][7][5] + sp[75] * PI2[0][3][7] + sp[78] * PI5[0][7][5] + sp[76] * PI3[0][3][7] + sp[79] * PI6[0][7][5];
    A[668] = sp[80] * PI0[0][11][8] + sp[74] * PI1[0][7][4] + sp[75] * PI2[0][7][4] + sp[75] * PI2[0][4][7] + sp[77] * PI4[0][7][4] + sp[76] * PI3[0][4][7] + sp[78] * PI5[0][4][7];
    A[669] = sp[80] * PI0[0][11][9] + sp[74] * PI1[0][7][5] + sp[75] * PI2[0][7][5] + sp[75] * PI2[0][5][7] + sp[77] * PI4[0][7][5] + sp[76] * PI3[0][5][7] + sp[78] * PI5[0][5][7];
    A[670] = sp[80] * PI0[0][11][10] + sp[74] * PI1[0][7][6] + sp[75] * PI2[0][7][6] + sp[76] * PI3[0][7][6] + sp[75] * PI2[0][6][7] + sp[77] * PI4[0][7][6] + sp[78] * PI5[0][7][6] + sp[76] * PI3[0][6][7] + sp[78] * PI5[0][6][7] + sp[79] * PI6[0][7][6];
    A[671] = sp[80] * PI0[0][11][11] + sp[74] * PI1[0][7][7] + sp[75] * PI2[0][7][7] + sp[76] * PI3[0][7][7] + sp[75] * PI2[0][7][7] + sp[77] * PI4[0][7][7] + sp[78] * PI5[0][7][7] + sp[76] * PI3[0][7][7] + sp[78] * PI5[0][7][7] + sp[79] * PI6[0][7][7];
    A[672] = sp[80] * PI0[0][11][12] + sp[74] * PI1[0][7][8] + sp[75] * PI2[0][7][8] + sp[76] * PI3[0][7][8] + sp[75] * PI2[0][8][7] + sp[77] * PI4[0][7][8] + sp[78] * PI5[0][7][8] + sp[76] * PI3[0][8][7] + sp[78] * PI5[0][8][7] + sp[79] * PI6[0][7][8];
    A[673] = sp[80] * PI0[0][11][13] + sp[74] * PI1[0][7][9] + sp[75] * PI2[0][7][9] + sp[76] * PI3[0][7][9] + sp[75] * PI2[0][9][7] + sp[77] * PI4[0][7][9] + sp[78] * PI5[0][7][9] + sp[76] * PI3[0][9][7] + sp[78] * PI5[0][9][7] + sp[79] * PI6[0][7][9];
    A[674] = sp[80] * PI0[0][11][14] + sp[74] * PI1[0][7][10] + sp[75] * PI2[0][7][10] + sp[76] * PI3[0][7][10] + sp[75] * PI2[0][10][7] + sp[77] * PI4[0][7][10] + sp[78] * PI5[0][7][10] + sp[76] * PI3[0][10][7] + sp[78] * PI5[0][10][7] + sp[79] * PI6[0][7][10];
    A[675] = sp[80] * PI0[0][11][15] + sp[74] * PI1[0][7][11] + sp[75] * PI2[0][7][11] + sp[76] * PI3[0][7][11] + sp[75] * PI2[0][11][7] + sp[77] * PI4[0][7][11] + sp[78] * PI5[0][7][11] + sp[76] * PI3[0][11][7] + sp[78] * PI5[0][11][7] + sp[79] * PI6[0][7][11];
    A[676] = sp[80] * PI0[0][11][16] + sp[74] * PI1[0][7][12] + sp[75] * PI2[0][7][12] + sp[76] * PI3[0][7][12] + sp[75] * PI2[0][12][7] + sp[77] * PI4[0][7][12] + sp[78] * PI5[0][7][12] + sp[76] * PI3[0][12][7] + sp[78] * PI5[0][12][7] + sp[79] * PI6[0][7][12];
    A[677] = sp[80] * PI0[0][11][17] + sp[74] * PI1[0][7][13] + sp[75] * PI2[0][7][13] + sp[76] * PI3[0][7][13] + sp[75] * PI2[0][13][7] + sp[77] * PI4[0][7][13] + sp[78] * PI5[0][7][13] + sp[76] * PI3[0][13][7] + sp[78] * PI5[0][13][7] + sp[79] * PI6[0][7][13];
    A[678] = sp[80] * PI0[0][11][18] + sp[74] * PI1[0][7][14] + sp[75] * PI2[0][7][14] + sp[76] * PI3[0][7][14] + sp[75] * PI2[0][14][7] + sp[77] * PI4[0][7][14] + sp[78] * PI5[0][7][14] + sp[76] * PI3[0][14][7] + sp[78] * PI5[0][14][7] + sp[79] * PI6[0][7][14];
    A[679] = sp[80] * PI0[0][11][19] + sp[74] * PI1[0][7][15] + sp[75] * PI2[0][7][15] + sp[76] * PI3[0][7][15] + sp[75] * PI2[0][15][7] + sp[77] * PI4[0][7][15] + sp[78] * PI5[0][7][15] + sp[76] * PI3[0][15][7] + sp[78] * PI5[0][15][7] + sp[79] * PI6[0][7][15];
    std::fill(A + 680, A + 720, 0.0);
    A[720] = sp[80] * PI0[0][12][0] + sp[74] * PI1[0][8][0] + sp[75] * PI2[0][8][0] + sp[76] * PI3[0][8][0] + sp[75] * PI2[0][0][8] + sp[77] * PI4[0][8][0] + sp[78] * PI5[0][8][0] + sp[76] * PI3[0][0][8] + sp[78] * PI5[0][0][8] + sp[79] * PI6[0][8][0];
    A[721] = sp[80] * PI0[0][12][1] + sp[74] * PI1[0][8][1] + sp[75] * PI2[0][1][8] + sp[76] * PI3[0][1][8];
    A[722] = sp[80] * PI0[0][12][2] + sp[75] * PI2[0][8][1] + sp[77] * PI4[0][8][1] + sp[78] * PI5[0][1][8];
    A[723] = sp[80] * PI0[0][12][3] + sp[76] * PI3[0][8][1] + sp[78] * PI5[0][8][1] + sp[79] * PI6[0][8][1];
    A[724] = sp[80] * PI0[0][12][4] + sp[75] * PI2[0][8][2] + sp[76] * PI3[0][8][2] + sp[77] * PI4[0][8][2] + sp[78] * PI5[0][8][2] + sp[78] * PI5[0][2][8] + sp[79] * PI6[0][8][2];
    A[725] = sp[80] * PI0[0][12][5] + sp[75] * PI2[0][8][3] + sp[76] * PI3[0][8][3] + sp[77] * PI4[0][8][3] + sp[78] * PI5[0][8][3] + sp[78] * PI5[0][3][8] + sp[79] * PI6[0][8][3];
    A[726] = sp[80] * PI0[0][12][6] + sp[74] * PI1[0][8][2] + sp[76] * PI3[0][8][4] + sp[75] * PI2[0][2][8] + sp[78] * PI5[0][8][4] + sp[76] * PI3[0][2][8] + sp[79] * PI6[0][8][4];
    A[727] = sp[80] * PI0[0][12][7] + sp[74] * PI1[0][8][3] + sp[76] * PI3[0][8][5] + sp[75] * PI2[0][3][8] + sp[78] * PI5[0][8][5] + sp[76] * PI3[0][3][8] + sp[79] * PI6[0][8][5];
    A[728] = sp[80] * PI0[0][12][8] + sp[74] * PI1[0][8][4] + sp[75] * PI2[0][8][4] + sp[75] * PI2[0][4][8] + sp[77] * PI4[0][8][4] + sp[76] * PI3[0][4][8] + sp[78] * PI5[0][4][8];
    A[729] = sp[80] * PI0[0][12][9] + sp[74] * PI1[0][8][5] + sp[75] * PI2[0][8][5] + sp[75] * PI2[0][5][8] + sp[77] * PI4[0][8][5] + sp[76] * PI3[0][5][8] + sp[78] * PI5[0][5][8];
    A[730] = sp[80] * PI0[0][12][10] + sp[74] * PI1[0][8][6] + sp[75] * PI2[0][8][6] + sp[76] * PI3[0][8][6] + sp[75] * PI2[0][6][8] + sp[77] * PI4[0][8][6] + sp[78] * PI5[0][8][6] + sp[76] * PI3[0][6][8] + sp[78] * PI5[0][6][8] + sp[79] * PI6[0][8][6];
    A[731] = sp[80] * PI0[0][12][11] + sp[74] * PI1[0][8][7] + sp[75] * PI2[0][8][7] + sp[76] * PI3[0][8][7] + sp[75] * PI2[0][7][8] + sp[77] * PI4[0][8][7] + sp[78] * PI5[0][8][7] + sp[76] * PI3[0][7][8] + sp[78] * PI5[0][7][8] + sp[79] * PI6[0][8][7];
    A[732] = sp[80] * PI0[0][12][12] + sp[74] * PI1[0][8][8] + sp[75] * PI2[0][8][8] + sp[76] * PI3[0][8][8] + sp[75] * PI2[0][8][8] + sp[77] * PI4[0][8][8] + sp[78] * PI5[0][8][8] + sp[76] * PI3[0][8][8] + sp[78] * PI5[0][8][8] + sp[79] * PI6[0][8][8];
    A[733] = sp[80] * PI0[0][12][13] + sp[74] * PI1[0][8][9] + sp[75] * PI2[0][8][9] + sp[76] * PI3[0][8][9] + sp[75] * PI2[0][9][8] + sp[77] * PI4[0][8][9] + sp[78] * PI5[0][8][9] + sp[76] * PI3[0][9][8] + sp[78] * PI5[0][9][8] + sp[79] * PI6[0][8][9];
    A[734] = sp[80] * PI0[0][12][14] + sp[74] * PI1[0][8][10] + sp[75] * PI2[0][8][10] + sp[76] * PI3[0][8][10] + sp[75] * PI2[0][10][8] + sp[77] * PI4[0][8][10] + sp[78] * PI5[0][8][10] + sp[76] * PI3[0][10][8] + sp[78] * PI5[0][10][8] + sp[79] * PI6[0][8][10];
    A[735] = sp[80] * PI0[0][12][15] + sp[74] * PI1[0][8][11] + sp[75] * PI2[0][8][11] + sp[76] * PI3[0][8][11] + sp[75] * PI2[0][11][8] + sp[77] * PI4[0][8][11] + sp[78] * PI5[0][8][11] + sp[76] * PI3[0][11][8] + sp[78] * PI5[0][11][8] + sp[79] * PI6[0][8][11];
    A[736] = sp[80] * PI0[0][12][16] + sp[74] * PI1[0][8][12] + sp[75] * PI2[0][8][12] + sp[76] * PI3[0][8][12] + sp[75] * PI2[0][12][8] + sp[77] * PI4[0][8][12] + sp[78] * PI5[0][8][12] + sp[76] * PI3[0][12][8] + sp[78] * PI5[0][12][8] + sp[79] * PI6[0][8][12];
    A[737] = sp[80] * PI0[0][12][17] + sp[74] * PI1[0][8][13] + sp[75] * PI2[0][8][13] + sp[76] * PI3[0][8][13] + sp[75] * PI2[0][13][8] + sp[77] * PI4[0][8][13] + sp[78] * PI5[0][8][13] + sp[76] * PI3[0][13][8] + sp[78] * PI5[0][13][8] + sp[79] * PI6[0][8][13];
    A[738] = sp[80] * PI0[0][12][18] + sp[74] * PI1[0][8][14] + sp[75] * PI2[0][8][14] + sp[76] * PI3[0][8][14] + sp[75] * PI2[0][14][8] + sp[77] * PI4[0][8][14] + sp[78] * PI5[0][8][14] + sp[76] * PI3[0][14][8] + sp[78] * PI5[0][14][8] + sp[79] * PI6[0][8][14];
    A[739] = sp[80] * PI0[0][12][19] + sp[74] * PI1[0][8][15] + sp[75] * PI2[0][8][15] + sp[76] * PI3[0][8][15] + sp[75] * PI2[0][15][8] + sp[77] * PI4[0][8][15] + sp[78] * PI5[0][8][15] + sp[76] * PI3[0][15][8] + sp[78] * PI5[0][15][8] + sp[79] * PI6[0][8][15];
    std::fill(A + 740, A + 780, 0.0);
    A[780] = sp[80] * PI0[0][13][0] + sp[74] * PI1[0][9][0] + sp[75] * PI2[0][9][0] + sp[76] * PI3[0][9][0] + sp[75] * PI2[0][0][9] + sp[77] * PI4[0][9][0] + sp[78] * PI5[0][9][0] + sp[76] * PI3[0][0][9] + sp[78] * PI5[0][0][9] + sp[79] * PI6[0][9][0];
    A[781] = sp[80] * PI0[0][13][1] + sp[74] * PI1[0][9][1] + sp[75] * PI2[0][1][9] + sp[76] * PI3[0][1][9];
    A[782] = sp[80] * PI0[0][13][2] + sp[75] * PI2[0][9][1] + sp[77] * PI4[0][9][1] + sp[78] * PI5[0][1][9];
    A[783] = sp[80] * PI0[0][13][3] + sp[76] * PI3[0][9][1] + sp[78] * PI5[0][9][1] + sp[79] * PI6[0][9][1];
    A[784] = sp[80] * PI0[0][13][4] + sp[75] * PI2[0][9][2] + sp[76] * PI3[0][9][2] + sp[77] * PI4[0][9][2] + sp[78] * PI5[0][9][2] + sp[78] * PI5[0][2][9] + sp[79] * PI6[0][9][2];
    A[785] = sp[80] * PI0[0][13][5] + sp[75] * PI2[0][9][3] + sp[76] * PI3[0][9][3] + sp[77] * PI4[0][9][3] + sp[78] * PI5[0][9][3] + sp[78] * PI5[0][3][9] + sp[79] * PI6[0][9][3];
    A[786] = sp[80] * PI0[0][13][6] + sp[74] * PI1[0][9][2] + sp[76] * PI3[0][9][4] + sp[75] * PI2[0][2][9] + sp[78] * PI5[0][9][4] + sp[76] * PI3[0][2][9] + sp[79] * PI6[0][9][4];
    A[787] = sp[80] * PI0[0][13][7] + sp[74] * PI1[0][9][3] + sp[76] * PI3[0][9][5] + sp[75] * PI2[0][3][9] + sp[78] * PI5[0][9][5] + sp[76] * PI3[0][3][9] + sp[79] * PI6[0][9][5];
    A[788] = sp[80] * PI0[0][13][8] + sp[74] * PI1[0][9][4] + sp[75] * PI2[0][9][4] + sp[75] * PI2[0][4][9] + sp[77] * PI4[0][9][4] + sp[76] * PI3[0][4][9] + sp[78] * PI5[0][4][9];
    A[789] = sp[80] * PI0[0][13][9] + sp[74] * PI1[0][9][5] + sp[75] * PI2[0][9][5] + sp[75] * PI2[0][5][9] + sp[77] * PI4[0][9][5] + sp[76] * PI3[0][5][9] + sp[78] * PI5[0][5][9];
    A[790] = sp[80] * PI0[0][13][10] + sp[74] * PI1[0][9][6] + sp[75] * PI2[0][9][6] + sp[76] * PI3[0][9][6] + sp[75] * PI2[0][6][9] + sp[77] * PI4[0][9][6] + sp[78] * PI5[0][9][6] + sp[76] * PI3[0][6][9] + sp[78] * PI5[0][6][9] + sp[79] * PI6[0][9][6];
    A[791] = sp[80] * PI0[0][13][11] + sp[74] * PI1[0][9][7] + sp[75] * PI2[0][9][7] + sp[76] * PI3[0][9][7] + sp[75] * PI2[0][7][9] + sp[77] * PI4[0][9][7] + sp[78] * PI5[0][9][7] + sp[76] * PI3[0][7][9] + sp[78] * PI5[0][7][9] + sp[79] * PI6[0][9][7];
    A[792] = sp[80] * PI0[0][13][12] + sp[74] * PI1[0][9][8] + sp[75] * PI2[0][9][8] + sp[76] * PI3[0][9][8] + sp[75] * PI2[0][8][9] + sp[77] * PI4[0][9][8] + sp[78] * PI5[0][9][8] + sp[76] * PI3[0][8][9] + sp[78] * PI5[0][8][9] + sp[79] * PI6[0][9][8];
    A[793] = sp[80] * PI0[0][13][13] + sp[74] * PI1[0][9][9] + sp[75] * PI2[0][9][9] + sp[76] * PI3[0][9][9] + sp[75] * PI2[0][9][9] + sp[77] * PI4[0][9][9] + sp[78] * PI5[0][9][9] + sp[76] * PI3[0][9][9] + sp[78] * PI5[0][9][9] + sp[79] * PI6[0][9][9];
    A[794] = sp[80] * PI0[0][13][14] + sp[74] * PI1[0][9][10] + sp[75] * PI2[0][9][10] + sp[76] * PI3[0][9][10] + sp[75] * PI2[0][10][9] + sp[77] * PI4[0][9][10] + sp[78] * PI5[0][9][10] + sp[76] * PI3[0][10][9] + sp[78] * PI5[0][10][9] + sp[79] * PI6[0][9][10];
    A[795] = sp[80] * PI0[0][13][15] + sp[74] * PI1[0][9][11] + sp[75] * PI2[0][9][11] + sp[76] * PI3[0][9][11] + sp[75] * PI2[0][11][9] + sp[77] * PI4[0][9][11] + sp[78] * PI5[0][9][11] + sp[76] * PI3[0][11][9] + sp[78] * PI5[0][11][9] + sp[79] * PI6[0][9][11];
    A[796] = sp[80] * PI0[0][13][16] + sp[74] * PI1[0][9][12] + sp[75] * PI2[0][9][12] + sp[76] * PI3[0][9][12] + sp[75] * PI2[0][12][9] + sp[77] * PI4[0][9][12] + sp[78] * PI5[0][9][12] + sp[76] * PI3[0][12][9] + sp[78] * PI5[0][12][9] + sp[79] * PI6[0][9][12];
    A[797] = sp[80] * PI0[0][13][17] + sp[74] * PI1[0][9][13] + sp[75] * PI2[0][9][13] + sp[76] * PI3[0][9][13] + sp[75] * PI2[0][13][9] + sp[77] * PI4[0][9][13] + sp[78] * PI5[0][9][13] + sp[76] * PI3[0][13][9] + sp[78] * PI5[0][13][9] + sp[79] * PI6[0][9][13];
    A[798] = sp[80] * PI0[0][13][18] + sp[74] * PI1[0][9][14] + sp[75] * PI2[0][9][14] + sp[76] * PI3[0][9][14] + sp[75] * PI2[0][14][9] + sp[77] * PI4[0][9][14] + sp[78] * PI5[0][9][14] + sp[76] * PI3[0][14][9] + sp[78] * PI5[0][14][9] + sp[79] * PI6[0][9][14];
    A[799] = sp[80] * PI0[0][13][19] + sp[74] * PI1[0][9][15] + sp[75] * PI2[0][9][15] + sp[76] * PI3[0][9][15] + sp[75] * PI2[0][15][9] + sp[77] * PI4[0][9][15] + sp[78] * PI5[0][9][15] + sp[76] * PI3[0][15][9] + sp[78] * PI5[0][15][9] + sp[79] * PI6[0][9][15];
    std::fill(A + 800, A + 840, 0.0);
    A[840] = sp[80] * PI0[0][14][0] + sp[74] * PI1[0][10][0] + sp[75] * PI2[0][10][0] + sp[76] * PI3[0][10][0] + sp[75] * PI2[0][0][10] + sp[77] * PI4[0][10][0] + sp[78] * PI5[0][10][0] + sp[76] * PI3[0][0][10] + sp[78] * PI5[0][0][10] + sp[79] * PI6[0][10][0];
    A[841] = sp[80] * PI0[0][14][1] + sp[74] * PI1[0][10][1] + sp[75] * PI2[0][1][10] + sp[76] * PI3[0][1][10];
    A[842] = sp[80] * PI0[0][14][2] + sp[75] * PI2[0][10][1] + sp[77] * PI4[0][10][1] + sp[78] * PI5[0][1][10];
    A[843] = sp[80] * PI0[0][14][3] + sp[76] * PI3[0][10][1] + sp[78] * PI5[0][10][1] + sp[79] * PI6[0][10][1];
    A[844] = sp[80] * PI0[0][14][4] + sp[75] * PI2[0][10][2] + sp[76] * PI3[0][10][2] + sp[77] * PI4[0][10][2] + sp[78] * PI5[0][10][2] + sp[78] * PI5[0][2][10] + sp[79] * PI6[0][10][2];
    A[845] = sp[80] * PI0[0][14][5] + sp[75] * PI2[0][10][3] + sp[76] * PI3[0][10][3] + sp[77] * PI4[0][10][3] + sp[78] * PI5[0][10][3] + sp[78] * PI5[0][3][10] + sp[79] * PI6[0][10][3];
    A[846] = sp[80] * PI0[0][14][6] + sp[74] * PI1[0][10][2] + sp[76] * PI3[0][10][4] + sp[75] * PI2[0][2][10] + sp[78] * PI5[0][10][4] + sp[76] * PI3[0][2][10] + sp[79] * PI6[0][10][4];
    A[847] = sp[80] * PI0[0][14][7] + sp[74] * PI1[0][10][3] + sp[76] * PI3[0][10][5] + sp[75] * PI2[0][3][10] + sp[78] * PI5[0][10][5] + sp[76] * PI3[0][3][10] + sp[79] * PI6[0][10][5];
    A[848] = sp[80] * PI0[0][14][8] + sp[74] * PI1[0][10][4] + sp[75] * PI2[0][10][4] + sp[75] * PI2[0][4][10] + sp[77] * PI4[0][10][4] + sp[76] * PI3[0][4][10] + sp[78] * PI5[0][4][10];
    A[849] = sp[80] * PI0[0][14][9] + sp[74] * PI1[0][10][5] + sp[75] * PI2[0][10][5] + sp[75] * PI2[0][5][10] + sp[77] * PI4[0][10][5] + sp[76] * PI3[0][5][10] + sp[78] * PI5[0][5][10];
    A[850] = sp[80] * PI0[0][14][10] + sp[74] * PI1[0][10][6] + sp[75] * PI2[0][10][6] + sp[76] * PI3[0][10][6] + sp[75] * PI2[0][6][10] + sp[77] * PI4[0][10][6] + sp[78] * PI5[0][10][6] + sp[76] * PI3[0][6][10] + sp[78] * PI5[0][6][10] + sp[79] * PI6[0][10][6];
    A[851] = sp[80] * PI0[0][14][11] + sp[74] * PI1[0][10][7] + sp[75] * PI2[0][10][7] + sp[76] * PI3[0][10][7] + sp[75] * PI2[0][7][10] + sp[77] * PI4[0][10][7] + sp[78] * PI5[0][10][7] + sp[76] * PI3[0][7][10] + sp[78] * PI5[0][7][10] + sp[79] * PI6[0][10][7];
    A[852] = sp[80] * PI0[0][14][12] + sp[74] * PI1[0][10][8] + sp[75] * PI2[0][10][8] + sp[76] * PI3[0][10][8] + sp[75] * PI2[0][8][10] + sp[77] * PI4[0][10][8] + sp[78] * PI5[0][10][8] + sp[76] * PI3[0][8][10] + sp[78] * PI5[0][8][10] + sp[79] * PI6[0][10][8];
    A[853] = sp[80] * PI0[0][14][13] + sp[74] * PI1[0][10][9] + sp[75] * PI2[0][10][9] + sp[76] * PI3[0][10][9] + sp[75] * PI2[0][9][10] + sp[77] * PI4[0][10][9] + sp[78] * PI5[0][10][9] + sp[76] * PI3[0][9][10] + sp[78] * PI5[0][9][10] + sp[79] * PI6[0][10][9];
    A[854] = sp[80] * PI0[0][14][14] + sp[74] * PI1[0][10][10] + sp[75] * PI2[0][10][10] + sp[76] * PI3[0][10][10] + sp[75] * PI2[0][10][10] + sp[77] * PI4[0][10][10] + sp[78] * PI5[0][10][10] + sp[76] * PI3[0][10][10] + sp[78] * PI5[0][10][10] + sp[79] * PI6[0][10][10];
    A[855] = sp[80] * PI0[0][14][15] + sp[74] * PI1[0][10][11] + sp[75] * PI2[0][10][11] + sp[76] * PI3[0][10][11] + sp[75] * PI2[0][11][10] + sp[77] * PI4[0][10][11] + sp[78] * PI5[0][10][11] + sp[76] * PI3[0][11][10] + sp[78] * PI5[0][11][10] + sp[79] * PI6[0][10][11];
    A[856] = sp[80] * PI0[0][14][16] + sp[74] * PI1[0][10][12] + sp[75] * PI2[0][10][12] + sp[76] * PI3[0][10][12] + sp[75] * PI2[0][12][10] + sp[77] * PI4[0][10][12] + sp[78] * PI5[0][10][12] + sp[76] * PI3[0][12][10] + sp[78] * PI5[0][12][10] + sp[79] * PI6[0][10][12];
    A[857] = sp[80] * PI0[0][14][17] + sp[74] * PI1[0][10][13] + sp[75] * PI2[0][10][13] + sp[76] * PI3[0][10][13] + sp[75] * PI2[0][13][10] + sp[77] * PI4[0][10][13] + sp[78] * PI5[0][10][13] + sp[76] * PI3[0][13][10] + sp[78] * PI5[0][13][10] + sp[79] * PI6[0][10][13];
    A[858] = sp[80] * PI0[0][14][18] + sp[74] * PI1[0][10][14] + sp[75] * PI2[0][10][14] + sp[76] * PI3[0][10][14] + sp[75] * PI2[0][14][10] + sp[77] * PI4[0][10][14] + sp[78] * PI5[0][10][14] + sp[76] * PI3[0][14][10] + sp[78] * PI5[0][14][10] + sp[79] * PI6[0][10][14];
    A[859] = sp[80] * PI0[0][14][19] + sp[74] * PI1[0][10][15] + sp[75] * PI2[0][10][15] + sp[76] * PI3[0][10][15] + sp[75] * PI2[0][15][10] + sp[77] * PI4[0][10][15] + sp[78] * PI5[0][10][15] + sp[76] * PI3[0][15][10] + sp[78] * PI5[0][15][10] + sp[79] * PI6[0][10][15];
    std::fill(A + 860, A + 900, 0.0);
    A[900] = sp[80] * PI0[0][15][0] + sp[74] * PI1[0][11][0] + sp[75] * PI2[0][11][0] + sp[76] * PI3[0][11][0] + sp[75] * PI2[0][0][11] + sp[77] * PI4[0][11][0] + sp[78] * PI5[0][11][0] + sp[76] * PI3[0][0][11] + sp[78] * PI5[0][0][11] + sp[79] * PI6[0][11][0];
    A[901] = sp[80] * PI0[0][15][1] + sp[74] * PI1[0][11][1] + sp[75] * PI2[0][1][11] + sp[76] * PI3[0][1][11];
    A[902] = sp[80] * PI0[0][15][2] + sp[75] * PI2[0][11][1] + sp[77] * PI4[0][11][1] + sp[78] * PI5[0][1][11];
    A[903] = sp[80] * PI0[0][15][3] + sp[76] * PI3[0][11][1] + sp[78] * PI5[0][11][1] + sp[79] * PI6[0][11][1];
    A[904] = sp[80] * PI0[0][15][4] + sp[75] * PI2[0][11][2] + sp[76] * PI3[0][11][2] + sp[77] * PI4[0][11][2] + sp[78] * PI5[0][11][2] + sp[78] * PI5[0][2][11] + sp[79] * PI6[0][11][2];
    A[905] = sp[80] * PI0[0][15][5] + sp[75] * PI2[0][11][3] + sp[76] * PI3[0][11][3] + sp[77] * PI4[0][11][3] + sp[78] * PI5[0][11][3] + sp[78] * PI5[0][3][11] + sp[79] * PI6[0][11][3];
    A[906] = sp[80] * PI0[0][15][6] + sp[74] * PI1[0][11][2] + sp[76] * PI3[0][11][4] + sp[75] * PI2[0][2][11] + sp[78] * PI5[0][11][4] + sp[76] * PI3[0][2][11] + sp[79] * PI6[0][11][4];
    A[907] = sp[80] * PI0[0][15][7] + sp[74] * PI1[0][11][3] + sp[76] * PI3[0][11][5] + sp[75] * PI2[0][3][11] + sp[78] * PI5[0][11][5] + sp[76] * PI3[0][3][11] + sp[79] * PI6[0][11][5];
    A[908] = sp[80] * PI0[0][15][8] + sp[74] * PI1[0][11][4] + sp[75] * PI2[0][11][4] + sp[75] * PI2[0][4][11] + sp[77] * PI4[0][11][4] + sp[76] * PI3[0][4][11] + sp[78] * PI5[0][4][11];
    A[909] = sp[80] * PI0[0][15][9] + sp[74] * PI1[0][11][5] + sp[75] * PI2[0][11][5] + sp[75] * PI2[0][5][11] + sp[77] * PI4[0][11][5] + sp[76] * PI3[0][5][11] + sp[78] * PI5[0][5][11];
    A[910] = sp[80] * PI0[0][15][10] + sp[74] * PI1[0][11][6] + sp[75] * PI2[0][11][6] + sp[76] * PI3[0][11][6] + sp[75] * PI2[0][6][11] + sp[77] * PI4[0][11][6] + sp[78] * PI5[0][11][6] + sp[76] * PI3[0][6][11] + sp[78] * PI5[0][6][11] + sp[79] * PI6[0][11][6];
    A[911] = sp[80] * PI0[0][15][11] + sp[74] * PI1[0][11][7] + sp[75] * PI2[0][11][7] + sp[76] * PI3[0][11][7] + sp[75] * PI2[0][7][11] + sp[77] * PI4[0][11][7] + sp[78] * PI5[0][11][7] + sp[76] * PI3[0][7][11] + sp[78] * PI5[0][7][11] + sp[79] * PI6[0][11][7];
    A[912] = sp[80] * PI0[0][15][12] + sp[74] * PI1[0][11][8] + sp[75] * PI2[0][11][8] + sp[76] * PI3[0][11][8] + sp[75] * PI2[0][8][11] + sp[77] * PI4[0][11][8] + sp[78] * PI5[0][11][8] + sp[76] * PI3[0][8][11] + sp[78] * PI5[0][8][11] + sp[79] * PI6[0][11][8];
    A[913] = sp[80] * PI0[0][15][13] + sp[74] * PI1[0][11][9] + sp[75] * PI2[0][11][9] + sp[76] * PI3[0][11][9] + sp[75] * PI2[0][9][11] + sp[77] * PI4[0][11][9] + sp[78] * PI5[0][11][9] + sp[76] * PI3[0][9][11] + sp[78] * PI5[0][9][11] + sp[79] * PI6[0][11][9];
    A[914] = sp[80] * PI0[0][15][14] + sp[74] * PI1[0][11][10] + sp[75] * PI2[0][11][10] + sp[76] * PI3[0][11][10] + sp[75] * PI2[0][10][11] + sp[77] * PI4[0][11][10] + sp[78] * PI5[0][11][10] + sp[76] * PI3[0][10][11] + sp[78] * PI5[0][10][11] + sp[79] * PI6[0][11][10];
    A[915] = sp[80] * PI0[0][15][15] + sp[74] * PI1[0][11][11] + sp[75] * PI2[0][11][11] + sp[76] * PI3[0][11][11] + sp[75] * PI2[0][11][11] + sp[77] * PI4[0][11][11] + sp[78] * PI5[0][11][11] + sp[76] * PI3[0][11][11] + sp[78] * PI5[0][11][11] + sp[79] * PI6[0][11][11];
    A[916] = sp[80] * PI0[0][15][16] + sp[74] * PI1[0][11][12] + sp[75] * PI2[0][11][12] + sp[76] * PI3[0][11][12] + sp[75] * PI2[0][12][11] + sp[77] * PI4[0][11][12] + sp[78] * PI5[0][11][12] + sp[76] * PI3[0][12][11] + sp[78] * PI5[0][12][11] + sp[79] * PI6[0][11][12];
    A[917] = sp[80] * PI0[0][15][17] + sp[74] * PI1[0][11][13] + sp[75] * PI2[0][11][13] + sp[76] * PI3[0][11][13] + sp[75] * PI2[0][13][11] + sp[77] * PI4[0][11][13] + sp[78] * PI5[0][11][13] + sp[76] * PI3[0][13][11] + sp[78] * PI5[0][13][11] + sp[79] * PI6[0][11][13];
    A[918] = sp[80] * PI0[0][15][18] + sp[74] * PI1[0][11][14] + sp[75] * PI2[0][11][14] + sp[76] * PI3[0][11][14] + sp[75] * PI2[0][14][11] + sp[77] * PI4[0][11][14] + sp[78] * PI5[0][11][14] + sp[76] * PI3[0][14][11] + sp[78] * PI5[0][14][11] + sp[79] * PI6[0][11][14];
    A[919] = sp[80] * PI0[0][15][19] + sp[74] * PI1[0][11][15] + sp[75] * PI2[0][11][15] + sp[76] * PI3[0][11][15] + sp[75] * PI2[0][15][11] + sp[77] * PI4[0][11][15] + sp[78] * PI5[0][11][15] + sp[76] * PI3[0][15][11] + sp[78] * PI5[0][15][11] + sp[79] * PI6[0][11][15];
    std::fill(A + 920, A + 960, 0.0);
    A[960] = sp[80] * PI0[0][16][0] + sp[74] * PI1[0][12][0] + sp[75] * PI2[0][12][0] + sp[76] * PI3[0][12][0] + sp[75] * PI2[0][0][12] + sp[77] * PI4[0][12][0] + sp[78] * PI5[0][12][0] + sp[76] * PI3[0][0][12] + sp[78] * PI5[0][0][12] + sp[79] * PI6[0][12][0];
    A[961] = sp[80] * PI0[0][16][1] + sp[74] * PI1[0][12][1] + sp[75] * PI2[0][1][12] + sp[76] * PI3[0][1][12];
    A[962] = sp[80] * PI0[0][16][2] + sp[75] * PI2[0][12][1] + sp[77] * PI4[0][12][1] + sp[78] * PI5[0][1][12];
    A[963] = sp[80] * PI0[0][16][3] + sp[76] * PI3[0][12][1] + sp[78] * PI5[0][12][1] + sp[79] * PI6[0][12][1];
    A[964] = sp[80] * PI0[0][16][4] + sp[75] * PI2[0][12][2] + sp[76] * PI3[0][12][2] + sp[77] * PI4[0][12][2] + sp[78] * PI5[0][12][2] + sp[78] * PI5[0][2][12] + sp[79] * PI6[0][12][2];
    A[965] = sp[80] * PI0[0][16][5] + sp[75] * PI2[0][12][3] + sp[76] * PI3[0][12][3] + sp[77] * PI4[0][12][3] + sp[78] * PI5[0][12][3] + sp[78] * PI5[0][3][12] + sp[79] * PI6[0][12][3];
    A[966] = sp[80] * PI0[0][16][6] + sp[74] * PI1[0][12][2] + sp[76] * PI3[0][12][4] + sp[75] * PI2[0][2][12] + sp[78] * PI5[0][12][4] + sp[76] * PI3[0][2][12] + sp[79] * PI6[0][12][4];
    A[967] = sp[80] * PI0[0][16][7] + sp[74] * PI1[0][12][3] + sp[76] * PI3[0][12][5] + sp[75] * PI2[0][3][12] + sp[78] * PI5[0][12][5] + sp[76] * PI3[0][3][12] + sp[79] * PI6[0][12][5];
    A[968] = sp[80] * PI0[0][16][8] + sp[74] * PI1[0][12][4] + sp[75] * PI2[0][12][4] + sp[75] * PI2[0][4][12] + sp[77] * PI4[0][12][4] + sp[76] * PI3[0][4][12] + sp[78] * PI5[0][4][12];
    A[969] = sp[80] * PI0[0][16][9] + sp[74] * PI1[0][12][5] + sp[75] * PI2[0][12][5] + sp[75] * PI2[0][5][12] + sp[77] * PI4[0][12][5] + sp[76] * PI3[0][5][12] + sp[78] * PI5[0][5][12];
    A[970] = sp[80] * PI0[0][16][10] + sp[74] * PI1[0][12][6] + sp[75] * PI2[0][12][6] + sp[76] * PI3[0][12][6] + sp[75] * PI2[0][6][12] + sp[77] * PI4[0][12][6] + sp[78] * PI5[0][12][6] + sp[76] * PI3[0][6][12] + sp[78] * PI5[0][6][12] + sp[79] * PI6[0][12][6];
    A[971] = sp[80] * PI0[0][16][11] + sp[74] * PI1[0][12][7] + sp[75] * PI2[0][12][7] + sp[76] * PI3[0][12][7] + sp[75] * PI2[0][7][12] + sp[77] * PI4[0][12][7] + sp[78] * PI5[0][12][7] + sp[76] * PI3[0][7][12] + sp[78] * PI5[0][7][12] + sp[79] * PI6[0][12][7];
    A[972] = sp[80] * PI0[0][16][12] + sp[74] * PI1[0][12][8] + sp[75] * PI2[0][12][8] + sp[76] * PI3[0][12][8] + sp[75] * PI2[0][8][12] + sp[77] * PI4[0][12][8] + sp[78] * PI5[0][12][8] + sp[76] * PI3[0][8][12] + sp[78] * PI5[0][8][12] + sp[79] * PI6[0][12][8];
    A[973] = sp[80] * PI0[0][16][13] + sp[74] * PI1[0][12][9] + sp[75] * PI2[0][12][9] + sp[76] * PI3[0][12][9] + sp[75] * PI2[0][9][12] + sp[77] * PI4[0][12][9] + sp[78] * PI5[0][12][9] + sp[76] * PI3[0][9][12] + sp[78] * PI5[0][9][12] + sp[79] * PI6[0][12][9];
    A[974] = sp[80] * PI0[0][16][14] + sp[74] * PI1[0][12][10] + sp[75] * PI2[0][12][10] + sp[76] * PI3[0][12][10] + sp[75] * PI2[0][10][12] + sp[77] * PI4[0][12][10] + sp[78] * PI5[0][12][10] + sp[76] * PI3[0][10][12] + sp[78] * PI5[0][10][12] + sp[79] * PI6[0][12][10];
    A[975] = sp[80] * PI0[0][16][15] + sp[74] * PI1[0][12][11] + sp[75] * PI2[0][12][11] + sp[76] * PI3[0][12][11] + sp[75] * PI2[0][11][12] + sp[77] * PI4[0][12][11] + sp[78] * PI5[0][12][11] + sp[76] * PI3[0][11][12] + sp[78] * PI5[0][11][12] + sp[79] * PI6[0][12][11];
    A[976] = sp[80] * PI0[0][16][16] + sp[74] * PI1[0][12][12] + sp[75] * PI2[0][12][12] + sp[76] * PI3[0][12][12] + sp[75] * PI2[0][12][12] + sp[77] * PI4[0][12][12] + sp[78] * PI5[0][12][12] + sp[76] * PI3[0][12][12] + sp[78] * PI5[0][12][12] + sp[79] * PI6[0][12][12];
    A[977] = sp[80] * PI0[0][16][17] + sp[74] * PI1[0][12][13] + sp[75] * PI2[0][12][13] + sp[76] * PI3[0][12][13] + sp[75] * PI2[0][13][12] + sp[77] * PI4[0][12][13] + sp[78] * PI5[0][12][13] + sp[76] * PI3[0][13][12] + sp[78] * PI5[0][13][12] + sp[79] * PI6[0][12][13];
    A[978] = sp[80] * PI0[0][16][18] + sp[74] * PI1[0][12][14] + sp[75] * PI2[0][12][14] + sp[76] * PI3[0][12][14] + sp[75] * PI2[0][14][12] + sp[77] * PI4[0][12][14] + sp[78] * PI5[0][12][14] + sp[76] * PI3[0][14][12] + sp[78] * PI5[0][14][12] + sp[79] * PI6[0][12][14];
    A[979] = sp[80] * PI0[0][16][19] + sp[74] * PI1[0][12][15] + sp[75] * PI2[0][12][15] + sp[76] * PI3[0][12][15] + sp[75] * PI2[0][15][12] + sp[77] * PI4[0][12][15] + sp[78] * PI5[0][12][15] + sp[76] * PI3[0][15][12] + sp[78] * PI5[0][15][12] + sp[79] * PI6[0][12][15];
    std::fill(A + 980, A + 1020, 0.0);
    A[1020] = sp[80] * PI0[0][17][0] + sp[74] * PI1[0][13][0] + sp[75] * PI2[0][13][0] + sp[76] * PI3[0][13][0] + sp[75] * PI2[0][0][13] + sp[77] * PI4[0][13][0] + sp[78] * PI5[0][13][0] + sp[76] * PI3[0][0][13] + sp[78] * PI5[0][0][13] + sp[79] * PI6[0][13][0];
    A[1021] = sp[80] * PI0[0][17][1] + sp[74] * PI1[0][13][1] + sp[75] * PI2[0][1][13] + sp[76] * PI3[0][1][13];
    A[1022] = sp[80] * PI0[0][17][2] + sp[75] * PI2[0][13][1] + sp[77] * PI4[0][13][1] + sp[78] * PI5[0][1][13];
    A[1023] = sp[80] * PI0[0][17][3] + sp[76] * PI3[0][13][1] + sp[78] * PI5[0][13][1] + sp[79] * PI6[0][13][1];
    A[1024] = sp[80] * PI0[0][17][4] + sp[75] * PI2[0][13][2] + sp[76] * PI3[0][13][2] + sp[77] * PI4[0][13][2] + sp[78] * PI5[0][13][2] + sp[78] * PI5[0][2][13] + sp[79] * PI6[0][13][2];
    A[1025] = sp[80] * PI0[0][17][5] + sp[75] * PI2[0][13][3] + sp[76] * PI3[0][13][3] + sp[77] * PI4[0][13][3] + sp[78] * PI5[0][13][3] + sp[78] * PI5[0][3][13] + sp[79] * PI6[0][13][3];
    A[1026] = sp[80] * PI0[0][17][6] + sp[74] * PI1[0][13][2] + sp[76] * PI3[0][13][4] + sp[75] * PI2[0][2][13] + sp[78] * PI5[0][13][4] + sp[76] * PI3[0][2][13] + sp[79] * PI6[0][13][4];
    A[1027] = sp[80] * PI0[0][17][7] + sp[74] * PI1[0][13][3] + sp[76] * PI3[0][13][5] + sp[75] * PI2[0][3][13] + sp[78] * PI5[0][13][5] + sp[76] * PI3[0][3][13] + sp[79] * PI6[0][13][5];
    A[1028] = sp[80] * PI0[0][17][8] + sp[74] * PI1[0][13][4] + sp[75] * PI2[0][13][4] + sp[75] * PI2[0][4][13] + sp[77] * PI4[0][13][4] + sp[76] * PI3[0][4][13] + sp[78] * PI5[0][4][13];
    A[1029] = sp[80] * PI0[0][17][9] + sp[74] * PI1[0][13][5] + sp[75] * PI2[0][13][5] + sp[75] * PI2[0][5][13] + sp[77] * PI4[0][13][5] + sp[76] * PI3[0][5][13] + sp[78] * PI5[0][5][13];
    A[1030] = sp[80] * PI0[0][17][10] + sp[74] * PI1[0][13][6] + sp[75] * PI2[0][13][6] + sp[76] * PI3[0][13][6] + sp[75] * PI2[0][6][13] + sp[77] * PI4[0][13][6] + sp[78] * PI5[0][13][6] + sp[76] * PI3[0][6][13] + sp[78] * PI5[0][6][13] + sp[79] * PI6[0][13][6];
    A[1031] = sp[80] * PI0[0][17][11] + sp[74] * PI1[0][13][7] + sp[75] * PI2[0][13][7] + sp[76] * PI3[0][13][7] + sp[75] * PI2[0][7][13] + sp[77] * PI4[0][13][7] + sp[78] * PI5[0][13][7] + sp[76] * PI3[0][7][13] + sp[78] * PI5[0][7][13] + sp[79] * PI6[0][13][7];
    A[1032] = sp[80] * PI0[0][17][12] + sp[74] * PI1[0][13][8] + sp[75] * PI2[0][13][8] + sp[76] * PI3[0][13][8] + sp[75] * PI2[0][8][13] + sp[77] * PI4[0][13][8] + sp[78] * PI5[0][13][8] + sp[76] * PI3[0][8][13] + sp[78] * PI5[0][8][13] + sp[79] * PI6[0][13][8];
    A[1033] = sp[80] * PI0[0][17][13] + sp[74] * PI1[0][13][9] + sp[75] * PI2[0][13][9] + sp[76] * PI3[0][13][9] + sp[75] * PI2[0][9][13] + sp[77] * PI4[0][13][9] + sp[78] * PI5[0][13][9] + sp[76] * PI3[0][9][13] + sp[78] * PI5[0][9][13] + sp[79] * PI6[0][13][9];
    A[1034] = sp[80] * PI0[0][17][14] + sp[74] * PI1[0][13][10] + sp[75] * PI2[0][13][10] + sp[76] * PI3[0][13][10] + sp[75] * PI2[0][10][13] + sp[77] * PI4[0][13][10] + sp[78] * PI5[0][13][10] + sp[76] * PI3[0][10][13] + sp[78] * PI5[0][10][13] + sp[79] * PI6[0][13][10];
    A[1035] = sp[80] * PI0[0][17][15] + sp[74] * PI1[0][13][11] + sp[75] * PI2[0][13][11] + sp[76] * PI3[0][13][11] + sp[75] * PI2[0][11][13] + sp[77] * PI4[0][13][11] + sp[78] * PI5[0][13][11] + sp[76] * PI3[0][11][13] + sp[78] * PI5[0][11][13] + sp[79] * PI6[0][13][11];
    A[1036] = sp[80] * PI0[0][17][16] + sp[74] * PI1[0][13][12] + sp[75] * PI2[0][13][12] + sp[76] * PI3[0][13][12] + sp[75] * PI2[0][12][13] + sp[77] * PI4[0][13][12] + sp[78] * PI5[0][13][12] + sp[76] * PI3[0][12][13] + sp[78] * PI5[0][12][13] + sp[79] * PI6[0][13][12];
    A[1037] = sp[80] * PI0[0][17][17] + sp[74] * PI1[0][13][13] + sp[75] * PI2[0][13][13] + sp[76] * PI3[0][13][13] + sp[75] * PI2[0][13][13] + sp[77] * PI4[0][13][13] + sp[78] * PI5[0][13][13] + sp[76] * PI3[0][13][13] + sp[78] * PI5[0][13][13] + sp[79] * PI6[0][13][13];
    A[1038] = sp[80] * PI0[0][17][18] + sp[74] * PI1[0][13][14] + sp[75] * PI2[0][13][14] + sp[76] * PI3[0][13][14] + sp[75] * PI2[0][14][13] + sp[77] * PI4[0][13][14] + sp[78] * PI5[0][13][14] + sp[76] * PI3[0][14][13] + sp[78] * PI5[0][14][13] + sp[79] * PI6[0][13][14];
    A[1039] = sp[80] * PI0[0][17][19] + sp[74] * PI1[0][13][15] + sp[75] * PI2[0][13][15] + sp[76] * PI3[0][13][15] + sp[75] * PI2[0][15][13] + sp[77] * PI4[0][13][15] + sp[78] * PI5[0][13][15] + sp[76] * PI3[0][15][13] + sp[78] * PI5[0][15][13] + sp[79] * PI6[0][13][15];
    std::fill(A + 1040, A + 1080, 0.0);
    A[1080] = sp[80] * PI0[0][18][0] + sp[74] * PI1[0][14][0] + sp[75] * PI2[0][14][0] + sp[76] * PI3[0][14][0] + sp[75] * PI2[0][0][14] + sp[77] * PI4[0][14][0] + sp[78] * PI5[0][14][0] + sp[76] * PI3[0][0][14] + sp[78] * PI5[0][0][14] + sp[79] * PI6[0][14][0];
    A[1081] = sp[80] * PI0[0][18][1] + sp[74] * PI1[0][14][1] + sp[75] * PI2[0][1][14] + sp[76] * PI3[0][1][14];
    A[1082] = sp[80] * PI0[0][18][2] + sp[75] * PI2[0][14][1] + sp[77] * PI4[0][14][1] + sp[78] * PI5[0][1][14];
    A[1083] = sp[80] * PI0[0][18][3] + sp[76] * PI3[0][14][1] + sp[78] * PI5[0][14][1] + sp[79] * PI6[0][14][1];
    A[1084] = sp[80] * PI0[0][18][4] + sp[75] * PI2[0][14][2] + sp[76] * PI3[0][14][2] + sp[77] * PI4[0][14][2] + sp[78] * PI5[0][14][2] + sp[78] * PI5[0][2][14] + sp[79] * PI6[0][14][2];
    A[1085] = sp[80] * PI0[0][18][5] + sp[75] * PI2[0][14][3] + sp[76] * PI3[0][14][3] + sp[77] * PI4[0][14][3] + sp[78] * PI5[0][14][3] + sp[78] * PI5[0][3][14] + sp[79] * PI6[0][14][3];
    A[1086] = sp[80] * PI0[0][18][6] + sp[74] * PI1[0][14][2] + sp[76] * PI3[0][14][4] + sp[75] * PI2[0][2][14] + sp[78] * PI5[0][14][4] + sp[76] * PI3[0][2][14] + sp[79] * PI6[0][14][4];
    A[1087] = sp[80] * PI0[0][18][7] + sp[74] * PI1[0][14][3] + sp[76] * PI3[0][14][5] + sp[75] * PI2[0][3][14] + sp[78] * PI5[0][14][5] + sp[76] * PI3[0][3][14] + sp[79] * PI6[0][14][5];
    A[1088] = sp[80] * PI0[0][18][8] + sp[74] * PI1[0][14][4] + sp[75] * PI2[0][14][4] + sp[75] * PI2[0][4][14] + sp[77] * PI4[0][14][4] + sp[76] * PI3[0][4][14] + sp[78] * PI5[0][4][14];
    A[1089] = sp[80] * PI0[0][18][9] + sp[74] * PI1[0][14][5] + sp[75] * PI2[0][14][5] + sp[75] * PI2[0][5][14] + sp[77] * PI4[0][14][5] + sp[76] * PI3[0][5][14] + sp[78] * PI5[0][5][14];
    A[1090] = sp[80] * PI0[0][18][10] + sp[74] * PI1[0][14][6] + sp[75] * PI2[0][14][6] + sp[76] * PI3[0][14][6] + sp[75] * PI2[0][6][14] + sp[77] * PI4[0][14][6] + sp[78] * PI5[0][14][6] + sp[76] * PI3[0][6][14] + sp[78] * PI5[0][6][14] + sp[79] * PI6[0][14][6];
    A[1091] = sp[80] * PI0[0][18][11] + sp[74] * PI1[0][14][7] + sp[75] * PI2[0][14][7] + sp[76] * PI3[0][14][7] + sp[75] * PI2[0][7][14] + sp[77] * PI4[0][14][7] + sp[78] * PI5[0][14][7] + sp[76] * PI3[0][7][14] + sp[78] * PI5[0][7][14] + sp[79] * PI6[0][14][7];
    A[1092] = sp[80] * PI0[0][18][12] + sp[74] * PI1[0][14][8] + sp[75] * PI2[0][14][8] + sp[76] * PI3[0][14][8] + sp[75] * PI2[0][8][14] + sp[77] * PI4[0][14][8] + sp[78] * PI5[0][14][8] + sp[76] * PI3[0][8][14] + sp[78] * PI5[0][8][14] + sp[79] * PI6[0][14][8];
    A[1093] = sp[80] * PI0[0][18][13] + sp[74] * PI1[0][14][9] + sp[75] * PI2[0][14][9] + sp[76] * PI3[0][14][9] + sp[75] * PI2[0][9][14] + sp[77] * PI4[0][14][9] + sp[78] * PI5[0][14][9] + sp[76] * PI3[0][9][14] + sp[78] * PI5[0][9][14] + sp[79] * PI6[0][14][9];
    A[1094] = sp[80] * PI0[0][18][14] + sp[74] * PI1[0][14][10] + sp[75] * PI2[0][14][10] + sp[76] * PI3[0][14][10] + sp[75] * PI2[0][10][14] + sp[77] * PI4[0][14][10] + sp[78] * PI5[0][14][10] + sp[76] * PI3[0][10][14] + sp[78] * PI5[0][10][14] + sp[79] * PI6[0][14][10];
    A[1095] = sp[80] * PI0[0][18][15] + sp[74] * PI1[0][14][11] + sp[75] * PI2[0][14][11] + sp[76] * PI3[0][14][11] + sp[75] * PI2[0][11][14] + sp[77] * PI4[0][14][11] + sp[78] * PI5[0][14][11] + sp[76] * PI3[0][11][14] + sp[78] * PI5[0][11][14] + sp[79] * PI6[0][14][11];
    A[1096] = sp[80] * PI0[0][18][16] + sp[74] * PI1[0][14][12] + sp[75] * PI2[0][14][12] + sp[76] * PI3[0][14][12] + sp[75] * PI2[0][12][14] + sp[77] * PI4[0][14][12] + sp[78] * PI5[0][14][12] + sp[76] * PI3[0][12][14] + sp[78] * PI5[0][12][14] + sp[79] * PI6[0][14][12];
    A[1097] = sp[80] * PI0[0][18][17] + sp[74] * PI1[0][14][13] + sp[75] * PI2[0][14][13] + sp[76] * PI3[0][14][13] + sp[75] * PI2[0][13][14] + sp[77] * PI4[0][14][13] + sp[78] * PI5[0][14][13] + sp[76] * PI3[0][13][14] + sp[78] * PI5[0][13][14] + sp[79] * PI6[0][14][13];
    A[1098] = sp[80] * PI0[0][18][18] + sp[74] * PI1[0][14][14] + sp[75] * PI2[0][14][14] + sp[76] * PI3[0][14][14] + sp[75] * PI2[0][14][14] + sp[77] * PI4[0][14][14] + sp[78] * PI5[0][14][14] + sp[76] * PI3[0][14][14] + sp[78] * PI5[0][14][14] + sp[79] * PI6[0][14][14];
    A[1099] = sp[80] * PI0[0][18][19] + sp[74] * PI1[0][14][15] + sp[75] * PI2[0][14][15] + sp[76] * PI3[0][14][15] + sp[75] * PI2[0][15][14] + sp[77] * PI4[0][14][15] + sp[78] * PI5[0][14][15] + sp[76] * PI3[0][15][14] + sp[78] * PI5[0][15][14] + sp[79] * PI6[0][14][15];
    std::fill(A + 1100, A + 1140, 0.0);
    A[1140] = sp[80] * PI0[0][19][0] + sp[74] * PI1[0][15][0] + sp[75] * PI2[0][15][0] + sp[76] * PI3[0][15][0] + sp[75] * PI2[0][0][15] + sp[77] * PI4[0][15][0] + sp[78] * PI5[0][15][0] + sp[76] * PI3[0][0][15] + sp[78] * PI5[0][0][15] + sp[79] * PI6[0][15][0];
    A[1141] = sp[80] * PI0[0][19][1] + sp[74] * PI1[0][15][1] + sp[75] * PI2[0][1][15] + sp[76] * PI3[0][1][15];
    A[1142] = sp[80] * PI0[0][19][2] + sp[75] * PI2[0][15][1] + sp[77] * PI4[0][15][1] + sp[78] * PI5[0][1][15];
    A[1143] = sp[80] * PI0[0][19][3] + sp[76] * PI3[0][15][1] + sp[78] * PI5[0][15][1] + sp[79] * PI6[0][15][1];
    A[1144] = sp[80] * PI0[0][19][4] + sp[75] * PI2[0][15][2] + sp[76] * PI3[0][15][2] + sp[77] * PI4[0][15][2] + sp[78] * PI5[0][15][2] + sp[78] * PI5[0][2][15] + sp[79] * PI6[0][15][2];
    A[1145] = sp[80] * PI0[0][19][5] + sp[75] * PI2[0][15][3] + sp[76] * PI3[0][15][3] + sp[77] * PI4[0][15][3] + sp[78] * PI5[0][15][3] + sp[78] * PI5[0][3][15] + sp[79] * PI6[0][15][3];
    A[1146] = sp[80] * PI0[0][19][6] + sp[74] * PI1[0][15][2] + sp[76] * PI3[0][15][4] + sp[75] * PI2[0][2][15] + sp[78] * PI5[0][15][4] + sp[76] * PI3[0][2][15] + sp[79] * PI6[0][15][4];
    A[1147] = sp[80] * PI0[0][19][7] + sp[74] * PI1[0][15][3] + sp[76] * PI3[0][15][5] + sp[75] * PI2[0][3][15] + sp[78] * PI5[0][15][5] + sp[76] * PI3[0][3][15] + sp[79] * PI6[0][15][5];
    A[1148] = sp[80] * PI0[0][19][8] + sp[74] * PI1[0][15][4] + sp[75] * PI2[0][15][4] + sp[75] * PI2[0][4][15] + sp[77] * PI4[0][15][4] + sp[76] * PI3[0][4][15] + sp[78] * PI5[0][4][15];
    A[1149] = sp[80] * PI0[0][19][9] + sp[74] * PI1[0][15][5] + sp[75] * PI2[0][15][5] + sp[75] * PI2[0][5][15] + sp[77] * PI4[0][15][5] + sp[76] * PI3[0][5][15] + sp[78] * PI5[0][5][15];
    A[1150] = sp[80] * PI0[0][19][10] + sp[74] * PI1[0][15][6] + sp[75] * PI2[0][15][6] + sp[76] * PI3[0][15][6] + sp[75] * PI2[0][6][15] + sp[77] * PI4[0][15][6] + sp[78] * PI5[0][15][6] + sp[76] * PI3[0][6][15] + sp[78] * PI5[0][6][15] + sp[79] * PI6[0][15][6];
    A[1151] = sp[80] * PI0[0][19][11] + sp[74] * PI1[0][15][7] + sp[75] * PI2[0][15][7] + sp[76] * PI3[0][15][7] + sp[75] * PI2[0][7][15] + sp[77] * PI4[0][15][7] + sp[78] * PI5[0][15][7] + sp[76] * PI3[0][7][15] + sp[78] * PI5[0][7][15] + sp[79] * PI6[0][15][7];
    A[1152] = sp[80] * PI0[0][19][12] + sp[74] * PI1[0][15][8] + sp[75] * PI2[0][15][8] + sp[76] * PI3[0][15][8] + sp[75] * PI2[0][8][15] + sp[77] * PI4[0][15][8] + sp[78] * PI5[0][15][8] + sp[76] * PI3[0][8][15] + sp[78] * PI5[0][8][15] + sp[79] * PI6[0][15][8];
    A[1153] = sp[80] * PI0[0][19][13] + sp[74] * PI1[0][15][9] + sp[75] * PI2[0][15][9] + sp[76] * PI3[0][15][9] + sp[75] * PI2[0][9][15] + sp[77] * PI4[0][15][9] + sp[78] * PI5[0][15][9] + sp[76] * PI3[0][9][15] + sp[78] * PI5[0][9][15] + sp[79] * PI6[0][15][9];
    A[1154] = sp[80] * PI0[0][19][14] + sp[74] * PI1[0][15][10] + sp[75] * PI2[0][15][10] + sp[76] * PI3[0][15][10] + sp[75] * PI2[0][10][15] + sp[77] * PI4[0][15][10] + sp[78] * PI5[0][15][10] + sp[76] * PI3[0][10][15] + sp[78] * PI5[0][10][15] + sp[79] * PI6[0][15][10];
    A[1155] = sp[80] * PI0[0][19][15] + sp[74] * PI1[0][15][11] + sp[75] * PI2[0][15][11] + sp[76] * PI3[0][15][11] + sp[75] * PI2[0][11][15] + sp[77] * PI4[0][15][11] + sp[78] * PI5[0][15][11] + sp[76] * PI3[0][11][15] + sp[78] * PI5[0][11][15] + sp[79] * PI6[0][15][11];
    A[1156] = sp[80] * PI0[0][19][16] + sp[74] * PI1[0][15][12] + sp[75] * PI2[0][15][12] + sp[76] * PI3[0][15][12] + sp[75] * PI2[0][12][15] + sp[77] * PI4[0][15][12] + sp[78] * PI5[0][15][12] + sp[76] * PI3[0][12][15] + sp[78] * PI5[0][12][15] + sp[79] * PI6[0][15][12];
    A[1157] = sp[80] * PI0[0][19][17] + sp[74] * PI1[0][15][13] + sp[75] * PI2[0][15][13] + sp[76] * PI3[0][15][13] + sp[75] * PI2[0][13][15] + sp[77] * PI4[0][15][13] + sp[78] * PI5[0][15][13] + sp[76] * PI3[0][13][15] + sp[78] * PI5[0][13][15] + sp[79] * PI6[0][15][13];
    A[1158] = sp[80] * PI0[0][19][18] + sp[74] * PI1[0][15][14] + sp[75] * PI2[0][15][14] + sp[76] * PI3[0][15][14] + sp[75] * PI2[0][14][15] + sp[77] * PI4[0][15][14] + sp[78] * PI5[0][15][14] + sp[76] * PI3[0][14][15] + sp[78] * PI5[0][14][15] + sp[79] * PI6[0][15][14];
    A[1159] = sp[80] * PI0[0][19][19] + sp[74] * PI1[0][15][15] + sp[75] * PI2[0][15][15] + sp[76] * PI3[0][15][15] + sp[75] * PI2[0][15][15] + sp[77] * PI4[0][15][15] + sp[78] * PI5[0][15][15] + sp[76] * PI3[0][15][15] + sp[78] * PI5[0][15][15] + sp[79] * PI6[0][15][15];
    std::fill(A + 1160, A + 1220, 0.0);
    A[1220] = sp[80] * PI0[0][0][0] + sp[74] * PI1[0][0][0] + sp[75] * PI2[0][0][0] + sp[76] * PI3[0][0][0] + sp[75] * PI2[0][0][0] + sp[77] * PI4[0][0][0] + sp[78] * PI5[0][0][0] + sp[76] * PI3[0][0][0] + sp[78] * PI5[0][0][0] + sp[79] * PI6[0][0][0];
    A[1221] = sp[80] * PI0[0][0][1] + sp[74] * PI1[0][0][1] + sp[75] * PI2[0][1][0] + sp[76] * PI3[0][1][0];
    A[1222] = sp[80] * PI0[0][0][2] + sp[75] * PI2[0][0][1] + sp[77] * PI4[0][0][1] + sp[78] * PI5[0][1][0];
    A[1223] = sp[80] * PI0[0][0][3] + sp[76] * PI3[0][0][1] + sp[78] * PI5[0][0][1] + sp[79] * PI6[0][0][1];
    A[1224] = sp[80] * PI0[0][0][4] + sp[75] * PI2[0][0][2] + sp[76] * PI3[0][0][2] + sp[77] * PI4[0][0][2] + sp[78] * PI5[0][0][2] + sp[78] * PI5[0][2][0] + sp[79] * PI6[0][0][2];
    A[1225] = sp[80] * PI0[0][0][5] + sp[75] * PI2[0][0][3] + sp[76] * PI3[0][0][3] + sp[77] * PI4[0][0][3] + sp[78] * PI5[0][0][3] + sp[78] * PI5[0][3][0] + sp[79] * PI6[0][0][3];
    A[1226] = sp[80] * PI0[0][0][6] + sp[74] * PI1[0][0][2] + sp[76] * PI3[0][0][4] + sp[75] * PI2[0][2][0] + sp[78] * PI5[0][0][4] + sp[76] * PI3[0][2][0] + sp[79] * PI6[0][0][4];
    A[1227] = sp[80] * PI0[0][0][7] + sp[74] * PI1[0][0][3] + sp[76] * PI3[0][0][5] + sp[75] * PI2[0][3][0] + sp[78] * PI5[0][0][5] + sp[76] * PI3[0][3][0] + sp[79] * PI6[0][0][5];
    A[1228] = sp[80] * PI0[0][0][8] + sp[74] * PI1[0][0][4] + sp[75] * PI2[0][0][4] + sp[75] * PI2[0][4][0] + sp[77] * PI4[0][0][4] + sp[76] * PI3[0][4][0] + sp[78] * PI5[0][4][0];
    A[1229] = sp[80] * PI0[0][0][9] + sp[74] * PI1[0][0][5] + sp[75] * PI2[0][0][5] + sp[75] * PI2[0][5][0] + sp[77] * PI4[0][0][5] + sp[76] * PI3[0][5][0] + sp[78] * PI5[0][5][0];
    A[1230] = sp[80] * PI0[0][0][10] + sp[74] * PI1[0][0][6] + sp[75] * PI2[0][0][6] + sp[76] * PI3[0][0][6] + sp[75] * PI2[0][6][0] + sp[77] * PI4[0][0][6] + sp[78] * PI5[0][0][6] + sp[76] * PI3[0][6][0] + sp[78] * PI5[0][6][0] + sp[79] * PI6[0][0][6];
    A[1231] = sp[80] * PI0[0][0][11] + sp[74] * PI1[0][0][7] + sp[75] * PI2[0][0][7] + sp[76] * PI3[0][0][7] + sp[75] * PI2[0][7][0] + sp[77] * PI4[0][0][7] + sp[78] * PI5[0][0][7] + sp[76] * PI3[0][7][0] + sp[78] * PI5[0][7][0] + sp[79] * PI6[0][0][7];
    A[1232] = sp[80] * PI0[0][0][12] + sp[74] * PI1[0][0][8] + sp[75] * PI2[0][0][8] + sp[76] * PI3[0][0][8] + sp[75] * PI2[0][8][0] + sp[77] * PI4[0][0][8] + sp[78] * PI5[0][0][8] + sp[76] * PI3[0][8][0] + sp[78] * PI5[0][8][0] + sp[79] * PI6[0][0][8];
    A[1233] = sp[80] * PI0[0][0][13] + sp[74] * PI1[0][0][9] + sp[75] * PI2[0][0][9] + sp[76] * PI3[0][0][9] + sp[75] * PI2[0][9][0] + sp[77] * PI4[0][0][9] + sp[78] * PI5[0][0][9] + sp[76] * PI3[0][9][0] + sp[78] * PI5[0][9][0] + sp[79] * PI6[0][0][9];
    A[1234] = sp[80] * PI0[0][0][14] + sp[74] * PI1[0][0][10] + sp[75] * PI2[0][0][10] + sp[76] * PI3[0][0][10] + sp[75] * PI2[0][10][0] + sp[77] * PI4[0][0][10] + sp[78] * PI5[0][0][10] + sp[76] * PI3[0][10][0] + sp[78] * PI5[0][10][0] + sp[79] * PI6[0][0][10];
    A[1235] = sp[80] * PI0[0][0][15] + sp[74] * PI1[0][0][11] + sp[75] * PI2[0][0][11] + sp[76] * PI3[0][0][11] + sp[75] * PI2[0][11][0] + sp[77] * PI4[0][0][11] + sp[78] * PI5[0][0][11] + sp[76] * PI3[0][11][0] + sp[78] * PI5[0][11][0] + sp[79] * PI6[0][0][11];
    A[1236] = sp[80] * PI0[0][0][16] + sp[74] * PI1[0][0][12] + sp[75] * PI2[0][0][12] + sp[76] * PI3[0][0][12] + sp[75] * PI2[0][12][0] + sp[77] * PI4[0][0][12] + sp[78] * PI5[0][0][12] + sp[76] * PI3[0][12][0] + sp[78] * PI5[0][12][0] + sp[79] * PI6[0][0][12];
    A[1237] = sp[80] * PI0[0][0][17] + sp[74] * PI1[0][0][13] + sp[75] * PI2[0][0][13] + sp[76] * PI3[0][0][13] + sp[75] * PI2[0][13][0] + sp[77] * PI4[0][0][13] + sp[78] * PI5[0][0][13] + sp[76] * PI3[0][13][0] + sp[78] * PI5[0][13][0] + sp[79] * PI6[0][0][13];
    A[1238] = sp[80] * PI0[0][0][18] + sp[74] * PI1[0][0][14] + sp[75] * PI2[0][0][14] + sp[76] * PI3[0][0][14] + sp[75] * PI2[0][14][0] + sp[77] * PI4[0][0][14] + sp[78] * PI5[0][0][14] + sp[76] * PI3[0][14][0] + sp[78] * PI5[0][14][0] + sp[79] * PI6[0][0][14];
    A[1239] = sp[80] * PI0[0][0][19] + sp[74] * PI1[0][0][15] + sp[75] * PI2[0][0][15] + sp[76] * PI3[0][0][15] + sp[75] * PI2[0][15][0] + sp[77] * PI4[0][0][15] + sp[78] * PI5[0][0][15] + sp[76] * PI3[0][15][0] + sp[78] * PI5[0][15][0] + sp[79] * PI6[0][0][15];
    std::fill(A + 1240, A + 1280, 0.0);
    A[1280] = sp[80] * PI0[0][1][0] + sp[74] * PI1[0][1][0] + sp[75] * PI2[0][1][0] + sp[76] * PI3[0][1][0];
    A[1281] = sp[80] * PI0[0][1][1] + sp[74] * PI1[0][1][1];
    A[1282] = sp[80] * PI0[0][1][2] + sp[75] * PI2[0][1][1];
    A[1283] = sp[80] * PI0[0][1][3] + sp[76] * PI3[0][1][1];
    A[1284] = sp[80] * PI0[0][1][4] + sp[75] * PI2[0][1][2] + sp[76] * PI3[0][1][2];
    A[1285] = sp[80] * PI0[0][1][5] + sp[75] * PI2[0][1][3] + sp[76] * PI3[0][1][3];
    A[1286] = sp[80] * PI0[0][1][6] + sp[74] * PI1[0][1][2] + sp[76] * PI3[0][1][4];
    A[1287] = sp[80] * PI0[0][1][7] + sp[74] * PI1[0][1][3] + sp[76] * PI3[0][1][5];
    A[1288] = sp[80] * PI0[0][1][8] + sp[74] * PI1[0][1][4] + sp[75] * PI2[0][1][4];
    A[1289] = sp[80] * PI0[0][1][9] + sp[74] * PI1[0][1][5] + sp[75] * PI2[0][1][5];
    A[1290] = sp[80] * PI0[0][1][10] + sp[74] * PI1[0][1][6] + sp[75] * PI2[0][1][6] + sp[76] * PI3[0][1][6];
    A[1291] = sp[80] * PI0[0][1][11] + sp[74] * PI1[0][1][7] + sp[75] * PI2[0][1][7] + sp[76] * PI3[0][1][7];
    A[1292] = sp[80] * PI0[0][1][12] + sp[74] * PI1[0][1][8] + sp[75] * PI2[0][1][8] + sp[76] * PI3[0][1][8];
    A[1293] = sp[80] * PI0[0][1][13] + sp[74] * PI1[0][1][9] + sp[75] * PI2[0][1][9] + sp[76] * PI3[0][1][9];
    A[1294] = sp[80] * PI0[0][1][14] + sp[74] * PI1[0][1][10] + sp[75] * PI2[0][1][10] + sp[76] * PI3[0][1][10];
    A[1295] = sp[80] * PI0[0][1][15] + sp[74] * PI1[0][1][11] + sp[75] * PI2[0][1][11] + sp[76] * PI3[0][1][11];
    A[1296] = sp[80] * PI0[0][1][16] + sp[74] * PI1[0][1][12] + sp[75] * PI2[0][1][12] + sp[76] * PI3[0][1][12];
    A[1297] = sp[80] * PI0[0][1][17] + sp[74] * PI1[0][1][13] + sp[75] * PI2[0][1][13] + sp[76] * PI3[0][1][13];
    A[1298] = sp[80] * PI0[0][1][18] + sp[74] * PI1[0][1][14] + sp[75] * PI2[0][1][14] + sp[76] * PI3[0][1][14];
    A[1299] = sp[80] * PI0[0][1][19] + sp[74] * PI1[0][1][15] + sp[75] * PI2[0][1][15] + sp[76] * PI3[0][1][15];
    std::fill(A + 1300, A + 1340, 0.0);
    A[1340] = sp[80] * PI0[0][2][0] + sp[75] * PI2[0][0][1] + sp[77] * PI4[0][1][0] + sp[78] * PI5[0][1][0];
    A[1341] = sp[80] * PI0[0][2][1] + sp[75] * PI2[0][1][1];
    A[1342] = sp[80] * PI0[0][2][2] + sp[77] * PI4[0][1][1];
    A[1343] = sp[80] * PI0[0][2][3] + sp[78] * PI5[0][1][1];
    A[1344] = sp[80] * PI0[0][2][4] + sp[77] * PI4[0][1][2] + sp[78] * PI5[0][1][2];
    A[1345] = sp[80] * PI0[0][2][5] + sp[77] * PI4[0][1][3] + sp[78] * PI5[0][1][3];
    A[1346] = sp[80] * PI0[0][2][6] + sp[75] * PI2[0][2][1] + sp[78] * PI5[0][1][4];
    A[1347] = sp[80] * PI0[0][2][7] + sp[75] * PI2[0][3][1] + sp[78] * PI5[0][1][5];
    A[1348] = sp[80] * PI0[0][2][8] + sp[75] * PI2[0][4][1] + sp[77] * PI4[0][1][4];
    A[1349] = sp[80] * PI0[0][2][9] + sp[75] * PI2[0][5][1] + sp[77] * PI4[0][1][5];
    A[1350] = sp[80] * PI0[0][2][10] + sp[75] * PI2[0][6][1] + sp[77] * PI4[0][1][6] + sp[78] * PI5[0][1][6];
    A[1351] = sp[80] * PI0[0][2][11] + sp[75] * PI2[0][7][1] + sp[77] * PI4[0][1][7] + sp[78] * PI5[0][1][7];
    A[1352] = sp[80] * PI0[0][2][12] + sp[75] * PI2[0][8][1] + sp[77] * PI4[0][1][8] + sp[78] * PI5[0][1][8];
    A[1353] = sp[80] * PI0[0][2][13] + sp[75] * PI2[0][9][1] + sp[77] * PI4[0][1][9] + sp[78] * PI5[0][1][9];
    A[1354] = sp[80] * PI0[0][2][14] + sp[75] * PI2[0][10][1] + sp[77] * PI4[0][1][10] + sp[78] * PI5[0][1][10];
    A[1355] = sp[80] * PI0[0][2][15] + sp[75] * PI2[0][11][1] + sp[77] * PI4[0][1][11] + sp[78] * PI5[0][1][11];
    A[1356] = sp[80] * PI0[0][2][16] + sp[75] * PI2[0][12][1] + sp[77] * PI4[0][1][12] + sp[78] * PI5[0][1][12];
    A[1357] = sp[80] * PI0[0][2][17] + sp[75] * PI2[0][13][1] + sp[77] * PI4[0][1][13] + sp[78] * PI5[0][1][13];
    A[1358] = sp[80] * PI0[0][2][18] + sp[75] * PI2[0][14][1] + sp[77] * PI4[0][1][14] + sp[78] * PI5[0][1][14];
    A[1359] = sp[80] * PI0[0][2][19] + sp[75] * PI2[0][15][1] + sp[77] * PI4[0][1][15] + sp[78] * PI5[0][1][15];
    std::fill(A + 1360, A + 1400, 0.0);
    A[1400] = sp[80] * PI0[0][3][0] + sp[76] * PI3[0][0][1] + sp[78] * PI5[0][0][1] + sp[79] * PI6[0][1][0];
    A[1401] = sp[80] * PI0[0][3][1] + sp[76] * PI3[0][1][1];
    A[1402] = sp[80] * PI0[0][3][2] + sp[78] * PI5[0][1][1];
    A[1403] = sp[80] * PI0[0][3][3] + sp[79] * PI6[0][1][1];
    A[1404] = sp[80] * PI0[0][3][4] + sp[78] * PI5[0][2][1] + sp[79] * PI6[0][1][2];
    A[1405] = sp[80] * PI0[0][3][5] + sp[78] * PI5[0][3][1] + sp[79] * PI6[0][1][3];
    A[1406] = sp[80] * PI0[0][3][6] + sp[76] * PI3[0][2][1] + sp[79] * PI6[0][1][4];
    A[1407] = sp[80] * PI0[0][3][7] + sp[76] * PI3[0][3][1] + sp[79] * PI6[0][1][5];
    A[1408] = sp[80] * PI0[0][3][8] + sp[76] * PI3[0][4][1] + sp[78] * PI5[0][4][1];
    A[1409] = sp[80] * PI0[0][3][9] + sp[76] * PI3[0][5][1] + sp[78] * PI5[0][5][1];
    A[1410] = sp[80] * PI0[0][3][10] + sp[76] * PI3[0][6][1] + sp[78] * PI5[0][6][1] + sp[79] * PI6[0][1][6];
    A[1411] = sp[80] * PI0[0][3][11] + sp[76] * PI3[0][7][1] + sp[78] * PI5[0][7][1] + sp[79] * PI6[0][1][7];
    A[1412] = sp[80] * PI0[0][3][12] + sp[76] * PI3[0][8][1] + sp[78] * PI5[0][8][1] + sp[79] * PI6[0][1][8];
    A[1413] = sp[80] * PI0[0][3][13] + sp[76] * PI3[0][9][1] + sp[78] * PI5[0][9][1] + sp[79] * PI6[0][1][9];
    A[1414] = sp[80] * PI0[0][3][14] + sp[76] * PI3[0][10][1] + sp[78] * PI5[0][10][1] + sp[79] * PI6[0][1][10];
    A[1415] = sp[80] * PI0[0][3][15] + sp[76] * PI3[0][11][1] + sp[78] * PI5[0][11][1] + sp[79] * PI6[0][1][11];
    A[1416] = sp[80] * PI0[0][3][16] + sp[76] * PI3[0][12][1] + sp[78] * PI5[0][12][1] + sp[79] * PI6[0][1][12];
    A[1417] = sp[80] * PI0[0][3][17] + sp[76] * PI3[0][13][1] + sp[78] * PI5[0][13][1] + sp[79] * PI6[0][1][13];
    A[1418] = sp[80] * PI0[0][3][18] + sp[76] * PI3[0][14][1] + sp[78] * PI5[0][14][1] + sp[79] * PI6[0][1][14];
    A[1419] = sp[80] * PI0[0][3][19] + sp[76] * PI3[0][15][1] + sp[78] * PI5[0][15][1] + sp[79] * PI6[0][1][15];
    std::fill(A + 1420, A + 1460, 0.0);
    A[1460] = sp[80] * PI0[0][4][0] + sp[75] * PI2[0][0][2] + sp[77] * PI4[0][2][0] + sp[78] * PI5[0][2][0] + sp[76] * PI3[0][0][2] + sp[78] * PI5[0][0][2] + sp[79] * PI6[0][2][0];
    A[1461] = sp[80] * PI0[0][4][1] + sp[75] * PI2[0][1][2] + sp[76] * PI3[0][1][2];
    A[1462] = sp[80] * PI0[0][4][2] + sp[77] * PI4[0][2][1] + sp[78] * PI5[0][1][2];
    A[1463] = sp[80] * PI0[0][4][3] + sp[78] * PI5[0][2][1] + sp[79] * PI6[0][2][1];
    A[1464] = sp[80] * PI0[0][4][4] + sp[77] * PI4[0][2][2] + sp[78] * PI5[0][2][2] + sp[78] * PI5[0][2][2] + sp[79] * PI6[0][2][2];
    A[1465] = sp[80] * PI0[0][4][5] + sp[77] * PI4[0][2][3] + sp[78] * PI5[0][2][3] + sp[78] * PI5[0][3][2] + sp[79] * PI6[0][2][3];
    A[1466] = sp[80] * PI0[0][4][6] + sp[75] * PI2[0][2][2] + sp[78] * PI5[0][2][4] + sp[76] * PI3[0][2][2] + sp[79] * PI6[0][2][4];
    A[1467] = sp[80] * PI0[0][4][7] + sp[75] * PI2[0][3][2] + sp[78] * PI5[0][2][5] + sp[76] * PI3[0][3][2] + sp[79] * PI6[0][2][5];
    A[1468] = sp[80] * PI0[0][4][8] + sp[75] * PI2[0][4][2] + sp[77] * PI4[0][2][4] + sp[76] * PI3[0][4][2] + sp[78] * PI5[0][4][2];
    A[1469] = sp[80] * PI0[0][4][9] + sp[75] * PI2[0][5][2] + sp[77] * PI4[0][2][5] + sp[76] * PI3[0][5][2] + sp[78] * PI5[0][5][2];
    A[1470] = sp[80] * PI0[0][4][10] + sp[75] * PI2[0][6][2] + sp[77] * PI4[0][2][6] + sp[78] * PI5[0][2][6] + sp[76] * PI3[0][6][2] + sp[78] * PI5[0][6][2] + sp[79] * PI6[0][2][6];
    A[1471] = sp[80] * PI0[0][4][11] + sp[75] * PI2[0][7][2] + sp[77] * PI4[0][2][7] + sp[78] * PI5[0][2][7] + sp[76] * PI3[0][7][2] + sp[78] * PI5[0][7][2] + sp[79] * PI6[0][2][7];
    A[1472] = sp[80] * PI0[0][4][12] + sp[75] * PI2[0][8][2] + sp[77] * PI4[0][2][8] + sp[78] * PI5[0][2][8] + sp[76] * PI3[0][8][2] + sp[78] * PI5[0][8][2] + sp[79] * PI6[0][2][8];
    A[1473] = sp[80] * PI0[0][4][13] + sp[75] * PI2[0][9][2] + sp[77] * PI4[0][2][9] + sp[78] * PI5[0][2][9] + sp[76] * PI3[0][9][2] + sp[78] * PI5[0][9][2] + sp[79] * PI6[0][2][9];
    A[1474] = sp[80] * PI0[0][4][14] + sp[75] * PI2[0][10][2] + sp[77] * PI4[0][2][10] + sp[78] * PI5[0][2][10] + sp[76] * PI3[0][10][2] + sp[78] * PI5[0][10][2] + sp[79] * PI6[0][2][10];
    A[1475] = sp[80] * PI0[0][4][15] + sp[75] * PI2[0][11][2] + sp[77] * PI4[0][2][11] + sp[78] * PI5[0][2][11] + sp[76] * PI3[0][11][2] + sp[78] * PI5[0][11][2] + sp[79] * PI6[0][2][11];
    A[1476] = sp[80] * PI0[0][4][16] + sp[75] * PI2[0][12][2] + sp[77] * PI4[0][2][12] + sp[78] * PI5[0][2][12] + sp[76] * PI3[0][12][2] + sp[78] * PI5[0][12][2] + sp[79] * PI6[0][2][12];
    A[1477] = sp[80] * PI0[0][4][17] + sp[75] * PI2[0][13][2] + sp[77] * PI4[0][2][13] + sp[78] * PI5[0][2][13] + sp[76] * PI3[0][13][2] + sp[78] * PI5[0][13][2] + sp[79] * PI6[0][2][13];
    A[1478] = sp[80] * PI0[0][4][18] + sp[75] * PI2[0][14][2] + sp[77] * PI4[0][2][14] + sp[78] * PI5[0][2][14] + sp[76] * PI3[0][14][2] + sp[78] * PI5[0][14][2] + sp[79] * PI6[0][2][14];
    A[1479] = sp[80] * PI0[0][4][19] + sp[75] * PI2[0][15][2] + sp[77] * PI4[0][2][15] + sp[78] * PI5[0][2][15] + sp[76] * PI3[0][15][2] + sp[78] * PI5[0][15][2] + sp[79] * PI6[0][2][15];
    std::fill(A + 1480, A + 1520, 0.0);
    A[1520] = sp[80] * PI0[0][5][0] + sp[75] * PI2[0][0][3] + sp[77] * PI4[0][3][0] + sp[78] * PI5[0][3][0] + sp[76] * PI3[0][0][3] + sp[78] * PI5[0][0][3] + sp[79] * PI6[0][3][0];
    A[1521] = sp[80] * PI0[0][5][1] + sp[75] * PI2[0][1][3] + sp[76] * PI3[0][1][3];
    A[1522] = sp[80] * PI0[0][5][2] + sp[77] * PI4[0][3][1] + sp[78] * PI5[0][1][3];
    A[1523] = sp[80] * PI0[0][5][3] + sp[78] * PI5[0][3][1] + sp[79] * PI6[0][3][1];
    A[1524] = sp[80] * PI0[0][5][4] + sp[77] * PI4[0][3][2] + sp[78] * PI5[0][3][2] + sp[78] * PI5[0][2][3] + sp[79] * PI6[0][3][2];
    A[1525] = sp[80] * PI0[0][5][5] + sp[77] * PI4[0][3][3] + sp[78] * PI5[0][3][3] + sp[78] * PI5[0][3][3] + sp[79] * PI6[0][3][3];
    A[1526] = sp[80] * PI0[0][5][6] + sp[75] * PI2[0][2][3] + sp[78] * PI5[0][3][4] + sp[76] * PI3[0][2][3] + sp[79] * PI6[0][3][4];
    A[1527] = sp[80] * PI0[0][5][7] + sp[75] * PI2[0][3][3] + sp[78] * PI5[0][3][5] + sp[76] * PI3[0][3][3] + sp[79] * PI6[0][3][5];
    A[1528] = sp[80] * PI0[0][5][8] + sp[75] * PI2[0][4][3] + sp[77] * PI4[0][3][4] + sp[76] * PI3[0][4][3] + sp[78] * PI5[0][4][3];
    A[1529] = sp[80] * PI0[0][5][9] + sp[75] * PI2[0][5][3] + sp[77] * PI4[0][3][5] + sp[76] * PI3[0][5][3] + sp[78] * PI5[0][5][3];
    A[1530] = sp[80] * PI0[0][5][10] + sp[75] * PI2[0][6][3] + sp[77] * PI4[0][3][6] + sp[78] * PI5[0][3][6] + sp[76] * PI3[0][6][3] + sp[78] * PI5[0][6][3] + sp[79] * PI6[0][3][6];
    A[1531] = sp[80] * PI0[0][5][11] + sp[75] * PI2[0][7][3] + sp[77] * PI4[0][3][7] + sp[78] * PI5[0][3][7] + sp[76] * PI3[0][7][3] + sp[78] * PI5[0][7][3] + sp[79] * PI6[0][3][7];
    A[1532] = sp[80] * PI0[0][5][12] + sp[75] * PI2[0][8][3] + sp[77] * PI4[0][3][8] + sp[78] * PI5[0][3][8] + sp[76] * PI3[0][8][3] + sp[78] * PI5[0][8][3] + sp[79] * PI6[0][3][8];
    A[1533] = sp[80] * PI0[0][5][13] + sp[75] * PI2[0][9][3] + sp[77] * PI4[0][3][9] + sp[78] * PI5[0][3][9] + sp[76] * PI3[0][9][3] + sp[78] * PI5[0][9][3] + sp[79] * PI6[0][3][9];
    A[1534] = sp[80] * PI0[0][5][14] + sp[75] * PI2[0][10][3] + sp[77] * PI4[0][3][10] + sp[78] * PI5[0][3][10] + sp[76] * PI3[0][10][3] + sp[78] * PI5[0][10][3] + sp[79] * PI6[0][3][10];
    A[1535] = sp[80] * PI0[0][5][15] + sp[75] * PI2[0][11][3] + sp[77] * PI4[0][3][11] + sp[78] * PI5[0][3][11] + sp[76] * PI3[0][11][3] + sp[78] * PI5[0][11][3] + sp[79] * PI6[0][3][11];
    A[1536] = sp[80] * PI0[0][5][16] + sp[75] * PI2[0][12][3] + sp[77] * PI4[0][3][12] + sp[78] * PI5[0][3][12] + sp[76] * PI3[0][12][3] + sp[78] * PI5[0][12][3] + sp[79] * PI6[0][3][12];
    A[1537] = sp[80] * PI0[0][5][17] + sp[75] * PI2[0][13][3] + sp[77] * PI4[0][3][13] + sp[78] * PI5[0][3][13] + sp[76] * PI3[0][13][3] + sp[78] * PI5[0][13][3] + sp[79] * PI6[0][3][13];
    A[1538] = sp[80] * PI0[0][5][18] + sp[75] * PI2[0][14][3] + sp[77] * PI4[0][3][14] + sp[78] * PI5[0][3][14] + sp[76] * PI3[0][14][3] + sp[78] * PI5[0][14][3] + sp[79] * PI6[0][3][14];
    A[1539] = sp[80] * PI0[0][5][19] + sp[75] * PI2[0][15][3] + sp[77] * PI4[0][3][15] + sp[78] * PI5[0][3][15] + sp[76] * PI3[0][15][3] + sp[78] * PI5[0][15][3] + sp[79] * PI6[0][3][15];
    std::fill(A + 1540, A + 1580, 0.0);
    A[1580] = sp[80] * PI0[0][6][0] + sp[74] * PI1[0][2][0] + sp[75] * PI2[0][2][0] + sp[76] * PI3[0][2][0] + sp[76] * PI3[0][0][4] + sp[78] * PI5[0][0][4] + sp[79] * PI6[0][4][0];
    A[1581] = sp[80] * PI0[0][6][1] + sp[74] * PI1[0][2][1] + sp[76] * PI3[0][1][4];
    A[1582] = sp[80] * PI0[0][6][2] + sp[75] * PI2[0][2][1] + sp[78] * PI5[0][1][4];
    A[1583] = sp[80] * PI0[0][6][3] + sp[76] * PI3[0][2][1] + sp[79] * PI6[0][4][1];
    A[1584] = sp[80] * PI0[0][6][4] + sp[75] * PI2[0][2][2] + sp[76] * PI3[0][2][2] + sp[78] * PI5[0][2][4] + sp[79] * PI6[0][4][2];
    A[1585] = sp[80] * PI0[0][6][5] + sp[75] * PI2[0][2][3] + sp[76] * PI3[0][2][3] + sp[78] * PI5[0][3][4] + sp[79] * PI6[0][4][3];
    A[1586] = sp[80] * PI0[0][6][6] + sp[74] * PI1[0][2][2] + sp[76] * PI3[0][2][4] + sp[76] * PI3[0][2][4] + sp[79] * PI6[0][4][4];
    A[1587] = sp[80] * PI0[0][6][7] + sp[74] * PI1[0][2][3] + sp[76] * PI3[0][2][5] + sp[76] * PI3[0][3][4] + sp[79] * PI6[0][4][5];
    A[1588] = sp[80] * PI0[0][6][8] + sp[74] * PI1[0][2][4] + sp[75] * PI2[0][2][4] + sp[76] * PI3[0][4][4] + sp[78] * PI5[0][4][4];
    A[1589] = sp[80] * PI0[0][6][9] + sp[74] * PI1[0][2][5] + sp[75] * PI2[0][2][5] + sp[76] * PI3[0][5][4] + sp[78] * PI5[0][5][4];
    A[1590] = sp[80] * PI0[0][6][10] + sp[74] * PI1[0][2][6] + sp[75] * PI2[0][2][6] + sp[76] * PI3[0][2][6] + sp[76] * PI3[0][6][4] + sp[78] * PI5[0][6][4] + sp[79] * PI6[0][4][6];
    A[1591] = sp[80] * PI0[0][6][11] + sp[74] * PI1[0][2][7] + sp[75] * PI2[0][2][7] + sp[76] * PI3[0][2][7] + sp[76] * PI3[0][7][4] + sp[78] * PI5[0][7][4] + sp[79] * PI6[0][4][7];
    A[1592] = sp[80] * PI0[0][6][12] + sp[74] * PI1[0][2][8] + sp[75] * PI2[0][2][8] + sp[76] * PI3[0][2][8] + sp[76] * PI3[0][8][4] + sp[78] * PI5[0][8][4] + sp[79] * PI6[0][4][8];
    A[1593] = sp[80] * PI0[0][6][13] + sp[74] * PI1[0][2][9] + sp[75] * PI2[0][2][9] + sp[76] * PI3[0][2][9] + sp[76] * PI3[0][9][4] + sp[78] * PI5[0][9][4] + sp[79] * PI6[0][4][9];
    A[1594] = sp[80] * PI0[0][6][14] + sp[74] * PI1[0][2][10] + sp[75] * PI2[0][2][10] + sp[76] * PI3[0][2][10] + sp[76] * PI3[0][10][4] + sp[78] * PI5[0][10][4] + sp[79] * PI6[0][4][10];
    A[1595] = sp[80] * PI0[0][6][15] + sp[74] * PI1[0][2][11] + sp[75] * PI2[0][2][11] + sp[76] * PI3[0][2][11] + sp[76] * PI3[0][11][4] + sp[78] * PI5[0][11][4] + sp[79] * PI6[0][4][11];
    A[1596] = sp[80] * PI0[0][6][16] + sp[74] * PI1[0][2][12] + sp[75] * PI2[0][2][12] + sp[76] * PI3[0][2][12] + sp[76] * PI3[0][12][4] + sp[78] * PI5[0][12][4] + sp[79] * PI6[0][4][12];
    A[1597] = sp[80] * PI0[0][6][17] + sp[74] * PI1[0][2][13] + sp[75] * PI2[0][2][13] + sp[76] * PI3[0][2][13] + sp[76] * PI3[0][13][4] + sp[78] * PI5[0][13][4] + sp[79] * PI6[0][4][13];
    A[1598] = sp[80] * PI0[0][6][18] + sp[74] * PI1[0][2][14] + sp[75] * PI2[0][2][14] + sp[76] * PI3[0][2][14] + sp[76] * PI3[0][14][4] + sp[78] * PI5[0][14][4] + sp[79] * PI6[0][4][14];
    A[1599] = sp[80] * PI0[0][6][19] + sp[74] * PI1[0][2][15] + sp[75] * PI2[0][2][15] + sp[76] * PI3[0][2][15] + sp[76] * PI3[0][15][4] + sp[78] * PI5[0][15][4] + sp[79] * PI6[0][4][15];
    std::fill(A + 1600, A + 1640, 0.0);
    A[1640] = sp[80] * PI0[0][7][0] + sp[74] * PI1[0][3][0] + sp[75] * PI2[0][3][0] + sp[76] * PI3[0][3][0] + sp[76] * PI3[0][0][5] + sp[78] * PI5[0][0][5] + sp[79] * PI6[0][5][0];
    A[1641] = sp[80] * PI0[0][7][1] + sp[74] * PI1[0][3][1] + sp[76] * PI3[0][1][5];
    A[1642] = sp[80] * PI0[0][7][2] + sp[75] * PI2[0][3][1] + sp[78] * PI5[0][1][5];
    A[1643] = sp[80] * PI0[0][7][3] + sp[76] * PI3[0][3][1] + sp[79] * PI6[0][5][1];
    A[1644] = sp[80] * PI0[0][7][4] + sp[75] * PI2[0][3][2] + sp[76] * PI3[0][3][2] + sp[78] * PI5[0][2][5] + sp[79] * PI6[0][5][2];
    A[1645] = sp[80] * PI0[0][7][5] + sp[75] * PI2[0][3][3] + sp[76] * PI3[0][3][3] + sp[78] * PI5[0][3][5] + sp[79] * PI6[0][5][3];
    A[1646] = sp[80] * PI0[0][7][6] + sp[74] * PI1[0][3][2] + sp[76] * PI3[0][3][4] + sp[76] * PI3[0][2][5] + sp[79] * PI6[0][5][4];
    A[1647] = sp[80] * PI0[0][7][7] + sp[74] * PI1[0][3][3] + sp[76] * PI3[0][3][5] + sp[76] * PI3[0][3][5] + sp[79] * PI6[0][5][5];
    A[1648] = sp[80] * PI0[0][7][8] + sp[74] * PI1[0][3][4] + sp[75] * PI2[0][3][4] + sp[76] * PI3[0][4][5] + sp[78] * PI5[0][4][5];
    A[1649] = sp[80] * PI0[0][7][9] + sp[74] * PI1[0][3][5] + sp[75] * PI2[0][3][5] + sp[76] * PI3[0][5][5] + sp[78] * PI5[0][5][5];
    A[1650] = sp[80] * PI0[0][7][10] + sp[74] * PI1[0][3][6] + sp[75] * PI2[0][3][6] + sp[76] * PI3[0][3][6] + sp[76] * PI3[0][6][5] + sp[78] * PI5[0][6][5] + sp[79] * PI6[0][5][6];
    A[1651] = sp[80] * PI0[0][7][11] + sp[74] * PI1[0][3][7] + sp[75] * PI2[0][3][7] + sp[76] * PI3[0][3][7] + sp[76] * PI3[0][7][5] + sp[78] * PI5[0][7][5] + sp[79] * PI6[0][5][7];
    A[1652] = sp[80] * PI0[0][7][12] + sp[74] * PI1[0][3][8] + sp[75] * PI2[0][3][8] + sp[76] * PI3[0][3][8] + sp[76] * PI3[0][8][5] + sp[78] * PI5[0][8][5] + sp[79] * PI6[0][5][8];
    A[1653] = sp[80] * PI0[0][7][13] + sp[74] * PI1[0][3][9] + sp[75] * PI2[0][3][9] + sp[76] * PI3[0][3][9] + sp[76] * PI3[0][9][5] + sp[78] * PI5[0][9][5] + sp[79] * PI6[0][5][9];
    A[1654] = sp[80] * PI0[0][7][14] + sp[74] * PI1[0][3][10] + sp[75] * PI2[0][3][10] + sp[76] * PI3[0][3][10] + sp[76] * PI3[0][10][5] + sp[78] * PI5[0][10][5] + sp[79] * PI6[0][5][10];
    A[1655] = sp[80] * PI0[0][7][15] + sp[74] * PI1[0][3][11] + sp[75] * PI2[0][3][11] + sp[76] * PI3[0][3][11] + sp[76] * PI3[0][11][5] + sp[78] * PI5[0][11][5] + sp[79] * PI6[0][5][11];
    A[1656] = sp[80] * PI0[0][7][16] + sp[74] * PI1[0][3][12] + sp[75] * PI2[0][3][12] + sp[76] * PI3[0][3][12] + sp[76] * PI3[0][12][5] + sp[78] * PI5[0][12][5] + sp[79] * PI6[0][5][12];
    A[1657] = sp[80] * PI0[0][7][17] + sp[74] * PI1[0][3][13] + sp[75] * PI2[0][3][13] + sp[76] * PI3[0][3][13] + sp[76] * PI3[0][13][5] + sp[78] * PI5[0][13][5] + sp[79] * PI6[0][5][13];
    A[1658] = sp[80] * PI0[0][7][18] + sp[74] * PI1[0][3][14] + sp[75] * PI2[0][3][14] + sp[76] * PI3[0][3][14] + sp[76] * PI3[0][14][5] + sp[78] * PI5[0][14][5] + sp[79] * PI6[0][5][14];
    A[1659] = sp[80] * PI0[0][7][19] + sp[74] * PI1[0][3][15] + sp[75] * PI2[0][3][15] + sp[76] * PI3[0][3][15] + sp[76] * PI3[0][15][5] + sp[78] * PI5[0][15][5] + sp[79] * PI6[0][5][15];
    std::fill(A + 1660, A + 1700, 0.0);
    A[1700] = sp[80] * PI0[0][8][0] + sp[74] * PI1[0][4][0] + sp[75] * PI2[0][4][0] + sp[76] * PI3[0][4][0] + sp[75] * PI2[0][0][4] + sp[77] * PI4[0][4][0] + sp[78] * PI5[0][4][0];
    A[1701] = sp[80] * PI0[0][8][1] + sp[74] * PI1[0][4][1] + sp[75] * PI2[0][1][4];
    A[1702] = sp[80] * PI0[0][8][2] + sp[75] * PI2[0][4][1] + sp[77] * PI4[0][4][1];
    A[1703] = sp[80] * PI0[0][8][3] + sp[76] * PI3[0][4][1] + sp[78] * PI5[0][4][1];
    A[1704] = sp[80] * PI0[0][8][4] + sp[75] * PI2[0][4][2] + sp[76] * PI3[0][4][2] + sp[77] * PI4[0][4][2] + sp[78] * PI5[0][4][2];
    A[1705] = sp[80] * PI0[0][8][5] + sp[75] * PI2[0][4][3] + sp[76] * PI3[0][4][3] + sp[77] * PI4[0][4][3] + sp[78] * PI5[0][4][3];
    A[1706] = sp[80] * PI0[0][8][6] + sp[74] * PI1[0][4][2] + sp[76] * PI3[0][4][4] + sp[75] * PI2[0][2][4] + sp[78] * PI5[0][4][4];
    A[1707] = sp[80] * PI0[0][8][7] + sp[74] * PI1[0][4][3] + sp[76] * PI3[0][4][5] + sp[75] * PI2[0][3][4] + sp[78] * PI5[0][4][5];
    A[1708] = sp[80] * PI0[0][8][8] + sp[74] * PI1[0][4][4] + sp[75] * PI2[0][4][4] + sp[75] * PI2[0][4][4] + sp[77] * PI4[0][4][4];
    A[1709] = sp[80] * PI0[0][8][9] + sp[74] * PI1[0][4][5] + sp[75] * PI2[0][4][5] + sp[75] * PI2[0][5][4] + sp[77] * PI4[0][4][5];
    A[1710] = sp[80] * PI0[0][8][10] + sp[74] * PI1[0][4][6] + sp[75] * PI2[0][4][6] + sp[76] * PI3[0][4][6] + sp[75] * PI2[0][6][4] + sp[77] * PI4[0][4][6] + sp[78] * PI5[0][4][6];
    A[1711] = sp[80] * PI0[0][8][11] + sp[74] * PI1[0][4][7] + sp[75] * PI2[0][4][7] + sp[76] * PI3[0][4][7] + sp[75] * PI2[0][7][4] + sp[77] * PI4[0][4][7] + sp[78] * PI5[0][4][7];
    A[1712] = sp[80] * PI0[0][8][12] + sp[74] * PI1[0][4][8] + sp[75] * PI2[0][4][8] + sp[76] * PI3[0][4][8] + sp[75] * PI2[0][8][4] + sp[77] * PI4[0][4][8] + sp[78] * PI5[0][4][8];
    A[1713] = sp[80] * PI0[0][8][13] + sp[74] * PI1[0][4][9] + sp[75] * PI2[0][4][9] + sp[76] * PI3[0][4][9] + sp[75] * PI2[0][9][4] + sp[77] * PI4[0][4][9] + sp[78] * PI5[0][4][9];
    A[1714] = sp[80] * PI0[0][8][14] + sp[74] * PI1[0][4][10] + sp[75] * PI2[0][4][10] + sp[76] * PI3[0][4][10] + sp[75] * PI2[0][10][4] + sp[77] * PI4[0][4][10] + sp[78] * PI5[0][4][10];
    A[1715] = sp[80] * PI0[0][8][15] + sp[74] * PI1[0][4][11] + sp[75] * PI2[0][4][11] + sp[76] * PI3[0][4][11] + sp[75] * PI2[0][11][4] + sp[77] * PI4[0][4][11] + sp[78] * PI5[0][4][11];
    A[1716] = sp[80] * PI0[0][8][16] + sp[74] * PI1[0][4][12] + sp[75] * PI2[0][4][12] + sp[76] * PI3[0][4][12] + sp[75] * PI2[0][12][4] + sp[77] * PI4[0][4][12] + sp[78] * PI5[0][4][12];
    A[1717] = sp[80] * PI0[0][8][17] + sp[74] * PI1[0][4][13] + sp[75] * PI2[0][4][13] + sp[76] * PI3[0][4][13] + sp[75] * PI2[0][13][4] + sp[77] * PI4[0][4][13] + sp[78] * PI5[0][4][13];
    A[1718] = sp[80] * PI0[0][8][18] + sp[74] * PI1[0][4][14] + sp[75] * PI2[0][4][14] + sp[76] * PI3[0][4][14] + sp[75] * PI2[0][14][4] + sp[77] * PI4[0][4][14] + sp[78] * PI5[0][4][14];
    A[1719] = sp[80] * PI0[0][8][19] + sp[74] * PI1[0][4][15] + sp[75] * PI2[0][4][15] + sp[76] * PI3[0][4][15] + sp[75] * PI2[0][15][4] + sp[77] * PI4[0][4][15] + sp[78] * PI5[0][4][15];
    std::fill(A + 1720, A + 1760, 0.0);
    A[1760] = sp[80] * PI0[0][9][0] + sp[74] * PI1[0][5][0] + sp[75] * PI2[0][5][0] + sp[76] * PI3[0][5][0] + sp[75] * PI2[0][0][5] + sp[77] * PI4[0][5][0] + sp[78] * PI5[0][5][0];
    A[1761] = sp[80] * PI0[0][9][1] + sp[74] * PI1[0][5][1] + sp[75] * PI2[0][1][5];
    A[1762] = sp[80] * PI0[0][9][2] + sp[75] * PI2[0][5][1] + sp[77] * PI4[0][5][1];
    A[1763] = sp[80] * PI0[0][9][3] + sp[76] * PI3[0][5][1] + sp[78] * PI5[0][5][1];
    A[1764] = sp[80] * PI0[0][9][4] + sp[75] * PI2[0][5][2] + sp[76] * PI3[0][5][2] + sp[77] * PI4[0][5][2] + sp[78] * PI5[0][5][2];
    A[1765] = sp[80] * PI0[0][9][5] + sp[75] * PI2[0][5][3] + sp[76] * PI3[0][5][3] + sp[77] * PI4[0][5][3] + sp[78] * PI5[0][5][3];
    A[1766] = sp[80] * PI0[0][9][6] + sp[74] * PI1[0][5][2] + sp[76] * PI3[0][5][4] + sp[75] * PI2[0][2][5] + sp[78] * PI5[0][5][4];
    A[1767] = sp[80] * PI0[0][9][7] + sp[74] * PI1[0][5][3] + sp[76] * PI3[0][5][5] + sp[75] * PI2[0][3][5] + sp[78] * PI5[0][5][5];
    A[1768] = sp[80] * PI0[0][9][8] + sp[74] * PI1[0][5][4] + sp[75] * PI2[0][5][4] + sp[75] * PI2[0][4][5] + sp[77] * PI4[0][5][4];
    A[1769] = sp[80] * PI0[0][9][9] + sp[74] * PI1[0][5][5] + sp[75] * PI2[0][5][5] + sp[75] * PI2[0][5][5] + sp[77] * PI4[0][5][5];
    A[1770] = sp[80] * PI0[0][9][10] + sp[74] * PI1[0][5][6] + sp[75] * PI2[0][5][6] + sp[76] * PI3[0][5][6] + sp[75] * PI2[0][6][5] + sp[77] * PI4[0][5][6] + sp[78] * PI5[0][5][6];
    A[1771] = sp[80] * PI0[0][9][11] + sp[74] * PI1[0][5][7] + sp[75] * PI2[0][5][7] + sp[76] * PI3[0][5][7] + sp[75] * PI2[0][7][5] + sp[77] * PI4[0][5][7] + sp[78] * PI5[0][5][7];
    A[1772] = sp[80] * PI0[0][9][12] + sp[74] * PI1[0][5][8] + sp[75] * PI2[0][5][8] + sp[76] * PI3[0][5][8] + sp[75] * PI2[0][8][5] + sp[77] * PI4[0][5][8] + sp[78] * PI5[0][5][8];
    A[1773] = sp[80] * PI0[0][9][13] + sp[74] * PI1[0][5][9] + sp[75] * PI2[0][5][9] + sp[76] * PI3[0][5][9] + sp[75] * PI2[0][9][5] + sp[77] * PI4[0][5][9] + sp[78] * PI5[0][5][9];
    A[1774] = sp[80] * PI0[0][9][14] + sp[74] * PI1[0][5][10] + sp[75] * PI2[0][5][10] + sp[76] * PI3[0][5][10] + sp[75] * PI2[0][10][5] + sp[77] * PI4[0][5][10] + sp[78] * PI5[0][5][10];
    A[1775] = sp[80] * PI0[0][9][15] + sp[74] * PI1[0][5][11] + sp[75] * PI2[0][5][11] + sp[76] * PI3[0][5][11] + sp[75] * PI2[0][11][5] + sp[77] * PI4[0][5][11] + sp[78] * PI5[0][5][11];
    A[1776] = sp[80] * PI0[0][9][16] + sp[74] * PI1[0][5][12] + sp[75] * PI2[0][5][12] + sp[76] * PI3[0][5][12] + sp[75] * PI2[0][12][5] + sp[77] * PI4[0][5][12] + sp[78] * PI5[0][5][12];
    A[1777] = sp[80] * PI0[0][9][17] + sp[74] * PI1[0][5][13] + sp[75] * PI2[0][5][13] + sp[76] * PI3[0][5][13] + sp[75] * PI2[0][13][5] + sp[77] * PI4[0][5][13] + sp[78] * PI5[0][5][13];
    A[1778] = sp[80] * PI0[0][9][18] + sp[74] * PI1[0][5][14] + sp[75] * PI2[0][5][14] + sp[76] * PI3[0][5][14] + sp[75] * PI2[0][14][5] + sp[77] * PI4[0][5][14] + sp[78] * PI5[0][5][14];
    A[1779] = sp[80] * PI0[0][9][19] + sp[74] * PI1[0][5][15] + sp[75] * PI2[0][5][15] + sp[76] * PI3[0][5][15] + sp[75] * PI2[0][15][5] + sp[77] * PI4[0][5][15] + sp[78] * PI5[0][5][15];
    std::fill(A + 1780, A + 1820, 0.0);
    A[1820] = sp[80] * PI0[0][10][0] + sp[74] * PI1[0][6][0] + sp[75] * PI2[0][6][0] + sp[76] * PI3[0][6][0] + sp[75] * PI2[0][0][6] + sp[77] * PI4[0][6][0] + sp[78] * PI5[0][6][0] + sp[76] * PI3[0][0][6] + sp[78] * PI5[0][0][6] + sp[79] * PI6[0][6][0];
    A[1821] = sp[80] * PI0[0][10][1] + sp[74] * PI1[0][6][1] + sp[75] * PI2[0][1][6] + sp[76] * PI3[0][1][6];
    A[1822] = sp[80] * PI0[0][10][2] + sp[75] * PI2[0][6][1] + sp[77] * PI4[0][6][1] + sp[78] * PI5[0][1][6];
    A[1823] = sp[80] * PI0[0][10][3] + sp[76] * PI3[0][6][1] + sp[78] * PI5[0][6][1] + sp[79] * PI6[0][6][1];
    A[1824] = sp[80] * PI0[0][10][4] + sp[75] * PI2[0][6][2] + sp[76] * PI3[0][6][2] + sp[77] * PI4[0][6][2] + sp[78] * PI5[0][6][2] + sp[78] * PI5[0][2][6] + sp[79] * PI6[0][6][2];
    A[1825] = sp[80] * PI0[0][10][5] + sp[75] * PI2[0][6][3] + sp[76] * PI3[0][6][3] + sp[77] * PI4[0][6][3] + sp[78] * PI5[0][6][3] + sp[78] * PI5[0][3][6] + sp[79] * PI6[0][6][3];
    A[1826] = sp[80] * PI0[0][10][6] + sp[74] * PI1[0][6][2] + sp[76] * PI3[0][6][4] + sp[75] * PI2[0][2][6] + sp[78] * PI5[0][6][4] + sp[76] * PI3[0][2][6] + sp[79] * PI6[0][6][4];
    A[1827] = sp[80] * PI0[0][10][7] + sp[74] * PI1[0][6][3] + sp[76] * PI3[0][6][5] + sp[75] * PI2[0][3][6] + sp[78] * PI5[0][6][5] + sp[76] * PI3[0][3][6] + sp[79] * PI6[0][6][5];
    A[1828] = sp[80] * PI0[0][10][8] + sp[74] * PI1[0][6][4] + sp[75] * PI2[0][6][4] + sp[75] * PI2[0][4][6] + sp[77] * PI4[0][6][4] + sp[76] * PI3[0][4][6] + sp[78] * PI5[0][4][6];
    A[1829] = sp[80] * PI0[0][10][9] + sp[74] * PI1[0][6][5] + sp[75] * PI2[0][6][5] + sp[75] * PI2[0][5][6] + sp[77] * PI4[0][6][5] + sp[76] * PI3[0][5][6] + sp[78] * PI5[0][5][6];
    A[1830] = sp[80] * PI0[0][10][10] + sp[74] * PI1[0][6][6] + sp[75] * PI2[0][6][6] + sp[76] * PI3[0][6][6] + sp[75] * PI2[0][6][6] + sp[77] * PI4[0][6][6] + sp[78] * PI5[0][6][6] + sp[76] * PI3[0][6][6] + sp[78] * PI5[0][6][6] + sp[79] * PI6[0][6][6];
    A[1831] = sp[80] * PI0[0][10][11] + sp[74] * PI1[0][6][7] + sp[75] * PI2[0][6][7] + sp[76] * PI3[0][6][7] + sp[75] * PI2[0][7][6] + sp[77] * PI4[0][6][7] + sp[78] * PI5[0][6][7] + sp[76] * PI3[0][7][6] + sp[78] * PI5[0][7][6] + sp[79] * PI6[0][6][7];
    A[1832] = sp[80] * PI0[0][10][12] + sp[74] * PI1[0][6][8] + sp[75] * PI2[0][6][8] + sp[76] * PI3[0][6][8] + sp[75] * PI2[0][8][6] + sp[77] * PI4[0][6][8] + sp[78] * PI5[0][6][8] + sp[76] * PI3[0][8][6] + sp[78] * PI5[0][8][6] + sp[79] * PI6[0][6][8];
    A[1833] = sp[80] * PI0[0][10][13] + sp[74] * PI1[0][6][9] + sp[75] * PI2[0][6][9] + sp[76] * PI3[0][6][9] + sp[75] * PI2[0][9][6] + sp[77] * PI4[0][6][9] + sp[78] * PI5[0][6][9] + sp[76] * PI3[0][9][6] + sp[78] * PI5[0][9][6] + sp[79] * PI6[0][6][9];
    A[1834] = sp[80] * PI0[0][10][14] + sp[74] * PI1[0][6][10] + sp[75] * PI2[0][6][10] + sp[76] * PI3[0][6][10] + sp[75] * PI2[0][10][6] + sp[77] * PI4[0][6][10] + sp[78] * PI5[0][6][10] + sp[76] * PI3[0][10][6] + sp[78] * PI5[0][10][6] + sp[79] * PI6[0][6][10];
    A[1835] = sp[80] * PI0[0][10][15] + sp[74] * PI1[0][6][11] + sp[75] * PI2[0][6][11] + sp[76] * PI3[0][6][11] + sp[75] * PI2[0][11][6] + sp[77] * PI4[0][6][11] + sp[78] * PI5[0][6][11] + sp[76] * PI3[0][11][6] + sp[78] * PI5[0][11][6] + sp[79] * PI6[0][6][11];
    A[1836] = sp[80] * PI0[0][10][16] + sp[74] * PI1[0][6][12] + sp[75] * PI2[0][6][12] + sp[76] * PI3[0][6][12] + sp[75] * PI2[0][12][6] + sp[77] * PI4[0][6][12] + sp[78] * PI5[0][6][12] + sp[76] * PI3[0][12][6] + sp[78] * PI5[0][12][6] + sp[79] * PI6[0][6][12];
    A[1837] = sp[80] * PI0[0][10][17] + sp[74] * PI1[0][6][13] + sp[75] * PI2[0][6][13] + sp[76] * PI3[0][6][13] + sp[75] * PI2[0][13][6] + sp[77] * PI4[0][6][13] + sp[78] * PI5[0][6][13] + sp[76] * PI3[0][13][6] + sp[78] * PI5[0][13][6] + sp[79] * PI6[0][6][13];
    A[1838] = sp[80] * PI0[0][10][18] + sp[74] * PI1[0][6][14] + sp[75] * PI2[0][6][14] + sp[76] * PI3[0][6][14] + sp[75] * PI2[0][14][6] + sp[77] * PI4[0][6][14] + sp[78] * PI5[0][6][14] + sp[76] * PI3[0][14][6] + sp[78] * PI5[0][14][6] + sp[79] * PI6[0][6][14];
    A[1839] = sp[80] * PI0[0][10][19] + sp[74] * PI1[0][6][15] + sp[75] * PI2[0][6][15] + sp[76] * PI3[0][6][15] + sp[75] * PI2[0][15][6] + sp[77] * PI4[0][6][15] + sp[78] * PI5[0][6][15] + sp[76] * PI3[0][15][6] + sp[78] * PI5[0][15][6] + sp[79] * PI6[0][6][15];
    std::fill(A + 1840, A + 1880, 0.0);
    A[1880] = sp[80] * PI0[0][11][0] + sp[74] * PI1[0][7][0] + sp[75] * PI2[0][7][0] + sp[76] * PI3[0][7][0] + sp[75] * PI2[0][0][7] + sp[77] * PI4[0][7][0] + sp[78] * PI5[0][7][0] + sp[76] * PI3[0][0][7] + sp[78] * PI5[0][0][7] + sp[79] * PI6[0][7][0];
    A[1881] = sp[80] * PI0[0][11][1] + sp[74] * PI1[0][7][1] + sp[75] * PI2[0][1][7] + sp[76] * PI3[0][1][7];
    A[1882] = sp[80] * PI0[0][11][2] + sp[75] * PI2[0][7][1] + sp[77] * PI4[0][7][1] + sp[78] * PI5[0][1][7];
    A[1883] = sp[80] * PI0[0][11][3] + sp[76] * PI3[0][7][1] + sp[78] * PI5[0][7][1] + sp[79] * PI6[0][7][1];
    A[1884] = sp[80] * PI0[0][11][4] + sp[75] * PI2[0][7][2] + sp[76] * PI3[0][7][2] + sp[77] * PI4[0][7][2] + sp[78] * PI5[0][7][2] + sp[78] * PI5[0][2][7] + sp[79] * PI6[0][7][2];
    A[1885] = sp[80] * PI0[0][11][5] + sp[75] * PI2[0][7][3] + sp[76] * PI3[0][7][3] + sp[77] * PI4[0][7][3] + sp[78] * PI5[0][7][3] + sp[78] * PI5[0][3][7] + sp[79] * PI6[0][7][3];
    A[1886] = sp[80] * PI0[0][11][6] + sp[74] * PI1[0][7][2] + sp[76] * PI3[0][7][4] + sp[75] * PI2[0][2][7] + sp[78] * PI5[0][7][4] + sp[76] * PI3[0][2][7] + sp[79] * PI6[0][7][4];
    A[1887] = sp[80] * PI0[0][11][7] + sp[74] * PI1[0][7][3] + sp[76] * PI3[0][7][5] + sp[75] * PI2[0][3][7] + sp[78] * PI5[0][7][5] + sp[76] * PI3[0][3][7] + sp[79] * PI6[0][7][5];
    A[1888] = sp[80] * PI0[0][11][8] + sp[74] * PI1[0][7][4] + sp[75] * PI2[0][7][4] + sp[75] * PI2[0][4][7] + sp[77] * PI4[0][7][4] + sp[76] * PI3[0][4][7] + sp[78] * PI5[0][4][7];
    A[1889] = sp[80] * PI0[0][11][9] + sp[74] * PI1[0][7][5] + sp[75] * PI2[0][7][5] + sp[75] * PI2[0][5][7] + sp[77] * PI4[0][7][5] + sp[76] * PI3[0][5][7] + sp[78] * PI5[0][5][7];
    A[1890] = sp[80] * PI0[0][11][10] + sp[74] * PI1[0][7][6] + sp[75] * PI2[0][7][6] + sp[76] * PI3[0][7][6] + sp[75] * PI2[0][6][7] + sp[77] * PI4[0][7][6] + sp[78] * PI5[0][7][6] + sp[76] * PI3[0][6][7] + sp[78] * PI5[0][6][7] + sp[79] * PI6[0][7][6];
    A[1891] = sp[80] * PI0[0][11][11] + sp[74] * PI1[0][7][7] + sp[75] * PI2[0][7][7] + sp[76] * PI3[0][7][7] + sp[75] * PI2[0][7][7] + sp[77] * PI4[0][7][7] + sp[78] * PI5[0][7][7] + sp[76] * PI3[0][7][7] + sp[78] * PI5[0][7][7] + sp[79] * PI6[0][7][7];
    A[1892] = sp[80] * PI0[0][11][12] + sp[74] * PI1[0][7][8] + sp[75] * PI2[0][7][8] + sp[76] * PI3[0][7][8] + sp[75] * PI2[0][8][7] + sp[77] * PI4[0][7][8] + sp[78] * PI5[0][7][8] + sp[76] * PI3[0][8][7] + sp[78] * PI5[0][8][7] + sp[79] * PI6[0][7][8];
    A[1893] = sp[80] * PI0[0][11][13] + sp[74] * PI1[0][7][9] + sp[75] * PI2[0][7][9] + sp[76] * PI3[0][7][9] + sp[75] * PI2[0][9][7] + sp[77] * PI4[0][7][9] + sp[78] * PI5[0][7][9] + sp[76] * PI3[0][9][7] + sp[78] * PI5[0][9][7] + sp[79] * PI6[0][7][9];
    A[1894] = sp[80] * PI0[0][11][14] + sp[74] * PI1[0][7][10] + sp[75] * PI2[0][7][10] + sp[76] * PI3[0][7][10] + sp[75] * PI2[0][10][7] + sp[77] * PI4[0][7][10] + sp[78] * PI5[0][7][10] + sp[76] * PI3[0][10][7] + sp[78] * PI5[0][10][7] + sp[79] * PI6[0][7][10];
    A[1895] = sp[80] * PI0[0][11][15] + sp[74] * PI1[0][7][11] + sp[75] * PI2[0][7][11] + sp[76] * PI3[0][7][11] + sp[75] * PI2[0][11][7] + sp[77] * PI4[0][7][11] + sp[78] * PI5[0][7][11] + sp[76] * PI3[0][11][7] + sp[78] * PI5[0][11][7] + sp[79] * PI6[0][7][11];
    A[1896] = sp[80] * PI0[0][11][16] + sp[74] * PI1[0][7][12] + sp[75] * PI2[0][7][12] + sp[76] * PI3[0][7][12] + sp[75] * PI2[0][12][7] + sp[77] * PI4[0][7][12] + sp[78] * PI5[0][7][12] + sp[76] * PI3[0][12][7] + sp[78] * PI5[0][12][7] + sp[79] * PI6[0][7][12];
    A[1897] = sp[80] * PI0[0][11][17] + sp[74] * PI1[0][7][13] + sp[75] * PI2[0][7][13] + sp[76] * PI3[0][7][13] + sp[75] * PI2[0][13][7] + sp[77] * PI4[0][7][13] + sp[78] * PI5[0][7][13] + sp[76] * PI3[0][13][7] + sp[78] * PI5[0][13][7] + sp[79] * PI6[0][7][13];
    A[1898] = sp[80] * PI0[0][11][18] + sp[74] * PI1[0][7][14] + sp[75] * PI2[0][7][14] + sp[76] * PI3[0][7][14] + sp[75] * PI2[0][14][7] + sp[77] * PI4[0][7][14] + sp[78] * PI5[0][7][14] + sp[76] * PI3[0][14][7] + sp[78] * PI5[0][14][7] + sp[79] * PI6[0][7][14];
    A[1899] = sp[80] * PI0[0][11][19] + sp[74] * PI1[0][7][15] + sp[75] * PI2[0][7][15] + sp[76] * PI3[0][7][15] + sp[75] * PI2[0][15][7] + sp[77] * PI4[0][7][15] + sp[78] * PI5[0][7][15] + sp[76] * PI3[0][15][7] + sp[78] * PI5[0][15][7] + sp[79] * PI6[0][7][15];
    std::fill(A + 1900, A + 1940, 0.0);
    A[1940] = sp[80] * PI0[0][12][0] + sp[74] * PI1[0][8][0] + sp[75] * PI2[0][8][0] + sp[76] * PI3[0][8][0] + sp[75] * PI2[0][0][8] + sp[77] * PI4[0][8][0] + sp[78] * PI5[0][8][0] + sp[76] * PI3[0][0][8] + sp[78] * PI5[0][0][8] + sp[79] * PI6[0][8][0];
    A[1941] = sp[80] * PI0[0][12][1] + sp[74] * PI1[0][8][1] + sp[75] * PI2[0][1][8] + sp[76] * PI3[0][1][8];
    A[1942] = sp[80] * PI0[0][12][2] + sp[75] * PI2[0][8][1] + sp[77] * PI4[0][8][1] + sp[78] * PI5[0][1][8];
    A[1943] = sp[80] * PI0[0][12][3] + sp[76] * PI3[0][8][1] + sp[78] * PI5[0][8][1] + sp[79] * PI6[0][8][1];
    A[1944] = sp[80] * PI0[0][12][4] + sp[75] * PI2[0][8][2] + sp[76] * PI3[0][8][2] + sp[77] * PI4[0][8][2] + sp[78] * PI5[0][8][2] + sp[78] * PI5[0][2][8] + sp[79] * PI6[0][8][2];
    A[1945] = sp[80] * PI0[0][12][5] + sp[75] * PI2[0][8][3] + sp[76] * PI3[0][8][3] + sp[77] * PI4[0][8][3] + sp[78] * PI5[0][8][3] + sp[78] * PI5[0][3][8] + sp[79] * PI6[0][8][3];
    A[1946] = sp[80] * PI0[0][12][6] + sp[74] * PI1[0][8][2] + sp[76] * PI3[0][8][4] + sp[75] * PI2[0][2][8] + sp[78] * PI5[0][8][4] + sp[76] * PI3[0][2][8] + sp[79] * PI6[0][8][4];
    A[1947] = sp[80] * PI0[0][12][7] + sp[74] * PI1[0][8][3] + sp[76] * PI3[0][8][5] + sp[75] * PI2[0][3][8] + sp[78] * PI5[0][8][5] + sp[76] * PI3[0][3][8] + sp[79] * PI6[0][8][5];
    A[1948] = sp[80] * PI0[0][12][8] + sp[74] * PI1[0][8][4] + sp[75] * PI2[0][8][4] + sp[75] * PI2[0][4][8] + sp[77] * PI4[0][8][4] + sp[76] * PI3[0][4][8] + sp[78] * PI5[0][4][8];
    A[1949] = sp[80] * PI0[0][12][9] + sp[74] * PI1[0][8][5] + sp[75] * PI2[0][8][5] + sp[75] * PI2[0][5][8] + sp[77] * PI4[0][8][5] + sp[76] * PI3[0][5][8] + sp[78] * PI5[0][5][8];
    A[1950] = sp[80] * PI0[0][12][10] + sp[74] * PI1[0][8][6] + sp[75] * PI2[0][8][6] + sp[76] * PI3[0][8][6] + sp[75] * PI2[0][6][8] + sp[77] * PI4[0][8][6] + sp[78] * PI5[0][8][6] + sp[76] * PI3[0][6][8] + sp[78] * PI5[0][6][8] + sp[79] * PI6[0][8][6];
    A[1951] = sp[80] * PI0[0][12][11] + sp[74] * PI1[0][8][7] + sp[75] * PI2[0][8][7] + sp[76] * PI3[0][8][7] + sp[75] * PI2[0][7][8] + sp[77] * PI4[0][8][7] + sp[78] * PI5[0][8][7] + sp[76] * PI3[0][7][8] + sp[78] * PI5[0][7][8] + sp[79] * PI6[0][8][7];
    A[1952] = sp[80] * PI0[0][12][12] + sp[74] * PI1[0][8][8] + sp[75] * PI2[0][8][8] + sp[76] * PI3[0][8][8] + sp[75] * PI2[0][8][8] + sp[77] * PI4[0][8][8] + sp[78] * PI5[0][8][8] + sp[76] * PI3[0][8][8] + sp[78] * PI5[0][8][8] + sp[79] * PI6[0][8][8];
    A[1953] = sp[80] * PI0[0][12][13] + sp[74] * PI1[0][8][9] + sp[75] * PI2[0][8][9] + sp[76] * PI3[0][8][9] + sp[75] * PI2[0][9][8] + sp[77] * PI4[0][8][9] + sp[78] * PI5[0][8][9] + sp[76] * PI3[0][9][8] + sp[78] * PI5[0][9][8] + sp[79] * PI6[0][8][9];
    A[1954] = sp[80] * PI0[0][12][14] + sp[74] * PI1[0][8][10] + sp[75] * PI2[0][8][10] + sp[76] * PI3[0][8][10] + sp[75] * PI2[0][10][8] + sp[77] * PI4[0][8][10] + sp[78] * PI5[0][8][10] + sp[76] * PI3[0][10][8] + sp[78] * PI5[0][10][8] + sp[79] * PI6[0][8][10];
    A[1955] = sp[80] * PI0[0][12][15] + sp[74] * PI1[0][8][11] + sp[75] * PI2[0][8][11] + sp[76] * PI3[0][8][11] + sp[75] * PI2[0][11][8] + sp[77] * PI4[0][8][11] + sp[78] * PI5[0][8][11] + sp[76] * PI3[0][11][8] + sp[78] * PI5[0][11][8] + sp[79] * PI6[0][8][11];
    A[1956] = sp[80] * PI0[0][12][16] + sp[74] * PI1[0][8][12] + sp[75] * PI2[0][8][12] + sp[76] * PI3[0][8][12] + sp[75] * PI2[0][12][8] + sp[77] * PI4[0][8][12] + sp[78] * PI5[0][8][12] + sp[76] * PI3[0][12][8] + sp[78] * PI5[0][12][8] + sp[79] * PI6[0][8][12];
    A[1957] = sp[80] * PI0[0][12][17] + sp[74] * PI1[0][8][13] + sp[75] * PI2[0][8][13] + sp[76] * PI3[0][8][13] + sp[75] * PI2[0][13][8] + sp[77] * PI4[0][8][13] + sp[78] * PI5[0][8][13] + sp[76] * PI3[0][13][8] + sp[78] * PI5[0][13][8] + sp[79] * PI6[0][8][13];
    A[1958] = sp[80] * PI0[0][12][18] + sp[74] * PI1[0][8][14] + sp[75] * PI2[0][8][14] + sp[76] * PI3[0][8][14] + sp[75] * PI2[0][14][8] + sp[77] * PI4[0][8][14] + sp[78] * PI5[0][8][14] + sp[76] * PI3[0][14][8] + sp[78] * PI5[0][14][8] + sp[79] * PI6[0][8][14];
    A[1959] = sp[80] * PI0[0][12][19] + sp[74] * PI1[0][8][15] + sp[75] * PI2[0][8][15] + sp[76] * PI3[0][8][15] + sp[75] * PI2[0][15][8] + sp[77] * PI4[0][8][15] + sp[78] * PI5[0][8][15] + sp[76] * PI3[0][15][8] + sp[78] * PI5[0][15][8] + sp[79] * PI6[0][8][15];
    std::fill(A + 1960, A + 2000, 0.0);
    A[2000] = sp[80] * PI0[0][13][0] + sp[74] * PI1[0][9][0] + sp[75] * PI2[0][9][0] + sp[76] * PI3[0][9][0] + sp[75] * PI2[0][0][9] + sp[77] * PI4[0][9][0] + sp[78] * PI5[0][9][0] + sp[76] * PI3[0][0][9] + sp[78] * PI5[0][0][9] + sp[79] * PI6[0][9][0];
    A[2001] = sp[80] * PI0[0][13][1] + sp[74] * PI1[0][9][1] + sp[75] * PI2[0][1][9] + sp[76] * PI3[0][1][9];
    A[2002] = sp[80] * PI0[0][13][2] + sp[75] * PI2[0][9][1] + sp[77] * PI4[0][9][1] + sp[78] * PI5[0][1][9];
    A[2003] = sp[80] * PI0[0][13][3] + sp[76] * PI3[0][9][1] + sp[78] * PI5[0][9][1] + sp[79] * PI6[0][9][1];
    A[2004] = sp[80] * PI0[0][13][4] + sp[75] * PI2[0][9][2] + sp[76] * PI3[0][9][2] + sp[77] * PI4[0][9][2] + sp[78] * PI5[0][9][2] + sp[78] * PI5[0][2][9] + sp[79] * PI6[0][9][2];
    A[2005] = sp[80] * PI0[0][13][5] + sp[75] * PI2[0][9][3] + sp[76] * PI3[0][9][3] + sp[77] * PI4[0][9][3] + sp[78] * PI5[0][9][3] + sp[78] * PI5[0][3][9] + sp[79] * PI6[0][9][3];
    A[2006] = sp[80] * PI0[0][13][6] + sp[74] * PI1[0][9][2] + sp[76] * PI3[0][9][4] + sp[75] * PI2[0][2][9] + sp[78] * PI5[0][9][4] + sp[76] * PI3[0][2][9] + sp[79] * PI6[0][9][4];
    A[2007] = sp[80] * PI0[0][13][7] + sp[74] * PI1[0][9][3] + sp[76] * PI3[0][9][5] + sp[75] * PI2[0][3][9] + sp[78] * PI5[0][9][5] + sp[76] * PI3[0][3][9] + sp[79] * PI6[0][9][5];
    A[2008] = sp[80] * PI0[0][13][8] + sp[74] * PI1[0][9][4] + sp[75] * PI2[0][9][4] + sp[75] * PI2[0][4][9] + sp[77] * PI4[0][9][4] + sp[76] * PI3[0][4][9] + sp[78] * PI5[0][4][9];
    A[2009] = sp[80] * PI0[0][13][9] + sp[74] * PI1[0][9][5] + sp[75] * PI2[0][9][5] + sp[75] * PI2[0][5][9] + sp[77] * PI4[0][9][5] + sp[76] * PI3[0][5][9] + sp[78] * PI5[0][5][9];
    A[2010] = sp[80] * PI0[0][13][10] + sp[74] * PI1[0][9][6] + sp[75] * PI2[0][9][6] + sp[76] * PI3[0][9][6] + sp[75] * PI2[0][6][9] + sp[77] * PI4[0][9][6] + sp[78] * PI5[0][9][6] + sp[76] * PI3[0][6][9] + sp[78] * PI5[0][6][9] + sp[79] * PI6[0][9][6];
    A[2011] = sp[80] * PI0[0][13][11] + sp[74] * PI1[0][9][7] + sp[75] * PI2[0][9][7] + sp[76] * PI3[0][9][7] + sp[75] * PI2[0][7][9] + sp[77] * PI4[0][9][7] + sp[78] * PI5[0][9][7] + sp[76] * PI3[0][7][9] + sp[78] * PI5[0][7][9] + sp[79] * PI6[0][9][7];
    A[2012] = sp[80] * PI0[0][13][12] + sp[74] * PI1[0][9][8] + sp[75] * PI2[0][9][8] + sp[76] * PI3[0][9][8] + sp[75] * PI2[0][8][9] + sp[77] * PI4[0][9][8] + sp[78] * PI5[0][9][8] + sp[76] * PI3[0][8][9] + sp[78] * PI5[0][8][9] + sp[79] * PI6[0][9][8];
    A[2013] = sp[80] * PI0[0][13][13] + sp[74] * PI1[0][9][9] + sp[75] * PI2[0][9][9] + sp[76] * PI3[0][9][9] + sp[75] * PI2[0][9][9] + sp[77] * PI4[0][9][9] + sp[78] * PI5[0][9][9] + sp[76] * PI3[0][9][9] + sp[78] * PI5[0][9][9] + sp[79] * PI6[0][9][9];
    A[2014] = sp[80] * PI0[0][13][14] + sp[74] * PI1[0][9][10] + sp[75] * PI2[0][9][10] + sp[76] * PI3[0][9][10] + sp[75] * PI2[0][10][9] + sp[77] * PI4[0][9][10] + sp[78] * PI5[0][9][10] + sp[76] * PI3[0][10][9] + sp[78] * PI5[0][10][9] + sp[79] * PI6[0][9][10];
    A[2015] = sp[80] * PI0[0][13][15] + sp[74] * PI1[0][9][11] + sp[75] * PI2[0][9][11] + sp[76] * PI3[0][9][11] + sp[75] * PI2[0][11][9] + sp[77] * PI4[0][9][11] + sp[78] * PI5[0][9][11] + sp[76] * PI3[0][11][9] + sp[78] * PI5[0][11][9] + sp[79] * PI6[0][9][11];
    A[2016] = sp[80] * PI0[0][13][16] + sp[74] * PI1[0][9][12] + sp[75] * PI2[0][9][12] + sp[76] * PI3[0][9][12] + sp[75] * PI2[0][12][9] + sp[77] * PI4[0][9][12] + sp[78] * PI5[0][9][12] + sp[76] * PI3[0][12][9] + sp[78] * PI5[0][12][9] + sp[79] * PI6[0][9][12];
    A[2017] = sp[80] * PI0[0][13][17] + sp[74] * PI1[0][9][13] + sp[75] * PI2[0][9][13] + sp[76] * PI3[0][9][13] + sp[75] * PI2[0][13][9] + sp[77] * PI4[0][9][13] + sp[78] * PI5[0][9][13] + sp[76] * PI3[0][13][9] + sp[78] * PI5[0][13][9] + sp[79] * PI6[0][9][13];
    A[2018] = sp[80] * PI0[0][13][18] + sp[74] * PI1[0][9][14] + sp[75] * PI2[0][9][14] + sp[76] * PI3[0][9][14] + sp[75] * PI2[0][14][9] + sp[77] * PI4[0][9][14] + sp[78] * PI5[0][9][14] + sp[76] * PI3[0][14][9] + sp[78] * PI5[0][14][9] + sp[79] * PI6[0][9][14];
    A[2019] = sp[80] * PI0[0][13][19] + sp[74] * PI1[0][9][15] + sp[75] * PI2[0][9][15] + sp[76] * PI3[0][9][15] + sp[75] * PI2[0][15][9] + sp[77] * PI4[0][9][15] + sp[78] * PI5[0][9][15] + sp[76] * PI3[0][15][9] + sp[78] * PI5[0][15][9] + sp[79] * PI6[0][9][15];
    std::fill(A + 2020, A + 2060, 0.0);
    A[2060] = sp[80] * PI0[0][14][0] + sp[74] * PI1[0][10][0] + sp[75] * PI2[0][10][0] + sp[76] * PI3[0][10][0] + sp[75] * PI2[0][0][10] + sp[77] * PI4[0][10][0] + sp[78] * PI5[0][10][0] + sp[76] * PI3[0][0][10] + sp[78] * PI5[0][0][10] + sp[79] * PI6[0][10][0];
    A[2061] = sp[80] * PI0[0][14][1] + sp[74] * PI1[0][10][1] + sp[75] * PI2[0][1][10] + sp[76] * PI3[0][1][10];
    A[2062] = sp[80] * PI0[0][14][2] + sp[75] * PI2[0][10][1] + sp[77] * PI4[0][10][1] + sp[78] * PI5[0][1][10];
    A[2063] = sp[80] * PI0[0][14][3] + sp[76] * PI3[0][10][1] + sp[78] * PI5[0][10][1] + sp[79] * PI6[0][10][1];
    A[2064] = sp[80] * PI0[0][14][4] + sp[75] * PI2[0][10][2] + sp[76] * PI3[0][10][2] + sp[77] * PI4[0][10][2] + sp[78] * PI5[0][10][2] + sp[78] * PI5[0][2][10] + sp[79] * PI6[0][10][2];
    A[2065] = sp[80] * PI0[0][14][5] + sp[75] * PI2[0][10][3] + sp[76] * PI3[0][10][3] + sp[77] * PI4[0][10][3] + sp[78] * PI5[0][10][3] + sp[78] * PI5[0][3][10] + sp[79] * PI6[0][10][3];
    A[2066] = sp[80] * PI0[0][14][6] + sp[74] * PI1[0][10][2] + sp[76] * PI3[0][10][4] + sp[75] * PI2[0][2][10] + sp[78] * PI5[0][10][4] + sp[76] * PI3[0][2][10] + sp[79] * PI6[0][10][4];
    A[2067] = sp[80] * PI0[0][14][7] + sp[74] * PI1[0][10][3] + sp[76] * PI3[0][10][5] + sp[75] * PI2[0][3][10] + sp[78] * PI5[0][10][5] + sp[76] * PI3[0][3][10] + sp[79] * PI6[0][10][5];
    A[2068] = sp[80] * PI0[0][14][8] + sp[74] * PI1[0][10][4] + sp[75] * PI2[0][10][4] + sp[75] * PI2[0][4][10] + sp[77] * PI4[0][10][4] + sp[76] * PI3[0][4][10] + sp[78] * PI5[0][4][10];
    A[2069] = sp[80] * PI0[0][14][9] + sp[74] * PI1[0][10][5] + sp[75] * PI2[0][10][5] + sp[75] * PI2[0][5][10] + sp[77] * PI4[0][10][5] + sp[76] * PI3[0][5][10] + sp[78] * PI5[0][5][10];
    A[2070] = sp[80] * PI0[0][14][10] + sp[74] * PI1[0][10][6] + sp[75] * PI2[0][10][6] + sp[76] * PI3[0][10][6] + sp[75] * PI2[0][6][10] + sp[77] * PI4[0][10][6] + sp[78] * PI5[0][10][6] + sp[76] * PI3[0][6][10] + sp[78] * PI5[0][6][10] + sp[79] * PI6[0][10][6];
    A[2071] = sp[80] * PI0[0][14][11] + sp[74] * PI1[0][10][7] + sp[75] * PI2[0][10][7] + sp[76] * PI3[0][10][7] + sp[75] * PI2[0][7][10] + sp[77] * PI4[0][10][7] + sp[78] * PI5[0][10][7] + sp[76] * PI3[0][7][10] + sp[78] * PI5[0][7][10] + sp[79] * PI6[0][10][7];
    A[2072] = sp[80] * PI0[0][14][12] + sp[74] * PI1[0][10][8] + sp[75] * PI2[0][10][8] + sp[76] * PI3[0][10][8] + sp[75] * PI2[0][8][10] + sp[77] * PI4[0][10][8] + sp[78] * PI5[0][10][8] + sp[76] * PI3[0][8][10] + sp[78] * PI5[0][8][10] + sp[79] * PI6[0][10][8];
    A[2073] = sp[80] * PI0[0][14][13] + sp[74] * PI1[0][10][9] + sp[75] * PI2[0][10][9] + sp[76] * PI3[0][10][9] + sp[75] * PI2[0][9][10] + sp[77] * PI4[0][10][9] + sp[78] * PI5[0][10][9] + sp[76] * PI3[0][9][10] + sp[78] * PI5[0][9][10] + sp[79] * PI6[0][10][9];
    A[2074] = sp[80] * PI0[0][14][14] + sp[74] * PI1[0][10][10] + sp[75] * PI2[0][10][10] + sp[76] * PI3[0][10][10] + sp[75] * PI2[0][10][10] + sp[77] * PI4[0][10][10] + sp[78] * PI5[0][10][10] + sp[76] * PI3[0][10][10] + sp[78] * PI5[0][10][10] + sp[79] * PI6[0][10][10];
    A[2075] = sp[80] * PI0[0][14][15] + sp[74] * PI1[0][10][11] + sp[75] * PI2[0][10][11] + sp[76] * PI3[0][10][11] + sp[75] * PI2[0][11][10] + sp[77] * PI4[0][10][11] + sp[78] * PI5[0][10][11] + sp[76] * PI3[0][11][10] + sp[78] * PI5[0][11][10] + sp[79] * PI6[0][10][11];
    A[2076] = sp[80] * PI0[0][14][16] + sp[74] * PI1[0][10][12] + sp[75] * PI2[0][10][12] + sp[76] * PI3[0][10][12] + sp[75] * PI2[0][12][10] + sp[77] * PI4[0][10][12] + sp[78] * PI5[0][10][12] + sp[76] * PI3[0][12][10] + sp[78] * PI5[0][12][10] + sp[79] * PI6[0][10][12];
    A[2077] = sp[80] * PI0[0][14][17] + sp[74] * PI1[0][10][13] + sp[75] * PI2[0][10][13] + sp[76] * PI3[0][10][13] + sp[75] * PI2[0][13][10] + sp[77] * PI4[0][10][13] + sp[78] * PI5[0][10][13] + sp[76] * PI3[0][13][10] + sp[78] * PI5[0][13][10] + sp[79] * PI6[0][10][13];
    A[2078] = sp[80] * PI0[0][14][18] + sp[74] * PI1[0][10][14] + sp[75] * PI2[0][10][14] + sp[76] * PI3[0][10][14] + sp[75] * PI2[0][14][10] + sp[77] * PI4[0][10][14] + sp[78] * PI5[0][10][14] + sp[76] * PI3[0][14][10] + sp[78] * PI5[0][14][10] + sp[79] * PI6[0][10][14];
    A[2079] = sp[80] * PI0[0][14][19] + sp[74] * PI1[0][10][15] + sp[75] * PI2[0][10][15] + sp[76] * PI3[0][10][15] + sp[75] * PI2[0][15][10] + sp[77] * PI4[0][10][15] + sp[78] * PI5[0][10][15] + sp[76] * PI3[0][15][10] + sp[78] * PI5[0][15][10] + sp[79] * PI6[0][10][15];
    std::fill(A + 2080, A + 2120, 0.0);
    A[2120] = sp[80] * PI0[0][15][0] + sp[74] * PI1[0][11][0] + sp[75] * PI2[0][11][0] + sp[76] * PI3[0][11][0] + sp[75] * PI2[0][0][11] + sp[77] * PI4[0][11][0] + sp[78] * PI5[0][11][0] + sp[76] * PI3[0][0][11] + sp[78] * PI5[0][0][11] + sp[79] * PI6[0][11][0];
    A[2121] = sp[80] * PI0[0][15][1] + sp[74] * PI1[0][11][1] + sp[75] * PI2[0][1][11] + sp[76] * PI3[0][1][11];
    A[2122] = sp[80] * PI0[0][15][2] + sp[75] * PI2[0][11][1] + sp[77] * PI4[0][11][1] + sp[78] * PI5[0][1][11];
    A[2123] = sp[80] * PI0[0][15][3] + sp[76] * PI3[0][11][1] + sp[78] * PI5[0][11][1] + sp[79] * PI6[0][11][1];
    A[2124] = sp[80] * PI0[0][15][4] + sp[75] * PI2[0][11][2] + sp[76] * PI3[0][11][2] + sp[77] * PI4[0][11][2] + sp[78] * PI5[0][11][2] + sp[78] * PI5[0][2][11] + sp[79] * PI6[0][11][2];
    A[2125] = sp[80] * PI0[0][15][5] + sp[75] * PI2[0][11][3] + sp[76] * PI3[0][11][3] + sp[77] * PI4[0][11][3] + sp[78] * PI5[0][11][3] + sp[78] * PI5[0][3][11] + sp[79] * PI6[0][11][3];
    A[2126] = sp[80] * PI0[0][15][6] + sp[74] * PI1[0][11][2] + sp[76] * PI3[0][11][4] + sp[75] * PI2[0][2][11] + sp[78] * PI5[0][11][4] + sp[76] * PI3[0][2][11] + sp[79] * PI6[0][11][4];
    A[2127] = sp[80] * PI0[0][15][7] + sp[74] * PI1[0][11][3] + sp[76] * PI3[0][11][5] + sp[75] * PI2[0][3][11] + sp[78] * PI5[0][11][5] + sp[76] * PI3[0][3][11] + sp[79] * PI6[0][11][5];
    A[2128] = sp[80] * PI0[0][15][8] + sp[74] * PI1[0][11][4] + sp[75] * PI2[0][11][4] + sp[75] * PI2[0][4][11] + sp[77] * PI4[0][11][4] + sp[76] * PI3[0][4][11] + sp[78] * PI5[0][4][11];
    A[2129] = sp[80] * PI0[0][15][9] + sp[74] * PI1[0][11][5] + sp[75] * PI2[0][11][5] + sp[75] * PI2[0][5][11] + sp[77] * PI4[0][11][5] + sp[76] * PI3[0][5][11] + sp[78] * PI5[0][5][11];
    A[2130] = sp[80] * PI0[0][15][10] + sp[74] * PI1[0][11][6] + sp[75] * PI2[0][11][6] + sp[76] * PI3[0][11][6] + sp[75] * PI2[0][6][11] + sp[77] * PI4[0][11][6] + sp[78] * PI5[0][11][6] + sp[76] * PI3[0][6][11] + sp[78] * PI5[0][6][11] + sp[79] * PI6[0][11][6];
    A[2131] = sp[80] * PI0[0][15][11] + sp[74] * PI1[0][11][7] + sp[75] * PI2[0][11][7] + sp[76] * PI3[0][11][7] + sp[75] * PI2[0][7][11] + sp[77] * PI4[0][11][7] + sp[78] * PI5[0][11][7] + sp[76] * PI3[0][7][11] + sp[78] * PI5[0][7][11] + sp[79] * PI6[0][11][7];
    A[2132] = sp[80] * PI0[0][15][12] + sp[74] * PI1[0][11][8] + sp[75] * PI2[0][11][8] + sp[76] * PI3[0][11][8] + sp[75] * PI2[0][8][11] + sp[77] * PI4[0][11][8] + sp[78] * PI5[0][11][8] + sp[76] * PI3[0][8][11] + sp[78] * PI5[0][8][11] + sp[79] * PI6[0][11][8];
    A[2133] = sp[80] * PI0[0][15][13] + sp[74] * PI1[0][11][9] + sp[75] * PI2[0][11][9] + sp[76] * PI3[0][11][9] + sp[75] * PI2[0][9][11] + sp[77] * PI4[0][11][9] + sp[78] * PI5[0][11][9] + sp[76] * PI3[0][9][11] + sp[78] * PI5[0][9][11] + sp[79] * PI6[0][11][9];
    A[2134] = sp[80] * PI0[0][15][14] + sp[74] * PI1[0][11][10] + sp[75] * PI2[0][11][10] + sp[76] * PI3[0][11][10] + sp[75] * PI2[0][10][11] + sp[77] * PI4[0][11][10] + sp[78] * PI5[0][11][10] + sp[76] * PI3[0][10][11] + sp[78] * PI5[0][10][11] + sp[79] * PI6[0][11][10];
    A[2135] = sp[80] * PI0[0][15][15] + sp[74] * PI1[0][11][11] + sp[75] * PI2[0][11][11] + sp[76] * PI3[0][11][11] + sp[75] * PI2[0][11][11] + sp[77] * PI4[0][11][11] + sp[78] * PI5[0][11][11] + sp[76] * PI3[0][11][11] + sp[78] * PI5[0][11][11] + sp[79] * PI6[0][11][11];
    A[2136] = sp[80] * PI0[0][15][16] + sp[74] * PI1[0][11][12] + sp[75] * PI2[0][11][12] + sp[76] * PI3[0][11][12] + sp[75] * PI2[0][12][11] + sp[77] * PI4[0][11][12] + sp[78] * PI5[0][11][12] + sp[76] * PI3[0][12][11] + sp[78] * PI5[0][12][11] + sp[79] * PI6[0][11][12];
    A[2137] = sp[80] * PI0[0][15][17] + sp[74] * PI1[0][11][13] + sp[75] * PI2[0][11][13] + sp[76] * PI3[0][11][13] + sp[75] * PI2[0][13][11] + sp[77] * PI4[0][11][13] + sp[78] * PI5[0][11][13] + sp[76] * PI3[0][13][11] + sp[78] * PI5[0][13][11] + sp[79] * PI6[0][11][13];
    A[2138] = sp[80] * PI0[0][15][18] + sp[74] * PI1[0][11][14] + sp[75] * PI2[0][11][14] + sp[76] * PI3[0][11][14] + sp[75] * PI2[0][14][11] + sp[77] * PI4[0][11][14] + sp[78] * PI5[0][11][14] + sp[76] * PI3[0][14][11] + sp[78] * PI5[0][14][11] + sp[79] * PI6[0][11][14];
    A[2139] = sp[80] * PI0[0][15][19] + sp[74] * PI1[0][11][15] + sp[75] * PI2[0][11][15] + sp[76] * PI3[0][11][15] + sp[75] * PI2[0][15][11] + sp[77] * PI4[0][11][15] + sp[78] * PI5[0][11][15] + sp[76] * PI3[0][15][11] + sp[78] * PI5[0][15][11] + sp[79] * PI6[0][11][15];
    std::fill(A + 2140, A + 2180, 0.0);
    A[2180] = sp[80] * PI0[0][16][0] + sp[74] * PI1[0][12][0] + sp[75] * PI2[0][12][0] + sp[76] * PI3[0][12][0] + sp[75] * PI2[0][0][12] + sp[77] * PI4[0][12][0] + sp[78] * PI5[0][12][0] + sp[76] * PI3[0][0][12] + sp[78] * PI5[0][0][12] + sp[79] * PI6[0][12][0];
    A[2181] = sp[80] * PI0[0][16][1] + sp[74] * PI1[0][12][1] + sp[75] * PI2[0][1][12] + sp[76] * PI3[0][1][12];
    A[2182] = sp[80] * PI0[0][16][2] + sp[75] * PI2[0][12][1] + sp[77] * PI4[0][12][1] + sp[78] * PI5[0][1][12];
    A[2183] = sp[80] * PI0[0][16][3] + sp[76] * PI3[0][12][1] + sp[78] * PI5[0][12][1] + sp[79] * PI6[0][12][1];
    A[2184] = sp[80] * PI0[0][16][4] + sp[75] * PI2[0][12][2] + sp[76] * PI3[0][12][2] + sp[77] * PI4[0][12][2] + sp[78] * PI5[0][12][2] + sp[78] * PI5[0][2][12] + sp[79] * PI6[0][12][2];
    A[2185] = sp[80] * PI0[0][16][5] + sp[75] * PI2[0][12][3] + sp[76] * PI3[0][12][3] + sp[77] * PI4[0][12][3] + sp[78] * PI5[0][12][3] + sp[78] * PI5[0][3][12] + sp[79] * PI6[0][12][3];
    A[2186] = sp[80] * PI0[0][16][6] + sp[74] * PI1[0][12][2] + sp[76] * PI3[0][12][4] + sp[75] * PI2[0][2][12] + sp[78] * PI5[0][12][4] + sp[76] * PI3[0][2][12] + sp[79] * PI6[0][12][4];
    A[2187] = sp[80] * PI0[0][16][7] + sp[74] * PI1[0][12][3] + sp[76] * PI3[0][12][5] + sp[75] * PI2[0][3][12] + sp[78] * PI5[0][12][5] + sp[76] * PI3[0][3][12] + sp[79] * PI6[0][12][5];
    A[2188] = sp[80] * PI0[0][16][8] + sp[74] * PI1[0][12][4] + sp[75] * PI2[0][12][4] + sp[75] * PI2[0][4][12] + sp[77] * PI4[0][12][4] + sp[76] * PI3[0][4][12] + sp[78] * PI5[0][4][12];
    A[2189] = sp[80] * PI0[0][16][9] + sp[74] * PI1[0][12][5] + sp[75] * PI2[0][12][5] + sp[75] * PI2[0][5][12] + sp[77] * PI4[0][12][5] + sp[76] * PI3[0][5][12] + sp[78] * PI5[0][5][12];
    A[2190] = sp[80] * PI0[0][16][10] + sp[74] * PI1[0][12][6] + sp[75] * PI2[0][12][6] + sp[76] * PI3[0][12][6] + sp[75] * PI2[0][6][12] + sp[77] * PI4[0][12][6] + sp[78] * PI5[0][12][6] + sp[76] * PI3[0][6][12] + sp[78] * PI5[0][6][12] + sp[79] * PI6[0][12][6];
    A[2191] = sp[80] * PI0[0][16][11] + sp[74] * PI1[0][12][7] + sp[75] * PI2[0][12][7] + sp[76] * PI3[0][12][7] + sp[75] * PI2[0][7][12] + sp[77] * PI4[0][12][7] + sp[78] * PI5[0][12][7] + sp[76] * PI3[0][7][12] + sp[78] * PI5[0][7][12] + sp[79] * PI6[0][12][7];
    A[2192] = sp[80] * PI0[0][16][12] + sp[74] * PI1[0][12][8] + sp[75] * PI2[0][12][8] + sp[76] * PI3[0][12][8] + sp[75] * PI2[0][8][12] + sp[77] * PI4[0][12][8] + sp[78] * PI5[0][12][8] + sp[76] * PI3[0][8][12] + sp[78] * PI5[0][8][12] + sp[79] * PI6[0][12][8];
    A[2193] = sp[80] * PI0[0][16][13] + sp[74] * PI1[0][12][9] + sp[75] * PI2[0][12][9] + sp[76] * PI3[0][12][9] + sp[75] * PI2[0][9][12] + sp[77] * PI4[0][12][9] + sp[78] * PI5[0][12][9] + sp[76] * PI3[0][9][12] + sp[78] * PI5[0][9][12] + sp[79] * PI6[0][12][9];
    A[2194] = sp[80] * PI0[0][16][14] + sp[74] * PI1[0][12][10] + sp[75] * PI2[0][12][10] + sp[76] * PI3[0][12][10] + sp[75] * PI2[0][10][12] + sp[77] * PI4[0][12][10] + sp[78] * PI5[0][12][10] + sp[76] * PI3[0][10][12] + sp[78] * PI5[0][10][12] + sp[79] * PI6[0][12][10];
    A[2195] = sp[80] * PI0[0][16][15] + sp[74] * PI1[0][12][11] + sp[75] * PI2[0][12][11] + sp[76] * PI3[0][12][11] + sp[75] * PI2[0][11][12] + sp[77] * PI4[0][12][11] + sp[78] * PI5[0][12][11] + sp[76] * PI3[0][11][12] + sp[78] * PI5[0][11][12] + sp[79] * PI6[0][12][11];
    A[2196] = sp[80] * PI0[0][16][16] + sp[74] * PI1[0][12][12] + sp[75] * PI2[0][12][12] + sp[76] * PI3[0][12][12] + sp[75] * PI2[0][12][12] + sp[77] * PI4[0][12][12] + sp[78] * PI5[0][12][12] + sp[76] * PI3[0][12][12] + sp[78] * PI5[0][12][12] + sp[79] * PI6[0][12][12];
    A[2197] = sp[80] * PI0[0][16][17] + sp[74] * PI1[0][12][13] + sp[75] * PI2[0][12][13] + sp[76] * PI3[0][12][13] + sp[75] * PI2[0][13][12] + sp[77] * PI4[0][12][13] + sp[78] * PI5[0][12][13] + sp[76] * PI3[0][13][12] + sp[78] * PI5[0][13][12] + sp[79] * PI6[0][12][13];
    A[2198] = sp[80] * PI0[0][16][18] + sp[74] * PI1[0][12][14] + sp[75] * PI2[0][12][14] + sp[76] * PI3[0][12][14] + sp[75] * PI2[0][14][12] + sp[77] * PI4[0][12][14] + sp[78] * PI5[0][12][14] + sp[76] * PI3[0][14][12] + sp[78] * PI5[0][14][12] + sp[79] * PI6[0][12][14];
    A[2199] = sp[80] * PI0[0][16][19] + sp[74] * PI1[0][12][15] + sp[75] * PI2[0][12][15] + sp[76] * PI3[0][12][15] + sp[75] * PI2[0][15][12] + sp[77] * PI4[0][12][15] + sp[78] * PI5[0][12][15] + sp[76] * PI3[0][15][12] + sp[78] * PI5[0][15][12] + sp[79] * PI6[0][12][15];
    std::fill(A + 2200, A + 2240, 0.0);
    A[2240] = sp[80] * PI0[0][17][0] + sp[74] * PI1[0][13][0] + sp[75] * PI2[0][13][0] + sp[76] * PI3[0][13][0] + sp[75] * PI2[0][0][13] + sp[77] * PI4[0][13][0] + sp[78] * PI5[0][13][0] + sp[76] * PI3[0][0][13] + sp[78] * PI5[0][0][13] + sp[79] * PI6[0][13][0];
    A[2241] = sp[80] * PI0[0][17][1] + sp[74] * PI1[0][13][1] + sp[75] * PI2[0][1][13] + sp[76] * PI3[0][1][13];
    A[2242] = sp[80] * PI0[0][17][2] + sp[75] * PI2[0][13][1] + sp[77] * PI4[0][13][1] + sp[78] * PI5[0][1][13];
    A[2243] = sp[80] * PI0[0][17][3] + sp[76] * PI3[0][13][1] + sp[78] * PI5[0][13][1] + sp[79] * PI6[0][13][1];
    A[2244] = sp[80] * PI0[0][17][4] + sp[75] * PI2[0][13][2] + sp[76] * PI3[0][13][2] + sp[77] * PI4[0][13][2] + sp[78] * PI5[0][13][2] + sp[78] * PI5[0][2][13] + sp[79] * PI6[0][13][2];
    A[2245] = sp[80] * PI0[0][17][5] + sp[75] * PI2[0][13][3] + sp[76] * PI3[0][13][3] + sp[77] * PI4[0][13][3] + sp[78] * PI5[0][13][3] + sp[78] * PI5[0][3][13] + sp[79] * PI6[0][13][3];
    A[2246] = sp[80] * PI0[0][17][6] + sp[74] * PI1[0][13][2] + sp[76] * PI3[0][13][4] + sp[75] * PI2[0][2][13] + sp[78] * PI5[0][13][4] + sp[76] * PI3[0][2][13] + sp[79] * PI6[0][13][4];
    A[2247] = sp[80] * PI0[0][17][7] + sp[74] * PI1[0][13][3] + sp[76] * PI3[0][13][5] + sp[75] * PI2[0][3][13] + sp[78] * PI5[0][13][5] + sp[76] * PI3[0][3][13] + sp[79] * PI6[0][13][5];
    A[2248] = sp[80] * PI0[0][17][8] + sp[74] * PI1[0][13][4] + sp[75] * PI2[0][13][4] + sp[75] * PI2[0][4][13] + sp[77] * PI4[0][13][4] + sp[76] * PI3[0][4][13] + sp[78] * PI5[0][4][13];
    A[2249] = sp[80] * PI0[0][17][9] + sp[74] * PI1[0][13][5] + sp[75] * PI2[0][13][5] + sp[75] * PI2[0][5][13] + sp[77] * PI4[0][13][5] + sp[76] * PI3[0][5][13] + sp[78] * PI5[0][5][13];
    A[2250] = sp[80] * PI0[0][17][10] + sp[74] * PI1[0][13][6] + sp[75] * PI2[0][13][6] + sp[76] * PI3[0][13][6] + sp[75] * PI2[0][6][13] + sp[77] * PI4[0][13][6] + sp[78] * PI5[0][13][6] + sp[76] * PI3[0][6][13] + sp[78] * PI5[0][6][13] + sp[79] * PI6[0][13][6];
    A[2251] = sp[80] * PI0[0][17][11] + sp[74] * PI1[0][13][7] + sp[75] * PI2[0][13][7] + sp[76] * PI3[0][13][7] + sp[75] * PI2[0][7][13] + sp[77] * PI4[0][13][7] + sp[78] * PI5[0][13][7] + sp[76] * PI3[0][7][13] + sp[78] * PI5[0][7][13] + sp[79] * PI6[0][13][7];
    A[2252] = sp[80] * PI0[0][17][12] + sp[74] * PI1[0][13][8] + sp[75] * PI2[0][13][8] + sp[76] * PI3[0][13][8] + sp[75] * PI2[0][8][13] + sp[77] * PI4[0][13][8] + sp[78] * PI5[0][13][8] + sp[76] * PI3[0][8][13] + sp[78] * PI5[0][8][13] + sp[79] * PI6[0][13][8];
    A[2253] = sp[80] * PI0[0][17][13] + sp[74] * PI1[0][13][9] + sp[75] * PI2[0][13][9] + sp[76] * PI3[0][13][9] + sp[75] * PI2[0][9][13] + sp[77] * PI4[0][13][9] + sp[78] * PI5[0][13][9] + sp[76] * PI3[0][9][13] + sp[78] * PI5[0][9][13] + sp[79] * PI6[0][13][9];
    A[2254] = sp[80] * PI0[0][17][14] + sp[74] * PI1[0][13][10] + sp[75] * PI2[0][13][10] + sp[76] * PI3[0][13][10] + sp[75] * PI2[0][10][13] + sp[77] * PI4[0][13][10] + sp[78] * PI5[0][13][10] + sp[76] * PI3[0][10][13] + sp[78] * PI5[0][10][13] + sp[79] * PI6[0][13][10];
    A[2255] = sp[80] * PI0[0][17][15] + sp[74] * PI1[0][13][11] + sp[75] * PI2[0][13][11] + sp[76] * PI3[0][13][11] + sp[75] * PI2[0][11][13] + sp[77] * PI4[0][13][11] + sp[78] * PI5[0][13][11] + sp[76] * PI3[0][11][13] + sp[78] * PI5[0][11][13] + sp[79] * PI6[0][13][11];
    A[2256] = sp[80] * PI0[0][17][16] + sp[74] * PI1[0][13][12] + sp[75] * PI2[0][13][12] + sp[76] * PI3[0][13][12] + sp[75] * PI2[0][12][13] + sp[77] * PI4[0][13][12] + sp[78] * PI5[0][13][12] + sp[76] * PI3[0][12][13] + sp[78] * PI5[0][12][13] + sp[79] * PI6[0][13][12];
    A[2257] = sp[80] * PI0[0][17][17] + sp[74] * PI1[0][13][13] + sp[75] * PI2[0][13][13] + sp[76] * PI3[0][13][13] + sp[75] * PI2[0][13][13] + sp[77] * PI4[0][13][13] + sp[78] * PI5[0][13][13] + sp[76] * PI3[0][13][13] + sp[78] * PI5[0][13][13] + sp[79] * PI6[0][13][13];
    A[2258] = sp[80] * PI0[0][17][18] + sp[74] * PI1[0][13][14] + sp[75] * PI2[0][13][14] + sp[76] * PI3[0][13][14] + sp[75] * PI2[0][14][13] + sp[77] * PI4[0][13][14] + sp[78] * PI5[0][13][14] + sp[76] * PI3[0][14][13] + sp[78] * PI5[0][14][13] + sp[79] * PI6[0][13][14];
    A[2259] = sp[80] * PI0[0][17][19] + sp[74] * PI1[0][13][15] + sp[75] * PI2[0][13][15] + sp[76] * PI3[0][13][15] + sp[75] * PI2[0][15][13] + sp[77] * PI4[0][13][15] + sp[78] * PI5[0][13][15] + sp[76] * PI3[0][15][13] + sp[78] * PI5[0][15][13] + sp[79] * PI6[0][13][15];
    std::fill(A + 2260, A + 2300, 0.0);
    A[2300] = sp[80] * PI0[0][18][0] + sp[74] * PI1[0][14][0] + sp[75] * PI2[0][14][0] + sp[76] * PI3[0][14][0] + sp[75] * PI2[0][0][14] + sp[77] * PI4[0][14][0] + sp[78] * PI5[0][14][0] + sp[76] * PI3[0][0][14] + sp[78] * PI5[0][0][14] + sp[79] * PI6[0][14][0];
    A[2301] = sp[80] * PI0[0][18][1] + sp[74] * PI1[0][14][1] + sp[75] * PI2[0][1][14] + sp[76] * PI3[0][1][14];
    A[2302] = sp[80] * PI0[0][18][2] + sp[75] * PI2[0][14][1] + sp[77] * PI4[0][14][1] + sp[78] * PI5[0][1][14];
    A[2303] = sp[80] * PI0[0][18][3] + sp[76] * PI3[0][14][1] + sp[78] * PI5[0][14][1] + sp[79] * PI6[0][14][1];
    A[2304] = sp[80] * PI0[0][18][4] + sp[75] * PI2[0][14][2] + sp[76] * PI3[0][14][2] + sp[77] * PI4[0][14][2] + sp[78] * PI5[0][14][2] + sp[78] * PI5[0][2][14] + sp[79] * PI6[0][14][2];
    A[2305] = sp[80] * PI0[0][18][5] + sp[75] * PI2[0][14][3] + sp[76] * PI3[0][14][3] + sp[77] * PI4[0][14][3] + sp[78] * PI5[0][14][3] + sp[78] * PI5[0][3][14] + sp[79] * PI6[0][14][3];
    A[2306] = sp[80] * PI0[0][18][6] + sp[74] * PI1[0][14][2] + sp[76] * PI3[0][14][4] + sp[75] * PI2[0][2][14] + sp[78] * PI5[0][14][4] + sp[76] * PI3[0][2][14] + sp[79] * PI6[0][14][4];
    A[2307] = sp[80] * PI0[0][18][7] + sp[74] * PI1[0][14][3] + sp[76] * PI3[0][14][5] + sp[75] * PI2[0][3][14] + sp[78] * PI5[0][14][5] + sp[76] * PI3[0][3][14] + sp[79] * PI6[0][14][5];
    A[2308] = sp[80] * PI0[0][18][8] + sp[74] * PI1[0][14][4] + sp[75] * PI2[0][14][4] + sp[75] * PI2[0][4][14] + sp[77] * PI4[0][14][4] + sp[76] * PI3[0][4][14] + sp[78] * PI5[0][4][14];
    A[2309] = sp[80] * PI0[0][18][9] + sp[74] * PI1[0][14][5] + sp[75] * PI2[0][14][5] + sp[75] * PI2[0][5][14] + sp[77] * PI4[0][14][5] + sp[76] * PI3[0][5][14] + sp[78] * PI5[0][5][14];
    A[2310] = sp[80] * PI0[0][18][10] + sp[74] * PI1[0][14][6] + sp[75] * PI2[0][14][6] + sp[76] * PI3[0][14][6] + sp[75] * PI2[0][6][14] + sp[77] * PI4[0][14][6] + sp[78] * PI5[0][14][6] + sp[76] * PI3[0][6][14] + sp[78] * PI5[0][6][14] + sp[79] * PI6[0][14][6];
    A[2311] = sp[80] * PI0[0][18][11] + sp[74] * PI1[0][14][7] + sp[75] * PI2[0][14][7] + sp[76] * PI3[0][14][7] + sp[75] * PI2[0][7][14] + sp[77] * PI4[0][14][7] + sp[78] * PI5[0][14][7] + sp[76] * PI3[0][7][14] + sp[78] * PI5[0][7][14] + sp[79] * PI6[0][14][7];
    A[2312] = sp[80] * PI0[0][18][12] + sp[74] * PI1[0][14][8] + sp[75] * PI2[0][14][8] + sp[76] * PI3[0][14][8] + sp[75] * PI2[0][8][14] + sp[77] * PI4[0][14][8] + sp[78] * PI5[0][14][8] + sp[76] * PI3[0][8][14] + sp[78] * PI5[0][8][14] + sp[79] * PI6[0][14][8];
    A[2313] = sp[80] * PI0[0][18][13] + sp[74] * PI1[0][14][9] + sp[75] * PI2[0][14][9] + sp[76] * PI3[0][14][9] + sp[75] * PI2[0][9][14] + sp[77] * PI4[0][14][9] + sp[78] * PI5[0][14][9] + sp[76] * PI3[0][9][14] + sp[78] * PI5[0][9][14] + sp[79] * PI6[0][14][9];
    A[2314] = sp[80] * PI0[0][18][14] + sp[74] * PI1[0][14][10] + sp[75] * PI2[0][14][10] + sp[76] * PI3[0][14][10] + sp[75] * PI2[0][10][14] + sp[77] * PI4[0][14][10] + sp[78] * PI5[0][14][10] + sp[76] * PI3[0][10][14] + sp[78] * PI5[0][10][14] + sp[79] * PI6[0][14][10];
    A[2315] = sp[80] * PI0[0][18][15] + sp[74] * PI1[0][14][11] + sp[75] * PI2[0][14][11] + sp[76] * PI3[0][14][11] + sp[75] * PI2[0][11][14] + sp[77] * PI4[0][14][11] + sp[78] * PI5[0][14][11] + sp[76] * PI3[0][11][14] + sp[78] * PI5[0][11][14] + sp[79] * PI6[0][14][11];
    A[2316] = sp[80] * PI0[0][18][16] + sp[74] * PI1[0][14][12] + sp[75] * PI2[0][14][12] + sp[76] * PI3[0][14][12] + sp[75] * PI2[0][12][14] + sp[77] * PI4[0][14][12] + sp[78] * PI5[0][14][12] + sp[76] * PI3[0][12][14] + sp[78] * PI5[0][12][14] + sp[79] * PI6[0][14][12];
    A[2317] = sp[80] * PI0[0][18][17] + sp[74] * PI1[0][14][13] + sp[75] * PI2[0][14][13] + sp[76] * PI3[0][14][13] + sp[75] * PI2[0][13][14] + sp[77] * PI4[0][14][13] + sp[78] * PI5[0][14][13] + sp[76] * PI3[0][13][14] + sp[78] * PI5[0][13][14] + sp[79] * PI6[0][14][13];
    A[2318] = sp[80] * PI0[0][18][18] + sp[74] * PI1[0][14][14] + sp[75] * PI2[0][14][14] + sp[76] * PI3[0][14][14] + sp[75] * PI2[0][14][14] + sp[77] * PI4[0][14][14] + sp[78] * PI5[0][14][14] + sp[76] * PI3[0][14][14] + sp[78] * PI5[0][14][14] + sp[79] * PI6[0][14][14];
    A[2319] = sp[80] * PI0[0][18][19] + sp[74] * PI1[0][14][15] + sp[75] * PI2[0][14][15] + sp[76] * PI3[0][14][15] + sp[75] * PI2[0][15][14] + sp[77] * PI4[0][14][15] + sp[78] * PI5[0][14][15] + sp[76] * PI3[0][15][14] + sp[78] * PI5[0][15][14] + sp[79] * PI6[0][14][15];
    std::fill(A + 2320, A + 2360, 0.0);
    A[2360] = sp[80] * PI0[0][19][0] + sp[74] * PI1[0][15][0] + sp[75] * PI2[0][15][0] + sp[76] * PI3[0][15][0] + sp[75] * PI2[0][0][15] + sp[77] * PI4[0][15][0] + sp[78] * PI5[0][15][0] + sp[76] * PI3[0][0][15] + sp[78] * PI5[0][0][15] + sp[79] * PI6[0][15][0];
    A[2361] = sp[80] * PI0[0][19][1] + sp[74] * PI1[0][15][1] + sp[75] * PI2[0][1][15] + sp[76] * PI3[0][1][15];
    A[2362] = sp[80] * PI0[0][19][2] + sp[75] * PI2[0][15][1] + sp[77] * PI4[0][15][1] + sp[78] * PI5[0][1][15];
    A[2363] = sp[80] * PI0[0][19][3] + sp[76] * PI3[0][15][1] + sp[78] * PI5[0][15][1] + sp[79] * PI6[0][15][1];
    A[2364] = sp[80] * PI0[0][19][4] + sp[75] * PI2[0][15][2] + sp[76] * PI3[0][15][2] + sp[77] * PI4[0][15][2] + sp[78] * PI5[0][15][2] + sp[78] * PI5[0][2][15] + sp[79] * PI6[0][15][2];
    A[2365] = sp[80] * PI0[0][19][5] + sp[75] * PI2[0][15][3] + sp[76] * PI3[0][15][3] + sp[77] * PI4[0][15][3] + sp[78] * PI5[0][15][3] + sp[78] * PI5[0][3][15] + sp[79] * PI6[0][15][3];
    A[2366] = sp[80] * PI0[0][19][6] + sp[74] * PI1[0][15][2] + sp[76] * PI3[0][15][4] + sp[75] * PI2[0][2][15] + sp[78] * PI5[0][15][4] + sp[76] * PI3[0][2][15] + sp[79] * PI6[0][15][4];
    A[2367] = sp[80] * PI0[0][19][7] + sp[74] * PI1[0][15][3] + sp[76] * PI3[0][15][5] + sp[75] * PI2[0][3][15] + sp[78] * PI5[0][15][5] + sp[76] * PI3[0][3][15] + sp[79] * PI6[0][15][5];
    A[2368] = sp[80] * PI0[0][19][8] + sp[74] * PI1[0][15][4] + sp[75] * PI2[0][15][4] + sp[75] * PI2[0][4][15] + sp[77] * PI4[0][15][4] + sp[76] * PI3[0][4][15] + sp[78] * PI5[0][4][15];
    A[2369] = sp[80] * PI0[0][19][9] + sp[74] * PI1[0][15][5] + sp[75] * PI2[0][15][5] + sp[75] * PI2[0][5][15] + sp[77] * PI4[0][15][5] + sp[76] * PI3[0][5][15] + sp[78] * PI5[0][5][15];
    A[2370] = sp[80] * PI0[0][19][10] + sp[74] * PI1[0][15][6] + sp[75] * PI2[0][15][6] + sp[76] * PI3[0][15][6] + sp[75] * PI2[0][6][15] + sp[77] * PI4[0][15][6] + sp[78] * PI5[0][15][6] + sp[76] * PI3[0][6][15] + sp[78] * PI5[0][6][15] + sp[79] * PI6[0][15][6];
    A[2371] = sp[80] * PI0[0][19][11] + sp[74] * PI1[0][15][7] + sp[75] * PI2[0][15][7] + sp[76] * PI3[0][15][7] + sp[75] * PI2[0][7][15] + sp[77] * PI4[0][15][7] + sp[78] * PI5[0][15][7] + sp[76] * PI3[0][7][15] + sp[78] * PI5[0][7][15] + sp[79] * PI6[0][15][7];
    A[2372] = sp[80] * PI0[0][19][12] + sp[74] * PI1[0][15][8] + sp[75] * PI2[0][15][8] + sp[76] * PI3[0][15][8] + sp[75] * PI2[0][8][15] + sp[77] * PI4[0][15][8] + sp[78] * PI5[0][15][8] + sp[76] * PI3[0][8][15] + sp[78] * PI5[0][8][15] + sp[79] * PI6[0][15][8];
    A[2373] = sp[80] * PI0[0][19][13] + sp[74] * PI1[0][15][9] + sp[75] * PI2[0][15][9] + sp[76] * PI3[0][15][9] + sp[75] * PI2[0][9][15] + sp[77] * PI4[0][15][9] + sp[78] * PI5[0][15][9] + sp[76] * PI3[0][9][15] + sp[78] * PI5[0][9][15] + sp[79] * PI6[0][15][9];
    A[2374] = sp[80] * PI0[0][19][14] + sp[74] * PI1[0][15][10] + sp[75] * PI2[0][15][10] + sp[76] * PI3[0][15][10] + sp[75] * PI2[0][10][15] + sp[77] * PI4[0][15][10] + sp[78] * PI5[0][15][10] + sp[76] * PI3[0][10][15] + sp[78] * PI5[0][10][15] + sp[79] * PI6[0][15][10];
    A[2375] = sp[80] * PI0[0][19][15] + sp[74] * PI1[0][15][11] + sp[75] * PI2[0][15][11] + sp[76] * PI3[0][15][11] + sp[75] * PI2[0][11][15] + sp[77] * PI4[0][15][11] + sp[78] * PI5[0][15][11] + sp[76] * PI3[0][11][15] + sp[78] * PI5[0][11][15] + sp[79] * PI6[0][15][11];
    A[2376] = sp[80] * PI0[0][19][16] + sp[74] * PI1[0][15][12] + sp[75] * PI2[0][15][12] + sp[76] * PI3[0][15][12] + sp[75] * PI2[0][12][15] + sp[77] * PI4[0][15][12] + sp[78] * PI5[0][15][12] + sp[76] * PI3[0][12][15] + sp[78] * PI5[0][12][15] + sp[79] * PI6[0][15][12];
    A[2377] = sp[80] * PI0[0][19][17] + sp[74] * PI1[0][15][13] + sp[75] * PI2[0][15][13] + sp[76] * PI3[0][15][13] + sp[75] * PI2[0][13][15] + sp[77] * PI4[0][15][13] + sp[78] * PI5[0][15][13] + sp[76] * PI3[0][13][15] + sp[78] * PI5[0][13][15] + sp[79] * PI6[0][15][13];
    A[2378] = sp[80] * PI0[0][19][18] + sp[74] * PI1[0][15][14] + sp[75] * PI2[0][15][14] + sp[76] * PI3[0][15][14] + sp[75] * PI2[0][14][15] + sp[77] * PI4[0][15][14] + sp[78] * PI5[0][15][14] + sp[76] * PI3[0][14][15] + sp[78] * PI5[0][14][15] + sp[79] * PI6[0][15][14];
    A[2379] = sp[80] * PI0[0][19][19] + sp[74] * PI1[0][15][15] + sp[75] * PI2[0][15][15] + sp[76] * PI3[0][15][15] + sp[75] * PI2[0][15][15] + sp[77] * PI4[0][15][15] + sp[78] * PI5[0][15][15] + sp[76] * PI3[0][15][15] + sp[78] * PI5[0][15][15] + sp[79] * PI6[0][15][15];
    std::fill(A + 2380, A + 2440, 0.0);
    A[2440] = sp[80] * PI0[0][0][0] + sp[74] * PI1[0][0][0] + sp[75] * PI2[0][0][0] + sp[76] * PI3[0][0][0] + sp[75] * PI2[0][0][0] + sp[77] * PI4[0][0][0] + sp[78] * PI5[0][0][0] + sp[76] * PI3[0][0][0] + sp[78] * PI5[0][0][0] + sp[79] * PI6[0][0][0];
    A[2441] = sp[80] * PI0[0][0][1] + sp[74] * PI1[0][0][1] + sp[75] * PI2[0][1][0] + sp[76] * PI3[0][1][0];
    A[2442] = sp[80] * PI0[0][0][2] + sp[75] * PI2[0][0][1] + sp[77] * PI4[0][0][1] + sp[78] * PI5[0][1][0];
    A[2443] = sp[80] * PI0[0][0][3] + sp[76] * PI3[0][0][1] + sp[78] * PI5[0][0][1] + sp[79] * PI6[0][0][1];
    A[2444] = sp[80] * PI0[0][0][4] + sp[75] * PI2[0][0][2] + sp[76] * PI3[0][0][2] + sp[77] * PI4[0][0][2] + sp[78] * PI5[0][0][2] + sp[78] * PI5[0][2][0] + sp[79] * PI6[0][0][2];
    A[2445] = sp[80] * PI0[0][0][5] + sp[75] * PI2[0][0][3] + sp[76] * PI3[0][0][3] + sp[77] * PI4[0][0][3] + sp[78] * PI5[0][0][3] + sp[78] * PI5[0][3][0] + sp[79] * PI6[0][0][3];
    A[2446] = sp[80] * PI0[0][0][6] + sp[74] * PI1[0][0][2] + sp[76] * PI3[0][0][4] + sp[75] * PI2[0][2][0] + sp[78] * PI5[0][0][4] + sp[76] * PI3[0][2][0] + sp[79] * PI6[0][0][4];
    A[2447] = sp[80] * PI0[0][0][7] + sp[74] * PI1[0][0][3] + sp[76] * PI3[0][0][5] + sp[75] * PI2[0][3][0] + sp[78] * PI5[0][0][5] + sp[76] * PI3[0][3][0] + sp[79] * PI6[0][0][5];
    A[2448] = sp[80] * PI0[0][0][8] + sp[74] * PI1[0][0][4] + sp[75] * PI2[0][0][4] + sp[75] * PI2[0][4][0] + sp[77] * PI4[0][0][4] + sp[76] * PI3[0][4][0] + sp[78] * PI5[0][4][0];
    A[2449] = sp[80] * PI0[0][0][9] + sp[74] * PI1[0][0][5] + sp[75] * PI2[0][0][5] + sp[75] * PI2[0][5][0] + sp[77] * PI4[0][0][5] + sp[76] * PI3[0][5][0] + sp[78] * PI5[0][5][0];
    A[2450] = sp[80] * PI0[0][0][10] + sp[74] * PI1[0][0][6] + sp[75] * PI2[0][0][6] + sp[76] * PI3[0][0][6] + sp[75] * PI2[0][6][0] + sp[77] * PI4[0][0][6] + sp[78] * PI5[0][0][6] + sp[76] * PI3[0][6][0] + sp[78] * PI5[0][6][0] + sp[79] * PI6[0][0][6];
    A[2451] = sp[80] * PI0[0][0][11] + sp[74] * PI1[0][0][7] + sp[75] * PI2[0][0][7] + sp[76] * PI3[0][0][7] + sp[75] * PI2[0][7][0] + sp[77] * PI4[0][0][7] + sp[78] * PI5[0][0][7] + sp[76] * PI3[0][7][0] + sp[78] * PI5[0][7][0] + sp[79] * PI6[0][0][7];
    A[2452] = sp[80] * PI0[0][0][12] + sp[74] * PI1[0][0][8] + sp[75] * PI2[0][0][8] + sp[76] * PI3[0][0][8] + sp[75] * PI2[0][8][0] + sp[77] * PI4[0][0][8] + sp[78] * PI5[0][0][8] + sp[76] * PI3[0][8][0] + sp[78] * PI5[0][8][0] + sp[79] * PI6[0][0][8];
    A[2453] = sp[80] * PI0[0][0][13] + sp[74] * PI1[0][0][9] + sp[75] * PI2[0][0][9] + sp[76] * PI3[0][0][9] + sp[75] * PI2[0][9][0] + sp[77] * PI4[0][0][9] + sp[78] * PI5[0][0][9] + sp[76] * PI3[0][9][0] + sp[78] * PI5[0][9][0] + sp[79] * PI6[0][0][9];
    A[2454] = sp[80] * PI0[0][0][14] + sp[74] * PI1[0][0][10] + sp[75] * PI2[0][0][10] + sp[76] * PI3[0][0][10] + sp[75] * PI2[0][10][0] + sp[77] * PI4[0][0][10] + sp[78] * PI5[0][0][10] + sp[76] * PI3[0][10][0] + sp[78] * PI5[0][10][0] + sp[79] * PI6[0][0][10];
    A[2455] = sp[80] * PI0[0][0][15] + sp[74] * PI1[0][0][11] + sp[75] * PI2[0][0][11] + sp[76] * PI3[0][0][11] + sp[75] * PI2[0][11][0] + sp[77] * PI4[0][0][11] + sp[78] * PI5[0][0][11] + sp[76] * PI3[0][11][0] + sp[78] * PI5[0][11][0] + sp[79] * PI6[0][0][11];
    A[2456] = sp[80] * PI0[0][0][16] + sp[74] * PI1[0][0][12] + sp[75] * PI2[0][0][12] + sp[76] * PI3[0][0][12] + sp[75] * PI2[0][12][0] + sp[77] * PI4[0][0][12] + sp[78] * PI5[0][0][12] + sp[76] * PI3[0][12][0] + sp[78] * PI5[0][12][0] + sp[79] * PI6[0][0][12];
    A[2457] = sp[80] * PI0[0][0][17] + sp[74] * PI1[0][0][13] + sp[75] * PI2[0][0][13] + sp[76] * PI3[0][0][13] + sp[75] * PI2[0][13][0] + sp[77] * PI4[0][0][13] + sp[78] * PI5[0][0][13] + sp[76] * PI3[0][13][0] + sp[78] * PI5[0][13][0] + sp[79] * PI6[0][0][13];
    A[2458] = sp[80] * PI0[0][0][18] + sp[74] * PI1[0][0][14] + sp[75] * PI2[0][0][14] + sp[76] * PI3[0][0][14] + sp[75] * PI2[0][14][0] + sp[77] * PI4[0][0][14] + sp[78] * PI5[0][0][14] + sp[76] * PI3[0][14][0] + sp[78] * PI5[0][14][0] + sp[79] * PI6[0][0][14];
    A[2459] = sp[80] * PI0[0][0][19] + sp[74] * PI1[0][0][15] + sp[75] * PI2[0][0][15] + sp[76] * PI3[0][0][15] + sp[75] * PI2[0][15][0] + sp[77] * PI4[0][0][15] + sp[78] * PI5[0][0][15] + sp[76] * PI3[0][15][0] + sp[78] * PI5[0][15][0] + sp[79] * PI6[0][0][15];
    std::fill(A + 2460, A + 2500, 0.0);
    A[2500] = sp[80] * PI0[0][1][0] + sp[74] * PI1[0][1][0] + sp[75] * PI2[0][1][0] + sp[76] * PI3[0][1][0];
    A[2501] = sp[80] * PI0[0][1][1] + sp[74] * PI1[0][1][1];
    A[2502] = sp[80] * PI0[0][1][2] + sp[75] * PI2[0][1][1];
    A[2503] = sp[80] * PI0[0][1][3] + sp[76] * PI3[0][1][1];
    A[2504] = sp[80] * PI0[0][1][4] + sp[75] * PI2[0][1][2] + sp[76] * PI3[0][1][2];
    A[2505] = sp[80] * PI0[0][1][5] + sp[75] * PI2[0][1][3] + sp[76] * PI3[0][1][3];
    A[2506] = sp[80] * PI0[0][1][6] + sp[74] * PI1[0][1][2] + sp[76] * PI3[0][1][4];
    A[2507] = sp[80] * PI0[0][1][7] + sp[74] * PI1[0][1][3] + sp[76] * PI3[0][1][5];
    A[2508] = sp[80] * PI0[0][1][8] + sp[74] * PI1[0][1][4] + sp[75] * PI2[0][1][4];
    A[2509] = sp[80] * PI0[0][1][9] + sp[74] * PI1[0][1][5] + sp[75] * PI2[0][1][5];
    A[2510] = sp[80] * PI0[0][1][10] + sp[74] * PI1[0][1][6] + sp[75] * PI2[0][1][6] + sp[76] * PI3[0][1][6];
    A[2511] = sp[80] * PI0[0][1][11] + sp[74] * PI1[0][1][7] + sp[75] * PI2[0][1][7] + sp[76] * PI3[0][1][7];
    A[2512] = sp[80] * PI0[0][1][12] + sp[74] * PI1[0][1][8] + sp[75] * PI2[0][1][8] + sp[76] * PI3[0][1][8];
    A[2513] = sp[80] * PI0[0][1][13] + sp[74] * PI1[0][1][9] + sp[75] * PI2[0][1][9] + sp[76] * PI3[0][1][9];
    A[2514] = sp[80] * PI0[0][1][14] + sp[74] * PI1[0][1][10] + sp[75] * PI2[0][1][10] + sp[76] * PI3[0][1][10];
    A[2515] = sp[80] * PI0[0][1][15] + sp[74] * PI1[0][1][11] + sp[75] * PI2[0][1][11] + sp[76] * PI3[0][1][11];
    A[2516] = sp[80] * PI0[0][1][16] + sp[74] * PI1[0][1][12] + sp[75] * PI2[0][1][12] + sp[76] * PI3[0][1][12];
    A[2517] = sp[80] * PI0[0][1][17] + sp[74] * PI1[0][1][13] + sp[75] * PI2[0][1][13] + sp[76] * PI3[0][1][13];
    A[2518] = sp[80] * PI0[0][1][18] + sp[74] * PI1[0][1][14] + sp[75] * PI2[0][1][14] + sp[76] * PI3[0][1][14];
    A[2519] = sp[80] * PI0[0][1][19] + sp[74] * PI1[0][1][15] + sp[75] * PI2[0][1][15] + sp[76] * PI3[0][1][15];
    std::fill(A + 2520, A + 2560, 0.0);
    A[2560] = sp[80] * PI0[0][2][0] + sp[75] * PI2[0][0][1] + sp[77] * PI4[0][1][0] + sp[78] * PI5[0][1][0];
    A[2561] = sp[80] * PI0[0][2][1] + sp[75] * PI2[0][1][1];
    A[2562] = sp[80] * PI0[0][2][2] + sp[77] * PI4[0][1][1];
    A[2563] = sp[80] * PI0[0][2][3] + sp[78] * PI5[0][1][1];
    A[2564] = sp[80] * PI0[0][2][4] + sp[77] * PI4[0][1][2] + sp[78] * PI5[0][1][2];
    A[2565] = sp[80] * PI0[0][2][5] + sp[77] * PI4[0][1][3] + sp[78] * PI5[0][1][3];
    A[2566] = sp[80] * PI0[0][2][6] + sp[75] * PI2[0][2][1] + sp[78] * PI5[0][1][4];
    A[2567] = sp[80] * PI0[0][2][7] + sp[75] * PI2[0][3][1] + sp[78] * PI5[0][1][5];
    A[2568] = sp[80] * PI0[0][2][8] + sp[75] * PI2[0][4][1] + sp[77] * PI4[0][1][4];
    A[2569] = sp[80] * PI0[0][2][9] + sp[75] * PI2[0][5][1] + sp[77] * PI4[0][1][5];
    A[2570] = sp[80] * PI0[0][2][10] + sp[75] * PI2[0][6][1] + sp[77] * PI4[0][1][6] + sp[78] * PI5[0][1][6];
    A[2571] = sp[80] * PI0[0][2][11] + sp[75] * PI2[0][7][1] + sp[77] * PI4[0][1][7] + sp[78] * PI5[0][1][7];
    A[2572] = sp[80] * PI0[0][2][12] + sp[75] * PI2[0][8][1] + sp[77] * PI4[0][1][8] + sp[78] * PI5[0][1][8];
    A[2573] = sp[80] * PI0[0][2][13] + sp[75] * PI2[0][9][1] + sp[77] * PI4[0][1][9] + sp[78] * PI5[0][1][9];
    A[2574] = sp[80] * PI0[0][2][14] + sp[75] * PI2[0][10][1] + sp[77] * PI4[0][1][10] + sp[78] * PI5[0][1][10];
    A[2575] = sp[80] * PI0[0][2][15] + sp[75] * PI2[0][11][1] + sp[77] * PI4[0][1][11] + sp[78] * PI5[0][1][11];
    A[2576] = sp[80] * PI0[0][2][16] + sp[75] * PI2[0][12][1] + sp[77] * PI4[0][1][12] + sp[78] * PI5[0][1][12];
    A[2577] = sp[80] * PI0[0][2][17] + sp[75] * PI2[0][13][1] + sp[77] * PI4[0][1][13] + sp[78] * PI5[0][1][13];
    A[2578] = sp[80] * PI0[0][2][18] + sp[75] * PI2[0][14][1] + sp[77] * PI4[0][1][14] + sp[78] * PI5[0][1][14];
    A[2579] = sp[80] * PI0[0][2][19] + sp[75] * PI2[0][15][1] + sp[77] * PI4[0][1][15] + sp[78] * PI5[0][1][15];
    std::fill(A + 2580, A + 2620, 0.0);
    A[2620] = sp[80] * PI0[0][3][0] + sp[76] * PI3[0][0][1] + sp[78] * PI5[0][0][1] + sp[79] * PI6[0][1][0];
    A[2621] = sp[80] * PI0[0][3][1] + sp[76] * PI3[0][1][1];
    A[2622] = sp[80] * PI0[0][3][2] + sp[78] * PI5[0][1][1];
    A[2623] = sp[80] * PI0[0][3][3] + sp[79] * PI6[0][1][1];
    A[2624] = sp[80] * PI0[0][3][4] + sp[78] * PI5[0][2][1] + sp[79] * PI6[0][1][2];
    A[2625] = sp[80] * PI0[0][3][5] + sp[78] * PI5[0][3][1] + sp[79] * PI6[0][1][3];
    A[2626] = sp[80] * PI0[0][3][6] + sp[76] * PI3[0][2][1] + sp[79] * PI6[0][1][4];
    A[2627] = sp[80] * PI0[0][3][7] + sp[76] * PI3[0][3][1] + sp[79] * PI6[0][1][5];
    A[2628] = sp[80] * PI0[0][3][8] + sp[76] * PI3[0][4][1] + sp[78] * PI5[0][4][1];
    A[2629] = sp[80] * PI0[0][3][9] + sp[76] * PI3[0][5][1] + sp[78] * PI5[0][5][1];
    A[2630] = sp[80] * PI0[0][3][10] + sp[76] * PI3[0][6][1] + sp[78] * PI5[0][6][1] + sp[79] * PI6[0][1][6];
    A[2631] = sp[80] * PI0[0][3][11] + sp[76] * PI3[0][7][1] + sp[78] * PI5[0][7][1] + sp[79] * PI6[0][1][7];
    A[2632] = sp[80] * PI0[0][3][12] + sp[76] * PI3[0][8][1] + sp[78] * PI5[0][8][1] + sp[79] * PI6[0][1][8];
    A[2633] = sp[80] * PI0[0][3][13] + sp[76] * PI3[0][9][1] + sp[78] * PI5[0][9][1] + sp[79] * PI6[0][1][9];
    A[2634] = sp[80] * PI0[0][3][14] + sp[76] * PI3[0][10][1] + sp[78] * PI5[0][10][1] + sp[79] * PI6[0][1][10];
    A[2635] = sp[80] * PI0[0][3][15] + sp[76] * PI3[0][11][1] + sp[78] * PI5[0][11][1] + sp[79] * PI6[0][1][11];
    A[2636] = sp[80] * PI0[0][3][16] + sp[76] * PI3[0][12][1] + sp[78] * PI5[0][12][1] + sp[79] * PI6[0][1][12];
    A[2637] = sp[80] * PI0[0][3][17] + sp[76] * PI3[0][13][1] + sp[78] * PI5[0][13][1] + sp[79] * PI6[0][1][13];
    A[2638] = sp[80] * PI0[0][3][18] + sp[76] * PI3[0][14][1] + sp[78] * PI5[0][14][1] + sp[79] * PI6[0][1][14];
    A[2639] = sp[80] * PI0[0][3][19] + sp[76] * PI3[0][15][1] + sp[78] * PI5[0][15][1] + sp[79] * PI6[0][1][15];
    std::fill(A + 2640, A + 2680, 0.0);
    A[2680] = sp[80] * PI0[0][4][0] + sp[75] * PI2[0][0][2] + sp[77] * PI4[0][2][0] + sp[78] * PI5[0][2][0] + sp[76] * PI3[0][0][2] + sp[78] * PI5[0][0][2] + sp[79] * PI6[0][2][0];
    A[2681] = sp[80] * PI0[0][4][1] + sp[75] * PI2[0][1][2] + sp[76] * PI3[0][1][2];
    A[2682] = sp[80] * PI0[0][4][2] + sp[77] * PI4[0][2][1] + sp[78] * PI5[0][1][2];
    A[2683] = sp[80] * PI0[0][4][3] + sp[78] * PI5[0][2][1] + sp[79] * PI6[0][2][1];
    A[2684] = sp[80] * PI0[0][4][4] + sp[77] * PI4[0][2][2] + sp[78] * PI5[0][2][2] + sp[78] * PI5[0][2][2] + sp[79] * PI6[0][2][2];
    A[2685] = sp[80] * PI0[0][4][5] + sp[77] * PI4[0][2][3] + sp[78] * PI5[0][2][3] + sp[78] * PI5[0][3][2] + sp[79] * PI6[0][2][3];
    A[2686] = sp[80] * PI0[0][4][6] + sp[75] * PI2[0][2][2] + sp[78] * PI5[0][2][4] + sp[76] * PI3[0][2][2] + sp[79] * PI6[0][2][4];
    A[2687] = sp[80] * PI0[0][4][7] + sp[75] * PI2[0][3][2] + sp[78] * PI5[0][2][5] + sp[76] * PI3[0][3][2] + sp[79] * PI6[0][2][5];
    A[2688] = sp[80] * PI0[0][4][8] + sp[75] * PI2[0][4][2] + sp[77] * PI4[0][2][4] + sp[76] * PI3[0][4][2] + sp[78] * PI5[0][4][2];
    A[2689] = sp[80] * PI0[0][4][9] + sp[75] * PI2[0][5][2] + sp[77] * PI4[0][2][5] + sp[76] * PI3[0][5][2] + sp[78] * PI5[0][5][2];
    A[2690] = sp[80] * PI0[0][4][10] + sp[75] * PI2[0][6][2] + sp[77] * PI4[0][2][6] + sp[78] * PI5[0][2][6] + sp[76] * PI3[0][6][2] + sp[78] * PI5[0][6][2] + sp[79] * PI6[0][2][6];
    A[2691] = sp[80] * PI0[0][4][11] + sp[75] * PI2[0][7][2] + sp[77] * PI4[0][2][7] + sp[78] * PI5[0][2][7] + sp[76] * PI3[0][7][2] + sp[78] * PI5[0][7][2] + sp[79] * PI6[0][2][7];
    A[2692] = sp[80] * PI0[0][4][12] + sp[75] * PI2[0][8][2] + sp[77] * PI4[0][2][8] + sp[78] * PI5[0][2][8] + sp[76] * PI3[0][8][2] + sp[78] * PI5[0][8][2] + sp[79] * PI6[0][2][8];
    A[2693] = sp[80] * PI0[0][4][13] + sp[75] * PI2[0][9][2] + sp[77] * PI4[0][2][9] + sp[78] * PI5[0][2][9] + sp[76] * PI3[0][9][2] + sp[78] * PI5[0][9][2] + sp[79] * PI6[0][2][9];
    A[2694] = sp[80] * PI0[0][4][14] + sp[75] * PI2[0][10][2] + sp[77] * PI4[0][2][10] + sp[78] * PI5[0][2][10] + sp[76] * PI3[0][10][2] + sp[78] * PI5[0][10][2] + sp[79] * PI6[0][2][10];
    A[2695] = sp[80] * PI0[0][4][15] + sp[75] * PI2[0][11][2] + sp[77] * PI4[0][2][11] + sp[78] * PI5[0][2][11] + sp[76] * PI3[0][11][2] + sp[78] * PI5[0][11][2] + sp[79] * PI6[0][2][11];
    A[2696] = sp[80] * PI0[0][4][16] + sp[75] * PI2[0][12][2] + sp[77] * PI4[0][2][12] + sp[78] * PI5[0][2][12] + sp[76] * PI3[0][12][2] + sp[78] * PI5[0][12][2] + sp[79] * PI6[0][2][12];
    A[2697] = sp[80] * PI0[0][4][17] + sp[75] * PI2[0][13][2] + sp[77] * PI4[0][2][13] + sp[78] * PI5[0][2][13] + sp[76] * PI3[0][13][2] + sp[78] * PI5[0][13][2] + sp[79] * PI6[0][2][13];
    A[2698] = sp[80] * PI0[0][4][18] + sp[75] * PI2[0][14][2] + sp[77] * PI4[0][2][14] + sp[78] * PI5[0][2][14] + sp[76] * PI3[0][14][2] + sp[78] * PI5[0][14][2] + sp[79] * PI6[0][2][14];
    A[2699] = sp[80] * PI0[0][4][19] + sp[75] * PI2[0][15][2] + sp[77] * PI4[0][2][15] + sp[78] * PI5[0][2][15] + sp[76] * PI3[0][15][2] + sp[78] * PI5[0][15][2] + sp[79] * PI6[0][2][15];
    std::fill(A + 2700, A + 2740, 0.0);
    A[2740] = sp[80] * PI0[0][5][0] + sp[75] * PI2[0][0][3] + sp[77] * PI4[0][3][0] + sp[78] * PI5[0][3][0] + sp[76] * PI3[0][0][3] + sp[78] * PI5[0][0][3] + sp[79] * PI6[0][3][0];
    A[2741] = sp[80] * PI0[0][5][1] + sp[75] * PI2[0][1][3] + sp[76] * PI3[0][1][3];
    A[2742] = sp[80] * PI0[0][5][2] + sp[77] * PI4[0][3][1] + sp[78] * PI5[0][1][3];
    A[2743] = sp[80] * PI0[0][5][3] + sp[78] * PI5[0][3][1] + sp[79] * PI6[0][3][1];
    A[2744] = sp[80] * PI0[0][5][4] + sp[77] * PI4[0][3][2] + sp[78] * PI5[0][3][2] + sp[78] * PI5[0][2][3] + sp[79] * PI6[0][3][2];
    A[2745] = sp[80] * PI0[0][5][5] + sp[77] * PI4[0][3][3] + sp[78] * PI5[0][3][3] + sp[78] * PI5[0][3][3] + sp[79] * PI6[0][3][3];
    A[2746] = sp[80] * PI0[0][5][6] + sp[75] * PI2[0][2][3] + sp[78] * PI5[0][3][4] + sp[76] * PI3[0][2][3] + sp[79] * PI6[0][3][4];
    A[2747] = sp[80] * PI0[0][5][7] + sp[75] * PI2[0][3][3] + sp[78] * PI5[0][3][5] + sp[76] * PI3[0][3][3] + sp[79] * PI6[0][3][5];
    A[2748] = sp[80] * PI0[0][5][8] + sp[75] * PI2[0][4][3] + sp[77] * PI4[0][3][4] + sp[76] * PI3[0][4][3] + sp[78] * PI5[0][4][3];
    A[2749] = sp[80] * PI0[0][5][9] + sp[75] * PI2[0][5][3] + sp[77] * PI4[0][3][5] + sp[76] * PI3[0][5][3] + sp[78] * PI5[0][5][3];
    A[2750] = sp[80] * PI0[0][5][10] + sp[75] * PI2[0][6][3] + sp[77] * PI4[0][3][6] + sp[78] * PI5[0][3][6] + sp[76] * PI3[0][6][3] + sp[78] * PI5[0][6][3] + sp[79] * PI6[0][3][6];
    A[2751] = sp[80] * PI0[0][5][11] + sp[75] * PI2[0][7][3] + sp[77] * PI4[0][3][7] + sp[78] * PI5[0][3][7] + sp[76] * PI3[0][7][3] + sp[78] * PI5[0][7][3] + sp[79] * PI6[0][3][7];
    A[2752] = sp[80] * PI0[0][5][12] + sp[75] * PI2[0][8][3] + sp[77] * PI4[0][3][8] + sp[78] * PI5[0][3][8] + sp[76] * PI3[0][8][3] + sp[78] * PI5[0][8][3] + sp[79] * PI6[0][3][8];
    A[2753] = sp[80] * PI0[0][5][13] + sp[75] * PI2[0][9][3] + sp[77] * PI4[0][3][9] + sp[78] * PI5[0][3][9] + sp[76] * PI3[0][9][3] + sp[78] * PI5[0][9][3] + sp[79] * PI6[0][3][9];
    A[2754] = sp[80] * PI0[0][5][14] + sp[75] * PI2[0][10][3] + sp[77] * PI4[0][3][10] + sp[78] * PI5[0][3][10] + sp[76] * PI3[0][10][3] + sp[78] * PI5[0][10][3] + sp[79] * PI6[0][3][10];
    A[2755] = sp[80] * PI0[0][5][15] + sp[75] * PI2[0][11][3] + sp[77] * PI4[0][3][11] + sp[78] * PI5[0][3][11] + sp[76] * PI3[0][11][3] + sp[78] * PI5[0][11][3] + sp[79] * PI6[0][3][11];
    A[2756] = sp[80] * PI0[0][5][16] + sp[75] * PI2[0][12][3] + sp[77] * PI4[0][3][12] + sp[78] * PI5[0][3][12] + sp[76] * PI3[0][12][3] + sp[78] * PI5[0][12][3] + sp[79] * PI6[0][3][12];
    A[2757] = sp[80] * PI0[0][5][17] + sp[75] * PI2[0][13][3] + sp[77] * PI4[0][3][13] + sp[78] * PI5[0][3][13] + sp[76] * PI3[0][13][3] + sp[78] * PI5[0][13][3] + sp[79] * PI6[0][3][13];
    A[2758] = sp[80] * PI0[0][5][18] + sp[75] * PI2[0][14][3] + sp[77] * PI4[0][3][14] + sp[78] * PI5[0][3][14] + sp[76] * PI3[0][14][3] + sp[78] * PI5[0][14][3] + sp[79] * PI6[0][3][14];
    A[2759] = sp[80] * PI0[0][5][19] + sp[75] * PI2[0][15][3] + sp[77] * PI4[0][3][15] + sp[78] * PI5[0][3][15] + sp[76] * PI3[0][15][3] + sp[78] * PI5[0][15][3] + sp[79] * PI6[0][3][15];
    std::fill(A + 2760, A + 2800, 0.0);
    A[2800] = sp[80] * PI0[0][6][0] + sp[74] * PI1[0][2][0] + sp[75] * PI2[0][2][0] + sp[76] * PI3[0][2][0] + sp[76] * PI3[0][0][4] + sp[78] * PI5[0][0][4] + sp[79] * PI6[0][4][0];
    A[2801] = sp[80] * PI0[0][6][1] + sp[74] * PI1[0][2][1] + sp[76] * PI3[0][1][4];
    A[2802] = sp[80] * PI0[0][6][2] + sp[75] * PI2[0][2][1] + sp[78] * PI5[0][1][4];
    A[2803] = sp[80] * PI0[0][6][3] + sp[76] * PI3[0][2][1] + sp[79] * PI6[0][4][1];
    A[2804] = sp[80] * PI0[0][6][4] + sp[75] * PI2[0][2][2] + sp[76] * PI3[0][2][2] + sp[78] * PI5[0][2][4] + sp[79] * PI6[0][4][2];
    A[2805] = sp[80] * PI0[0][6][5] + sp[75] * PI2[0][2][3] + sp[76] * PI3[0][2][3] + sp[78] * PI5[0][3][4] + sp[79] * PI6[0][4][3];
    A[2806] = sp[80] * PI0[0][6][6] + sp[74] * PI1[0][2][2] + sp[76] * PI3[0][2][4] + sp[76] * PI3[0][2][4] + sp[79] * PI6[0][4][4];
    A[2807] = sp[80] * PI0[0][6][7] + sp[74] * PI1[0][2][3] + sp[76] * PI3[0][2][5] + sp[76] * PI3[0][3][4] + sp[79] * PI6[0][4][5];
    A[2808] = sp[80] * PI0[0][6][8] + sp[74] * PI1[0][2][4] + sp[75] * PI2[0][2][4] + sp[76] * PI3[0][4][4] + sp[78] * PI5[0][4][4];
    A[2809] = sp[80] * PI0[0][6][9] + sp[74] * PI1[0][2][5] + sp[75] * PI2[0][2][5] + sp[76] * PI3[0][5][4] + sp[78] * PI5[0][5][4];
    A[2810] = sp[80] * PI0[0][6][10] + sp[74] * PI1[0][2][6] + sp[75] * PI2[0][2][6] + sp[76] * PI3[0][2][6] + sp[76] * PI3[0][6][4] + sp[78] * PI5[0][6][4] + sp[79] * PI6[0][4][6];
    A[2811] = sp[80] * PI0[0][6][11] + sp[74] * PI1[0][2][7] + sp[75] * PI2[0][2][7] + sp[76] * PI3[0][2][7] + sp[76] * PI3[0][7][4] + sp[78] * PI5[0][7][4] + sp[79] * PI6[0][4][7];
    A[2812] = sp[80] * PI0[0][6][12] + sp[74] * PI1[0][2][8] + sp[75] * PI2[0][2][8] + sp[76] * PI3[0][2][8] + sp[76] * PI3[0][8][4] + sp[78] * PI5[0][8][4] + sp[79] * PI6[0][4][8];
    A[2813] = sp[80] * PI0[0][6][13] + sp[74] * PI1[0][2][9] + sp[75] * PI2[0][2][9] + sp[76] * PI3[0][2][9] + sp[76] * PI3[0][9][4] + sp[78] * PI5[0][9][4] + sp[79] * PI6[0][4][9];
    A[2814] = sp[80] * PI0[0][6][14] + sp[74] * PI1[0][2][10] + sp[75] * PI2[0][2][10] + sp[76] * PI3[0][2][10] + sp[76] * PI3[0][10][4] + sp[78] * PI5[0][10][4] + sp[79] * PI6[0][4][10];
    A[2815] = sp[80] * PI0[0][6][15] + sp[74] * PI1[0][2][11] + sp[75] * PI2[0][2][11] + sp[76] * PI3[0][2][11] + sp[76] * PI3[0][11][4] + sp[78] * PI5[0][11][4] + sp[79] * PI6[0][4][11];
    A[2816] = sp[80] * PI0[0][6][16] + sp[74] * PI1[0][2][12] + sp[75] * PI2[0][2][12] + sp[76] * PI3[0][2][12] + sp[76] * PI3[0][12][4] + sp[78] * PI5[0][12][4] + sp[79] * PI6[0][4][12];
    A[2817] = sp[80] * PI0[0][6][17] + sp[74] * PI1[0][2][13] + sp[75] * PI2[0][2][13] + sp[76] * PI3[0][2][13] + sp[76] * PI3[0][13][4] + sp[78] * PI5[0][13][4] + sp[79] * PI6[0][4][13];
    A[2818] = sp[80] * PI0[0][6][18] + sp[74] * PI1[0][2][14] + sp[75] * PI2[0][2][14] + sp[76] * PI3[0][2][14] + sp[76] * PI3[0][14][4] + sp[78] * PI5[0][14][4] + sp[79] * PI6[0][4][14];
    A[2819] = sp[80] * PI0[0][6][19] + sp[74] * PI1[0][2][15] + sp[75] * PI2[0][2][15] + sp[76] * PI3[0][2][15] + sp[76] * PI3[0][15][4] + sp[78] * PI5[0][15][4] + sp[79] * PI6[0][4][15];
    std::fill(A + 2820, A + 2860, 0.0);
    A[2860] = sp[80] * PI0[0][7][0] + sp[74] * PI1[0][3][0] + sp[75] * PI2[0][3][0] + sp[76] * PI3[0][3][0] + sp[76] * PI3[0][0][5] + sp[78] * PI5[0][0][5] + sp[79] * PI6[0][5][0];
    A[2861] = sp[80] * PI0[0][7][1] + sp[74] * PI1[0][3][1] + sp[76] * PI3[0][1][5];
    A[2862] = sp[80] * PI0[0][7][2] + sp[75] * PI2[0][3][1] + sp[78] * PI5[0][1][5];
    A[2863] = sp[80] * PI0[0][7][3] + sp[76] * PI3[0][3][1] + sp[79] * PI6[0][5][1];
    A[2864] = sp[80] * PI0[0][7][4] + sp[75] * PI2[0][3][2] + sp[76] * PI3[0][3][2] + sp[78] * PI5[0][2][5] + sp[79] * PI6[0][5][2];
    A[2865] = sp[80] * PI0[0][7][5] + sp[75] * PI2[0][3][3] + sp[76] * PI3[0][3][3] + sp[78] * PI5[0][3][5] + sp[79] * PI6[0][5][3];
    A[2866] = sp[80] * PI0[0][7][6] + sp[74] * PI1[0][3][2] + sp[76] * PI3[0][3][4] + sp[76] * PI3[0][2][5] + sp[79] * PI6[0][5][4];
    A[2867] = sp[80] * PI0[0][7][7] + sp[74] * PI1[0][3][3] + sp[76] * PI3[0][3][5] + sp[76] * PI3[0][3][5] + sp[79] * PI6[0][5][5];
    A[2868] = sp[80] * PI0[0][7][8] + sp[74] * PI1[0][3][4] + sp[75] * PI2[0][3][4] + sp[76] * PI3[0][4][5] + sp[78] * PI5[0][4][5];
    A[2869] = sp[80] * PI0[0][7][9] + sp[74] * PI1[0][3][5] + sp[75] * PI2[0][3][5] + sp[76] * PI3[0][5][5] + sp[78] * PI5[0][5][5];
    A[2870] = sp[80] * PI0[0][7][10] + sp[74] * PI1[0][3][6] + sp[75] * PI2[0][3][6] + sp[76] * PI3[0][3][6] + sp[76] * PI3[0][6][5] + sp[78] * PI5[0][6][5] + sp[79] * PI6[0][5][6];
    A[2871] = sp[80] * PI0[0][7][11] + sp[74] * PI1[0][3][7] + sp[75] * PI2[0][3][7] + sp[76] * PI3[0][3][7] + sp[76] * PI3[0][7][5] + sp[78] * PI5[0][7][5] + sp[79] * PI6[0][5][7];
    A[2872] = sp[80] * PI0[0][7][12] + sp[74] * PI1[0][3][8] + sp[75] * PI2[0][3][8] + sp[76] * PI3[0][3][8] + sp[76] * PI3[0][8][5] + sp[78] * PI5[0][8][5] + sp[79] * PI6[0][5][8];
    A[2873] = sp[80] * PI0[0][7][13] + sp[74] * PI1[0][3][9] + sp[75] * PI2[0][3][9] + sp[76] * PI3[0][3][9] + sp[76] * PI3[0][9][5] + sp[78] * PI5[0][9][5] + sp[79] * PI6[0][5][9];
    A[2874] = sp[80] * PI0[0][7][14] + sp[74] * PI1[0][3][10] + sp[75] * PI2[0][3][10] + sp[76] * PI3[0][3][10] + sp[76] * PI3[0][10][5] + sp[78] * PI5[0][10][5] + sp[79] * PI6[0][5][10];
    A[2875] = sp[80] * PI0[0][7][15] + sp[74] * PI1[0][3][11] + sp[75] * PI2[0][3][11] + sp[76] * PI3[0][3][11] + sp[76] * PI3[0][11][5] + sp[78] * PI5[0][11][5] + sp[79] * PI6[0][5][11];
    A[2876] = sp[80] * PI0[0][7][16] + sp[74] * PI1[0][3][12] + sp[75] * PI2[0][3][12] + sp[76] * PI3[0][3][12] + sp[76] * PI3[0][12][5] + sp[78] * PI5[0][12][5] + sp[79] * PI6[0][5][12];
    A[2877] = sp[80] * PI0[0][7][17] + sp[74] * PI1[0][3][13] + sp[75] * PI2[0][3][13] + sp[76] * PI3[0][3][13] + sp[76] * PI3[0][13][5] + sp[78] * PI5[0][13][5] + sp[79] * PI6[0][5][13];
    A[2878] = sp[80] * PI0[0][7][18] + sp[74] * PI1[0][3][14] + sp[75] * PI2[0][3][14] + sp[76] * PI3[0][3][14] + sp[76] * PI3[0][14][5] + sp[78] * PI5[0][14][5] + sp[79] * PI6[0][5][14];
    A[2879] = sp[80] * PI0[0][7][19] + sp[74] * PI1[0][3][15] + sp[75] * PI2[0][3][15] + sp[76] * PI3[0][3][15] + sp[76] * PI3[0][15][5] + sp[78] * PI5[0][15][5] + sp[79] * PI6[0][5][15];
    std::fill(A + 2880, A + 2920, 0.0);
    A[2920] = sp[80] * PI0[0][8][0] + sp[74] * PI1[0][4][0] + sp[75] * PI2[0][4][0] + sp[76] * PI3[0][4][0] + sp[75] * PI2[0][0][4] + sp[77] * PI4[0][4][0] + sp[78] * PI5[0][4][0];
    A[2921] = sp[80] * PI0[0][8][1] + sp[74] * PI1[0][4][1] + sp[75] * PI2[0][1][4];
    A[2922] = sp[80] * PI0[0][8][2] + sp[75] * PI2[0][4][1] + sp[77] * PI4[0][4][1];
    A[2923] = sp[80] * PI0[0][8][3] + sp[76] * PI3[0][4][1] + sp[78] * PI5[0][4][1];
    A[2924] = sp[80] * PI0[0][8][4] + sp[75] * PI2[0][4][2] + sp[76] * PI3[0][4][2] + sp[77] * PI4[0][4][2] + sp[78] * PI5[0][4][2];
    A[2925] = sp[80] * PI0[0][8][5] + sp[75] * PI2[0][4][3] + sp[76] * PI3[0][4][3] + sp[77] * PI4[0][4][3] + sp[78] * PI5[0][4][3];
    A[2926] = sp[80] * PI0[0][8][6] + sp[74] * PI1[0][4][2] + sp[76] * PI3[0][4][4] + sp[75] * PI2[0][2][4] + sp[78] * PI5[0][4][4];
    A[2927] = sp[80] * PI0[0][8][7] + sp[74] * PI1[0][4][3] + sp[76] * PI3[0][4][5] + sp[75] * PI2[0][3][4] + sp[78] * PI5[0][4][5];
    A[2928] = sp[80] * PI0[0][8][8] + sp[74] * PI1[0][4][4] + sp[75] * PI2[0][4][4] + sp[75] * PI2[0][4][4] + sp[77] * PI4[0][4][4];
    A[2929] = sp[80] * PI0[0][8][9] + sp[74] * PI1[0][4][5] + sp[75] * PI2[0][4][5] + sp[75] * PI2[0][5][4] + sp[77] * PI4[0][4][5];
    A[2930] = sp[80] * PI0[0][8][10] + sp[74] * PI1[0][4][6] + sp[75] * PI2[0][4][6] + sp[76] * PI3[0][4][6] + sp[75] * PI2[0][6][4] + sp[77] * PI4[0][4][6] + sp[78] * PI5[0][4][6];
    A[2931] = sp[80] * PI0[0][8][11] + sp[74] * PI1[0][4][7] + sp[75] * PI2[0][4][7] + sp[76] * PI3[0][4][7] + sp[75] * PI2[0][7][4] + sp[77] * PI4[0][4][7] + sp[78] * PI5[0][4][7];
    A[2932] = sp[80] * PI0[0][8][12] + sp[74] * PI1[0][4][8] + sp[75] * PI2[0][4][8] + sp[76] * PI3[0][4][8] + sp[75] * PI2[0][8][4] + sp[77] * PI4[0][4][8] + sp[78] * PI5[0][4][8];
    A[2933] = sp[80] * PI0[0][8][13] + sp[74] * PI1[0][4][9] + sp[75] * PI2[0][4][9] + sp[76] * PI3[0][4][9] + sp[75] * PI2[0][9][4] + sp[77] * PI4[0][4][9] + sp[78] * PI5[0][4][9];
    A[2934] = sp[80] * PI0[0][8][14] + sp[74] * PI1[0][4][10] + sp[75] * PI2[0][4][10] + sp[76] * PI3[0][4][10] + sp[75] * PI2[0][10][4] + sp[77] * PI4[0][4][10] + sp[78] * PI5[0][4][10];
    A[2935] = sp[80] * PI0[0][8][15] + sp[74] * PI1[0][4][11] + sp[75] * PI2[0][4][11] + sp[76] * PI3[0][4][11] + sp[75] * PI2[0][11][4] + sp[77] * PI4[0][4][11] + sp[78] * PI5[0][4][11];
    A[2936] = sp[80] * PI0[0][8][16] + sp[74] * PI1[0][4][12] + sp[75] * PI2[0][4][12] + sp[76] * PI3[0][4][12] + sp[75] * PI2[0][12][4] + sp[77] * PI4[0][4][12] + sp[78] * PI5[0][4][12];
    A[2937] = sp[80] * PI0[0][8][17] + sp[74] * PI1[0][4][13] + sp[75] * PI2[0][4][13] + sp[76] * PI3[0][4][13] + sp[75] * PI2[0][13][4] + sp[77] * PI4[0][4][13] + sp[78] * PI5[0][4][13];
    A[2938] = sp[80] * PI0[0][8][18] + sp[74] * PI1[0][4][14] + sp[75] * PI2[0][4][14] + sp[76] * PI3[0][4][14] + sp[75] * PI2[0][14][4] + sp[77] * PI4[0][4][14] + sp[78] * PI5[0][4][14];
    A[2939] = sp[80] * PI0[0][8][19] + sp[74] * PI1[0][4][15] + sp[75] * PI2[0][4][15] + sp[76] * PI3[0][4][15] + sp[75] * PI2[0][15][4] + sp[77] * PI4[0][4][15] + sp[78] * PI5[0][4][15];
    std::fill(A + 2940, A + 2980, 0.0);
    A[2980] = sp[80] * PI0[0][9][0] + sp[74] * PI1[0][5][0] + sp[75] * PI2[0][5][0] + sp[76] * PI3[0][5][0] + sp[75] * PI2[0][0][5] + sp[77] * PI4[0][5][0] + sp[78] * PI5[0][5][0];
    A[2981] = sp[80] * PI0[0][9][1] + sp[74] * PI1[0][5][1] + sp[75] * PI2[0][1][5];
    A[2982] = sp[80] * PI0[0][9][2] + sp[75] * PI2[0][5][1] + sp[77] * PI4[0][5][1];
    A[2983] = sp[80] * PI0[0][9][3] + sp[76] * PI3[0][5][1] + sp[78] * PI5[0][5][1];
    A[2984] = sp[80] * PI0[0][9][4] + sp[75] * PI2[0][5][2] + sp[76] * PI3[0][5][2] + sp[77] * PI4[0][5][2] + sp[78] * PI5[0][5][2];
    A[2985] = sp[80] * PI0[0][9][5] + sp[75] * PI2[0][5][3] + sp[76] * PI3[0][5][3] + sp[77] * PI4[0][5][3] + sp[78] * PI5[0][5][3];
    A[2986] = sp[80] * PI0[0][9][6] + sp[74] * PI1[0][5][2] + sp[76] * PI3[0][5][4] + sp[75] * PI2[0][2][5] + sp[78] * PI5[0][5][4];
    A[2987] = sp[80] * PI0[0][9][7] + sp[74] * PI1[0][5][3] + sp[76] * PI3[0][5][5] + sp[75] * PI2[0][3][5] + sp[78] * PI5[0][5][5];
    A[2988] = sp[80] * PI0[0][9][8] + sp[74] * PI1[0][5][4] + sp[75] * PI2[0][5][4] + sp[75] * PI2[0][4][5] + sp[77] * PI4[0][5][4];
    A[2989] = sp[80] * PI0[0][9][9] + sp[74] * PI1[0][5][5] + sp[75] * PI2[0][5][5] + sp[75] * PI2[0][5][5] + sp[77] * PI4[0][5][5];
    A[2990] = sp[80] * PI0[0][9][10] + sp[74] * PI1[0][5][6] + sp[75] * PI2[0][5][6] + sp[76] * PI3[0][5][6] + sp[75] * PI2[0][6][5] + sp[77] * PI4[0][5][6] + sp[78] * PI5[0][5][6];
    A[2991] = sp[80] * PI0[0][9][11] + sp[74] * PI1[0][5][7] + sp[75] * PI2[0][5][7] + sp[76] * PI3[0][5][7] + sp[75] * PI2[0][7][5] + sp[77] * PI4[0][5][7] + sp[78] * PI5[0][5][7];
    A[2992] = sp[80] * PI0[0][9][12] + sp[74] * PI1[0][5][8] + sp[75] * PI2[0][5][8] + sp[76] * PI3[0][5][8] + sp[75] * PI2[0][8][5] + sp[77] * PI4[0][5][8] + sp[78] * PI5[0][5][8];
    A[2993] = sp[80] * PI0[0][9][13] + sp[74] * PI1[0][5][9] + sp[75] * PI2[0][5][9] + sp[76] * PI3[0][5][9] + sp[75] * PI2[0][9][5] + sp[77] * PI4[0][5][9] + sp[78] * PI5[0][5][9];
    A[2994] = sp[80] * PI0[0][9][14] + sp[74] * PI1[0][5][10] + sp[75] * PI2[0][5][10] + sp[76] * PI3[0][5][10] + sp[75] * PI2[0][10][5] + sp[77] * PI4[0][5][10] + sp[78] * PI5[0][5][10];
    A[2995] = sp[80] * PI0[0][9][15] + sp[74] * PI1[0][5][11] + sp[75] * PI2[0][5][11] + sp[76] * PI3[0][5][11] + sp[75] * PI2[0][11][5] + sp[77] * PI4[0][5][11] + sp[78] * PI5[0][5][11];
    A[2996] = sp[80] * PI0[0][9][16] + sp[74] * PI1[0][5][12] + sp[75] * PI2[0][5][12] + sp[76] * PI3[0][5][12] + sp[75] * PI2[0][12][5] + sp[77] * PI4[0][5][12] + sp[78] * PI5[0][5][12];
    A[2997] = sp[80] * PI0[0][9][17] + sp[74] * PI1[0][5][13] + sp[75] * PI2[0][5][13] + sp[76] * PI3[0][5][13] + sp[75] * PI2[0][13][5] + sp[77] * PI4[0][5][13] + sp[78] * PI5[0][5][13];
    A[2998] = sp[80] * PI0[0][9][18] + sp[74] * PI1[0][5][14] + sp[75] * PI2[0][5][14] + sp[76] * PI3[0][5][14] + sp[75] * PI2[0][14][5] + sp[77] * PI4[0][5][14] + sp[78] * PI5[0][5][14];
    A[2999] = sp[80] * PI0[0][9][19] + sp[74] * PI1[0][5][15] + sp[75] * PI2[0][5][15] + sp[76] * PI3[0][5][15] + sp[75] * PI2[0][15][5] + sp[77] * PI4[0][5][15] + sp[78] * PI5[0][5][15];
    std::fill(A + 3000, A + 3040, 0.0);
    A[3040] = sp[80] * PI0[0][10][0] + sp[74] * PI1[0][6][0] + sp[75] * PI2[0][6][0] + sp[76] * PI3[0][6][0] + sp[75] * PI2[0][0][6] + sp[77] * PI4[0][6][0] + sp[78] * PI5[0][6][0] + sp[76] * PI3[0][0][6] + sp[78] * PI5[0][0][6] + sp[79] * PI6[0][6][0];
    A[3041] = sp[80] * PI0[0][10][1] + sp[74] * PI1[0][6][1] + sp[75] * PI2[0][1][6] + sp[76] * PI3[0][1][6];
    A[3042] = sp[80] * PI0[0][10][2] + sp[75] * PI2[0][6][1] + sp[77] * PI4[0][6][1] + sp[78] * PI5[0][1][6];
    A[3043] = sp[80] * PI0[0][10][3] + sp[76] * PI3[0][6][1] + sp[78] * PI5[0][6][1] + sp[79] * PI6[0][6][1];
    A[3044] = sp[80] * PI0[0][10][4] + sp[75] * PI2[0][6][2] + sp[76] * PI3[0][6][2] + sp[77] * PI4[0][6][2] + sp[78] * PI5[0][6][2] + sp[78] * PI5[0][2][6] + sp[79] * PI6[0][6][2];
    A[3045] = sp[80] * PI0[0][10][5] + sp[75] * PI2[0][6][3] + sp[76] * PI3[0][6][3] + sp[77] * PI4[0][6][3] + sp[78] * PI5[0][6][3] + sp[78] * PI5[0][3][6] + sp[79] * PI6[0][6][3];
    A[3046] = sp[80] * PI0[0][10][6] + sp[74] * PI1[0][6][2] + sp[76] * PI3[0][6][4] + sp[75] * PI2[0][2][6] + sp[78] * PI5[0][6][4] + sp[76] * PI3[0][2][6] + sp[79] * PI6[0][6][4];
    A[3047] = sp[80] * PI0[0][10][7] + sp[74] * PI1[0][6][3] + sp[76] * PI3[0][6][5] + sp[75] * PI2[0][3][6] + sp[78] * PI5[0][6][5] + sp[76] * PI3[0][3][6] + sp[79] * PI6[0][6][5];
    A[3048] = sp[80] * PI0[0][10][8] + sp[74] * PI1[0][6][4] + sp[75] * PI2[0][6][4] + sp[75] * PI2[0][4][6] + sp[77] * PI4[0][6][4] + sp[76] * PI3[0][4][6] + sp[78] * PI5[0][4][6];
    A[3049] = sp[80] * PI0[0][10][9] + sp[74] * PI1[0][6][5] + sp[75] * PI2[0][6][5] + sp[75] * PI2[0][5][6] + sp[77] * PI4[0][6][5] + sp[76] * PI3[0][5][6] + sp[78] * PI5[0][5][6];
    A[3050] = sp[80] * PI0[0][10][10] + sp[74] * PI1[0][6][6] + sp[75] * PI2[0][6][6] + sp[76] * PI3[0][6][6] + sp[75] * PI2[0][6][6] + sp[77] * PI4[0][6][6] + sp[78] * PI5[0][6][6] + sp[76] * PI3[0][6][6] + sp[78] * PI5[0][6][6] + sp[79] * PI6[0][6][6];
    A[3051] = sp[80] * PI0[0][10][11] + sp[74] * PI1[0][6][7] + sp[75] * PI2[0][6][7] + sp[76] * PI3[0][6][7] + sp[75] * PI2[0][7][6] + sp[77] * PI4[0][6][7] + sp[78] * PI5[0][6][7] + sp[76] * PI3[0][7][6] + sp[78] * PI5[0][7][6] + sp[79] * PI6[0][6][7];
    A[3052] = sp[80] * PI0[0][10][12] + sp[74] * PI1[0][6][8] + sp[75] * PI2[0][6][8] + sp[76] * PI3[0][6][8] + sp[75] * PI2[0][8][6] + sp[77] * PI4[0][6][8] + sp[78] * PI5[0][6][8] + sp[76] * PI3[0][8][6] + sp[78] * PI5[0][8][6] + sp[79] * PI6[0][6][8];
    A[3053] = sp[80] * PI0[0][10][13] + sp[74] * PI1[0][6][9] + sp[75] * PI2[0][6][9] + sp[76] * PI3[0][6][9] + sp[75] * PI2[0][9][6] + sp[77] * PI4[0][6][9] + sp[78] * PI5[0][6][9] + sp[76] * PI3[0][9][6] + sp[78] * PI5[0][9][6] + sp[79] * PI6[0][6][9];
    A[3054] = sp[80] * PI0[0][10][14] + sp[74] * PI1[0][6][10] + sp[75] * PI2[0][6][10] + sp[76] * PI3[0][6][10] + sp[75] * PI2[0][10][6] + sp[77] * PI4[0][6][10] + sp[78] * PI5[0][6][10] + sp[76] * PI3[0][10][6] + sp[78] * PI5[0][10][6] + sp[79] * PI6[0][6][10];
    A[3055] = sp[80] * PI0[0][10][15] + sp[74] * PI1[0][6][11] + sp[75] * PI2[0][6][11] + sp[76] * PI3[0][6][11] + sp[75] * PI2[0][11][6] + sp[77] * PI4[0][6][11] + sp[78] * PI5[0][6][11] + sp[76] * PI3[0][11][6] + sp[78] * PI5[0][11][6] + sp[79] * PI6[0][6][11];
    A[3056] = sp[80] * PI0[0][10][16] + sp[74] * PI1[0][6][12] + sp[75] * PI2[0][6][12] + sp[76] * PI3[0][6][12] + sp[75] * PI2[0][12][6] + sp[77] * PI4[0][6][12] + sp[78] * PI5[0][6][12] + sp[76] * PI3[0][12][6] + sp[78] * PI5[0][12][6] + sp[79] * PI6[0][6][12];
    A[3057] = sp[80] * PI0[0][10][17] + sp[74] * PI1[0][6][13] + sp[75] * PI2[0][6][13] + sp[76] * PI3[0][6][13] + sp[75] * PI2[0][13][6] + sp[77] * PI4[0][6][13] + sp[78] * PI5[0][6][13] + sp[76] * PI3[0][13][6] + sp[78] * PI5[0][13][6] + sp[79] * PI6[0][6][13];
    A[3058] = sp[80] * PI0[0][10][18] + sp[74] * PI1[0][6][14] + sp[75] * PI2[0][6][14] + sp[76] * PI3[0][6][14] + sp[75] * PI2[0][14][6] + sp[77] * PI4[0][6][14] + sp[78] * PI5[0][6][14] + sp[76] * PI3[0][14][6] + sp[78] * PI5[0][14][6] + sp[79] * PI6[0][6][14];
    A[3059] = sp[80] * PI0[0][10][19] + sp[74] * PI1[0][6][15] + sp[75] * PI2[0][6][15] + sp[76] * PI3[0][6][15] + sp[75] * PI2[0][15][6] + sp[77] * PI4[0][6][15] + sp[78] * PI5[0][6][15] + sp[76] * PI3[0][15][6] + sp[78] * PI5[0][15][6] + sp[79] * PI6[0][6][15];
    std::fill(A + 3060, A + 3100, 0.0);
    A[3100] = sp[80] * PI0[0][11][0] + sp[74] * PI1[0][7][0] + sp[75] * PI2[0][7][0] + sp[76] * PI3[0][7][0] + sp[75] * PI2[0][0][7] + sp[77] * PI4[0][7][0] + sp[78] * PI5[0][7][0] + sp[76] * PI3[0][0][7] + sp[78] * PI5[0][0][7] + sp[79] * PI6[0][7][0];
    A[3101] = sp[80] * PI0[0][11][1] + sp[74] * PI1[0][7][1] + sp[75] * PI2[0][1][7] + sp[76] * PI3[0][1][7];
    A[3102] = sp[80] * PI0[0][11][2] + sp[75] * PI2[0][7][1] + sp[77] * PI4[0][7][1] + sp[78] * PI5[0][1][7];
    A[3103] = sp[80] * PI0[0][11][3] + sp[76] * PI3[0][7][1] + sp[78] * PI5[0][7][1] + sp[79] * PI6[0][7][1];
    A[3104] = sp[80] * PI0[0][11][4] + sp[75] * PI2[0][7][2] + sp[76] * PI3[0][7][2] + sp[77] * PI4[0][7][2] + sp[78] * PI5[0][7][2] + sp[78] * PI5[0][2][7] + sp[79] * PI6[0][7][2];
    A[3105] = sp[80] * PI0[0][11][5] + sp[75] * PI2[0][7][3] + sp[76] * PI3[0][7][3] + sp[77] * PI4[0][7][3] + sp[78] * PI5[0][7][3] + sp[78] * PI5[0][3][7] + sp[79] * PI6[0][7][3];
    A[3106] = sp[80] * PI0[0][11][6] + sp[74] * PI1[0][7][2] + sp[76] * PI3[0][7][4] + sp[75] * PI2[0][2][7] + sp[78] * PI5[0][7][4] + sp[76] * PI3[0][2][7] + sp[79] * PI6[0][7][4];
    A[3107] = sp[80] * PI0[0][11][7] + sp[74] * PI1[0][7][3] + sp[76] * PI3[0][7][5] + sp[75] * PI2[0][3][7] + sp[78] * PI5[0][7][5] + sp[76] * PI3[0][3][7] + sp[79] * PI6[0][7][5];
    A[3108] = sp[80] * PI0[0][11][8] + sp[74] * PI1[0][7][4] + sp[75] * PI2[0][7][4] + sp[75] * PI2[0][4][7] + sp[77] * PI4[0][7][4] + sp[76] * PI3[0][4][7] + sp[78] * PI5[0][4][7];
    A[3109] = sp[80] * PI0[0][11][9] + sp[74] * PI1[0][7][5] + sp[75] * PI2[0][7][5] + sp[75] * PI2[0][5][7] + sp[77] * PI4[0][7][5] + sp[76] * PI3[0][5][7] + sp[78] * PI5[0][5][7];
    A[3110] = sp[80] * PI0[0][11][10] + sp[74] * PI1[0][7][6] + sp[75] * PI2[0][7][6] + sp[76] * PI3[0][7][6] + sp[75] * PI2[0][6][7] + sp[77] * PI4[0][7][6] + sp[78] * PI5[0][7][6] + sp[76] * PI3[0][6][7] + sp[78] * PI5[0][6][7] + sp[79] * PI6[0][7][6];
    A[3111] = sp[80] * PI0[0][11][11] + sp[74] * PI1[0][7][7] + sp[75] * PI2[0][7][7] + sp[76] * PI3[0][7][7] + sp[75] * PI2[0][7][7] + sp[77] * PI4[0][7][7] + sp[78] * PI5[0][7][7] + sp[76] * PI3[0][7][7] + sp[78] * PI5[0][7][7] + sp[79] * PI6[0][7][7];
    A[3112] = sp[80] * PI0[0][11][12] + sp[74] * PI1[0][7][8] + sp[75] * PI2[0][7][8] + sp[76] * PI3[0][7][8] + sp[75] * PI2[0][8][7] + sp[77] * PI4[0][7][8] + sp[78] * PI5[0][7][8] + sp[76] * PI3[0][8][7] + sp[78] * PI5[0][8][7] + sp[79] * PI6[0][7][8];
    A[3113] = sp[80] * PI0[0][11][13] + sp[74] * PI1[0][7][9] + sp[75] * PI2[0][7][9] + sp[76] * PI3[0][7][9] + sp[75] * PI2[0][9][7] + sp[77] * PI4[0][7][9] + sp[78] * PI5[0][7][9] + sp[76] * PI3[0][9][7] + sp[78] * PI5[0][9][7] + sp[79] * PI6[0][7][9];
    A[3114] = sp[80] * PI0[0][11][14] + sp[74] * PI1[0][7][10] + sp[75] * PI2[0][7][10] + sp[76] * PI3[0][7][10] + sp[75] * PI2[0][10][7] + sp[77] * PI4[0][7][10] + sp[78] * PI5[0][7][10] + sp[76] * PI3[0][10][7] + sp[78] * PI5[0][10][7] + sp[79] * PI6[0][7][10];
    A[3115] = sp[80] * PI0[0][11][15] + sp[74] * PI1[0][7][11] + sp[75] * PI2[0][7][11] + sp[76] * PI3[0][7][11] + sp[75] * PI2[0][11][7] + sp[77] * PI4[0][7][11] + sp[78] * PI5[0][7][11] + sp[76] * PI3[0][11][7] + sp[78] * PI5[0][11][7] + sp[79] * PI6[0][7][11];
    A[3116] = sp[80] * PI0[0][11][16] + sp[74] * PI1[0][7][12] + sp[75] * PI2[0][7][12] + sp[76] * PI3[0][7][12] + sp[75] * PI2[0][12][7] + sp[77] * PI4[0][7][12] + sp[78] * PI5[0][7][12] + sp[76] * PI3[0][12][7] + sp[78] * PI5[0][12][7] + sp[79] * PI6[0][7][12];
    A[3117] = sp[80] * PI0[0][11][17] + sp[74] * PI1[0][7][13] + sp[75] * PI2[0][7][13] + sp[76] * PI3[0][7][13] + sp[75] * PI2[0][13][7] + sp[77] * PI4[0][7][13] + sp[78] * PI5[0][7][13] + sp[76] * PI3[0][13][7] + sp[78] * PI5[0][13][7] + sp[79] * PI6[0][7][13];
    A[3118] = sp[80] * PI0[0][11][18] + sp[74] * PI1[0][7][14] + sp[75] * PI2[0][7][14] + sp[76] * PI3[0][7][14] + sp[75] * PI2[0][14][7] + sp[77] * PI4[0][7][14] + sp[78] * PI5[0][7][14] + sp[76] * PI3[0][14][7] + sp[78] * PI5[0][14][7] + sp[79] * PI6[0][7][14];
    A[3119] = sp[80] * PI0[0][11][19] + sp[74] * PI1[0][7][15] + sp[75] * PI2[0][7][15] + sp[76] * PI3[0][7][15] + sp[75] * PI2[0][15][7] + sp[77] * PI4[0][7][15] + sp[78] * PI5[0][7][15] + sp[76] * PI3[0][15][7] + sp[78] * PI5[0][15][7] + sp[79] * PI6[0][7][15];
    std::fill(A + 3120, A + 3160, 0.0);
    A[3160] = sp[80] * PI0[0][12][0] + sp[74] * PI1[0][8][0] + sp[75] * PI2[0][8][0] + sp[76] * PI3[0][8][0] + sp[75] * PI2[0][0][8] + sp[77] * PI4[0][8][0] + sp[78] * PI5[0][8][0] + sp[76] * PI3[0][0][8] + sp[78] * PI5[0][0][8] + sp[79] * PI6[0][8][0];
    A[3161] = sp[80] * PI0[0][12][1] + sp[74] * PI1[0][8][1] + sp[75] * PI2[0][1][8] + sp[76] * PI3[0][1][8];
    A[3162] = sp[80] * PI0[0][12][2] + sp[75] * PI2[0][8][1] + sp[77] * PI4[0][8][1] + sp[78] * PI5[0][1][8];
    A[3163] = sp[80] * PI0[0][12][3] + sp[76] * PI3[0][8][1] + sp[78] * PI5[0][8][1] + sp[79] * PI6[0][8][1];
    A[3164] = sp[80] * PI0[0][12][4] + sp[75] * PI2[0][8][2] + sp[76] * PI3[0][8][2] + sp[77] * PI4[0][8][2] + sp[78] * PI5[0][8][2] + sp[78] * PI5[0][2][8] + sp[79] * PI6[0][8][2];
    A[3165] = sp[80] * PI0[0][12][5] + sp[75] * PI2[0][8][3] + sp[76] * PI3[0][8][3] + sp[77] * PI4[0][8][3] + sp[78] * PI5[0][8][3] + sp[78] * PI5[0][3][8] + sp[79] * PI6[0][8][3];
    A[3166] = sp[80] * PI0[0][12][6] + sp[74] * PI1[0][8][2] + sp[76] * PI3[0][8][4] + sp[75] * PI2[0][2][8] + sp[78] * PI5[0][8][4] + sp[76] * PI3[0][2][8] + sp[79] * PI6[0][8][4];
    A[3167] = sp[80] * PI0[0][12][7] + sp[74] * PI1[0][8][3] + sp[76] * PI3[0][8][5] + sp[75] * PI2[0][3][8] + sp[78] * PI5[0][8][5] + sp[76] * PI3[0][3][8] + sp[79] * PI6[0][8][5];
    A[3168] = sp[80] * PI0[0][12][8] + sp[74] * PI1[0][8][4] + sp[75] * PI2[0][8][4] + sp[75] * PI2[0][4][8] + sp[77] * PI4[0][8][4] + sp[76] * PI3[0][4][8] + sp[78] * PI5[0][4][8];
    A[3169] = sp[80] * PI0[0][12][9] + sp[74] * PI1[0][8][5] + sp[75] * PI2[0][8][5] + sp[75] * PI2[0][5][8] + sp[77] * PI4[0][8][5] + sp[76] * PI3[0][5][8] + sp[78] * PI5[0][5][8];
    A[3170] = sp[80] * PI0[0][12][10] + sp[74] * PI1[0][8][6] + sp[75] * PI2[0][8][6] + sp[76] * PI3[0][8][6] + sp[75] * PI2[0][6][8] + sp[77] * PI4[0][8][6] + sp[78] * PI5[0][8][6] + sp[76] * PI3[0][6][8] + sp[78] * PI5[0][6][8] + sp[79] * PI6[0][8][6];
    A[3171] = sp[80] * PI0[0][12][11] + sp[74] * PI1[0][8][7] + sp[75] * PI2[0][8][7] + sp[76] * PI3[0][8][7] + sp[75] * PI2[0][7][8] + sp[77] * PI4[0][8][7] + sp[78] * PI5[0][8][7] + sp[76] * PI3[0][7][8] + sp[78] * PI5[0][7][8] + sp[79] * PI6[0][8][7];
    A[3172] = sp[80] * PI0[0][12][12] + sp[74] * PI1[0][8][8] + sp[75] * PI2[0][8][8] + sp[76] * PI3[0][8][8] + sp[75] * PI2[0][8][8] + sp[77] * PI4[0][8][8] + sp[78] * PI5[0][8][8] + sp[76] * PI3[0][8][8] + sp[78] * PI5[0][8][8] + sp[79] * PI6[0][8][8];
    A[3173] = sp[80] * PI0[0][12][13] + sp[74] * PI1[0][8][9] + sp[75] * PI2[0][8][9] + sp[76] * PI3[0][8][9] + sp[75] * PI2[0][9][8] + sp[77] * PI4[0][8][9] + sp[78] * PI5[0][8][9] + sp[76] * PI3[0][9][8] + sp[78] * PI5[0][9][8] + sp[79] * PI6[0][8][9];
    A[3174] = sp[80] * PI0[0][12][14] + sp[74] * PI1[0][8][10] + sp[75] * PI2[0][8][10] + sp[76] * PI3[0][8][10] + sp[75] * PI2[0][10][8] + sp[77] * PI4[0][8][10] + sp[78] * PI5[0][8][10] + sp[76] * PI3[0][10][8] + sp[78] * PI5[0][10][8] + sp[79] * PI6[0][8][10];
    A[3175] = sp[80] * PI0[0][12][15] + sp[74] * PI1[0][8][11] + sp[75] * PI2[0][8][11] + sp[76] * PI3[0][8][11] + sp[75] * PI2[0][11][8] + sp[77] * PI4[0][8][11] + sp[78] * PI5[0][8][11] + sp[76] * PI3[0][11][8] + sp[78] * PI5[0][11][8] + sp[79] * PI6[0][8][11];
    A[3176] = sp[80] * PI0[0][12][16] + sp[74] * PI1[0][8][12] + sp[75] * PI2[0][8][12] + sp[76] * PI3[0][8][12] + sp[75] * PI2[0][12][8] + sp[77] * PI4[0][8][12] + sp[78] * PI5[0][8][12] + sp[76] * PI3[0][12][8] + sp[78] * PI5[0][12][8] + sp[79] * PI6[0][8][12];
    A[3177] = sp[80] * PI0[0][12][17] + sp[74] * PI1[0][8][13] + sp[75] * PI2[0][8][13] + sp[76] * PI3[0][8][13] + sp[75] * PI2[0][13][8] + sp[77] * PI4[0][8][13] + sp[78] * PI5[0][8][13] + sp[76] * PI3[0][13][8] + sp[78] * PI5[0][13][8] + sp[79] * PI6[0][8][13];
    A[3178] = sp[80] * PI0[0][12][18] + sp[74] * PI1[0][8][14] + sp[75] * PI2[0][8][14] + sp[76] * PI3[0][8][14] + sp[75] * PI2[0][14][8] + sp[77] * PI4[0][8][14] + sp[78] * PI5[0][8][14] + sp[76] * PI3[0][14][8] + sp[78] * PI5[0][14][8] + sp[79] * PI6[0][8][14];
    A[3179] = sp[80] * PI0[0][12][19] + sp[74] * PI1[0][8][15] + sp[75] * PI2[0][8][15] + sp[76] * PI3[0][8][15] + sp[75] * PI2[0][15][8] + sp[77] * PI4[0][8][15] + sp[78] * PI5[0][8][15] + sp[76] * PI3[0][15][8] + sp[78] * PI5[0][15][8] + sp[79] * PI6[0][8][15];
    std::fill(A + 3180, A + 3220, 0.0);
    A[3220] = sp[80] * PI0[0][13][0] + sp[74] * PI1[0][9][0] + sp[75] * PI2[0][9][0] + sp[76] * PI3[0][9][0] + sp[75] * PI2[0][0][9] + sp[77] * PI4[0][9][0] + sp[78] * PI5[0][9][0] + sp[76] * PI3[0][0][9] + sp[78] * PI5[0][0][9] + sp[79] * PI6[0][9][0];
    A[3221] = sp[80] * PI0[0][13][1] + sp[74] * PI1[0][9][1] + sp[75] * PI2[0][1][9] + sp[76] * PI3[0][1][9];
    A[3222] = sp[80] * PI0[0][13][2] + sp[75] * PI2[0][9][1] + sp[77] * PI4[0][9][1] + sp[78] * PI5[0][1][9];
    A[3223] = sp[80] * PI0[0][13][3] + sp[76] * PI3[0][9][1] + sp[78] * PI5[0][9][1] + sp[79] * PI6[0][9][1];
    A[3224] = sp[80] * PI0[0][13][4] + sp[75] * PI2[0][9][2] + sp[76] * PI3[0][9][2] + sp[77] * PI4[0][9][2] + sp[78] * PI5[0][9][2] + sp[78] * PI5[0][2][9] + sp[79] * PI6[0][9][2];
    A[3225] = sp[80] * PI0[0][13][5] + sp[75] * PI2[0][9][3] + sp[76] * PI3[0][9][3] + sp[77] * PI4[0][9][3] + sp[78] * PI5[0][9][3] + sp[78] * PI5[0][3][9] + sp[79] * PI6[0][9][3];
    A[3226] = sp[80] * PI0[0][13][6] + sp[74] * PI1[0][9][2] + sp[76] * PI3[0][9][4] + sp[75] * PI2[0][2][9] + sp[78] * PI5[0][9][4] + sp[76] * PI3[0][2][9] + sp[79] * PI6[0][9][4];
    A[3227] = sp[80] * PI0[0][13][7] + sp[74] * PI1[0][9][3] + sp[76] * PI3[0][9][5] + sp[75] * PI2[0][3][9] + sp[78] * PI5[0][9][5] + sp[76] * PI3[0][3][9] + sp[79] * PI6[0][9][5];
    A[3228] = sp[80] * PI0[0][13][8] + sp[74] * PI1[0][9][4] + sp[75] * PI2[0][9][4] + sp[75] * PI2[0][4][9] + sp[77] * PI4[0][9][4] + sp[76] * PI3[0][4][9] + sp[78] * PI5[0][4][9];
    A[3229] = sp[80] * PI0[0][13][9] + sp[74] * PI1[0][9][5] + sp[75] * PI2[0][9][5] + sp[75] * PI2[0][5][9] + sp[77] * PI4[0][9][5] + sp[76] * PI3[0][5][9] + sp[78] * PI5[0][5][9];
    A[3230] = sp[80] * PI0[0][13][10] + sp[74] * PI1[0][9][6] + sp[75] * PI2[0][9][6] + sp[76] * PI3[0][9][6] + sp[75] * PI2[0][6][9] + sp[77] * PI4[0][9][6] + sp[78] * PI5[0][9][6] + sp[76] * PI3[0][6][9] + sp[78] * PI5[0][6][9] + sp[79] * PI6[0][9][6];
    A[3231] = sp[80] * PI0[0][13][11] + sp[74] * PI1[0][9][7] + sp[75] * PI2[0][9][7] + sp[76] * PI3[0][9][7] + sp[75] * PI2[0][7][9] + sp[77] * PI4[0][9][7] + sp[78] * PI5[0][9][7] + sp[76] * PI3[0][7][9] + sp[78] * PI5[0][7][9] + sp[79] * PI6[0][9][7];
    A[3232] = sp[80] * PI0[0][13][12] + sp[74] * PI1[0][9][8] + sp[75] * PI2[0][9][8] + sp[76] * PI3[0][9][8] + sp[75] * PI2[0][8][9] + sp[77] * PI4[0][9][8] + sp[78] * PI5[0][9][8] + sp[76] * PI3[0][8][9] + sp[78] * PI5[0][8][9] + sp[79] * PI6[0][9][8];
    A[3233] = sp[80] * PI0[0][13][13] + sp[74] * PI1[0][9][9] + sp[75] * PI2[0][9][9] + sp[76] * PI3[0][9][9] + sp[75] * PI2[0][9][9] + sp[77] * PI4[0][9][9] + sp[78] * PI5[0][9][9] + sp[76] * PI3[0][9][9] + sp[78] * PI5[0][9][9] + sp[79] * PI6[0][9][9];
    A[3234] = sp[80] * PI0[0][13][14] + sp[74] * PI1[0][9][10] + sp[75] * PI2[0][9][10] + sp[76] * PI3[0][9][10] + sp[75] * PI2[0][10][9] + sp[77] * PI4[0][9][10] + sp[78] * PI5[0][9][10] + sp[76] * PI3[0][10][9] + sp[78] * PI5[0][10][9] + sp[79] * PI6[0][9][10];
    A[3235] = sp[80] * PI0[0][13][15] + sp[74] * PI1[0][9][11] + sp[75] * PI2[0][9][11] + sp[76] * PI3[0][9][11] + sp[75] * PI2[0][11][9] + sp[77] * PI4[0][9][11] + sp[78] * PI5[0][9][11] + sp[76] * PI3[0][11][9] + sp[78] * PI5[0][11][9] + sp[79] * PI6[0][9][11];
    A[3236] = sp[80] * PI0[0][13][16] + sp[74] * PI1[0][9][12] + sp[75] * PI2[0][9][12] + sp[76] * PI3[0][9][12] + sp[75] * PI2[0][12][9] + sp[77] * PI4[0][9][12] + sp[78] * PI5[0][9][12] + sp[76] * PI3[0][12][9] + sp[78] * PI5[0][12][9] + sp[79] * PI6[0][9][12];
    A[3237] = sp[80] * PI0[0][13][17] + sp[74] * PI1[0][9][13] + sp[75] * PI2[0][9][13] + sp[76] * PI3[0][9][13] + sp[75] * PI2[0][13][9] + sp[77] * PI4[0][9][13] + sp[78] * PI5[0][9][13] + sp[76] * PI3[0][13][9] + sp[78] * PI5[0][13][9] + sp[79] * PI6[0][9][13];
    A[3238] = sp[80] * PI0[0][13][18] + sp[74] * PI1[0][9][14] + sp[75] * PI2[0][9][14] + sp[76] * PI3[0][9][14] + sp[75] * PI2[0][14][9] + sp[77] * PI4[0][9][14] + sp[78] * PI5[0][9][14] + sp[76] * PI3[0][14][9] + sp[78] * PI5[0][14][9] + sp[79] * PI6[0][9][14];
    A[3239] = sp[80] * PI0[0][13][19] + sp[74] * PI1[0][9][15] + sp[75] * PI2[0][9][15] + sp[76] * PI3[0][9][15] + sp[75] * PI2[0][15][9] + sp[77] * PI4[0][9][15] + sp[78] * PI5[0][9][15] + sp[76] * PI3[0][15][9] + sp[78] * PI5[0][15][9] + sp[79] * PI6[0][9][15];
    std::fill(A + 3240, A + 3280, 0.0);
    A[3280] = sp[80] * PI0[0][14][0] + sp[74] * PI1[0][10][0] + sp[75] * PI2[0][10][0] + sp[76] * PI3[0][10][0] + sp[75] * PI2[0][0][10] + sp[77] * PI4[0][10][0] + sp[78] * PI5[0][10][0] + sp[76] * PI3[0][0][10] + sp[78] * PI5[0][0][10] + sp[79] * PI6[0][10][0];
    A[3281] = sp[80] * PI0[0][14][1] + sp[74] * PI1[0][10][1] + sp[75] * PI2[0][1][10] + sp[76] * PI3[0][1][10];
    A[3282] = sp[80] * PI0[0][14][2] + sp[75] * PI2[0][10][1] + sp[77] * PI4[0][10][1] + sp[78] * PI5[0][1][10];
    A[3283] = sp[80] * PI0[0][14][3] + sp[76] * PI3[0][10][1] + sp[78] * PI5[0][10][1] + sp[79] * PI6[0][10][1];
    A[3284] = sp[80] * PI0[0][14][4] + sp[75] * PI2[0][10][2] + sp[76] * PI3[0][10][2] + sp[77] * PI4[0][10][2] + sp[78] * PI5[0][10][2] + sp[78] * PI5[0][2][10] + sp[79] * PI6[0][10][2];
    A[3285] = sp[80] * PI0[0][14][5] + sp[75] * PI2[0][10][3] + sp[76] * PI3[0][10][3] + sp[77] * PI4[0][10][3] + sp[78] * PI5[0][10][3] + sp[78] * PI5[0][3][10] + sp[79] * PI6[0][10][3];
    A[3286] = sp[80] * PI0[0][14][6] + sp[74] * PI1[0][10][2] + sp[76] * PI3[0][10][4] + sp[75] * PI2[0][2][10] + sp[78] * PI5[0][10][4] + sp[76] * PI3[0][2][10] + sp[79] * PI6[0][10][4];
    A[3287] = sp[80] * PI0[0][14][7] + sp[74] * PI1[0][10][3] + sp[76] * PI3[0][10][5] + sp[75] * PI2[0][3][10] + sp[78] * PI5[0][10][5] + sp[76] * PI3[0][3][10] + sp[79] * PI6[0][10][5];
    A[3288] = sp[80] * PI0[0][14][8] + sp[74] * PI1[0][10][4] + sp[75] * PI2[0][10][4] + sp[75] * PI2[0][4][10] + sp[77] * PI4[0][10][4] + sp[76] * PI3[0][4][10] + sp[78] * PI5[0][4][10];
    A[3289] = sp[80] * PI0[0][14][9] + sp[74] * PI1[0][10][5] + sp[75] * PI2[0][10][5] + sp[75] * PI2[0][5][10] + sp[77] * PI4[0][10][5] + sp[76] * PI3[0][5][10] + sp[78] * PI5[0][5][10];
    A[3290] = sp[80] * PI0[0][14][10] + sp[74] * PI1[0][10][6] + sp[75] * PI2[0][10][6] + sp[76] * PI3[0][10][6] + sp[75] * PI2[0][6][10] + sp[77] * PI4[0][10][6] + sp[78] * PI5[0][10][6] + sp[76] * PI3[0][6][10] + sp[78] * PI5[0][6][10] + sp[79] * PI6[0][10][6];
    A[3291] = sp[80] * PI0[0][14][11] + sp[74] * PI1[0][10][7] + sp[75] * PI2[0][10][7] + sp[76] * PI3[0][10][7] + sp[75] * PI2[0][7][10] + sp[77] * PI4[0][10][7] + sp[78] * PI5[0][10][7] + sp[76] * PI3[0][7][10] + sp[78] * PI5[0][7][10] + sp[79] * PI6[0][10][7];
    A[3292] = sp[80] * PI0[0][14][12] + sp[74] * PI1[0][10][8] + sp[75] * PI2[0][10][8] + sp[76] * PI3[0][10][8] + sp[75] * PI2[0][8][10] + sp[77] * PI4[0][10][8] + sp[78] * PI5[0][10][8] + sp[76] * PI3[0][8][10] + sp[78] * PI5[0][8][10] + sp[79] * PI6[0][10][8];
    A[3293] = sp[80] * PI0[0][14][13] + sp[74] * PI1[0][10][9] + sp[75] * PI2[0][10][9] + sp[76] * PI3[0][10][9] + sp[75] * PI2[0][9][10] + sp[77] * PI4[0][10][9] + sp[78] * PI5[0][10][9] + sp[76] * PI3[0][9][10] + sp[78] * PI5[0][9][10] + sp[79] * PI6[0][10][9];
    A[3294] = sp[80] * PI0[0][14][14] + sp[74] * PI1[0][10][10] + sp[75] * PI2[0][10][10] + sp[76] * PI3[0][10][10] + sp[75] * PI2[0][10][10] + sp[77] * PI4[0][10][10] + sp[78] * PI5[0][10][10] + sp[76] * PI3[0][10][10] + sp[78] * PI5[0][10][10] + sp[79] * PI6[0][10][10];
    A[3295] = sp[80] * PI0[0][14][15] + sp[74] * PI1[0][10][11] + sp[75] * PI2[0][10][11] + sp[76] * PI3[0][10][11] + sp[75] * PI2[0][11][10] + sp[77] * PI4[0][10][11] + sp[78] * PI5[0][10][11] + sp[76] * PI3[0][11][10] + sp[78] * PI5[0][11][10] + sp[79] * PI6[0][10][11];
    A[3296] = sp[80] * PI0[0][14][16] + sp[74] * PI1[0][10][12] + sp[75] * PI2[0][10][12] + sp[76] * PI3[0][10][12] + sp[75] * PI2[0][12][10] + sp[77] * PI4[0][10][12] + sp[78] * PI5[0][10][12] + sp[76] * PI3[0][12][10] + sp[78] * PI5[0][12][10] + sp[79] * PI6[0][10][12];
    A[3297] = sp[80] * PI0[0][14][17] + sp[74] * PI1[0][10][13] + sp[75] * PI2[0][10][13] + sp[76] * PI3[0][10][13] + sp[75] * PI2[0][13][10] + sp[77] * PI4[0][10][13] + sp[78] * PI5[0][10][13] + sp[76] * PI3[0][13][10] + sp[78] * PI5[0][13][10] + sp[79] * PI6[0][10][13];
    A[3298] = sp[80] * PI0[0][14][18] + sp[74] * PI1[0][10][14] + sp[75] * PI2[0][10][14] + sp[76] * PI3[0][10][14] + sp[75] * PI2[0][14][10] + sp[77] * PI4[0][10][14] + sp[78] * PI5[0][10][14] + sp[76] * PI3[0][14][10] + sp[78] * PI5[0][14][10] + sp[79] * PI6[0][10][14];
    A[3299] = sp[80] * PI0[0][14][19] + sp[74] * PI1[0][10][15] + sp[75] * PI2[0][10][15] + sp[76] * PI3[0][10][15] + sp[75] * PI2[0][15][10] + sp[77] * PI4[0][10][15] + sp[78] * PI5[0][10][15] + sp[76] * PI3[0][15][10] + sp[78] * PI5[0][15][10] + sp[79] * PI6[0][10][15];
    std::fill(A + 3300, A + 3340, 0.0);
    A[3340] = sp[80] * PI0[0][15][0] + sp[74] * PI1[0][11][0] + sp[75] * PI2[0][11][0] + sp[76] * PI3[0][11][0] + sp[75] * PI2[0][0][11] + sp[77] * PI4[0][11][0] + sp[78] * PI5[0][11][0] + sp[76] * PI3[0][0][11] + sp[78] * PI5[0][0][11] + sp[79] * PI6[0][11][0];
    A[3341] = sp[80] * PI0[0][15][1] + sp[74] * PI1[0][11][1] + sp[75] * PI2[0][1][11] + sp[76] * PI3[0][1][11];
    A[3342] = sp[80] * PI0[0][15][2] + sp[75] * PI2[0][11][1] + sp[77] * PI4[0][11][1] + sp[78] * PI5[0][1][11];
    A[3343] = sp[80] * PI0[0][15][3] + sp[76] * PI3[0][11][1] + sp[78] * PI5[0][11][1] + sp[79] * PI6[0][11][1];
    A[3344] = sp[80] * PI0[0][15][4] + sp[75] * PI2[0][11][2] + sp[76] * PI3[0][11][2] + sp[77] * PI4[0][11][2] + sp[78] * PI5[0][11][2] + sp[78] * PI5[0][2][11] + sp[79] * PI6[0][11][2];
    A[3345] = sp[80] * PI0[0][15][5] + sp[75] * PI2[0][11][3] + sp[76] * PI3[0][11][3] + sp[77] * PI4[0][11][3] + sp[78] * PI5[0][11][3] + sp[78] * PI5[0][3][11] + sp[79] * PI6[0][11][3];
    A[3346] = sp[80] * PI0[0][15][6] + sp[74] * PI1[0][11][2] + sp[76] * PI3[0][11][4] + sp[75] * PI2[0][2][11] + sp[78] * PI5[0][11][4] + sp[76] * PI3[0][2][11] + sp[79] * PI6[0][11][4];
    A[3347] = sp[80] * PI0[0][15][7] + sp[74] * PI1[0][11][3] + sp[76] * PI3[0][11][5] + sp[75] * PI2[0][3][11] + sp[78] * PI5[0][11][5] + sp[76] * PI3[0][3][11] + sp[79] * PI6[0][11][5];
    A[3348] = sp[80] * PI0[0][15][8] + sp[74] * PI1[0][11][4] + sp[75] * PI2[0][11][4] + sp[75] * PI2[0][4][11] + sp[77] * PI4[0][11][4] + sp[76] * PI3[0][4][11] + sp[78] * PI5[0][4][11];
    A[3349] = sp[80] * PI0[0][15][9] + sp[74] * PI1[0][11][5] + sp[75] * PI2[0][11][5] + sp[75] * PI2[0][5][11] + sp[77] * PI4[0][11][5] + sp[76] * PI3[0][5][11] + sp[78] * PI5[0][5][11];
    A[3350] = sp[80] * PI0[0][15][10] + sp[74] * PI1[0][11][6] + sp[75] * PI2[0][11][6] + sp[76] * PI3[0][11][6] + sp[75] * PI2[0][6][11] + sp[77] * PI4[0][11][6] + sp[78] * PI5[0][11][6] + sp[76] * PI3[0][6][11] + sp[78] * PI5[0][6][11] + sp[79] * PI6[0][11][6];
    A[3351] = sp[80] * PI0[0][15][11] + sp[74] * PI1[0][11][7] + sp[75] * PI2[0][11][7] + sp[76] * PI3[0][11][7] + sp[75] * PI2[0][7][11] + sp[77] * PI4[0][11][7] + sp[78] * PI5[0][11][7] + sp[76] * PI3[0][7][11] + sp[78] * PI5[0][7][11] + sp[79] * PI6[0][11][7];
    A[3352] = sp[80] * PI0[0][15][12] + sp[74] * PI1[0][11][8] + sp[75] * PI2[0][11][8] + sp[76] * PI3[0][11][8] + sp[75] * PI2[0][8][11] + sp[77] * PI4[0][11][8] + sp[78] * PI5[0][11][8] + sp[76] * PI3[0][8][11] + sp[78] * PI5[0][8][11] + sp[79] * PI6[0][11][8];
    A[3353] = sp[80] * PI0[0][15][13] + sp[74] * PI1[0][11][9] + sp[75] * PI2[0][11][9] + sp[76] * PI3[0][11][9] + sp[75] * PI2[0][9][11] + sp[77] * PI4[0][11][9] + sp[78] * PI5[0][11][9] + sp[76] * PI3[0][9][11] + sp[78] * PI5[0][9][11] + sp[79] * PI6[0][11][9];
    A[3354] = sp[80] * PI0[0][15][14] + sp[74] * PI1[0][11][10] + sp[75] * PI2[0][11][10] + sp[76] * PI3[0][11][10] + sp[75] * PI2[0][10][11] + sp[77] * PI4[0][11][10] + sp[78] * PI5[0][11][10] + sp[76] * PI3[0][10][11] + sp[78] * PI5[0][10][11] + sp[79] * PI6[0][11][10];
    A[3355] = sp[80] * PI0[0][15][15] + sp[74] * PI1[0][11][11] + sp[75] * PI2[0][11][11] + sp[76] * PI3[0][11][11] + sp[75] * PI2[0][11][11] + sp[77] * PI4[0][11][11] + sp[78] * PI5[0][11][11] + sp[76] * PI3[0][11][11] + sp[78] * PI5[0][11][11] + sp[79] * PI6[0][11][11];
    A[3356] = sp[80] * PI0[0][15][16] + sp[74] * PI1[0][11][12] + sp[75] * PI2[0][11][12] + sp[76] * PI3[0][11][12] + sp[75] * PI2[0][12][11] + sp[77] * PI4[0][11][12] + sp[78] * PI5[0][11][12] + sp[76] * PI3[0][12][11] + sp[78] * PI5[0][12][11] + sp[79] * PI6[0][11][12];
    A[3357] = sp[80] * PI0[0][15][17] + sp[74] * PI1[0][11][13] + sp[75] * PI2[0][11][13] + sp[76] * PI3[0][11][13] + sp[75] * PI2[0][13][11] + sp[77] * PI4[0][11][13] + sp[78] * PI5[0][11][13] + sp[76] * PI3[0][13][11] + sp[78] * PI5[0][13][11] + sp[79] * PI6[0][11][13];
    A[3358] = sp[80] * PI0[0][15][18] + sp[74] * PI1[0][11][14] + sp[75] * PI2[0][11][14] + sp[76] * PI3[0][11][14] + sp[75] * PI2[0][14][11] + sp[77] * PI4[0][11][14] + sp[78] * PI5[0][11][14] + sp[76] * PI3[0][14][11] + sp[78] * PI5[0][14][11] + sp[79] * PI6[0][11][14];
    A[3359] = sp[80] * PI0[0][15][19] + sp[74] * PI1[0][11][15] + sp[75] * PI2[0][11][15] + sp[76] * PI3[0][11][15] + sp[75] * PI2[0][15][11] + sp[77] * PI4[0][11][15] + sp[78] * PI5[0][11][15] + sp[76] * PI3[0][15][11] + sp[78] * PI5[0][15][11] + sp[79] * PI6[0][11][15];
    std::fill(A + 3360, A + 3400, 0.0);
    A[3400] = sp[80] * PI0[0][16][0] + sp[74] * PI1[0][12][0] + sp[75] * PI2[0][12][0] + sp[76] * PI3[0][12][0] + sp[75] * PI2[0][0][12] + sp[77] * PI4[0][12][0] + sp[78] * PI5[0][12][0] + sp[76] * PI3[0][0][12] + sp[78] * PI5[0][0][12] + sp[79] * PI6[0][12][0];
    A[3401] = sp[80] * PI0[0][16][1] + sp[74] * PI1[0][12][1] + sp[75] * PI2[0][1][12] + sp[76] * PI3[0][1][12];
    A[3402] = sp[80] * PI0[0][16][2] + sp[75] * PI2[0][12][1] + sp[77] * PI4[0][12][1] + sp[78] * PI5[0][1][12];
    A[3403] = sp[80] * PI0[0][16][3] + sp[76] * PI3[0][12][1] + sp[78] * PI5[0][12][1] + sp[79] * PI6[0][12][1];
    A[3404] = sp[80] * PI0[0][16][4] + sp[75] * PI2[0][12][2] + sp[76] * PI3[0][12][2] + sp[77] * PI4[0][12][2] + sp[78] * PI5[0][12][2] + sp[78] * PI5[0][2][12] + sp[79] * PI6[0][12][2];
    A[3405] = sp[80] * PI0[0][16][5] + sp[75] * PI2[0][12][3] + sp[76] * PI3[0][12][3] + sp[77] * PI4[0][12][3] + sp[78] * PI5[0][12][3] + sp[78] * PI5[0][3][12] + sp[79] * PI6[0][12][3];
    A[3406] = sp[80] * PI0[0][16][6] + sp[74] * PI1[0][12][2] + sp[76] * PI3[0][12][4] + sp[75] * PI2[0][2][12] + sp[78] * PI5[0][12][4] + sp[76] * PI3[0][2][12] + sp[79] * PI6[0][12][4];
    A[3407] = sp[80] * PI0[0][16][7] + sp[74] * PI1[0][12][3] + sp[76] * PI3[0][12][5] + sp[75] * PI2[0][3][12] + sp[78] * PI5[0][12][5] + sp[76] * PI3[0][3][12] + sp[79] * PI6[0][12][5];
    A[3408] = sp[80] * PI0[0][16][8] + sp[74] * PI1[0][12][4] + sp[75] * PI2[0][12][4] + sp[75] * PI2[0][4][12] + sp[77] * PI4[0][12][4] + sp[76] * PI3[0][4][12] + sp[78] * PI5[0][4][12];
    A[3409] = sp[80] * PI0[0][16][9] + sp[74] * PI1[0][12][5] + sp[75] * PI2[0][12][5] + sp[75] * PI2[0][5][12] + sp[77] * PI4[0][12][5] + sp[76] * PI3[0][5][12] + sp[78] * PI5[0][5][12];
    A[3410] = sp[80] * PI0[0][16][10] + sp[74] * PI1[0][12][6] + sp[75] * PI2[0][12][6] + sp[76] * PI3[0][12][6] + sp[75] * PI2[0][6][12] + sp[77] * PI4[0][12][6] + sp[78] * PI5[0][12][6] + sp[76] * PI3[0][6][12] + sp[78] * PI5[0][6][12] + sp[79] * PI6[0][12][6];
    A[3411] = sp[80] * PI0[0][16][11] + sp[74] * PI1[0][12][7] + sp[75] * PI2[0][12][7] + sp[76] * PI3[0][12][7] + sp[75] * PI2[0][7][12] + sp[77] * PI4[0][12][7] + sp[78] * PI5[0][12][7] + sp[76] * PI3[0][7][12] + sp[78] * PI5[0][7][12] + sp[79] * PI6[0][12][7];
    A[3412] = sp[80] * PI0[0][16][12] + sp[74] * PI1[0][12][8] + sp[75] * PI2[0][12][8] + sp[76] * PI3[0][12][8] + sp[75] * PI2[0][8][12] + sp[77] * PI4[0][12][8] + sp[78] * PI5[0][12][8] + sp[76] * PI3[0][8][12] + sp[78] * PI5[0][8][12] + sp[79] * PI6[0][12][8];
    A[3413] = sp[80] * PI0[0][16][13] + sp[74] * PI1[0][12][9] + sp[75] * PI2[0][12][9] + sp[76] * PI3[0][12][9] + sp[75] * PI2[0][9][12] + sp[77] * PI4[0][12][9] + sp[78] * PI5[0][12][9] + sp[76] * PI3[0][9][12] + sp[78] * PI5[0][9][12] + sp[79] * PI6[0][12][9];
    A[3414] = sp[80] * PI0[0][16][14] + sp[74] * PI1[0][12][10] + sp[75] * PI2[0][12][10] + sp[76] * PI3[0][12][10] + sp[75] * PI2[0][10][12] + sp[77] * PI4[0][12][10] + sp[78] * PI5[0][12][10] + sp[76] * PI3[0][10][12] + sp[78] * PI5[0][10][12] + sp[79] * PI6[0][12][10];
    A[3415] = sp[80] * PI0[0][16][15] + sp[74] * PI1[0][12][11] + sp[75] * PI2[0][12][11] + sp[76] * PI3[0][12][11] + sp[75] * PI2[0][11][12] + sp[77] * PI4[0][12][11] + sp[78] * PI5[0][12][11] + sp[76] * PI3[0][11][12] + sp[78] * PI5[0][11][12] + sp[79] * PI6[0][12][11];
    A[3416] = sp[80] * PI0[0][16][16] + sp[74] * PI1[0][12][12] + sp[75] * PI2[0][12][12] + sp[76] * PI3[0][12][12] + sp[75] * PI2[0][12][12] + sp[77] * PI4[0][12][12] + sp[78] * PI5[0][12][12] + sp[76] * PI3[0][12][12] + sp[78] * PI5[0][12][12] + sp[79] * PI6[0][12][12];
    A[3417] = sp[80] * PI0[0][16][17] + sp[74] * PI1[0][12][13] + sp[75] * PI2[0][12][13] + sp[76] * PI3[0][12][13] + sp[75] * PI2[0][13][12] + sp[77] * PI4[0][12][13] + sp[78] * PI5[0][12][13] + sp[76] * PI3[0][13][12] + sp[78] * PI5[0][13][12] + sp[79] * PI6[0][12][13];
    A[3418] = sp[80] * PI0[0][16][18] + sp[74] * PI1[0][12][14] + sp[75] * PI2[0][12][14] + sp[76] * PI3[0][12][14] + sp[75] * PI2[0][14][12] + sp[77] * PI4[0][12][14] + sp[78] * PI5[0][12][14] + sp[76] * PI3[0][14][12] + sp[78] * PI5[0][14][12] + sp[79] * PI6[0][12][14];
    A[3419] = sp[80] * PI0[0][16][19] + sp[74] * PI1[0][12][15] + sp[75] * PI2[0][12][15] + sp[76] * PI3[0][12][15] + sp[75] * PI2[0][15][12] + sp[77] * PI4[0][12][15] + sp[78] * PI5[0][12][15] + sp[76] * PI3[0][15][12] + sp[78] * PI5[0][15][12] + sp[79] * PI6[0][12][15];
    std::fill(A + 3420, A + 3460, 0.0);
    A[3460] = sp[80] * PI0[0][17][0] + sp[74] * PI1[0][13][0] + sp[75] * PI2[0][13][0] + sp[76] * PI3[0][13][0] + sp[75] * PI2[0][0][13] + sp[77] * PI4[0][13][0] + sp[78] * PI5[0][13][0] + sp[76] * PI3[0][0][13] + sp[78] * PI5[0][0][13] + sp[79] * PI6[0][13][0];
    A[3461] = sp[80] * PI0[0][17][1] + sp[74] * PI1[0][13][1] + sp[75] * PI2[0][1][13] + sp[76] * PI3[0][1][13];
    A[3462] = sp[80] * PI0[0][17][2] + sp[75] * PI2[0][13][1] + sp[77] * PI4[0][13][1] + sp[78] * PI5[0][1][13];
    A[3463] = sp[80] * PI0[0][17][3] + sp[76] * PI3[0][13][1] + sp[78] * PI5[0][13][1] + sp[79] * PI6[0][13][1];
    A[3464] = sp[80] * PI0[0][17][4] + sp[75] * PI2[0][13][2] + sp[76] * PI3[0][13][2] + sp[77] * PI4[0][13][2] + sp[78] * PI5[0][13][2] + sp[78] * PI5[0][2][13] + sp[79] * PI6[0][13][2];
    A[3465] = sp[80] * PI0[0][17][5] + sp[75] * PI2[0][13][3] + sp[76] * PI3[0][13][3] + sp[77] * PI4[0][13][3] + sp[78] * PI5[0][13][3] + sp[78] * PI5[0][3][13] + sp[79] * PI6[0][13][3];
    A[3466] = sp[80] * PI0[0][17][6] + sp[74] * PI1[0][13][2] + sp[76] * PI3[0][13][4] + sp[75] * PI2[0][2][13] + sp[78] * PI5[0][13][4] + sp[76] * PI3[0][2][13] + sp[79] * PI6[0][13][4];
    A[3467] = sp[80] * PI0[0][17][7] + sp[74] * PI1[0][13][3] + sp[76] * PI3[0][13][5] + sp[75] * PI2[0][3][13] + sp[78] * PI5[0][13][5] + sp[76] * PI3[0][3][13] + sp[79] * PI6[0][13][5];
    A[3468] = sp[80] * PI0[0][17][8] + sp[74] * PI1[0][13][4] + sp[75] * PI2[0][13][4] + sp[75] * PI2[0][4][13] + sp[77] * PI4[0][13][4] + sp[76] * PI3[0][4][13] + sp[78] * PI5[0][4][13];
    A[3469] = sp[80] * PI0[0][17][9] + sp[74] * PI1[0][13][5] + sp[75] * PI2[0][13][5] + sp[75] * PI2[0][5][13] + sp[77] * PI4[0][13][5] + sp[76] * PI3[0][5][13] + sp[78] * PI5[0][5][13];
    A[3470] = sp[80] * PI0[0][17][10] + sp[74] * PI1[0][13][6] + sp[75] * PI2[0][13][6] + sp[76] * PI3[0][13][6] + sp[75] * PI2[0][6][13] + sp[77] * PI4[0][13][6] + sp[78] * PI5[0][13][6] + sp[76] * PI3[0][6][13] + sp[78] * PI5[0][6][13] + sp[79] * PI6[0][13][6];
    A[3471] = sp[80] * PI0[0][17][11] + sp[74] * PI1[0][13][7] + sp[75] * PI2[0][13][7] + sp[76] * PI3[0][13][7] + sp[75] * PI2[0][7][13] + sp[77] * PI4[0][13][7] + sp[78] * PI5[0][13][7] + sp[76] * PI3[0][7][13] + sp[78] * PI5[0][7][13] + sp[79] * PI6[0][13][7];
    A[3472] = sp[80] * PI0[0][17][12] + sp[74] * PI1[0][13][8] + sp[75] * PI2[0][13][8] + sp[76] * PI3[0][13][8] + sp[75] * PI2[0][8][13] + sp[77] * PI4[0][13][8] + sp[78] * PI5[0][13][8] + sp[76] * PI3[0][8][13] + sp[78] * PI5[0][8][13] + sp[79] * PI6[0][13][8];
    A[3473] = sp[80] * PI0[0][17][13] + sp[74] * PI1[0][13][9] + sp[75] * PI2[0][13][9] + sp[76] * PI3[0][13][9] + sp[75] * PI2[0][9][13] + sp[77] * PI4[0][13][9] + sp[78] * PI5[0][13][9] + sp[76] * PI3[0][9][13] + sp[78] * PI5[0][9][13] + sp[79] * PI6[0][13][9];
    A[3474] = sp[80] * PI0[0][17][14] + sp[74] * PI1[0][13][10] + sp[75] * PI2[0][13][10] + sp[76] * PI3[0][13][10] + sp[75] * PI2[0][10][13] + sp[77] * PI4[0][13][10] + sp[78] * PI5[0][13][10] + sp[76] * PI3[0][10][13] + sp[78] * PI5[0][10][13] + sp[79] * PI6[0][13][10];
    A[3475] = sp[80] * PI0[0][17][15] + sp[74] * PI1[0][13][11] + sp[75] * PI2[0][13][11] + sp[76] * PI3[0][13][11] + sp[75] * PI2[0][11][13] + sp[77] * PI4[0][13][11] + sp[78] * PI5[0][13][11] + sp[76] * PI3[0][11][13] + sp[78] * PI5[0][11][13] + sp[79] * PI6[0][13][11];
    A[3476] = sp[80] * PI0[0][17][16] + sp[74] * PI1[0][13][12] + sp[75] * PI2[0][13][12] + sp[76] * PI3[0][13][12] + sp[75] * PI2[0][12][13] + sp[77] * PI4[0][13][12] + sp[78] * PI5[0][13][12] + sp[76] * PI3[0][12][13] + sp[78] * PI5[0][12][13] + sp[79] * PI6[0][13][12];
    A[3477] = sp[80] * PI0[0][17][17] + sp[74] * PI1[0][13][13] + sp[75] * PI2[0][13][13] + sp[76] * PI3[0][13][13] + sp[75] * PI2[0][13][13] + sp[77] * PI4[0][13][13] + sp[78] * PI5[0][13][13] + sp[76] * PI3[0][13][13] + sp[78] * PI5[0][13][13] + sp[79] * PI6[0][13][13];
    A[3478] = sp[80] * PI0[0][17][18] + sp[74] * PI1[0][13][14] + sp[75] * PI2[0][13][14] + sp[76] * PI3[0][13][14] + sp[75] * PI2[0][14][13] + sp[77] * PI4[0][13][14] + sp[78] * PI5[0][13][14] + sp[76] * PI3[0][14][13] + sp[78] * PI5[0][14][13] + sp[79] * PI6[0][13][14];
    A[3479] = sp[80] * PI0[0][17][19] + sp[74] * PI1[0][13][15] + sp[75] * PI2[0][13][15] + sp[76] * PI3[0][13][15] + sp[75] * PI2[0][15][13] + sp[77] * PI4[0][13][15] + sp[78] * PI5[0][13][15] + sp[76] * PI3[0][15][13] + sp[78] * PI5[0][15][13] + sp[79] * PI6[0][13][15];
    std::fill(A + 3480, A + 3520, 0.0);
    A[3520] = sp[80] * PI0[0][18][0] + sp[74] * PI1[0][14][0] + sp[75] * PI2[0][14][0] + sp[76] * PI3[0][14][0] + sp[75] * PI2[0][0][14] + sp[77] * PI4[0][14][0] + sp[78] * PI5[0][14][0] + sp[76] * PI3[0][0][14] + sp[78] * PI5[0][0][14] + sp[79] * PI6[0][14][0];
    A[3521] = sp[80] * PI0[0][18][1] + sp[74] * PI1[0][14][1] + sp[75] * PI2[0][1][14] + sp[76] * PI3[0][1][14];
    A[3522] = sp[80] * PI0[0][18][2] + sp[75] * PI2[0][14][1] + sp[77] * PI4[0][14][1] + sp[78] * PI5[0][1][14];
    A[3523] = sp[80] * PI0[0][18][3] + sp[76] * PI3[0][14][1] + sp[78] * PI5[0][14][1] + sp[79] * PI6[0][14][1];
    A[3524] = sp[80] * PI0[0][18][4] + sp[75] * PI2[0][14][2] + sp[76] * PI3[0][14][2] + sp[77] * PI4[0][14][2] + sp[78] * PI5[0][14][2] + sp[78] * PI5[0][2][14] + sp[79] * PI6[0][14][2];
    A[3525] = sp[80] * PI0[0][18][5] + sp[75] * PI2[0][14][3] + sp[76] * PI3[0][14][3] + sp[77] * PI4[0][14][3] + sp[78] * PI5[0][14][3] + sp[78] * PI5[0][3][14] + sp[79] * PI6[0][14][3];
    A[3526] = sp[80] * PI0[0][18][6] + sp[74] * PI1[0][14][2] + sp[76] * PI3[0][14][4] + sp[75] * PI2[0][2][14] + sp[78] * PI5[0][14][4] + sp[76] * PI3[0][2][14] + sp[79] * PI6[0][14][4];
    A[3527] = sp[80] * PI0[0][18][7] + sp[74] * PI1[0][14][3] + sp[76] * PI3[0][14][5] + sp[75] * PI2[0][3][14] + sp[78] * PI5[0][14][5] + sp[76] * PI3[0][3][14] + sp[79] * PI6[0][14][5];
    A[3528] = sp[80] * PI0[0][18][8] + sp[74] * PI1[0][14][4] + sp[75] * PI2[0][14][4] + sp[75] * PI2[0][4][14] + sp[77] * PI4[0][14][4] + sp[76] * PI3[0][4][14] + sp[78] * PI5[0][4][14];
    A[3529] = sp[80] * PI0[0][18][9] + sp[74] * PI1[0][14][5] + sp[75] * PI2[0][14][5] + sp[75] * PI2[0][5][14] + sp[77] * PI4[0][14][5] + sp[76] * PI3[0][5][14] + sp[78] * PI5[0][5][14];
    A[3530] = sp[80] * PI0[0][18][10] + sp[74] * PI1[0][14][6] + sp[75] * PI2[0][14][6] + sp[76] * PI3[0][14][6] + sp[75] * PI2[0][6][14] + sp[77] * PI4[0][14][6] + sp[78] * PI5[0][14][6] + sp[76] * PI3[0][6][14] + sp[78] * PI5[0][6][14] + sp[79] * PI6[0][14][6];
    A[3531] = sp[80] * PI0[0][18][11] + sp[74] * PI1[0][14][7] + sp[75] * PI2[0][14][7] + sp[76] * PI3[0][14][7] + sp[75] * PI2[0][7][14] + sp[77] * PI4[0][14][7] + sp[78] * PI5[0][14][7] + sp[76] * PI3[0][7][14] + sp[78] * PI5[0][7][14] + sp[79] * PI6[0][14][7];
    A[3532] = sp[80] * PI0[0][18][12] + sp[74] * PI1[0][14][8] + sp[75] * PI2[0][14][8] + sp[76] * PI3[0][14][8] + sp[75] * PI2[0][8][14] + sp[77] * PI4[0][14][8] + sp[78] * PI5[0][14][8] + sp[76] * PI3[0][8][14] + sp[78] * PI5[0][8][14] + sp[79] * PI6[0][14][8];
    A[3533] = sp[80] * PI0[0][18][13] + sp[74] * PI1[0][14][9] + sp[75] * PI2[0][14][9] + sp[76] * PI3[0][14][9] + sp[75] * PI2[0][9][14] + sp[77] * PI4[0][14][9] + sp[78] * PI5[0][14][9] + sp[76] * PI3[0][9][14] + sp[78] * PI5[0][9][14] + sp[79] * PI6[0][14][9];
    A[3534] = sp[80] * PI0[0][18][14] + sp[74] * PI1[0][14][10] + sp[75] * PI2[0][14][10] + sp[76] * PI3[0][14][10] + sp[75] * PI2[0][10][14] + sp[77] * PI4[0][14][10] + sp[78] * PI5[0][14][10] + sp[76] * PI3[0][10][14] + sp[78] * PI5[0][10][14] + sp[79] * PI6[0][14][10];
    A[3535] = sp[80] * PI0[0][18][15] + sp[74] * PI1[0][14][11] + sp[75] * PI2[0][14][11] + sp[76] * PI3[0][14][11] + sp[75] * PI2[0][11][14] + sp[77] * PI4[0][14][11] + sp[78] * PI5[0][14][11] + sp[76] * PI3[0][11][14] + sp[78] * PI5[0][11][14] + sp[79] * PI6[0][14][11];
    A[3536] = sp[80] * PI0[0][18][16] + sp[74] * PI1[0][14][12] + sp[75] * PI2[0][14][12] + sp[76] * PI3[0][14][12] + sp[75] * PI2[0][12][14] + sp[77] * PI4[0][14][12] + sp[78] * PI5[0][14][12] + sp[76] * PI3[0][12][14] + sp[78] * PI5[0][12][14] + sp[79] * PI6[0][14][12];
    A[3537] = sp[80] * PI0[0][18][17] + sp[74] * PI1[0][14][13] + sp[75] * PI2[0][14][13] + sp[76] * PI3[0][14][13] + sp[75] * PI2[0][13][14] + sp[77] * PI4[0][14][13] + sp[78] * PI5[0][14][13] + sp[76] * PI3[0][13][14] + sp[78] * PI5[0][13][14] + sp[79] * PI6[0][14][13];
    A[3538] = sp[80] * PI0[0][18][18] + sp[74] * PI1[0][14][14] + sp[75] * PI2[0][14][14] + sp[76] * PI3[0][14][14] + sp[75] * PI2[0][14][14] + sp[77] * PI4[0][14][14] + sp[78] * PI5[0][14][14] + sp[76] * PI3[0][14][14] + sp[78] * PI5[0][14][14] + sp[79] * PI6[0][14][14];
    A[3539] = sp[80] * PI0[0][18][19] + sp[74] * PI1[0][14][15] + sp[75] * PI2[0][14][15] + sp[76] * PI3[0][14][15] + sp[75] * PI2[0][15][14] + sp[77] * PI4[0][14][15] + sp[78] * PI5[0][14][15] + sp[76] * PI3[0][15][14] + sp[78] * PI5[0][15][14] + sp[79] * PI6[0][14][15];
    std::fill(A + 3540, A + 3580, 0.0);
    A[3580] = sp[80] * PI0[0][19][0] + sp[74] * PI1[0][15][0] + sp[75] * PI2[0][15][0] + sp[76] * PI3[0][15][0] + sp[75] * PI2[0][0][15] + sp[77] * PI4[0][15][0] + sp[78] * PI5[0][15][0] + sp[76] * PI3[0][0][15] + sp[78] * PI5[0][0][15] + sp[79] * PI6[0][15][0];
    A[3581] = sp[80] * PI0[0][19][1] + sp[74] * PI1[0][15][1] + sp[75] * PI2[0][1][15] + sp[76] * PI3[0][1][15];
    A[3582] = sp[80] * PI0[0][19][2] + sp[75] * PI2[0][15][1] + sp[77] * PI4[0][15][1] + sp[78] * PI5[0][1][15];
    A[3583] = sp[80] * PI0[0][19][3] + sp[76] * PI3[0][15][1] + sp[78] * PI5[0][15][1] + sp[79] * PI6[0][15][1];
    A[3584] = sp[80] * PI0[0][19][4] + sp[75] * PI2[0][15][2] + sp[76] * PI3[0][15][2] + sp[77] * PI4[0][15][2] + sp[78] * PI5[0][15][2] + sp[78] * PI5[0][2][15] + sp[79] * PI6[0][15][2];
    A[3585] = sp[80] * PI0[0][19][5] + sp[75] * PI2[0][15][3] + sp[76] * PI3[0][15][3] + sp[77] * PI4[0][15][3] + sp[78] * PI5[0][15][3] + sp[78] * PI5[0][3][15] + sp[79] * PI6[0][15][3];
    A[3586] = sp[80] * PI0[0][19][6] + sp[74] * PI1[0][15][2] + sp[76] * PI3[0][15][4] + sp[75] * PI2[0][2][15] + sp[78] * PI5[0][15][4] + sp[76] * PI3[0][2][15] + sp[79] * PI6[0][15][4];
    A[3587] = sp[80] * PI0[0][19][7] + sp[74] * PI1[0][15][3] + sp[76] * PI3[0][15][5] + sp[75] * PI2[0][3][15] + sp[78] * PI5[0][15][5] + sp[76] * PI3[0][3][15] + sp[79] * PI6[0][15][5];
    A[3588] = sp[80] * PI0[0][19][8] + sp[74] * PI1[0][15][4] + sp[75] * PI2[0][15][4] + sp[75] * PI2[0][4][15] + sp[77] * PI4[0][15][4] + sp[76] * PI3[0][4][15] + sp[78] * PI5[0][4][15];
    A[3589] = sp[80] * PI0[0][19][9] + sp[74] * PI1[0][15][5] + sp[75] * PI2[0][15][5] + sp[75] * PI2[0][5][15] + sp[77] * PI4[0][15][5] + sp[76] * PI3[0][5][15] + sp[78] * PI5[0][5][15];
    A[3590] = sp[80] * PI0[0][19][10] + sp[74] * PI1[0][15][6] + sp[75] * PI2[0][15][6] + sp[76] * PI3[0][15][6] + sp[75] * PI2[0][6][15] + sp[77] * PI4[0][15][6] + sp[78] * PI5[0][15][6] + sp[76] * PI3[0][6][15] + sp[78] * PI5[0][6][15] + sp[79] * PI6[0][15][6];
    A[3591] = sp[80] * PI0[0][19][11] + sp[74] * PI1[0][15][7] + sp[75] * PI2[0][15][7] + sp[76] * PI3[0][15][7] + sp[75] * PI2[0][7][15] + sp[77] * PI4[0][15][7] + sp[78] * PI5[0][15][7] + sp[76] * PI3[0][7][15] + sp[78] * PI5[0][7][15] + sp[79] * PI6[0][15][7];
    A[3592] = sp[80] * PI0[0][19][12] + sp[74] * PI1[0][15][8] + sp[75] * PI2[0][15][8] + sp[76] * PI3[0][15][8] + sp[75] * PI2[0][8][15] + sp[77] * PI4[0][15][8] + sp[78] * PI5[0][15][8] + sp[76] * PI3[0][8][15] + sp[78] * PI5[0][8][15] + sp[79] * PI6[0][15][8];
    A[3593] = sp[80] * PI0[0][19][13] + sp[74] * PI1[0][15][9] + sp[75] * PI2[0][15][9] + sp[76] * PI3[0][15][9] + sp[75] * PI2[0][9][15] + sp[77] * PI4[0][15][9] + sp[78] * PI5[0][15][9] + sp[76] * PI3[0][9][15] + sp[78] * PI5[0][9][15] + sp[79] * PI6[0][15][9];
    A[3594] = sp[80] * PI0[0][19][14] + sp[74] * PI1[0][15][10] + sp[75] * PI2[0][15][10] + sp[76] * PI3[0][15][10] + sp[75] * PI2[0][10][15] + sp[77] * PI4[0][15][10] + sp[78] * PI5[0][15][10] + sp[76] * PI3[0][10][15] + sp[78] * PI5[0][10][15] + sp[79] * PI6[0][15][10];
    A[3595] = sp[80] * PI0[0][19][15] + sp[74] * PI1[0][15][11] + sp[75] * PI2[0][15][11] + sp[76] * PI3[0][15][11] + sp[75] * PI2[0][11][15] + sp[77] * PI4[0][15][11] + sp[78] * PI5[0][15][11] + sp[76] * PI3[0][11][15] + sp[78] * PI5[0][11][15] + sp[79] * PI6[0][15][11];
    A[3596] = sp[80] * PI0[0][19][16] + sp[74] * PI1[0][15][12] + sp[75] * PI2[0][15][12] + sp[76] * PI3[0][15][12] + sp[75] * PI2[0][12][15] + sp[77] * PI4[0][15][12] + sp[78] * PI5[0][15][12] + sp[76] * PI3[0][12][15] + sp[78] * PI5[0][12][15] + sp[79] * PI6[0][15][12];
    A[3597] = sp[80] * PI0[0][19][17] + sp[74] * PI1[0][15][13] + sp[75] * PI2[0][15][13] + sp[76] * PI3[0][15][13] + sp[75] * PI2[0][13][15] + sp[77] * PI4[0][15][13] + sp[78] * PI5[0][15][13] + sp[76] * PI3[0][13][15] + sp[78] * PI5[0][13][15] + sp[79] * PI6[0][15][13];
    A[3598] = sp[80] * PI0[0][19][18] + sp[74] * PI1[0][15][14] + sp[75] * PI2[0][15][14] + sp[76] * PI3[0][15][14] + sp[75] * PI2[0][14][15] + sp[77] * PI4[0][15][14] + sp[78] * PI5[0][15][14] + sp[76] * PI3[0][14][15] + sp[78] * PI5[0][14][15] + sp[79] * PI6[0][15][14];
    A[3599] = sp[80] * PI0[0][19][19] + sp[74] * PI1[0][15][15] + sp[75] * PI2[0][15][15] + sp[76] * PI3[0][15][15] + sp[75] * PI2[0][15][15] + sp[77] * PI4[0][15][15] + sp[78] * PI5[0][15][15] + sp[76] * PI3[0][15][15] + sp[78] * PI5[0][15][15] + sp[79] * PI6[0][15][15];
  }

};


class tentativevelocity_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  tentativevelocity_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~tentativevelocity_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation,
                       std::size_t local_facet) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 8
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 8
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           8
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights125[125] = { 0.0009374398217669896, 0.00144688123847005, 0.001022687015780538, 0.0003675200380073259, 4.716533650593668e-5, 0.00161927658526932, 0.002499254732643926, 0.001766527408224398, 0.0006348317815652555, 8.147053631288457e-5, 0.001417924532550919, 0.00218848010941899, 0.001546865169503061, 0.000555892406098535, 7.133992621705589e-5, 0.0007158915019438664, 0.0011049349077046, 0.0007809919386245139, 0.0002806627859136635, 3.601859320129841e-5, 0.0001525364704986181, 0.0002354307468301134, 0.0001664075540527897, 5.980139538929234e-5, 7.674555521798026e-6, 0.001893772314860291, 0.002922922163836156, 0.002065984730200279, 0.0007424468824279085, 9.528121850813992e-5, 0.003271187222988238, 0.005048878136564872, 0.003568656484883998, 0.00128245763045955, 0.0001645829871568122, 0.002864425173708474, 0.004421065701079484, 0.003124905049696836, 0.001122987976685449, 0.0001441175999536503, 0.001446210706378578, 0.002232138094997412, 0.001577723579854278, 0.000566981902660168, 7.276308627071377e-5, 0.0003081470811558803, 0.0004756062416607817, 0.0003361687988193031, 0.0001208079967893717, 1.550378001720074e-5, 0.00225090157446144, 0.00347412941301363, 0.002455589959537544, 0.0008824581727683852, 0.0001132494350422472, 0.003888070605322779, 0.006001000045085255, 0.004241636883961954, 0.001524304625709162, 0.0001956201925721813, 0.00340460100870312, 0.00525479418474413, 0.003714202410295571, 0.00133476204345559, 0.0001712954245332323, 0.001718938401647658, 0.002653076672955637, 0.001875252089225375, 0.0006739038517854064, 8.648481349327676e-5, 0.0003662577305079242, 0.0005652964877443141, 0.000399563808494583, 0.0001435900757693727, 1.842749657758908e-5, 0.001893772314860291, 0.002922922163836156, 0.002065984730200279, 0.0007424468824279085, 9.528121850813992e-5, 0.003271187222988238, 0.005048878136564872, 0.003568656484883998, 0.00128245763045955, 0.0001645829871568122, 0.002864425173708474, 0.004421065701079484, 0.003124905049696836, 0.001122987976685449, 0.0001441175999536503, 0.001446210706378578, 0.002232138094997412, 0.001577723579854278, 0.000566981902660168, 7.276308627071377e-5, 0.0003081470811558803, 0.0004756062416607817, 0.0003361687988193031, 0.0001208079967893717, 1.550378001720074e-5, 0.0009374398217669897, 0.00144688123847005, 0.001022687015780538, 0.000367520038007326, 4.716533650593669e-5, 0.00161927658526932, 0.002499254732643926, 0.001766527408224398, 0.0006348317815652555, 8.147053631288457e-5, 0.001417924532550919, 0.002188480109418991, 0.001546865169503061, 0.0005558924060985351, 7.133992621705591e-5, 0.0007158915019438664, 0.0011049349077046, 0.0007809919386245139, 0.0002806627859136635, 3.601859320129841e-5, 0.0001525364704986181, 0.0002354307468301134, 0.0001664075540527897, 5.980139538929235e-5, 7.674555521798026e-6 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE17_C0_D001_Q125[1][125][16] =
        { { { -3.586265738526325, 0.7049315323952754, -0.1530086609423692, -0.1370672238558028, -0.1701549670640642, -0.1550837835940051, 5.892767336603142, -3.011433130472092, -0.7438596289923824, 0.1530086609423759, -0.8416349473039089, 0.1701549670640664, 0.04512438631517124, 0.8809268528481794, 0.9967187308979173, -0.04512438631516823 },
            { -1.916159708320968, -0.1550346940620816, -0.1334505763054535, 0.006053236799299491, -0.148818088130557, 0.006848893845073742, 1.55766956389592, 0.5135248384871244, -0.5239067827913377, 0.1334505763054591, -0.5927707867733509, 0.1488180881305528, 0.0330738055430211, 0.5178535459920328, 0.5859218929282876, -0.03307380554301953 },
            { -0.1835021661761114, -0.456823653533121, -0.1013343156647213, 0.1463853640888809, -0.1134696015442023, 0.1656267303522164, -2.427110530038707, 3.067436349747932, -0.2568582456845204, 0.1013343156647251, -0.2906205252247653, 0.1134696015441933, 0.01802184300073378, 0.1104728815956363, 0.1249937948725652, -0.01802184300073531 },
            { 0.4999769917855989, 0.7231146320714794, -0.06264630850898559, 0.1838129628255083, -0.07045528440202115, 0.2079739338603293, -2.870962084634786, 1.647870460777701, -0.06602020917707048, 0.06264630850898519, -0.0746981192500045, 0.07045528440201226, 0.006473634663021754, -0.1177927536484381, -0.1332758146103097, -0.00647363466302437 },
            { -0.02405959736797675, 3.118471274037539, -0.02620814943155425, 0.1095682446605997, -0.02958244357217965, 0.1239702495294983, 0.335052723109993, -3.429464399779562, 0.004860425416188419, 0.02620814943154776, 0.005499295471337207, 0.02958244357217166, 0.001074074037650696, -0.1144286700767851, -0.1294695450008223, -0.001074074037650807 },
            { -1.709977170122151, 0.7049315323952756, -0.3668968518087038, -0.6817695788016606, -0.1456328069833746, -0.1295317541647057, 3.497328442682407, -2.492282804955535, -2.948593049784227, 0.3668968518087101, -0.5602133652365945, 0.1456328069833761, 0.1874671467804604, 3.630362628585884, 0.6897451194013061, -0.1874671467804598 },
            { -0.7023134870157806, -0.1550346940620819, -0.3748781206208345, 0.03010867650889963, -0.1268732848720305, 0.005720451315289074, 0.3667503397705477, 0.4905978413073089, -2.055201870256939, 0.3748781206208394, -0.3904748931228197, 0.1268732848720281, 0.1374035740899923, 2.025093193748035, 0.3847544418075411, -0.137403574089993 },
            { 0.2611397489865214, -0.4568236535331217, -0.3466125867863595, 0.7281178184698662, -0.09617708142442721, 0.1383376161059626, -2.317309105066608, 2.512993009613202, -0.9775325896090618, 0.346612586786362, -0.1857247888763121, 0.09617708142442059, 0.07487090158914078, 0.2494147711391939, 0.04738717277036447, -0.07487090158914311 },
            { 0.460880717632778, 0.7231146320714786, -0.2550537475026861, 0.9142819320224338, -0.05935086613116644, 0.1737075782467871, -2.135663196898582, 0.9516678471943192, -0.2205930613417521, 0.2550537475026849, -0.0419112367002126, 0.05935086613115857, 0.02689441161815695, -0.6936888706806819, -0.1317963415465602, -0.02689441161815914 },
            { -0.150340555649499, 3.118471274037538, -0.1209766789901114, 0.5449902165588365, -0.02479197822562185, 0.103544571286907, 0.8763299750471585, -3.844460693435205, 0.04205966944788375, 0.1209766789901047, 0.007991061690882595, 0.0247919782256143, 0.004462190219369333, -0.5870498860067168, -0.1115356329777764, -0.004462190219368722 },
            { 0.04391404476219424, 0.7049315323952755, 0.5108660505102554, -1.507968021130223, -0.105792391657126, -0.09077472159245414, 0.9559958180417495, -1.704841395199226, -4.001125102894964, -0.5108660505102537, -0.2408545885473453, 0.1057923916571297, 0.2905817675981074, 5.50909312402519, 0.3316293101398057, -0.2905817675981123 },
            { 0.3384252249372275, -0.1550346940620817, 0.1400665738549768, 0.06659569852586265, -0.09164865685904902, 0.004008842301851959, -0.6392129591789357, 0.4558224283037829, -2.698243174575463, -0.1400665738549763, -0.1624253760880502, 0.09164865685904848, 0.2129811762704495, 2.631647476049603, 0.1584165337862079, -0.2129811762704533 },
            { 0.4994261900414773, -0.4568236535331225, -0.2385170865248456, 1.610483101633211, -0.06889142575628818, 0.09694579270358011, -1.714622086360603, 1.672019549852242, -1.155427647363564, 0.2385170865248449, -0.06955294909439949, 0.06889142575628354, 0.1160529687418531, -0.4550554542696456, -0.02739284360916824, -0.116052968741856 },
            { 0.2449133534525069, 0.7231146320714772, -0.374427176130287, 2.022249098016861, -0.04212828321446713, 0.121732753142536, -0.8637034918281373, -0.1043244936958523, -0.1262923644448733, 0.3744271761302843, -0.007602385502276494, 0.04212828321446057, 0.04168744124360316, -1.895956733571986, -0.1141303676402466, -0.04168744124360394 },
            { -0.3678754585860022, 3.118471274037537, -0.2361054678592782, 1.205433395611571, -0.01746288492760084, 0.07256313088316135, 1.723326616632651, -4.473922432084191, 0.1530285123814325, 0.2361054678592716, 0.009211813786819512, 0.01746288492759457, 0.006916577883500308, -1.358461907993001, -0.08177494466996893, -0.006916577883497699 },
            { 0.4619066773180044, 0.7049315323952747, 3.064418546200742, -2.394516441398717, -0.05949524235412096, -0.04918666690624307, -0.3069571800963463, -0.8598810296169436, -2.058401034062884, -3.064418546200752, -0.04228239333481593, 0.05949524235412423, 0.2500210192050283, 4.452917475461616, 0.09146906024106516, -0.2500210192050304 },
            { 0.3821410054265225, -0.1550346940620817, 1.873897324596612, 0.1057479288765665, -0.05125157877053083, 0.002172208160175562, -0.6456131434592047, 0.4185068320947557, -1.136539317400064, -1.873897324596619, -0.02334608351995386, 0.05125157877053148, 0.183252277673084, 1.030791388523508, 0.02117387535978456, -0.1832522776730844 },
            { 0.1704190218352286, -0.4568236535331225, 0.5211466239153814, 2.557301090884683, -0.03819624245989384, 0.05253048789376813, -0.4832122337126956, 0.7696168654105842, -0.1193618875400292, -0.5211466239153867, -0.002451857628632245, 0.0381962424598913, 0.09985375808828548, -2.437939203344648, -0.05007863026512763, -0.09985375808828575 },
            { -0.196859549616566, 0.7231146320714763, -0.2713064417379513, 3.211148145022196, -0.02313887136183951, 0.065961407265826, 0.7111971123695594, -1.237452194824475, 0.415631725027182, 0.2713064417379469, 0.00853764829555189, 0.0231388713618347, 0.03586851519945311, -3.626779870049377, -0.07449905556136782, -0.03586851519945092 },
            { -0.636147458955564, 3.118471274037536, -0.3212820047111753, 1.9141188966591, -0.009514017800594132, 0.039318639438505, 2.667039626605083, -5.149363441687061, 0.3452277551014383, 0.3212820047111682, 0.007091453749652532, 0.009514017800587526, 0.005951129921668574, -2.259346651760535, -0.04641009318814504, -0.005951129921664744 },
            { -0.2949843492973925, 0.7049315323952726, 6.308719277314955, -3.103786407301448, -0.01981221356680818, -0.01591475817020727, -0.2260642106476469, -0.1838829724502475, 1.785871616887401, -6.308719277314976, 0.009157110437421387, 0.01981221356680711, 0.1048583874106166, 1.317914790414067, 0.006757647732793193, -0.1048583874106055 },
            { -0.3827503177245997, -0.1550346940620823, 4.141563231398178, 0.1370710923394815, -0.01699481577233288, 0.0007028361492845553, 0.1491319711439399, 0.3886530406427332, 1.79134682116806, -4.141563231398194, 0.009185184712068717, 0.01699481577233183, 0.07685569152233646, -1.928417913507526, -0.00988802086134976, -0.07685569152232795 },
            { -0.5286432255937394, -0.4568236535331225, 1.608708763091723, 3.314788835038692, -0.01258317839753259, 0.01699667946571481, 0.9378039494422268, 0.04766292968463032, 1.624120714778999, -1.608708763091733, 0.008327727821131524, 0.01258317839753014, 0.04187849518940681, -4.938909549817682, -0.02532440728684218, -0.04187849518939963 },
            { -0.7068534929806041, 0.7231146320714756, -0.01645545460694603, 4.16230926296303, -0.007567405557267454, 0.02134236595464328, 2.127733132363248, -2.143994271454124, 1.177721645126405, 0.01645545460693928, 0.006038803163100848, 0.007567405557263041, 0.01504319386661207, -5.340030908089433, -0.02738116911773611, -0.01504319386660585 },
            { -0.8767501944164207, 3.118471274037534, -0.3608306320218897, 2.481092261759125, -0.003091717885341572, 0.01272187520732526, 3.448018962934784, -5.689740042555904, 0.5535022810988905, 0.3608306320218824, 0.002838099596550958, 0.003091717885335243, 0.002495893700626084, -3.034594542858014, -0.01555997480386373, -0.002495893700620866 },
            { -1.446710717421097, 0.7049315323952754, -0.1530086609423691, -0.1370672238558035, -0.3448604196978796, -0.762905650173704, 3.145390448918215, -2.403611263892393, -0.5670030416514783, 0.1530086609423763, -3.155895421042955, 0.3448604196978832, 0.221980973656075, 0.7040702655072777, 3.918801071216659, -0.2219809736560758 },
            { -0.5369160196221117, -0.1550346940620815, -0.1334505763054531, 0.006053236799298839, -0.371336904011956, 0.03369185153182229, 0.2052688328838143, 0.4866818808003758, -0.3942801915760916, 0.1334505763054597, -2.19453329135361, 0.3713369040119553, 0.1627003967582675, 0.3882269547767871, 2.160841439821794, -0.1627003967582673 },
            { 0.3142381266923367, -0.4568236535331209, -0.101334315664721, 0.146385364088881, -0.3616228699657605, 0.8147697036866828, -2.275707849572686, 2.418293376413466, -0.1862250047481796, 0.1013343156647253, -1.036514086514775, 0.3616228699657569, 0.08865508393707577, 0.0398396406592946, 0.2217443828281026, -0.08865508393707688 },
            { 0.4459961310590528, 0.7231146320714792, -0.06264630850898528, 0.1838129628255094, -0.2759817283470234, 1.023088846260436, -2.001866311508131, 0.8327555483775952, -0.04064800962628751, 0.0626463085089852, -0.2262437024684627, 0.2759817283470192, 0.03184583421380688, -0.1431649531992231, -0.7968451437919637, -0.03184583421380839 },
            { -0.1732711530146633, 3.118471274037539, -0.02620814943155403, 0.1095682446606001, -0.1338100500832575, 0.6098484420981825, 0.9701424713253641, -3.915342592348244, 0.009070057598775216, 0.02620814943154781, 0.05048324460694409, 0.1338100500832529, 0.00528370622023866, -0.1186383022593729, -0.660331686705117, -0.005283706220238049 },
            { -0.4284650548711204, 0.7049315323952752, -0.3668968518087041, -0.6817695788016609, -0.3730545434672303, -0.6372072233410941, 1.70814085825499, -1.984607335779146, -2.213850651592717, 0.3668968518087102, -2.069147216971484, 0.3730545434672335, 0.9222095449719723, 2.895620230394374, 2.70635444031258, -0.9222095449719722 },
            { 0.0791597181126359, -0.1550346940620818, -0.3748781206208347, 0.03010867650889934, -0.3724654145944009, 0.02814068968937954, -0.392302626983776, 0.4681776029332182, -1.516674276058295, 0.3748781206208396, -1.417540227973609, 0.3724654145944006, 0.6759311682886365, 1.486565599549392, 1.389399538284237, -0.6759311682886372 },
            { 0.4749740948482736, -0.4568236535331217, -0.3466125867863595, 0.7281178184698666, -0.335994017914669, 0.6805260131844967, -1.988955053849824, 1.970804612534668, -0.6840901025753783, 0.3466125867863623, -0.6393760712283088, 0.3359940179146661, 0.3683133886228258, -0.04402771589449125, -0.04114994195617758, -0.3683133886228276 },
            { 0.3432704145900879, 0.7231146320714783, -0.2550537475026858, 0.914281932022435, -0.2427065394560358, 0.8545219226105121, -1.337238549492166, 0.2708535028305958, -0.1151854481698365, 0.2550537475026849, -0.1076566069823941, 0.2427065394560319, 0.1323020247900744, -0.7990964838525989, -0.746865315628108, -0.1323020247900753 },
            { -0.2870003494821106, 3.118471274037538, -0.120976678990111, 0.5449902165588365, -0.1137866931011513, 0.5093681405555146, 1.418813338148379, -4.250284262703811, 0.05954838893434367, 0.1209766789901048, 0.05565614064796359, 0.1137866931011465, 0.02195090970583102, -0.6045386054931785, -0.5650242812034678, -0.02195090970582894 },
            { 0.4046386622709666, 0.704931532395275, 0.5108660505102547, -1.507968021130222, -0.3517994852642583, -0.4465492548023384, 0.239496667323094, -1.349066861989341, -2.862244245835842, -0.5108660505102537, -0.8475862996632518, 0.3517994852642626, 1.429462624657233, 4.370212266966068, 1.294135554465594, -1.429462624657234 },
            { 0.4922270439070819, -0.1550346940620818, 0.1400665738549765, 0.06659569852586217, -0.3272541292827003, 0.01972074946753891, -0.7773028709831015, 0.4401105211380955, -1.863503312631254, -0.1400665738549759, -0.5518326674815586, 0.3272541292827018, 1.04772103821466, 1.796907614105393, 0.5321119180140262, -1.047721038214662 },
            { 0.4346726554302743, -0.4568236535331224, -0.2385170865248458, 1.610483101633212, -0.2715522247605974, 0.4769066842459079, -1.26990766020707, 1.292058658309914, -0.700579755159344, 0.2385170865248453, -0.2074602134875082, 0.2715522247605959, 0.570900860946074, -0.9099033464738665, -0.2694464707583908, -0.5709008609460752 },
            { 0.08540408018418891, 0.7231146320714772, -0.3744271761302868, 2.022249098016861, -0.1830507266106739, 0.598841497359681, -0.2270854743426725, -0.5814332379129976, 0.03709375989648709, 0.3744271761302846, 0.01098444436983287, 0.1830507266106708, 0.2050735655849642, -2.059342857913347, -0.6098259417295047, -0.2050735655849636 },
            { -0.4764356808355285, 3.118471274037537, -0.2361054678592782, 1.205433395611571, -0.08189166161714323, 0.3569607425234111, 2.116284450522427, -4.758320043724441, 0.1801367449900729, 0.2361054678592716, 0.05334325934680245, 0.08189166161713829, 0.03402481049214168, -1.385570140601643, -0.4103040018702033, -0.0340248104921386 },
            { 0.3449344167537142, 0.7049315323952745, 3.064418546200742, -2.394516441398717, -0.2431659903613835, -0.2419646027867213, -0.3827628554125342, -0.6671030937364646, -1.078490439572927, -3.064418546200752, -0.1089808807777894, 0.2431659903613875, 1.229931613694986, 3.473006880971659, 0.3509454835645154, -1.229931613694986 },
            { 0.2364826142292877, -0.1550346940620818, 1.873897324596611, 0.1057479288765663, -0.2158345253165818, 0.01068577152520712, -0.4914411888969377, 0.4099932687297241, -0.4183163098815956, -1.873897324596619, -0.04227063886877158, 0.2158345253165834, 0.9014752851915523, 0.3125683810050392, 0.03158486734356915, -0.9014752851915521 },
            { 0.010552330888545, -0.4568236535331223, 0.5211466239153808, 2.557301090884683, -0.1681260025324701, 0.2584139043541155, -0.1174621263056636, 0.5637334489502362, 0.2719962301152946, -0.521146623915386, 0.0274850732454732, 0.1681260025324692, 0.4912118757436099, -2.829297320999972, -0.2858989775995825, -0.4912118757436082 },
            { -0.328112503718205, 0.7231146320714763, -0.271306441737951, 3.211148145022196, -0.1067245839116876, 0.3244847986701471, 1.10097345787552, -1.495975586228796, 0.5562116577237243, 0.2713064417379472, 0.05620488984734154, 0.1067245839116844, 0.1764484478959961, -3.76735980274592, -0.3806896885174798, -0.1764484478959931 },
            { -0.7024079530859946, 3.118471274037536, -0.3212820047111753, 1.9141188966591, -0.04562397403844276, 0.193420688415129, 2.887402169712138, -5.303465490663685, 0.3685520951028141, 0.3212820047111681, 0.03724199164223418, 0.04562397403843726, 0.02927546992304486, -2.282670991761911, -0.2306626800573512, -0.02927546992304048 },
            { -0.4137073670488282, 0.7049315323952723, 6.308719277314953, -3.103786407301447, -0.09227930308453747, -0.07828967444451873, -0.1697161091705225, -0.1215080561759353, 2.196844442578153, -6.308719277314976, 0.05541303867112821, 0.09227930308453589, 0.5158312131013689, 0.9069419647233145, 0.02287663577339705, -0.5158312131013569 },
            { -0.4891569243614599, -0.1550346940620824, 4.141563231398178, 0.1370710923394815, -0.0798038214853575, 0.00345747090385061, 0.2582932125353664, 0.3858984058881671, 2.092568320900505, -4.141563231398194, 0.05278278563590404, 0.07980382148535664, 0.3780771912547811, -2.22963941323997, -0.0562402565397515, -0.3780771912547725 },
            { -0.6126696726215758, -0.4568236535331226, 1.608708763091723, 3.314788835038692, -0.05983052775892828, 0.08361198378117024, 1.088445700785519, -0.01895237463082527, 1.788255639306005, -1.608708763091733, 0.04510682548757156, 0.05983052775892642, 0.2060134197164134, -5.103044474344688, -0.1287188092687385, -0.2060134197164055 },
            { -0.7609240701939929, 0.7231146320714755, -0.01645545460694586, 4.16230926296303, -0.03648284696051526, 0.1049897751882047, 2.265451118810199, -2.227641680687686, 1.236680628221985, 0.01645545460693928, 0.03119393897324148, 0.03648284696051159, 0.07400217696219258, -5.398989891185012, -0.1361837141614388, -0.07400217696218696 },
            { -0.900114376888435, 3.118471274037534, -0.3608306320218897, 2.481092261759124, -0.01508575494633368, 0.06258288424197112, 3.521244154441444, -5.739601051590551, 0.5632844693634502, 0.3608306320218823, 0.01420824500757284, 0.01508575494632758, 0.01227808196518598, -3.044376731122574, -0.0767911292495318, -0.01227808196518079 },
            { 0.2712860881007271, 0.7049315323952748, -0.1530086609423684, -0.1370672238558029, 0.8144364296915432, -1.652990076019424, 0.5373092175506702, -1.513526838046674, -0.3080171402620271, 0.1530086609423756, -3.714595377175355, -0.8144364296915383, 0.4809668750455259, 0.4450843641178269, 5.36758545319478, -0.4809668750455254 },
            { 0.4456080083920613, -0.1550346940620816, -0.1334505763054527, 0.006053236799299089, 0.3400281017409418, 0.07300024087137612, -0.7379468057908029, 0.4473734914608219, -0.204457126036493, 0.1334505763054593, -2.465692313614886, -0.3400281017409384, 0.3525234622978661, 0.1984038892371887, 2.392692072743512, -0.3525234622978642 },
            { 0.4779431512772408, -0.4568236535331212, -0.1013343156647208, 0.1463853640888815, -0.1598367275358285, 1.765364084180934, -1.488818493663336, 1.467698995919216, -0.08279083898145409, 0.1013343156647256, -0.9984329686697508, 0.159836727535831, 0.1920892497038032, -0.0635945251074331, -0.7669311155111806, -0.1920892497038021 },
            { 0.1639296784029985, 0.7231146320714791, -0.06264630850898506, 0.1838129628255108, -0.3739335392343999, 2.216729826774253, -0.5261588783382591, -0.360885432136218, -0.003493374508137893, 0.06264630850898531, -0.04212906069978847, 0.3739335392344026, 0.06900046933195922, -0.180319588317376, -2.174600766074462, -0.06900046933195861 },
            { -0.4254578423166447, 3.118471274037538, -0.02620814943155358, 0.1095682446606019, -0.2527555354188826, 1.321360541024529, 1.933841259553692, -4.626854691274588, 0.01523457429400987, 0.02620814943154781, 0.1837244485732995, 0.252755535418882, 0.01144822291547598, -0.1248028189546104, -1.505084989597822, -0.01144822291547365 },
            { 0.4609337245537735, 0.7049315323952748, -0.3668968518087036, -0.6817695788016606, 0.2811394320938442, -1.380638898546496, 0.07531040362469427, -1.241175660573744, -1.137905869745941, 0.3668968518087097, -2.304352020835304, -0.2811394320938396, 1.998154326818748, 1.819675448547598, 3.6849909193818, -1.998154326818746 },
            { 0.4999510345435053, -0.1550346940620819, -0.3748781206208345, 0.03010867650889933, -0.008521226183355539, 0.06097252101657553, -0.7802621120874481, 0.4353457716060223, -0.7280632522699251, 0.3748781206208397, -1.474387355993436, 0.008521226183358788, 1.464542192077007, 0.6979545757610213, 1.413414834976863, -1.464542192077005 },
            { 0.3938296054624033, -0.4568236535331218, -0.3466125867863595, 0.7281178184698669, -0.2928980103836556, 1.474497856990442, -1.113838720658007, 1.176832768728723, -0.2543777115752625, 0.3466125867863627, -0.515135574311429, 0.2928980103836582, 0.7980257796229425, -0.4737401068946085, -0.9593622826790088, -0.7980257796229417 },
            { 0.02941429585219221, 0.7231146320714783, -0.2550537475026857, 0.914281932022436, -0.3695800867659288, 1.851495342175791, -0.02640901118899, -0.7261199167346813, 0.03917174101429044, 0.2550537475026853, 0.07932596444560548, 0.3695800867659311, 0.2866592139742037, -0.9534536730367289, -1.930821306621393, -0.2866592139742024 },
            { -0.5106212029015642, 3.118471274037538, -0.1209766789901108, 0.5449902165588369, -0.2206106210667489, 1.10364955507541, 2.23671560608773, -4.844565677223707, 0.08515858445178548, 0.1209766789901049, 0.1724530661018179, 0.2206106210667478, 0.04756110522327517, -0.6301488010106218, -1.276102621177223, -0.04756110522327142 },
            { 0.4480426095561726, 0.7049315323952745, 0.5108660505102542, -1.507968021130222, -0.227212961967992, -0.9675396773822151, -0.3248977025419885, -0.8280764394094635, -1.194485697650695, -0.510866050510254, -0.7664037236521919, 0.2272129619679966, 3.09722117284238, 2.702453718780919, 1.733943401034408, -3.09722117284238 },
            { 0.3620931054203105, -0.1550346940620819, 0.1400665738549761, 0.06659569852586245, -0.3169121264270539, 0.0427290100080937, -0.624160671955774, 0.4171022605975406, -0.6411238761525223, -0.1400665738549756, -0.4113567261391433, 0.3169121264270577, 2.27010047469339, 0.5745281776266612, 0.3686277161310527, -2.27010047469339 },
            { 0.1462144096061885, -0.4568236535331223, -0.2385170865248459, 1.610483101633212, -0.3746911666758378, 1.033315215408769, -0.4250408832201213, 0.7356501271470518, -0.03450792188047103, 0.238517086524846, -0.02214090957866631, 0.3746911666758406, 1.236972694224948, -1.575975179752742, -1.011174305830099, -1.236972694224947 },
            { -0.2177341384895133, 0.7231146320714772, -0.3744271761302866, 2.022249098016861, -0.3198598127911706, 1.297511759178577, 0.7747230061499267, -1.280103499731893, 0.2763537350169565, 0.3744271761302849, 0.1773135768630358, 0.3198598127911715, 0.4443335407054361, -2.29860283303382, -1.474825336041608, -0.4443335407054332 },
            { -0.6469498004474554, 3.118471274037535, -0.236105467859278, 1.205433395611571, -0.1646998100321038, 0.773427965549045, 2.703265793159987, -5.174787266750071, 0.2198335985977412, 0.2361054678592716, 0.1410492305437688, 0.1646998100321007, 0.0737216640998104, -1.425266994209312, -0.9144771960928051, -0.07372166409980691 },
            { 0.03129159070067261, 0.7049315323952734, 3.064418546200741, -2.394516441398717, -0.3697798815843264, -0.5242654672479674, -0.3514208938207392, -0.3848022292752166, 0.3564746494337221, -3.064418546200752, 0.07804805405230961, 0.3697798815843302, 2.664896702701636, 2.038041791965008, 0.4462174131956619, -2.664896702701635 },
            { -0.08115263985277466, -0.1550346940620818, 1.87389732459661, 0.1057479288765664, -0.352511625169273, 0.02315289483274223, -0.1613388115073395, 0.3975261454221887, 0.6334377457491659, -1.873897324596618, 0.1386875153605975, 0.3525116251692766, 1.953229340822314, -0.7391856746257228, -0.1618404101933373, -1.953229340822312 },
            { -0.2804060153167355, -0.4568236535331223, 0.521146623915381, 2.557301090884683, -0.3015408516666201, 0.5599062207830341, 0.4749885363285363, 0.2622411325213172, 0.8450946732717878, -0.521146623915386, 0.1850285703166019, 0.3015408516666219, 1.064310318900104, -3.402395764156466, -0.744934791099632, -1.0643103189001 },
            { -0.5407390838389304, 0.7231146320714763, -0.2713064417379512, 3.211148145022197, -0.2087042425102042, 0.7030622356759112, 1.69217747500201, -1.87455302323456, 0.7620746178435118, 0.2713064417379473, 0.1668518113695487, 0.2087042425102032, 0.3823114080157843, -3.973222762865708, -0.8699140470454533, -0.3823114080157799 },
            { -0.8028270414963627, 3.118471274037536, -0.3212820047111753, 1.9141188966591, -0.09511450314866998, 0.4190852150252806, 3.213485784732658, -5.529130017273836, 0.4027078781041356, 0.3212820047111682, 0.08817055094237414, 0.09511450314866582, 0.06343125292436724, -2.316826774763234, -0.5072557659676449, -0.06343125292436255 },
            { -0.6024661006022002, 0.7049315323952723, 6.308719277314953, -3.103786407301448, -0.1834962436767116, -0.169630484296603, -0.0722981854692345, -0.03016724632385115, 2.798666344201332, -6.308719277314976, 0.1529548316323257, 0.1834962436767106, 1.117653114724547, 0.305120063100136, 0.01667565266428339, -1.117653114724535 },
            { -0.6558999074188964, -0.1550346940620824, 4.141563231398178, 0.1370710923394813, -0.1608574206899523, 0.007491313101285285, 0.4290700377902377, 0.3818645636907324, 2.533672171195404, -4.141563231398194, 0.1384721694887453, 0.1608574206899519, 0.8191810415496803, -2.670743263534869, -0.1459634825900282, -0.8191810415496704 },
            { -0.7416684861493228, -0.4568236535331224, 1.608708763091722, 3.314788835038692, -0.1230669201562318, 0.1811623487060309, 1.314994879238127, -0.1165027395556864, 2.028612145202941, -1.608708763091733, 0.1108692466180146, 0.1230669201562307, 0.4463699256133488, -5.343400980241625, -0.292031595324043, -0.4463699256133406 },
            { -0.8422421101068894, 0.7231146320714756, -0.01645545460694586, 4.16230926296303, -0.07668817893494037, 0.227481676705495, 2.469261060240385, -2.350133582204976, 1.323019201252241, 0.01645545460693928, 0.07230664691171214, 0.07668817893493747, 0.1603407499924483, -5.485328464215268, -0.2997883236172001, -0.1603407499924419 },
            { -0.9346832259436899, 3.118471274037534, -0.3608306320218897, 2.481092261759124, -0.03229490576636773, 0.1355985324752682, 3.628828651729997, -5.812616699823848, 0.5776093462784095, 0.3608306320218824, 0.03156794324279338, 0.0322949057663624, 0.02660295888014597, -3.058701608037534, -0.1671664757180504, -0.02660295888014008 },
            { 0.3074853722626635, 0.7049315323952747, -0.1530086609423685, -0.1370672238558015, 3.655530800440855, -2.543074501865143, -0.3889744924569855, -0.6234424122009549, -0.04903123887257609, 0.1530086609423755, -0.9097002905879805, -3.655530800440848, 0.7399527764349805, 0.1860984627283749, 3.45277479245312, -0.7399527764349773 },
            { 0.195462769821848, -0.1550346940620819, -0.1334505763054532, 0.006053236799299311, 2.284062374078228, 0.1123086302109299, -0.4484931778810335, 0.4080651021212686, -0.01463406049689468, 0.1334505763054601, -0.2715128027073914, -2.28406237407822, 0.5423465278374673, 0.008580823697588849, 0.1592041724964579, -0.5423465278374633 },
            { -0.03003056293073579, -0.4568236535331215, -0.1013343156647212, 0.1463853640888816, 0.7136281536869855, 2.715958464675185, -0.0302503989611049, 0.5171046154249659, 0.02064332678527097, 0.1013343156647267, 0.3830056267610344, -0.7136281536869769, 0.2955234154705318, -0.167028690874161, -3.098964091436225, -0.2955234154705272 },
            { -0.3594108085286477, 0.7231146320714787, -0.06264630850898495, 0.1838129628255116, -0.2306113158461845, 3.410370807288069, 1.190822589107206, -1.554526412650033, 0.03366126061001137, 0.06264630850898602, 0.6245336496200694, 0.2306113158461935, 0.1061551044501125, -0.2174742234355291, -4.034904456908143, -0.1061551044501086 },
            { -0.7176755481442583, 3.118471274037538, -0.02620814943155358, 0.1095682446606028, -0.3316700042288765, 2.032872639950876, 2.937571064307654, -5.338366790200935, 0.02139909098924464, 0.02620814943154803, 0.3970276855909171, 0.3316700042288795, 0.0176127396107133, -0.1309673356498471, -2.429900325541793, -0.017612739610709 },
            { 0.1770747693011787, 0.7049315323952741, -0.3668968518087032, -0.6817695788016593, 2.108591142332406, -2.124070573751896, -0.3842623163281128, -0.4977439853683425, -0.06196108789916478, 0.3668968518087093, -0.1930413553441453, -2.108591142332401, 3.074099108665522, 0.7437306667008214, 2.317111929096042, -3.074099108665522 },
            { 0.06080604297581003, -0.1550346940620822, -0.3748781206208347, 0.03010867650889977, 1.215359270226254, 0.09380435234377195, -0.3082852891925554, 0.4025139402788265, 0.06054777151844449, 0.37487812062084, 0.1886381319838667, -1.215359270226248, 2.253153215865376, -0.09065644802734912, -0.2824424843276385, -2.253153215865373 },
            { -0.1558922634821873, -0.4568236535331219, -0.3466125867863598, 0.7281178184698671, 0.2187753767060786, 2.268469700796386, 0.2298549920925312, 0.3828609249227793, 0.1753346794248525, 0.3466125867863635, 0.5462596817228916, -0.2187753767060708, 1.227738170623059, -0.9034524978947255, -2.814729382519281, -1.227738170623055 },
            { -0.4527597228085111, 0.7231146320714779, -0.2550537475026856, 0.9142819320224367, -0.3281357341530142, 2.848468761741068, 1.452738427036993, -1.723093336299958, 0.1935289301984174, 0.2550537475026858, 0.6029443357192201, 0.3281357341530217, 0.4410164031583328, -1.107810862220858, -3.451413097460291, -0.4410164031583292 },
            { -0.7621685451933068, 3.118471274037538, -0.1209766789901106, 0.5449902165588383, -0.2995080601600588, 1.697930969595309, 3.08254436289937, -5.438847091743603, 0.1107687799692271, 0.1209766789901049, 0.3451029693002493, 0.2995080601600607, 0.07317130074071843, -0.655758996528065, -2.043033938895555, -0.07317130074071387 },
            { -0.0847501652409309, 0.7049315323952738, 0.5108660505102547, -1.507968021130222, 0.473570283410583, -1.488530099962091, -0.3130953503247612, -0.3070860168295863, 0.4732728505344516, -0.5108660505102544, 0.4671722965234876, -0.4735702834105783, 4.764979721027522, 1.034695170595773, 1.021357803438605, -4.764979721027524 },
            { -0.1903627724181243, -0.1550346940620821, 0.1400665738549758, 0.06659569852586285, 0.1157518157802554, 0.06573727054864896, -0.04869653357678317, 0.3940940000569855, 0.5812555603262091, -0.1400665738549756, 0.5737630939065997, -0.11575181578025, 3.492479911172121, -0.6478512588520704, -0.6395003644552471, -3.49247991117212 },
            { -0.3723661206602579, -0.4568236535331222, -0.2385170865248463, 1.610483101633212, -0.2477078241487176, 1.589723746571631, 0.6499481782091877, 0.1792415959841901, 0.6315639113984017, 0.2385170865248465, 0.6234229632148973, 0.2477078241487237, 1.903044527503821, -2.242047013031615, -2.213146709786527, -1.903044527503818 },
            { -0.6035346907125952, 0.723114632071477, -0.3744271761302867, 2.022249098016862, -0.3740065654222877, 1.996182020997474, 1.859193820191906, -1.978773761550789, 0.5156137101374265, 0.3744271761302853, 0.5089673764549981, 0.3740065654222927, 0.6835935158259072, -2.53786280815429, -2.505149397452471, -0.6835935158259029 },
            { -0.8311788531656232, 3.118471274037536, -0.236105467859278, 1.205433395611573, -0.2337930253408234, 1.189895188574679, 3.303962068903789, -5.591254489775705, 0.2595304522054095, 0.2361054678592716, 0.2561850679532161, 0.2337930253408224, 0.1134185177074805, -1.464963847816982, -1.446080256527888, -0.1134185177074759 },
            { -0.4515260541569785, 0.7049315323952732, 3.064418546200741, -2.394516441398717, -0.3272189540026599, -0.8065663317092142, -0.1509041134243341, -0.1025013648139701, 1.791439738440372, -3.064418546200752, 0.6034266264916277, 0.3272189540026638, 4.099861791708285, 0.6030767029583592, 0.2031397052175897, -4.099861791708283 },
            { -0.5227841522072387, -0.155034694062082, 1.87389732459661, 0.1057479288765666, -0.3651924667495642, 0.03562001814027745, 0.2927598241546607, 0.3850590221146533, 1.68519180137993, -1.873897324596618, 0.5676381861347702, 0.3651924667495686, 3.004983396453077, -1.790939730256486, -0.6032582042750463, -3.004983396453073 },
            { -0.6389296465738773, -0.4568236535331222, 0.5211466239153808, 2.557301090884683, -0.3673904157489096, 0.861398537211953, 1.135004484014598, -0.03925118390760224, 1.418193116428281, -0.5211466239153854, 0.4777026374914527, 0.3673904157489134, 1.637408762056597, -3.97549420731296, -1.339101174703404, -1.637408762056592 },
            { -0.7776358216406027, 0.7231146320714763, -0.2713064417379514, 3.211148145022197, -0.2864137434277731, 1.081639672681675, 2.307651649809448, -2.253130460240324, 0.9679375779632994, 0.2713064417379474, 0.3260390482536505, 0.2864137434277748, 0.5881743681355723, -4.179085722985497, -1.407678720935321, -0.5881743681355668 },
            { -0.9072729166520298, 3.118471274037536, -0.3212820047111749, 1.9141188966591, -0.1405782455135984, 0.6447497416354326, 3.543596186498478, -5.754794543883989, 0.4368636611054575, 0.3212820047111682, 0.147152683733112, 0.1405782455135959, 0.09758703592569007, -2.350982557764557, -0.7919024253685372, -0.09758703592568471 },
            { -0.8089357500071483, 0.7049315323952721, 6.308719277314953, -3.103786407301447, -0.257002268417309, -0.2609712941486878, 0.04283065408362985, 0.06117356352823311, 3.40048824582451, -6.308719277314975, 0.2859184562966755, 0.2570022684173085, 1.719475016347726, -0.2967018385230431, -0.02494716214798287, -1.719475016347713 },
            { -0.8356240617386427, -0.1550346940620824, 4.141563231398177, 0.1370710923394813, -0.2289298486322379, 0.01152515529871999, 0.6128280343074193, 0.3778307214932973, 2.974776021490304, -4.141563231398194, 0.2501238958662059, 0.2289298486322378, 1.260284891844581, -3.11184711382977, -0.2616490511649242, -1.26028489184457 },
            { -0.8777407109949991, -0.4568236535331222, 1.608708763091722, 3.314788835038692, -0.1792299012356048, 0.2787127136308915, 1.548617469008664, -0.214053104480547, 2.268968651099875, -1.608708763091732, 0.1907784903843172, 0.1792299012356045, 0.6867264315102841, -5.583757486138558, -0.4694912040152072, -0.6867264315102751 },
            { -0.9261009934114267, 0.7231146320714756, -0.01645545460694586, 4.16230926296303, -0.1143526675177247, 0.3499735782227852, 2.675611845062214, -2.472625483722267, 1.409357774282496, 0.01645545460693951, 0.1185010416334647, 0.1143526675177226, 0.246679323022704, -5.571667037245524, -0.4684746198562437, -0.2466793230226971 },
            { -0.9696736394002088, 3.118471274037534, -0.3608306320218895, 2.481092261759124, -0.04908249218513849, 0.2086141807085671, 3.736834713419815, -5.885632348057147, 0.5919342231933693, 0.3608306320218823, 0.04977077028054128, 0.04908249218513383, 0.0409278357951055, -3.073026484952492, -0.2583849509890979, -0.04092783579509979 },
            { -0.6341622249874576, 0.7049315323952743, -0.1530086609423704, -0.1370672238558001, 6.562027966162396, -3.150896368444844, -0.05514876178656269, -0.01562054562125237, 0.1278253484683292, 0.153008660942377, 2.938444472383675, -6.562027966162385, 0.9168093637758927, 0.009241875387468568, 0.2124518960611599, -0.9168093637758906 },
            { -0.683653256919277, -0.1550346940620821, -0.1334505763054545, 0.006053236799299339, 4.319903273636814, 0.1391515878976786, 0.4574658065468423, 0.3812221444345209, 0.1149925307183512, 0.1334505763054617, 2.643444123592315, -4.319903273636805, 0.6719731190527187, -0.1210457675176581, -2.782595711490001, -0.6719731190527128 },
            { -0.7628654507111429, -0.4568236535331217, -0.101334315664722, 0.1463853640888811, 1.696050065914284, 3.36510143800965, 1.35172746215377, -0.1320383579094987, 0.09127656772161188, 0.1013343156647277, 2.098262426768736, -1.696050065914272, 0.3661566564068762, -0.2376619318105025, -5.463363864778397, -0.3661566564068698 },
            { -0.8554271561133219, 0.7231146320714784, -0.06264630850898509, 0.1838129628255122, 0.005897727066942471, 4.225485719688176, 2.501953849091987, -2.369641325050138, 0.0590334601607941, 0.06264630850898664, 1.357059040117867, -0.005897727066928989, 0.1315273040008978, -0.2428464229863144, -5.582544759806052, -0.1315273040008925 },
            { -0.9402274859520903, 3.118471274037538, -0.02620814943155336, 0.1095682446606032, -0.3625572285788086, 2.518750832519558, 3.646001194684169, -5.824244982769617, 0.02560872317183083, 0.02620814943154814, 0.5886923990488155, 0.3625572285788151, 0.02182237179330149, -0.1351769678324353, -3.107443231568378, -0.02182237179329594 },
            { -0.6909256210738245, 0.7049315323952738, -0.3668968518087037, -0.6817695788016583, 4.030681911474587, -2.631746042928285, -0.02393739512949644, 0.009931483808045982, 0.6727813102923471, 0.3668968518087095, 2.597049804173034, -4.030681911474579, 3.808841506857035, 0.008988268509310449, 0.03469623875524652, -3.808841506857037 },
            { -0.7332005407359509, -0.1550346940620823, -0.3748781206208353, 0.03010867650889987, 2.545246929344062, 0.1162245907178625, 0.5081415328932979, 0.3800937019047353, 0.5990753657170892, 0.3748781206208404, 2.312532374813433, -2.545246929344053, 2.79168081006402, -0.6291840422259933, -2.428756965531298, -2.791680810064018 },
            { -0.8005333467142945, -0.456823653533122, -0.3466125867863603, 0.7281178184698669, 0.8374338693096968, 2.81065809787492, 1.416684472403174, -0.159327472155754, 0.4687771664585368, 0.3466125867863641, 1.809559257558614, -0.8374338693096862, 1.521180657656745, -1.19689498492841, -4.620217355433541, -1.52118065765674 },
            { -0.878743386717422, 0.7231146320714777, -0.2550537475026857, 0.9142819320224369, -0.2031180466116625, 3.529283106104792, 2.559536435309629, -2.403907680663681, 0.2989365433703327, 0.2550537475026862, 1.15394568716948, 0.2031180466116735, 0.5464240163302506, -1.213218475392776, -4.683228793274279, -0.5464240163302454 },
            { -0.9499921500923009, 3.118471274037538, -0.1209766789901103, 0.5449902165588387, -0.3373389639692062, 2.103754538863916, 3.676191537066973, -5.844670661012211, 0.1282574994556867, 0.1209766789901051, 0.4950956703900942, 0.3373389639692106, 0.09066002022717989, -0.6732477160145263, -2.598850209254012, -0.0906600202271742 },
            { -0.7796691827235029, 0.704931532395273, 0.5108660505102547, -1.507968021130221, 1.283206824794792, -1.844304633171973, 0.02604913394792696, 0.04868851638029681, 1.612153707593575, -0.5108660505102547, 1.971727855390269, -1.283206824794787, 5.903860578086643, -0.1041856864633495, -0.1274232222182933, -5.903860578086647 },
            { -0.8102923026698263, -0.1550346940620822, 0.1400665738549758, 0.06659569852586265, 0.6538776925781592, 0.08144917771433725, 0.5869449038406076, 0.378382092891297, 1.415995422270419, -0.1400665738549751, 1.731818500956204, -0.6538776925781526, 4.32721977311633, -1.482591120796281, -1.813267678670541, -4.32721977311633 },
            { -0.8587241447300864, -0.4568236535331222, -0.2385170865248465, 1.610483101633212, -0.02876413369440192, 1.969684638113959, 1.516267093821345, -0.2007192955581382, 1.086411803602621, 0.2385170865248471, 1.328724677739039, 0.0287641336944106, 2.357892419708041, -2.696894905235835, -3.298409315853, -2.357892419708037 },
            { -0.9144887100557935, 0.7231146320714771, -0.3744271761302866, 2.022249098016862, -0.3634842627436143, 2.473290765214618, 2.647256583752251, -2.455882505767934, 0.6789998344787868, 0.3744271761302855, 0.8304436984768675, 0.3634842627436224, 0.8469796401672682, -2.701248932495652, -3.303734463691488, -0.8469796401672627 },
            { -0.9648660525100764, 3.118471274037536, -0.2361054678592782, 1.205433395611573, -0.2730948249354375, 1.474292800214926, 3.722046879888491, -5.875652101415954, 0.28663868481405, 0.2361054678592718, 0.3505704677030544, 0.2730948249354384, 0.1405267503161221, -1.492072080425623, -1.824863267917977, -0.1405267503161167 },
            { -0.8784416271832031, 0.704931532395273, 3.064418546200741, -2.394516441398717, -0.2009463895479889, -0.9993442675896919, 0.08323352372141274, 0.0902765710665081, 2.771350332930328, -3.064418546200752, 1.156614763972523, 0.200946389547993, 5.079772386198239, -0.376833891531596, -0.1572704963828284, -5.079772386198236 },
            { -0.8956147153233968, -0.1550346940620821, 1.87389732459661, 0.1057479288765661, -0.3026032413766922, 0.04413358150530958, 0.6741039506358512, 0.376545458749621, 2.403414808898397, -1.873897324596618, 1.0030579746238, 0.3026032413766971, 3.723206403971544, -2.509162737774954, -1.047191556129109, -3.723206403971539 },
            { -0.9225819481946598, -0.4568236535331221, 0.5211466239153801, 2.557301090884683, -0.3735345651473865, 1.0672819536723, 1.624540202095728, -0.2451346003679501, 1.809551234083604, -0.5211466239153852, 0.7552107897137565, 0.373534565147392, 2.028766879711919, -4.366852324968284, -1.822492743386056, -2.028766879711915 },
            { -0.9533538629151397, 0.7231146320714761, -0.2713064417379509, 3.211148145022197, -0.3255343688047232, 1.340163064085996, 2.741893082488306, -2.511653851644645, 1.108517510659842, 0.2713064417379476, 0.4626364641512359, 0.3255343688047265, 0.7287543008321151, -4.319665655682039, -1.80279952823723, -0.728754300832109 },
            { -0.9809108421947388, 3.118471274037536, -0.3212820047111749, 1.9141188966591, -0.1693107703391687, 0.7988517906120576, 3.771336161017811, -5.908896592860613, 0.4601880011068333, 0.3212820047111682, 0.1920580844502507, 0.1693107703391669, 0.120911375927067, -2.374306897765933, -0.9909098750623011, -0.1209113759270604 },
            { -0.9601067405985151, 0.7049315323952715, 6.308719277314952, -3.103786407301447, -0.2970213850951081, -0.323346210422999, 0.1316267284006851, 0.1235484798025452, 3.811461071515263, -6.308719277314975, 0.3970703302102441, 0.297021385095107, 2.130447842038478, -0.707674664213796, -0.07372411978723981, -2.130447842038464 },
            { -0.9658133285202302, -0.1550346940620826, 4.141563231398177, 0.1370710923394816, -0.2679561942005345, 0.01427979005328606, 0.7457719358435726, 0.3750760867387309, 3.275997521222747, -4.141563231398194, 0.341286817079496, 0.2679561942005348, 1.561506391577024, -3.413068613562213, -0.3555666071327809, -1.561506391577012 },
            { -0.9747262765830103, -0.4568236535331224, 1.608708763091723, 3.314788835038692, -0.213518132036826, 0.3453280179463467, 1.712218338912131, -0.2806684087960029, 2.433103575626882, -1.608708763091732, 0.2534758251711062, 0.2135181320368264, 0.8508613560372902, -5.747892410665567, -0.5988038431174521, -0.8508613560372811 },
            { -0.9848266216709273, 0.7231146320714756, -0.01645545460694592, 4.16230926296303, -0.1386130578748603, 0.4336209874563466, 2.817984882555276, -2.556272892955827, 1.468316757378076, 0.01645545460693958, 0.1529662795358295, 0.1386130578748591, 0.3056383061182845, -5.630626020341105, -0.5865872669921703, -0.3056383061182776 },
            { -0.9938101653443001, 3.118471274037534, -0.3608306320218897, 2.481092261759124, -0.06030418577405272, 0.258475189743212, 3.810832248398552, -5.935493357091792, 0.6017164114579288, 0.3608306320218824, 0.06268560263571793, 0.06030418577404839, 0.0507100240596654, -3.082808673217053, -0.3211607923789199, -0.05071002405965924 } } };
    alignas(32) static const double FE17_C0_D010_Q125[1][125][16] =
        { { { -3.586265738526327, 0.6740416042741242, -0.1197227187042711, -0.1394632379727551, -0.1701549670640671, -0.150558421633304, -0.6692606295592465, 0.1394632379727543, 5.818168337170009, -2.905944202917809, -0.8416349473039109, 0.1701549670640663, 0.04059902435446731, 0.7889833482635192, -0.04059902435446551, 0.9921933689372187 },
            { -1.916159708320969, 0.7184830874331681, -0.6265418704119533, -0.3743732505894514, -0.1488180881305539, -0.1344548494071452, -2.762233709740886, 0.3743732505894504, 3.795996490845468, -2.598319869957674, -0.5927707867733509, 0.1488180881305521, 0.1743775487952338, 3.388775580152841, -0.1743775487952318, 0.7272256361805026 },
            { -0.1835021661761098, 0.7893672736129278, -1.498804966983601, 0.2976650882617174, -0.1134696015441951, -0.1056431047439202, -4.123160595952984, -0.2976650882617173, 1.439191820229754, -2.045056927666577, -0.2906205252247641, 0.113469601544192, 0.2892916780968623, 5.621965562936587, -0.289291678096861, 0.3962636299686911 },
            { 0.4999769917856014, 0.8718465966671973, -2.605180569189663, 2.57761525891048, -0.07045528440201451, -0.06764392482163178, -2.876859811701721, -2.577615258910475, -0.06012248211013937, -1.311701106342662, -0.07469811925000189, 0.07045528440201082, 0.2820914933449766, 5.482040380891382, -0.2820914933449739, 0.1423420440716392 },
            { -0.02405959736797653, 0.9471090533589726, -3.693492916391503, 5.948215232299134, -0.02958244357217711, -0.029115996438074, 0.697609951688811, -5.948215232299123, -0.357696803162629, -0.5653526528283622, 0.005499295471337984, 0.02958244357217255, 0.1541603200052156, 2.995882964702681, -0.1541603200052111, 0.02361670096673684 },
            { -1.709977170122154, -0.2271453088815126, 0.02287364863917549, -0.1394632379727547, -0.1456328069833769, 0.02402557483766312, -0.5333534687921769, 0.1394632379727538, 1.082088861690365, 0.8550336173132982, -0.5602133652365953, 0.1456328069833761, 0.03390981777809293, 0.5104798201530006, -0.03390981777808953, 0.536187790398937 },
            { -0.7023134870157819, -0.1113570604279168, -0.01407382715664865, -0.3743732505894518, -0.1268732848720291, -0.002522600302025804, -2.178496589573511, 0.3743732505894508, 0.4900450590871231, 0.3236254883565716, -0.3904748931228199, 0.1268732848720283, 0.1456466257073045, 2.192570416730161, -0.1456466257073023, 0.3929974934248507 },
            { 0.2611397489865222, 0.1097393451659624, -0.4827228552772899, 0.2976650882617162, -0.09617708142442238, -0.02841867027213785, -3.1547429743763, -0.2976650882617157, -0.1400987202993728, -0.2307803738531158, -0.1857247888763106, 0.09617708142442047, 0.241627187967236, 3.63746582965359, -0.2416271879672344, 0.2141434591484536 },
            { 0.4608807176327799, 0.4191152975088273, -1.614387739828069, 2.577615258910478, -0.05935086613116181, -0.03501133553325267, -1.932545150286914, -2.577615258910473, -0.4237111079534245, -0.4562849071881832, -0.04191123670021088, 0.05935086613115798, 0.2356133253981925, 3.546932890114978, -0.2356133253981889, 0.07692257223346821 },
            { -0.1503405556494989, 0.7463036313348435, -3.152034052027695, 5.948215232299133, -0.02479197822562026, -0.0207536814627044, 1.213668939016374, -5.948215232299122, -0.2952792945213306, -0.3006837811640082, 0.007991061690883206, 0.02479197822561541, 0.1287604429689738, 1.938365113011309, -0.1287604429689675, 0.01276261977182197 },
            { 0.04391404476219071, -0.3918694246814223, 0.2391622244294843, -0.1394632379727552, -0.1057923916571302, 0.1760433419787414, -0.3272110067530433, 0.1394632379727544, -2.717918278100159, 3.065873658019386, -0.2408545885473466, 0.1057923916571281, 0.02376370402692113, 0.08804878232355717, -0.02376370402691569, 0.06481124656861319 },
            { 0.3384252249372259, -0.4889100246858865, 0.9149108535940951, -0.3743732505894518, -0.0916486568590493, 0.1149221357993254, -1.293090651757093, 0.374373250589451, -2.044365481997299, 2.194850281745957, -0.1624253760880507, 0.09164865685904805, 0.1020678827729786, 0.3781797981629972, -0.1020678827729746, 0.04750324028873057 },
            { 0.4994261900414775, -0.4409818588693147, 1.058459132182845, 0.2976650882617148, -0.06889142575628648, 0.04366853922822656, -1.685857952666198, -0.2976650882617141, -1.184191781057971, 1.125747449885806, -0.06955294909439881, 0.06889142575628363, 0.1693302222172065, 0.6273988204833509, -0.1693302222172031, 0.02588440986617666 },
            { 0.244913353452508, -0.09511445185266759, -0.1115642530997492, 2.577615258910475, -0.04212828321446524, -0.001695565486136835, -0.5002192290845177, -2.577615258910471, -0.4897766271884958, 0.339977725588656, -0.007602385502275461, 0.04212828321446102, 0.1651157598722736, 0.6117834821842607, -0.165115759872268, 0.009297950988416341 },
            { -0.3678754585860028, 0.4703392694431867, -2.330755299952471, 5.948215232299132, -0.01746288492760189, -0.01075448467881984, 1.996421441568096, -5.94821523229912, -0.120066312554011, 0.01760250169683442, 0.009211813786819123, 0.01746288492759623, 0.09023419344547645, 0.3343338583843605, -0.09023419344546801, 0.001542670892001153 },
            { 0.4619066773180011, 1.043047194065409, 0.4712496811046503, -0.1394632379727566, -0.05949524235412691, 0.1879578887423514, -0.1060107905483579, 0.1394632379727559, -2.259347423610859, 0.754393552227444, -0.04228239333481867, 0.05949524235412046, 0.012876463556443, -0.365238890556296, -0.01287646355643457, -0.1456754954075209 },
            { 0.3821410054265207, 0.2872302380251484, 1.911753571975401, -0.3743732505894515, -0.05125157877053359, 0.1301185717670082, -0.3430099020825115, 0.3743732505894509, -1.43914255877675, 0.7697713153250771, -0.02334608351995531, 0.05125157877052917, 0.05530591406625667, -1.568743669892892, -0.05530591406625063, -0.1067724882470443 },
            { 0.1704190218352287, -0.388258368256495, 2.712217341261725, 0.2976650882617152, -0.038196242459895, 0.06063194874283576, -0.1096776685653061, -0.2976650882617142, -0.4928964526874174, 0.7107357991086823, -0.002451857628631994, 0.03819624245989036, 0.09175229723922125, -2.602539672696421, -0.09175229723921538, -0.05818009111419727 },
            { -0.1968595496165657, -0.4156924675972295, 1.501033544042484, 2.577615258910474, -0.02313887136184081, 0.01236124947642797, 1.036731481174288, -2.577615258910469, 0.09009735622245357, 0.5224546609913443, 0.008537648295551759, 0.02313887136183501, 0.08946867298885086, -2.53776502521678, -0.08946867298884287, -0.02089889777197489 },
            { -0.6361474589555651, 0.212578864260342, -1.449485930573994, 5.94821523229913, -0.00951401780059606, -0.003624010082998563, 2.836350396944259, -5.948215232299118, 0.1759169847622644, 0.2476516099329665, 0.007091453749651311, 0.009514017800589969, 0.0488937794431672, -1.38686446637028, -0.0488937794431572, -0.003467443666652363 },
            { -0.2949843492973966, 3.392399818389127, 0.6569278219924192, -0.1394632379727571, -0.01981221356681213, 0.0847773415759201, 0.07095717444745993, 0.1394632379727569, 1.488850231792311, -4.586265700884049, 0.009157110437417564, 0.01981221356680149, 0.004166287664489655, -0.7278849964398858, -0.004166287664475535, -0.09393445201332257 },
            { -0.3827503177246022, 1.788710018653131, 2.709262861611903, -0.3743732505894498, -0.01699481577233554, 0.05966383581488553, 0.4170881653444752, 0.3743732505894495, 1.523390626967537, -2.929350327896071, 0.009185184712067751, 0.01699481577232752, 0.01789469185673626, -3.126351026956383, -0.01789469185672708, -0.06884902052694078 },
            { -0.5286432255937401, 0.1337266922754594, 4.035282164060122, 0.2976650882617168, -0.0125831783975342, 0.02918795016993747, 1.151322081479054, -0.2976650882617154, 1.410602582742176, -1.015686049423897, 0.008327727821131338, 0.01258317839752755, 0.029687224485184, -5.18660424553918, -0.02968722448517655, -0.03751567799105917 },
            { -0.7068534929806041, -0.4998154058516118, 2.791168587368707, 2.577615258910473, -0.007567405557270731, 0.007437221094799024, 2.266346190238112, -2.577615258910468, 1.039108587251543, 0.1675603115806764, 0.006038803163100459, 0.007567405557263401, 0.02894833872645652, -5.057514777606828, -0.02894833872644742, -0.0134760242578934 },
            { -0.8767501944164221, 0.03495706281957767, -0.7444393913439189, 5.948215232299129, -0.003091717885345248, -0.0006022230697340647, 3.508323148708844, -5.948215232299117, 0.4931980953248337, 0.3485950362720193, 0.002838099596549293, 0.003091717885338074, 0.01581999197768036, -2.763883757364942, -0.01581999197766937, -0.002235876526814621 },
            { -1.446710717421099, 0.6740416042741244, -0.1197227187042703, -0.1394632379727554, -0.3448604196978806, -0.7406439789087047, -0.5101403515226411, 0.1394632379727548, 3.088527758789382, -2.315858645642409, -3.155895421042955, 0.3448604196978824, 0.1997193023910746, 0.6298630702269128, -0.1997193023910729, 3.89653939995166 },
            { -0.5369160196221123, 0.7184830874331682, -0.6265418704119529, -0.3743732505894515, -0.3713369040119541, -0.6614254690516237, -2.078793541194413, 0.3743732505894507, 1.889782182502136, -2.071349250313195, -2.19453329135361, 0.3713369040119553, 0.8578177173417076, 2.705335411606367, -0.8578177173417068, 2.855958760405235 },
            { 0.3142381266923374, 0.7893672736129274, -1.498804966983601, 0.2976650882617173, -0.3616228699657567, -0.5196914831664277, -2.989336003259667, -0.2976650882617168, 0.5274031489388005, -1.631008549244068, -1.036514086514774, 0.3616228699657563, 1.423116270790179, 4.488140970243269, -1.42311627079018, 1.556205569681205 },
            { 0.445996131059054, 0.8718465966671967, -2.605180569189662, 2.57761525891048, -0.2759817283470207, -0.332761628910519, -1.771254995661941, -2.577615258910475, -0.2712593254724798, -1.046583402253772, -0.2262437024684608, 0.2759817283470188, 1.387696309384758, 4.376435564851599, -1.387696309384757, 0.5590053313789833 },
            { -0.1732711530146636, 0.9471090533589722, -3.693492916391502, 5.948215232299134, -0.1338100500832575, -0.1432306955522398, 1.30181247555425, -5.948215232299123, -0.3225999466301082, -0.4512379537141952, 0.05048324460694498, 0.1338100500832543, 0.758362843870655, 2.391680440837241, -0.7583628438706513, 0.09274745094529502 },
            { -0.4284650548711221, -0.2271453088815128, 0.0228736486391759, -0.1394632379727552, -0.3730545434672317, 0.1181893191380258, -0.400450284077418, 0.1394632379727543, -0.1052595092603029, 0.7608698730129355, -2.069147216971484, 0.3730545434672325, 0.1668130024928542, 0.377576635438242, -0.166813002492851, 1.950957897833461 },
            { 0.07915971811263516, -0.1113570604279168, -0.01407382715664854, -0.3743732505894518, -0.3724654145943996, -0.01240946009277289, -1.607661897210029, 0.374373250589451, -0.3013150058320394, 0.3335123481473182, -1.417540227973609, 0.3724654145944006, 0.7164813180707867, 1.621735724366679, -0.7164813180707847, 1.429949688066384 },
            { 0.4749740948482741, 0.1097393451659622, -0.4827228552772894, 0.2976650882617162, -0.3359940179146664, -0.1398003299803185, -2.2077304305559, -0.2976650882617155, -0.4653147258693042, -0.1193987141449343, -0.6393760712283076, 0.3359940179146664, 1.188639731787636, 2.690453285833189, -1.188639731787635, 0.7791764012086287 },
            { 0.3432704145900889, 0.4191152975088268, -1.614387739828067, 2.577615258910478, -0.2427065394560346, -0.1722317129453771, -1.009102815339146, -2.577615258910473, -0.4433211823228578, -0.3190645297760574, -0.107656606982393, 0.2427065394560322, 1.15905566034596, 2.62349055516721, -1.159055660345958, 0.2798883199277727 },
            { -0.2870003494821112, 0.7463036313348432, -3.152034052027694, 5.948215232299133, -0.1137866931011519, -0.1020938519997073, 1.718321398308446, -5.948215232299122, -0.2399596712257215, -0.2193436106270044, 0.05565614064796376, 0.1137866931011481, 0.6334129022610472, 1.433712653719235, -0.6334129022610411, 0.04643771135174343 },
            { 0.4046386622709647, -0.3918694246814227, 0.2391622244294844, -0.1394632379727557, -0.3517994852642612, 0.866012275162423, -0.2340736160874883, 0.1394632379727548, -2.388673962425251, 2.375904724835705, -0.8475862996632527, 0.3517994852642602, 0.1169010946924778, -0.00508860834199816, -0.1169010946924723, -0.01842597549916358 },
            { 0.492227043907081, -0.4889100246858868, 0.9149108535940953, -0.3743732505894519, -0.3272541292827013, 0.5653379399154843, -0.8930546867633554, 0.3743732505894511, -1.747751496850996, 1.744434477629799, -0.5518326674815592, 0.3272541292827009, 0.502103847766718, -0.02185616683074076, -0.5021038477667139, -0.01350527243392062 },
            { 0.4346726554302746, -0.4409818588693148, 1.058459132182845, 0.2976650882617152, -0.2715522247605976, 0.2148192063669278, -1.02219983605835, -0.2976650882617142, -0.9482875793080655, 0.9545967827471046, -0.2074602134875078, 0.271552224760596, 0.8329883388250545, -0.03625929612449709, -0.8329883388250507, -0.007358992879416291 },
            { 0.08540408018418946, -0.09511445185266776, -0.1115642530997485, 2.577615258910476, -0.1830507266106748, -0.008341017091766878, 0.14692109107962, -2.577615258910471, -0.3369128055258065, 0.3466231771942866, 0.01098444436983345, 0.1830507266106714, 0.8122560800364114, -0.03535683797987776, -0.8122560800364061, -0.002643427278063507 },
            { -0.4764356808355291, 0.4703392694431864, -2.33075529995247, 5.948215232299131, -0.08189166161714542, -0.05290467472508975, 2.350077475863258, -5.94821523229912, -0.05365628035075498, 0.0597526917431051, 0.05334325934680223, 0.08189166161714034, 0.4438902277406382, -0.0193221759108021, -0.44389022774063, -0.0004385846217121704 },
            { 0.3449344167537118, 1.043047194065408, 0.47124968110465, -0.1394632379727567, -0.2431659903613879, 0.9246236582133435, -0.05554390140987386, 0.1394632379727561, -1.405709393575578, 0.01772778275645263, -0.108980880777792, 0.2431659903613831, 0.06334335269492808, -0.4157057796947799, -0.06334335269491941, -0.8156427774355415 },
            { 0.2364826142292866, 0.287230238025148, 1.9117535719754, -0.3743732505894513, -0.2158345253165841, 0.6400939627153681, -0.1262487221473723, 0.3743732505894508, -0.7835087766311553, 0.2597959243767176, -0.04227063886877265, 0.2158345253165808, 0.2720670940013958, -1.785504849828031, -0.2720670940013896, -0.5978233238465875 },
            { 0.01055233088854514, -0.388258368256495, 2.712217341261723, 0.2976650882617155, -0.1681260025324718, 0.2982675248499528, 0.249928289443248, -0.2976650882617143, -0.0953941856336159, 0.4731002230015648, 0.0274850732454734, 0.1681260025324681, 0.4513582552477747, -2.962145630704975, -0.451358255247769, -0.3257525980954203 },
            { -0.3281125037182049, -0.4156924675972298, 1.501033544042484, 2.577615258910474, -0.1067245839116901, 0.0608088534482821, 1.387387201303298, -2.577615258910469, 0.2697979142959471, 0.4740070570194901, 0.05620488984734159, 0.106724583911685, 0.4401243931178608, -2.888420745345791, -0.4401243931178532, -0.1170137432956193 },
            { -0.7024079530859959, 0.2125788642603418, -1.449485930573994, 5.94821523229913, -0.04562397403844555, -0.0178276393864833, 3.027980415225744, -5.948215232299118, 0.2279738495892105, 0.261855239236451, 0.03724199164223291, 0.04562397403843982, 0.240523797724652, -1.578494484651765, -0.2405237977246431, -0.0194143522557495 },
            { -0.4137073670488323, 3.392399818389127, 0.6569278219924193, -0.1394632379727571, -0.09227930308454009, 0.4170462661930341, 0.08728615924678657, 0.1394632379727568, 1.939842174160859, -4.918534625501161, 0.05541303867112479, 0.09227930308453056, 0.02049527246381543, -0.744213981239212, -0.02049527246380131, -0.4724593048641446 },
            { -0.4891569243614619, 1.788710018653131, 2.709262861611903, -0.3743732505894497, -0.07980382148535946, 0.2935050744787657, 0.4872230611676045, 0.3743732505894494, 1.863638472268277, -3.163191566559951, 0.05278278563590326, 0.07980382148535234, 0.08802958767986552, -3.196485922779514, -0.08802958767985669, -0.346287860114658 },
            { -0.6126696726215765, 0.1337266922754592, 4.035282164060122, 0.297665088261717, -0.05983052775892982, 0.1435846584703286, 1.267675602021125, -0.2976650882617156, 1.609025738070403, -1.130082757724288, 0.04510682548757117, 0.05983052775892383, 0.1460407450272554, -5.302957766081252, -0.1460407450272472, -0.1886914839578907 },
            { -0.7609240701939931, -0.4998154058516119, 2.791168587368706, 2.577615258910473, -0.03648284696051904, 0.03658601733412703, 2.379803786327927, -2.577615258910468, 1.12232796070426, 0.1384115153413486, 0.03119393897324105, 0.03648284696051168, 0.1424059348162712, -5.170972373696644, -0.1424059348162618, -0.067779956307362 },
            { -0.9001143768884365, 0.03495706281957767, -0.7444393913439189, 5.948215232299129, -0.01508575494633742, -0.002962523688274155, 3.570326646626591, -5.948215232299117, 0.514201977178308, 0.3509553368905597, 0.01420824500757129, 0.01508575494633041, 0.07782348989542631, -2.825887255282688, -0.07782348989541532, -0.0112457213192968 },
            { 0.2712860881007274, 0.6740416042741233, -0.1197227187042696, -0.1394632379727547, 0.8144364296915448, -1.604755642746742, -0.2771272121408727, 0.1394632379727543, 0.5064192894295163, -1.451746981804369, -3.714595377175354, -0.8144364296915392, 0.4327324417728432, 0.3968499308451412, -0.4327324417728391, 5.319351019922095 },
            { 0.4456080083920613, 0.718483087433168, -0.6265418704119528, -0.3743732505894513, 0.3400281017409427, -1.433112647835138, -1.077974907531744, 0.3743732505894508, 0.1355709757044494, -1.29966207152968, -2.465692313614887, -0.3400281017409387, 1.858636351004376, 1.704516777943697, -1.858636351004374, 3.898804961450023 },
            { 0.4779431512772406, 0.7893672736129272, -1.4988049669836, 0.2976650882617171, -0.1598367275358294, -1.126017174037609, -1.328981766127504, -0.2976650882617163, -0.2426275665172832, -1.024682858372886, -0.9984329686697502, 0.1598367275358315, 3.083470507922343, 2.827786733111105, -3.083470507922343, 2.12445014270736 },
            { 0.163929678402998, 0.8718465966671962, -2.60518056918966, 2.577615258910479, -0.373933539234403, -0.7209956698366361, -0.1522253391038525, -2.577615258910474, -0.3774269137425408, -0.6583493613276528, -0.0421290606997872, 0.3739335392344033, 3.006725965942847, 2.75740590829351, -3.006725965942848, 0.7631247305364243 },
            { -0.4254578423166464, 0.9471090533589717, -3.6934929163915, 5.948215232299135, -0.252755535418886, -0.310338399348991, 2.186596794972585, -5.948215232299123, -0.2375209611248776, -0.284130249917442, 0.1837244485732992, 0.2527555354188843, 1.643147163288992, 1.506896121418903, -1.643147163288988, 0.1266139507756907 },
            { 0.4609337245537737, -0.227145308881513, 0.02287364863917649, -0.1394632379727549, 0.2811394320938461, 0.256081170171128, -0.2058290284691486, 0.1394632379727541, -0.8567664376520956, 0.6229780219798331, -2.304352020835303, -0.2811394320938418, 0.3614342581011242, 0.1829553798299707, -0.3614342581011187, 2.048270850664176 },
            { 0.4999510345435053, -0.1113570604279168, -0.01407382715664862, -0.3743732505894515, -0.008521226183354817, -0.02688761628314556, -0.7717408859040913, 0.3743732505894509, -0.7365844784532809, 0.3479905043376906, -1.474387355993436, 0.008521226183358255, 1.552402329376726, 0.7858147130607396, -1.552402329376722, 1.501274972276581 },
            { 0.3938296054624033, 0.1097393451659621, -0.4827228552772888, 0.2976650882617163, -0.2928980103836567, -0.3029058154558062, -0.820940710274348, -0.2976650882617152, -0.5472757219589198, 0.04370677133055367, -0.5151355743114283, 0.2928980103836588, 2.575429452069188, 1.303663565551636, -2.575429452069187, 0.8180413897672353 },
            { 0.02941429585219182, 0.4191152975088264, -1.614387739828066, 2.577615258910478, -0.3695800867659325, -0.3731749951120581, 0.3431710755769444, -2.577615258910472, -0.3304083457516419, -0.118121247609375, 0.07932596444560633, 0.3695800867659321, 2.511329551262052, 1.271216664251117, -2.51132955126205, 0.2938490306664531 },
            { -0.5106212029015661, 0.7463036313348428, -3.152034052027693, 5.948215232299134, -0.2206106210667529, -0.2212070708084083, 2.457326227154489, -5.948215232299122, -0.1354520366149683, -0.100230391818302, 0.1724530661018176, 0.2206106210667506, 1.37241773110709, 0.6947078248731912, -1.372417731107085, 0.04875400470658949 },
            { 0.4480426095561726, -0.3918694246814229, 0.2391622244294849, -0.1394632379727558, -0.2272129619679916, 1.876391525254195, -0.09768474057399411, 0.1394632379727549, -1.421698659618686, 1.365525474743935, -0.7664037236521923, 0.2272129619679932, 0.2532899702059729, -0.1414774838554932, -0.2532899702059663, -1.109987801601999 },
            { 0.3620931054203108, -0.4889100246858866, 0.9149108535940946, -0.3743732505894515, -0.3169121264270539, 1.224919495700131, -0.3072485455287185, 0.374373250589451, -0.9580360025795768, 1.084852921845151, -0.4113567261391434, 0.3169121264270561, 1.087909989001355, -0.607662308065378, -1.08790998900135, -0.8135627695609854 },
            { 0.1462144096061888, -0.4409818588693148, 1.058459132182845, 0.2976650882617155, -0.3746911666758401, 0.4654494512945952, -0.05034971654428118, -0.2976650882617143, -0.4091990885563115, 0.7039665378194373, -0.02214090957866615, 0.3746911666758404, 1.804838458339124, -1.008109415638566, -1.80483845833912, -0.4433085417159268 },
            { -0.2177341384895135, -0.09511445185266798, -0.1115642530997478, 2.577615258910476, -0.3198598127911745, -0.01807250801388066, 1.094582818941102, -2.577615258910471, -0.04350607777421774, 0.3563546681164014, 0.1773135768630357, 0.3198598127911728, 1.759917807897894, -0.9830185658413615, -1.759917807897889, -0.1592410688491532 },
            { -0.646949800447457, 0.4703392694431859, -2.330755299952469, 5.94821523229913, -0.1646998100321068, -0.1146287254206282, 2.867965603192098, -5.948215232299118, 0.05513378856563383, 0.1214767424386446, 0.1410492305437679, 0.1646998100321029, 0.961778355069479, -0.5372103032396442, -0.9617783550694718, -0.0264205051231406 },
            { 0.03129159070067156, 1.043047194065408, 0.4712496811046499, -0.1394632379727568, -0.3697798815843277, 2.00338499358528, 0.01835898776358906, 0.1394632379727561, -0.01330523215060032, -1.061033552615482, 0.07804805405230754, 0.3697798815843255, 0.1372462418683908, -0.4896086688682429, -0.1372462418683819, -2.08143304763758 },
            { -0.08115263985277488, 0.2872302380251479, 1.9117535719754, -0.374373250589451, -0.3525116251692747, 1.386893605844356, 0.1911728136619356, 0.3743732505894506, 0.2809261205798944, -0.4870037187522696, 0.1386875153605967, 0.3525116251692733, 0.5894886298107033, -2.102926385637339, -0.5894886298106965, -1.525581121204946 },
            { -0.2804060153167353, -0.3882583682564951, 2.712217341261724, 0.2976650882617158, -0.3015408516666233, 0.6462571858834548, 0.7765293879951587, -0.2976650882617145, 0.5435538216051665, 0.1251105619680639, 0.1850285703166019, 0.3015408516666206, 0.9779593537996857, -3.488746729256886, -0.9779593537996798, -0.8312857562000511 },
            { -0.5407390838389305, -0.4156924675972298, 1.501033544042484, 2.577615258910474, -0.2087042425102083, 0.1317547343649146, 1.900881717512218, -2.577615258910469, 0.5533703753333051, 0.4030611761028583, 0.1668518113695483, 0.2087042425102038, 0.9536189093267818, -3.401915261554711, -0.9536189093267742, -0.2986065457344592 },
            { -0.8028270414963643, 0.2125788642603418, -1.449485930573994, 5.94821523229913, -0.09511450314867369, -0.03862720243060025, 3.308600287881336, -5.948215232299118, 0.3075933749554616, 0.2826548022805686, 0.08817055094237297, 0.09511450314866871, 0.5211436703802436, -1.859114357307357, -0.5211436703802346, -0.04954334851177287 },
            { -0.6024661006022033, 3.392399818389126, 0.6569278219924193, -0.1394632379727571, -0.1834962436767137, 0.9036154590034362, 0.1111980582074766, 0.1394632379727568, 2.615170100524633, -5.405103818311562, 0.1529548316323224, 0.1834962436767049, 0.04440717142450467, -0.7681258801999022, -0.04440717142449123, -1.056570290635746 },
            { -0.6558999074188979, 1.788710018653131, 2.709262861611903, -0.3743732505894497, -0.1608574206899539, 0.6359383696585128, 0.5899274584801907, 0.3743732505894494, 2.37281475050546, -3.505624861739697, 0.1384721694887449, 0.1608574206899476, 0.1907339849924515, -3.2991903200921, -0.1907339849924425, -0.7744105391472474 },
            { -0.7416684861493231, 0.133726692275459, 4.035282164060122, 0.2976650882617171, -0.1230669201562337, 0.3111053319188908, 1.438061799394359, -0.2976650882617157, 1.905545225046712, -1.29760343117285, 0.1108692466180144, 0.1230669201562278, 0.3164269424004897, -5.473343963454485, -0.3164269424004817, -0.4219745785368963 },
            { -0.8422421101068899, -0.4998154058516119, 2.791168587368706, 2.577615258910473, -0.07668817893494481, 0.0792710390342703, 2.545949239175329, -2.577615258910468, 1.2463310223173, 0.09572649364120553, 0.07230664691171149, 0.0766881789349379, 0.3085513876636737, -5.337117826544046, -0.3085513876636645, -0.1515776859459763 },
            { -0.9346832259436917, 0.03495706281957756, -0.7444393913439189, 5.948215232299129, -0.03229490576637202, -0.006418909409798668, 3.661123557496373, -5.948215232299117, 0.5453144405120383, 0.3544117226120843, 0.03156794324279172, 0.03229490576636523, 0.1686204007652087, -2.916684166152471, -0.1686204007651977, -0.02514903383299267 },
            { 0.3074853722626648, 0.6740416042741224, -0.1197227187042679, -0.139463237972754, 3.655530800440858, -2.468867306584778, -0.04411407275910251, 0.1394632379727537, -0.3938916585704598, -0.5876353179663296, -0.9097002905879792, -3.655530800440849, 0.6657455811546155, 0.1638367914633689, -0.6657455811546095, 3.378567597172755 },
            { 0.195462769821848, 0.7184830874331678, -0.6265418704119526, -0.3743732505894514, 2.284062374078225, -2.20479982661865, -0.07715627386907478, 0.3743732505894513, -0.3859709645088496, -0.5279748927461676, -0.2715128027073909, -2.284062374078221, 2.859454984667047, 0.7036981442810267, -2.859454984667043, 2.47631262932604 },
            { -0.03003056293073689, 0.7893672736129272, -1.4988049669836, 0.2976650882617164, 0.7136281536869794, -1.73234286490879, 0.3313724710046594, -0.2976650882617149, -0.3409795431804865, -0.4183571675017043, 0.3830056267610348, -0.7136281536869759, 4.743824745054508, 1.16743249597894, -4.743824745054508, 1.349337238147755 },
            { -0.35941080852865, 0.871846596667196, -2.605180569189658, 2.577615258910479, -0.2306113158461934, -1.109229710762754, 1.466804317454237, -2.577615258910473, -0.2423204677370102, -0.2701153204015344, 0.6245336496200703, 0.2306113158461953, 4.625755622500937, 1.138376251735418, -4.625755622500938, 0.4846960611426834 },
            { -0.7176755481442612, 0.9471090533589712, -3.693492916391499, 5.948215232299134, -0.3316700042288835, -0.4774461031457427, 3.071381114390922, -5.948215232299122, -0.1124109590940153, -0.1170225461206884, 0.3970276855909167, 0.3316700042288832, 2.527931482707329, 0.6221118020005649, -2.527931482707326, 0.08041841755482371 },
            { 0.1770747693011802, -0.2271453088815134, 0.02287364863917743, -0.1394632379727543, 2.108591142332412, 0.3939730212042302, -0.01120777286087972, 0.1394632379727538, -0.4350156313663996, 0.4850861709467323, -0.1930413553441448, -2.108591142332404, 0.5560555137093932, -0.01166587577829938, -0.5560555137093872, -0.2009316658600871 },
            { 0.06080604297581053, -0.1113570604279166, -0.0140738271566489, -0.3743732505894514, 1.215359270226255, -0.04136577247351813, 0.06418012540184684, 0.3743732505894509, -0.3119176430759571, 0.3624686605280628, 0.1886381319838671, -1.215359270226249, 2.388323340682664, -0.05010629824519919, -2.38832334068266, -0.1472723595103506 },
            { -0.1558922634821879, 0.1097393451659621, -0.4827228552772888, 0.2976650882617159, 0.2187753767060736, -0.466011300931294, 0.565849010007203, -0.2976650882617146, -0.1606593384898151, 0.2068122568060409, 0.5462596817228917, -0.21877537670607, 3.96221917235074, -0.08312615472991544, -3.962219172350738, -0.08024838079159817 },
            { -0.4527597228085127, 0.4191152975088262, -1.614387739828064, 2.577615258910478, -0.3281357341530224, -0.5741182772787392, 1.695444966493035, -2.577615258910472, -0.04917760925761826, 0.08282203455730697, 0.6029443357192203, 0.3281357341530237, 3.863603442178143, -0.08105722666497539, -3.863603442178143, -0.02882605844048091 },
            { -0.7621685451933091, 0.7463036313348422, -3.152034052027691, 5.948215232299132, -0.2995080601600653, -0.3403202896171091, 3.196331056000531, -5.948215232299122, -0.003017913131926594, 0.01888282699040006, 0.3451029693002485, 0.299508060160064, 2.111422559953133, -0.04429700397285252, -2.111422559953129, -0.004782679683141337 },
            { -0.08475016524092976, -0.3918694246814231, 0.239162224429485, -0.1394632379727555, 0.4735702834105887, 2.886770775345965, 0.03870413493950015, 0.1394632379727545, 0.1214733652701887, 0.3551462246521649, 0.4671722965234876, -0.4735702834105814, 0.3896788457194654, -0.2778663593689878, -0.3896788457194595, -3.353943071869454 },
            { -0.1903627724181233, -0.4889100246858867, 0.9149108535940946, -0.3743732505894513, 0.1157518157802566, 1.884501051484778, 0.2785575957059183, 0.3743732505894508, 0.2540014310435063, 0.4252713660605041, 0.5737630939065993, -0.1157518157802516, 1.673716130235991, -1.193468449300015, -1.673716130235986, -2.458264145391378 },
            { -0.3723661206602579, -0.4409818588693147, 1.058459132182845, 0.2976650882617158, -0.2477078241487217, 0.7160796962222621, 0.9215004029697869, -0.2976650882617143, 0.3600116866378034, 0.4533362928917699, 0.6234229632148973, 0.2477078241487239, 2.776688577853192, -1.979959535152635, -2.776688577853188, -1.339502659437158 },
            { -0.6035346907125965, -0.09511445185266826, -0.1115642530997469, 2.577615258910476, -0.3740065654222949, -0.02780399893599422, 2.042244546802586, -2.57761525891047, 0.3325629835267513, 0.366086159038516, 0.5089673764549978, 0.3740065654222943, 2.707579535759378, -1.930680293702846, -2.707579535759374, -0.4811633775190018 },
            { -0.8311788531656252, 0.4703392694431859, -2.330755299952469, 5.948215232299131, -0.2337930253408285, -0.1763527761161665, 3.385853730520942, -5.94821523229912, 0.1776387905882634, 0.1832007931341838, 0.256185067953215, 0.2337930253408252, 1.479666482398322, -1.055098430568487, -1.479666482398315, -0.07983229183704947 },
            { -0.4515260541569783, 1.043047194065407, 0.4712496811046502, -0.1394632379727569, -0.327218954002658, 3.082146328957217, 0.09226187693705175, 0.1394632379727562, 1.548273748078986, -2.139794887987416, 0.603426626491626, 0.3272189540026593, 0.2111491310418518, -0.5635115580417061, -0.211149131041844, -3.685572955448841 },
            { -0.5227841522072384, 0.2872302380251477, 1.9117535719754, -0.3743732505894508, -0.3651924667495647, 2.133693248973344, 0.5085943494712433, 0.3743732505894504, 1.469357276063346, -1.233803361881257, 0.5676381861347694, 0.3651924667495654, 0.9069101656200104, -2.420347921446647, -0.9069101656200038, -2.70133143510811 },
            { -0.6389296465738771, -0.3882583682564952, 2.712217341261724, 0.2976650882617161, -0.3673904157489136, 0.9942468469169562, 1.303130486547069, -0.2976650882617148, 1.25006711389581, -0.2228790990654375, 0.4777026374914524, 0.3673904157489119, 1.504560452351596, -4.015347827808798, -1.50456045235159, -1.471949484408404 },
            { -0.7776358216406034, -0.4156924675972298, 1.501033544042485, 2.577615258910475, -0.2864137434277795, 0.2027006152815471, 2.414376233721139, -2.577615258910469, 0.8612129940516102, 0.3321152951862264, 0.3260390482536497, 0.2864137434277757, 1.467113425535703, -3.915409777763632, -1.467113425535695, -0.5287396635351929 },
            { -0.9072729166520319, 0.2125788642603417, -1.449485930573994, 5.94821523229913, -0.1405782455136035, -0.05942676547471709, 3.589220160536929, -5.948215232299118, 0.3912396870670118, 0.3034543653246862, 0.1471526837331104, 0.1405782455135988, 0.8017635430358369, -2.139734229962951, -0.8017635430358279, -0.08772591825839371 },
            { -0.8089357500071515, 3.392399818389126, 0.6569278219924193, -0.1394632379727571, -0.2570022684173101, 1.390184651813841, 0.1351099571681666, 0.1394632379727569, 3.308208942739985, -5.891673011121966, 0.2859184562966728, 0.2570022684173029, 0.06831907038519458, -0.7920377791605917, -0.06831907038518129, -1.676103108110501 },
            { -0.835624061738644, 1.788710018653131, 2.709262861611903, -0.3743732505894496, -0.2289298486322389, 0.9783716648382612, 0.6926318557927771, 0.3743732505894493, 2.894972200004954, -3.848058156919444, 0.2501238958662056, 0.2289298486322332, 0.2934383823050374, -3.401894717404686, -0.2934383823050287, -1.228495560704457 },
            { -0.8777407109949994, 0.1337266922754588, 4.035282164060121, 0.2976650882617174, -0.1792299012356076, 0.4786260053674529, 1.608447996767594, -0.2976650882617159, 2.20913812334095, -1.465124104621411, 0.1907784903843172, 0.1792299012356016, 0.4868131397737235, -5.643730160827719, -0.4868131397737152, -0.6694044957517608 },
            { -0.9261009934114273, -0.4998154058516118, 2.791168587368706, 2.577615258910473, -0.1143526675177296, 0.1219560607344137, 2.712094692022732, -2.577615258910468, 1.37287492732198, 0.05304147194106237, 0.1185010416334639, 0.1143526675177231, 0.4746968405110761, -5.503263279391448, -0.4746968405110669, -0.2404571023678721 },
            { -0.9696736394002106, 0.03495706281957756, -0.7444393913439185, 5.948215232299129, -0.0490824921851435, -0.00987529513132307, 3.751920468366156, -5.948215232299117, 0.5768484682470328, 0.3578681083336089, 0.0497707702805395, 0.04908249218513677, 0.2594173116349919, -3.007481077022254, -0.2594173116349816, -0.03989547514921599 },
            { -0.6341622249874563, 0.6740416042741217, -0.1197227187042671, -0.1394632379727544, 6.562027966162398, -3.058952863860176, 0.1150062052775054, 0.1394632379727543, -0.04232961859573851, 0.002450239309073551, 2.938444472383677, -6.562027966162387, 0.8248658591912299, 0.004716513426761895, -0.8248658591912258, 0.1205083914764959 },
            { -0.6836532569192779, 0.7184830874331678, -0.6265418704119521, -0.3743732505894523, 4.319903273636811, -2.731770446263127, 0.6062838946774015, 0.3743732505894524, -0.03382555741220191, -0.00100427310168822, 2.643444123592317, -4.319903273636805, 3.542895153213528, 0.02025797573455048, -3.542895153213524, 0.08832632267080966 },
            { -0.762865450711145, 0.7893672736129275, -1.4988049669836, 0.2976650882617154, 1.696050065914274, -2.146391243331297, 1.465197063697977, -0.2976650882617136, -0.02219303382258392, -0.004308789079198233, 2.098262426768737, -1.696050065914271, 5.877649337747829, 0.03360790328562192, -5.877649337747829, 0.04812881656256094 },
            { -0.8554271561133253, 0.8718465966671957, -2.605180569189657, 2.577615258910478, 0.005897727066929396, -1.37434741485164, 2.572409133494019, -2.577615258910472, -0.01142182424122245, -0.004997616312646253, 1.357059040117868, -0.005897727066926373, 5.731360438540718, 0.03277143569563534, -5.731360438540722, 0.01728837473377282 },
            { -0.9402274859520938, 0.947109053358971, -3.693492916391498, 5.948215232299134, -0.3625572285788183, -0.5915608022599086, 3.675583638256361, -5.948215232299122, -0.003973720400349187, -0.002907847006521802, 0.5886923990488145, 0.3625572285788187, 3.132134006572768, 0.01790927813512466, -3.132134006572767, 0.002868403211091382 },
            { -0.6909256210738229, -0.2271453088815136, 0.02287364863917801, -0.1394632379727545, 4.030681911474594, 0.4881367655045929, 0.1216954118538793, 0.139463237972754, 0.5271485033089681, 0.390922426646371, 2.597049804173035, -4.03068191147458, 0.6889586984241545, -0.1445690604930574, -0.6889586984241507, -3.085186569677636 },
            { -0.7332005407359504, -0.1113570604279163, -0.01407382715664945, -0.3743732505894515, 2.545246929344063, -0.05125263226426513, 0.6350148177653294, 0.3743732505894514, 0.472202080845059, 0.3723555203188093, 2.312532374813433, -2.545246929344055, 2.959158033046148, -0.6209409906086812, -2.959158033046144, -2.261279742549172 },
            { -0.8005333467142954, 0.1097393451659626, -0.482722855277289, 0.2976650882617155, 0.8374338693096898, -0.5773929606394744, 1.512861553827604, -0.2976650882617138, 0.3726000850341132, 0.3181939165142209, 1.809559257558614, -0.8374338693096854, 4.909231716171142, -1.030138698550317, -4.90923171617114, -1.232166296919141 },
            { -0.8787433867174246, 0.419115297508826, -1.614387739828064, 2.577615258910477, -0.203118046611674, -0.7113386546908638, 2.618887301440803, -2.577615258910471, 0.2395856772391692, 0.2200424119694321, 1.15394568716948, 0.203118046611676, 4.787045777125911, -1.004499561612744, -4.78704577712591, -0.4426070324786168 },
            { -0.9499921500923039, 0.7463036313348419, -3.15203405202769, 5.948215232299132, -0.3373389639692149, -0.4216604601541123, 3.700983515292605, -5.94821523229912, 0.1034655212300646, 0.1002229975274042, 0.4950956703900938, 0.3373389639692147, 2.616075019245207, -0.5489494632649274, -2.616075019245205, -0.07343521023598401 },
            { -0.7796691827235006, -0.3918694246814232, 0.2391622244294852, -0.1394632379727553, 1.283206824794801, 3.576739708529645, 0.1318415256050541, 0.1394632379727545, 1.506361315936442, -0.3348227085315149, 1.971727855390269, -1.283206824794791, 0.4828162363850185, -0.3710037500345411, -0.4828162363850139, -5.548467563919919 },
            { -0.810292302669825, -0.4889100246858862, 0.9149108535940937, -0.374373250589451, 0.6538776925781625, 2.334916855600935, 0.6785935606996565, 0.3743732505894507, 1.324346765411367, -0.0251444380556539, 1.731818500956204, -0.6538776925781541, 2.073752095229728, -1.593504414293753, -2.073752095229724, -4.066735356557142 },
            { -0.8587241447300863, -0.4409818588693146, 1.058459132182845, 0.2976650882617158, -0.02876413369440703, 0.8872303633609634, 1.585158519577634, -0.2976650882617142, 1.017520377846334, 0.2821856257530685, 1.328724677739039, 0.02876413369441075, 3.440346694461039, -2.643617651760482, -3.440346694461036, -2.215955041100001 },
            { -0.9144887100557954, -0.09511445185266826, -0.1115642530997463, 2.577615258910475, -0.3634842627436241, -0.03444945054162443, 2.689384866966723, -2.57761525891047, 0.6368715512643205, 0.3727316106441462, 0.8304436984768669, 0.3634842627436245, 3.354719855923515, -2.577820613866984, -3.354719855923511, -0.7959942479352413 },
            { -0.9648660525100791, 0.4703392694431855, -2.330755299952467, 5.94821523229913, -0.2730948249354441, -0.2185029661624365, 3.739509764816102, -5.948215232299119, 0.2691757998864468, 0.2253509831804543, 0.350570467703053, 0.2730948249354415, 1.833322516693483, -1.408754464863649, -1.833322516693477, -0.1320675015406177 },
            { -0.8784416271832021, 1.043047194065407, 0.4712496811046504, -0.1394632379727569, -0.2009463895479843, 3.818812098428207, 0.1427287660755355, 0.1394632379727561, 2.711855090576202, -2.876460657458405, 1.156614763972522, 0.2009463895479888, 0.2616160201803341, -0.613978447180189, -0.2616160201803274, -4.97542686240073 },
            { -0.8956147153233961, 0.2872302380251476, 1.9117535719754, -0.3743732505894505, -0.3026032413766912, 2.643668639921703, 0.7253555294063821, 0.3743732505894501, 2.352163230127864, -1.743778752829616, 1.003057974623799, 0.3026032413766939, 1.123671345555149, -2.637109101381786, -1.123671345555143, -3.6467266145455 },
            { -0.9225819481946596, -0.3882583682564952, 2.712217341261724, 0.2976650882617165, -0.373534565147391, 1.231882423024073, 1.662736444555623, -0.2976650882617149, 1.77135499162371, -0.4605146751725547, 0.7552107897137562, 0.3735345651473905, 1.86416641036015, -4.374953785817351, -1.864166410360144, -1.987093212737824 },
            { -0.9533538629151408, -0.4156924675972301, 1.501033544042486, 2.577615258910475, -0.3255343688047308, 0.2511482192534014, 2.76503195385015, -2.577615258910469, 1.085378639298002, 0.2836676912143722, 0.4626364641512353, 0.3255343688047277, 1.817769145664713, -4.266065497892644, -1.817769145664705, -0.7137846834046332 },
            { -0.9809108421947412, 0.2125788642603416, -1.449485930573993, 5.94821523229913, -0.1693107703391746, -0.07363039477820171, 3.780850178818413, -5.948215232299118, 0.4506739833062366, 0.317657994628171, 0.192058084450249, 0.16931077033917, 0.9933935613173216, -2.331364248244435, -0.9933935613173135, -0.1184276896720478 },
            { -0.9601067405985179, 3.392399818389126, 0.6569278219924188, -0.1394632379727572, -0.2970213850951077, 1.722453576430954, 0.1514389419674928, 0.1394632379727568, 3.791648857948465, -6.223941935739078, 0.3970703302102414, 0.2970213850951016, 0.08464805518451968, -0.8083667639599186, -0.08464805518450699, -2.119523906641185 },
            { -0.9658133285202309, 1.788710018653131, 2.709262861611903, -0.3743732505894495, -0.267956194200535, 1.21221290350214, 0.7627667516159065, 0.3743732505894491, 3.25900270545042, -4.081899395583323, 0.3412868170794958, 0.2679561942005302, 0.3635732781281665, -3.472029613227815, -0.3635732781281577, -1.553499720581627 },
            { -0.9747262765830106, 0.133726692275459, 4.035282164060122, 0.2976650882617173, -0.2135181320368289, 0.5930227136678436, 1.724801517309664, -0.2976650882617159, 2.420520397229353, -1.579520812921803, 0.253475825171106, 0.2135181320368234, 0.6031666603157945, -5.760083681369791, -0.6031666603157861, -0.8464985388389414 },
            { -0.9848266216709282, -0.4998154058516118, 2.791168587368706, 2.577615258910474, -0.1386130578748661, 0.1511048569737415, 2.825552288112546, -2.577615258910468, 1.460749351820809, 0.02389267570173464, 0.1529662795358286, 0.1386130578748594, 0.5881544366008904, -5.616720875481263, -0.5881544366008806, -0.3040711365095649 },
            { -0.9938101653443019, 0.03495706281957756, -0.7444393913439185, 5.948215232299129, -0.06030418577405806, -0.01223559574986305, 3.813923966283901, -5.948215232299117, 0.598624693572584, 0.3602284089521491, 0.06268560263571615, 0.06030418577405122, 0.3214208095527374, -3.069484574939999, -0.3214208095527262, -0.05045000688585295 } } };
    alignas(32) static const double FE17_C0_D100_Q125[1][125][16] =
        { { { -3.586265738526331, 0.6341622249874647, -0.1150062052775067, -0.1394632379727536, -0.1278253484683305, -0.1530086609423763, -0.6692606295592487, 0.1394632379727534, -0.7438596289923849, 0.1530086609423762, 5.720393018858494, -2.768289505319627, 0.03588251092769708, -0.03588251092769647, 0.7842668348367554, 0.871684977460715 },
            { -1.916159708320972, 0.6836532569192831, -0.6062838946774011, -0.3743732505894498, -0.1149925307183502, -0.1334505763054599, -2.762233709740886, 0.3743732505894493, -0.5239067827913372, 0.1334505763054596, 3.727132486863464, -2.494626035461776, 0.1541195730606769, -0.1541195730606757, 3.368517604418288, 0.638899313509687 },
            { -0.1835021661761107, 0.7628654507111495, -1.465197063697976, 0.2976650882617159, -0.0912765677216103, -0.1013343156647257, -4.123160595952987, -0.2976650882617172, -0.256858245684519, 0.1013343156647252, 1.405429540689513, -1.984792825224552, 0.2556837748112354, -0.2556837748112336, 5.588357659650963, 0.3481348134061283 },
            { 0.4999769917856019, 0.8554271561133265, -2.572409133494013, 2.577615258910469, -0.05903346016079522, -0.06264630850898505, -2.876859811701727, -2.577615258910471, -0.06602020917706933, 0.06264630850898482, -0.06880039218307199, -1.286603755715857, 0.2493200576493314, -0.2493200576493304, 5.449268945195743, 0.1250536693378641 },
            { -0.02405959736797558, 0.9402274859520916, -3.675583638256343, 5.94821523229911, -0.02560872317183249, -0.02620814943154631, 0.6976099516888059, -5.948215232299114, 0.004860425416188696, 0.02620814943154659, -0.3570579331074793, -0.5591099554766372, 0.1362510418700811, -0.1362510418700815, 2.977973686567542, 0.0207482977556438 },
            { -1.709977170122152, 0.6909256210738293, -0.1216954118538814, -0.1394632379727529, -0.672781310292346, -0.3668968518087109, -0.533353468792176, 0.139463237972753, -2.94859304978423, 0.3668968518087107, 3.470468546237997, -2.451416997189673, 0.1784788782711456, -0.1784788782711453, 0.6550488806460584, 3.621374360076575 },
            { -0.7023134870157817, 0.7332005407359548, -0.6350148177653305, -0.3743732505894498, -0.5990753657170859, -0.3748781206208402, -2.17849658957351, 0.3743732505894495, -2.055201870256941, 0.3748781206208399, 2.154772036221244, -2.185659089941416, 0.7665876163159823, -0.7665876163159817, 2.813511407338842, 2.654277235974025 },
            { 0.2611397489865226, 0.8005333467142975, -1.512861553827603, 0.2976650882617146, -0.4687771664585333, -0.3466125867863625, -3.154742974376301, -0.2976650882617157, -0.9775325896090622, 0.3466125867863621, 0.6517090804333788, -1.713382176134199, 1.271765886517547, -1.271765886517547, 4.667604528203906, 1.446309756067595 },
            { 0.4608807176327808, 0.8787433867174248, -2.618887301440797, 2.577615258910467, -0.2989365433703322, -0.2550537475026843, -1.932545150286918, -2.57761525891047, -0.2205930613417517, 0.2550537475026842, -0.245029283311884, -1.094594821038322, 1.240112887010927, -1.240112887010927, 4.551432451727718, 0.5195296047120838 },
            { -0.150340555649498, 0.9499921500923009, -3.700983515292585, 5.948215232299108, -0.1282574994556877, -0.120976678990103, 1.213668939016369, -5.948215232299112, 0.04205966944788353, 0.1209766789901032, -0.3293479022783302, -0.4703036921644728, 0.6777099062338905, -0.6777099062338909, 2.487314576276221, 0.08619783000780427 },
            { 0.04391404476219436, 0.7796691827235056, -0.1318415256050559, -0.1394632379727533, -1.612153707593575, 0.5108660505102569, -0.3272110067530407, 0.1394632379727533, -4.001125102894965, -0.5108660505102568, 1.042352236247452, -1.86593546373315, 0.3947674540614592, -0.3947674540614595, 0.4590525323580968, 5.613278810488538 },
            { 0.3384252249372281, 0.8102923026698289, -0.6785935606996584, -0.3743732505894498, -1.415995422270417, 0.140066573854978, -1.293090651757091, 0.3743732505894498, -2.698243174575462, -0.1400665738549779, 0.4914523164901077, -1.640169844097164, 1.69557229706673, -1.69557229706673, 1.971684212456751, 4.114238596845878 },
            { 0.4994261900414793, 0.8587241447300883, -1.585158519577636, 0.2976650882617137, -1.086411803602619, -0.238517086524844, -1.685857952666198, -0.2976650882617142, -1.155427647363564, 0.238517086524844, -0.09831708278880757, -1.25983325198276, 2.812947873977686, -2.812947873977686, 3.271016472243836, 2.241839450966183 },
            { 0.244913353452509, 0.9144887100557944, -2.689384866966717, 2.577615258910465, -0.6789998344787849, -0.3744271761302827, -0.5002192290845202, -2.577615258910467, -0.1262923644448739, 0.3744271761302828, -0.3710866482458984, -0.7883154152624049, 2.742936373739249, -2.742936373739249, 3.18960409605124, 0.8052921989236589 },
            { -0.3678754585860022, 0.9648660525100762, -3.739509764816084, 5.948215232299106, -0.2866386848140501, -0.2361054678592692, 1.996421441568092, -5.948215232299109, 0.1530285123814316, 0.2361054678592694, -0.2638830111486223, -0.3331075827754516, 1.498988658309117, -1.498988658309117, 1.743088323247996, 0.1336101724326188 },
            { 0.4619066773180023, 0.8784416271832041, -0.1427287660755369, -0.1394632379727547, -2.771350332930327, 3.064418546200759, -0.1060107905483549, 0.1394632379727547, -2.058401034062876, -3.064418546200758, -0.2432287828828023, -1.097119521618403, 0.6268549107366266, -0.6268549107366275, 0.2487395566238921, 4.829751366993201 },
            { 0.382141005426522, 0.8956147153233989, -0.7253555294063843, -0.3743732505894494, -2.403414808898398, 1.873897324596623, -0.3430099020825084, 0.3743732505894495, -1.136539317400058, -1.873897324596623, -0.3259493248966487, -0.9518063958532713, 2.69241501544804, -2.692415015448041, 1.068365431488894, 3.539954126298456 },
            { 0.1704190218352289, 0.9225819481946621, -1.662736444555624, 0.297665088261714, -1.809551234083606, 0.5211466239153898, -0.1096776685653041, -0.2976650882617143, -0.1193618875400255, -0.5211466239153894, -0.3759864227760242, -0.7170145472538667, 4.46670608305657, -4.46670608305657, 1.77241411312093, 1.928913121623632 },
            { -0.1968595496165653, 0.9533538629151392, -2.765031953850141, 2.577615258910464, -1.108517510659841, -0.2713064417379438, 1.036731481174287, -2.577615258910465, 0.4156317250271815, 0.2713064417379441, -0.3169967205091765, -0.4394975927893974, 4.355534170881485, -4.355534170881487, 1.728300472675858, 0.6928857856326608 },
            { -0.6361474589555649, 0.9809108421947372, -3.780850178818394, 5.948215232299106, -0.4601880011068327, -0.321282004711165, 2.836350396944258, -5.948215232299108, 0.345227755101437, 0.3212820047111656, -0.1622193165895191, -0.1825440666496532, 2.380258027687594, -2.380258027687596, 0.9444997818741404, 0.1149602460053963 },
            { -0.2949843492973989, 0.9601067405985089, -0.1514389419674946, -0.1394632379727555, -3.811461071515254, 6.308719277314982, 0.07095717444745714, 0.1394632379727556, 1.785871616887412, -6.30871927731498, -0.2878642746576825, -0.377258116643428, 0.8125330516243928, -0.812533051624394, 0.08048176752003752, 2.025589454627842 },
            { -0.3827503177246042, 0.9658133285202298, -0.7627667516159073, -0.3743732505894477, -3.275997521222748, 4.141563231398198, 0.4170881653444758, 0.374373250589448, 1.79134682116807, -4.141563231398197, -0.2587710094884658, -0.3242920013071601, 3.489924305084542, -3.489924305084544, 0.3456785862714322, 1.484650700054678 },
            { -0.5286432255937416, 0.9747262765830127, -1.724801517309664, 0.2976650882617158, -2.433103575626889, 1.608708763091737, 1.151322081479058, -0.2976650882617156, 1.624120714779005, -1.608708763091736, -0.2051904042156972, -0.2408926467735739, 5.789770905854972, -5.789770905854973, 0.573479435830608, 0.8089828608478853 },
            { -0.7068534929806053, 0.9848266216709272, -2.825552288112537, 2.577615258910464, -1.46831675737808, -0.01645545460693577, 2.266346190238115, -2.577615258910465, 1.177721645126406, 0.0164554546069365, -0.1325742547117613, -0.1453988739785606, 5.645669214207711, -5.645669214207713, 0.5592060978744261, 0.2905951122516751 },
            { -0.8767501944164223, 0.9938101653442981, -3.813923966283882, 5.948215232299104, -0.6017164114579285, -0.3608306320218785, 3.508323148708844, -5.948215232299106, 0.5535022810988893, 0.3608306320218791, -0.05746608617750321, -0.05959388475037242, 3.085304566917672, -3.085304566917674, 0.3056008175750419, 0.04821413035904016 },
            { -1.446710717421101, -0.3074853722626569, 0.0441140727591012, -0.1394632379727541, 0.04903123887257647, -0.1530086609423765, -0.5101403515226425, 0.139463237972754, -0.5670030416514797, 0.1530086609423764, 0.4996353793979125, 1.254560710285846, 0.03588251092769768, -0.03588251092769743, 0.4660262787635411, 0.5179718027789026 },
            { -0.5369160196221139, -0.1954627698218422, 0.07715627386907531, -0.3743732505894501, 0.01463406049689592, -0.1334505763054598, -2.078793541194411, 0.3743732505894497, -0.394280191576092, 0.1334505763054596, 0.08952908272462369, 0.6428497067193325, 0.1541195730606773, -0.1541195730606765, 2.001637267325337, 0.3796461310791957 },
            { 0.3142381266923375, 0.03003056293074002, -0.3313724710046576, 0.2976650882617158, -0.02064332678527073, -0.1013343156647254, -2.989336003259668, -0.2976650882617167, -0.1862250047481787, 0.1013343156647252, -0.3228859328277922, -0.02138275679528569, 0.255683774811236, -0.2556837748112351, 3.320708474264327, 0.2068683315334488 },
            { 0.4459961310590551, 0.3594108085286508, -1.46680431745423, 2.577615258910469, -0.03366126061001254, -0.0626463085089846, -1.771254995661945, -2.577615258910471, -0.04064800962628667, 0.06264630850898451, -0.4568550183146536, -0.3485519212730528, 0.2493200576493337, -0.2493200576493328, 3.238059313116177, 0.07430927023629905 },
            { -0.1732711530146626, 0.7176755481442588, -3.071381114390904, 5.94821523229911, -0.02139909098924553, -0.02620814943154587, 1.301812475554246, -5.948215232299114, 0.009070057598775216, 0.02620814943154626, -0.2811867596219381, -0.2632176355076584, 0.1362510418700826, -0.1362510418700829, 1.769568638836662, 0.01232903339047043 },
            { -0.428465054871122, -0.177074769301175, 0.01120777286087851, -0.1394632379727536, 0.06196108789916648, -0.3668968518087111, -0.4004502840774182, 0.1394632379727535, -2.213850651592719, 0.3668968518087111, 0.03944392536093146, 0.5660958988113663, 0.1784788782711463, -0.1784788782711461, 0.3892425112165401, 2.151889563693552 },
            { 0.0791597181126354, -0.06080604297580706, -0.06418012540184748, -0.37437325058945, -0.0605477715184411, -0.3748781206208403, -1.607661897210028, 0.3743732505894498, -1.516674276058296, 0.3748781206208401, -0.2021809577473522, 0.1838272826105241, 0.7665876163159824, -0.7665876163159822, 1.671842022611877, 1.577222047576737 },
            { 0.4749740948482749, 0.1558922634821897, -0.5658490100072019, 0.2976650882617145, -0.1753346794248496, -0.3466125867863624, -2.2077304305559, -0.2976650882617152, -0.6840901025753784, 0.3466125867863621, -0.4206006945222337, -0.2102656638082308, 1.271765886517548, -1.271765886517548, 2.773579440563104, 0.8594247820002276 },
            { 0.3432704145900898, 0.4527597228085125, -1.695444966493028, 2.577615258910467, -0.1935289301984169, -0.2550537475026841, -1.009102815339149, -2.577615258910469, -0.1151854481698363, 0.2550537475026841, -0.435792341135414, -0.3602377962631885, 1.240112887010928, -1.240112887010928, 2.704547781832181, 0.3087143783682532 },
            { -0.2870003494821102, 0.7621685451933065, -3.196331056000512, 5.948215232299108, -0.1107687799692274, -0.1209766789901027, 1.718321398308442, -5.948215232299112, 0.05954838893434344, 0.120976678990103, -0.2438519195121005, -0.2313162761990957, 0.6777099062338918, -0.6777099062338927, 1.478009657692075, 0.05122039103488434 },
            { 0.4046386622709662, 0.08475016524093312, -0.03870413493950106, -0.1394632379727537, -0.4732728505344516, 0.5108660505102564, -0.2340736160874874, 0.1394632379727538, -2.862244245835843, -0.5108660505102561, -0.3740160162526648, -0.1153728112592334, 0.394767454061459, -0.3947674540614591, 0.2727777510269886, 3.335517096370292 },
            { 0.4922270439070823, 0.190362772418126, -0.2785575957059201, -0.37437325058945, -0.5812555603262075, 0.1400665738549778, -0.8930546867633538, 0.37437325058945, -1.863503312631253, -0.1400665738549776, -0.4360808517013037, -0.246508964623904, 1.69557229706673, -1.69557229706673, 1.171612282469274, 2.44475887295746 },
            { 0.4346726554302755, 0.372366120660259, -0.9215004029697873, 0.2976650882617137, -0.6315639113983996, -0.2385170865248442, -1.022199836058349, -0.2976650882617141, -0.7005797551593442, 0.2385170865248442, -0.45516803763623, -0.3518707384543043, 2.812947873977686, -2.812947873977687, 1.943700239028138, 1.332143666557744 },
            { 0.08540408018419027, 0.6035346907125951, -2.042244546802578, 2.577615258910465, -0.5156137101374252, -0.3744271761302826, 0.146921091079617, -2.577615258910467, 0.03709375989648656, 0.3744271761302828, -0.3630221210524601, -0.3259166498443254, 2.74293637373925, -2.742936373739251, 1.895323455722964, 0.4785199502409391 },
            { -0.4764356808355286, 0.8311788531656219, -3.385853730520922, 5.948215232299106, -0.2595304522054095, -0.2361054678592691, 2.350077475863255, -5.94821523229911, 0.1801367449900726, 0.2361054678592694, -0.1804497659940238, -0.1742934063360695, 1.498988658309117, -1.498988658309119, 1.035776254657672, 0.07939370721533755 },
            { 0.3449344167537123, 0.4515260541569786, -0.09226187693705387, -0.1394632379727549, -1.791439738440372, 3.064418546200758, -0.05554390140987256, 0.139463237972755, -1.078490439572922, -3.064418546200757, -0.4361998347804477, -0.3602606361302428, 0.6268549107366264, -0.6268549107366271, 0.1478057783469264, 2.869930178013293 },
            { 0.2364826142292866, 0.5227841522072397, -0.5085943494712455, -0.3743732505894493, -1.68519180137993, 1.873897324596623, -0.1262487221473698, 0.3743732505894494, -0.4183163098815902, -1.873897324596622, -0.4074631056183378, -0.3518036608181883, 2.692415015448039, -2.692415015448041, 0.6348430716186159, 2.103508111261521 },
            { 0.01055233088854509, 0.6389296465738791, -1.30313048654707, 0.2976650882617142, -1.418193116428283, 0.5211466239153895, 0.2499282894432492, -0.2976650882617143, 0.2719962301152975, -0.5211466239153888, -0.33990534250344, -0.3095766349589841, 4.466706083056568, -4.466706083056569, 1.053202197103822, 1.146196886312986 },
            { -0.3281125037182048, 0.7776358216406019, -2.414376233721131, 2.577615258910464, -0.9679375779632988, -0.2713064417379438, 1.387387201303298, -2.577615258910465, 0.5562116577237237, 0.2713064417379442, -0.2302088535804351, -0.2193144643419619, 4.355534170881487, -4.355534170881487, 1.026989032417836, 0.411725920239576 },
            { -0.7024079530859958, 0.9072729166520279, -3.589220160536909, 5.948215232299106, -0.4368636611054568, -0.321282004711165, 3.027980415225743, -5.948215232299108, 0.3685520951028126, 0.3212820047111656, -0.1033362538713668, -0.1015287096946652, 2.380258027687594, -2.380258027687597, 0.5612397453111704, 0.06831156600264525 },
            { -0.4137073670488345, 0.8089357500071419, -0.1351099571681688, -0.1394632379727554, -3.400488245824502, 6.308719277314982, 0.08728615924678323, 0.1394632379727556, 2.196844442578162, -6.308719277314979, -0.2015892297461771, -0.1936391532121311, 0.8125330516243919, -0.8125330516243932, 0.04782379792138575, 1.203643803246339 },
            { -0.4891569243614642, 0.8356240617386422, -0.6926318557927782, -0.3743732505894477, -2.974776021490304, 4.141563231398198, 0.487223061167605, 0.374373250589448, 2.092568320900514, -4.141563231398197, -0.1761470629963336, -0.1703200743808449, 3.489924305084542, -3.489924305084544, 0.2054087946251738, 0.8822077005897913 },
            { -0.6126696726215781, 0.8777407109950018, -1.608447996767593, 0.2976650882617158, -2.268968651099883, 1.608708763091736, 1.267675602021128, -0.2976650882617157, 1.788255639306011, -1.608708763091735, -0.1341230757480352, -0.1309479626253887, 5.789770905854972, -5.789770905854973, 0.3407723947464665, 0.4807130117938735 },
            { -0.7609240701939941, 0.9261009934114264, -2.712094692022723, 2.577615258910464, -1.409357774282499, -0.01645545460693566, 2.379803786327929, -2.577615258910464, 1.236680628221986, 0.01645545460693638, -0.08315872854448453, -0.08201819467294766, 5.645669214207711, -5.645669214207714, 0.3322909056947972, 0.1726771460605137 },
            { -0.9001143768884365, 0.9696736394002062, -3.751920468366136, 5.948215232299104, -0.5919342231933689, -0.3608306320218787, 3.57032664662659, -5.948215232299106, 0.563284469363449, 0.3608306320218793, -0.03487424717756665, -0.03468501533420282, 3.085304566917672, -3.085304566917674, 0.1815938217395496, 0.02864975382992085 },
            { 0.271286088100725, -0.2712860881007219, 0.2771272121408686, -0.1394632379727533, 0.3080171402620274, -0.1530086609423761, -0.2771272121408733, 0.1394632379727533, -0.3080171402620282, 0.153008660942376, -2.900158947483804, 2.900158947483802, 0.03588251092769849, -0.03588251092769836, 0.0, 0.0 },
            { 0.4456080083920598, -0.4456080083920583, 1.077974907531743, -0.3743732505894496, 0.2044571260364926, -0.1334505763054595, -1.077974907531743, 0.3743732505894496, -0.2044571260364943, 0.1334505763054594, -2.125664211873939, 2.125664211873938, 0.1541195730606767, -0.1541195730606764, 0.0, 0.0 },
            { 0.4779431512772406, -0.4779431512772395, 1.328981766127506, 0.2976650882617158, 0.08279083898145281, -0.101334315664725, -1.328981766127505, -0.2976650882617161, -0.08279083898145463, 0.101334315664725, -1.158269696205577, 1.158269696205576, 0.2556837748112366, -0.2556837748112362, 0.0, 0.0 },
            { 0.1639296784029995, -0.163929678402998, 0.152225339103859, 2.577615258910469, 0.003493374508136082, -0.06264630850898424, -0.1522253391038564, -2.57761525891047, -0.003493374508137526, 0.06264630850898441, -0.4160625999341901, 0.4160625999341885, 0.2493200576493362, -0.2493200576493364, 0.0, 0.0 },
            { -0.4254578423166451, 0.4254578423166445, -2.186596794972568, 5.948215232299109, -0.01523457429401043, -0.02620814943154559, 2.186596794972581, -5.948215232299113, 0.01523457429400987, 0.02620814943154609, -0.06903108684558712, 0.06903108684558773, 0.1362510418700853, -0.136251041870086, 0.0, 0.0 },
            { 0.4609337245537725, -0.4609337245537716, 0.205829028469146, -0.1394632379727532, 1.137905869745942, -0.3668968518087106, -0.2058290284691499, 0.1394632379727532, -1.137905869745943, 0.3668968518087107, -2.023212588741455, 2.023212588741454, 0.178478878271147, -0.1784788782711466, 0.0, 0.0 },
            { 0.4999510345435046, -0.4999510345435045, 0.77174088590409, -0.3743732505894498, 0.7280632522699269, -0.3748781206208401, -0.7717408859040908, 0.3743732505894498, -0.7280632522699271, 0.3748781206208401, -1.482908582176789, 1.482908582176789, 0.7665876163159822, -0.7665876163159819, 0.0, 0.0 },
            { 0.3938296054624036, -0.3938296054624036, 0.82094071027435, 0.2976650882617148, 0.2543777115752638, -0.3466125867863621, -0.8209407102743486, -0.297665088261715, -0.2543777115752637, 0.3466125867863621, -0.8080335846950841, 0.808033584695084, 1.271765886517548, -1.271765886517548, 0.0, 0.0 },
            { 0.02941429585219296, -0.02941429585219302, -0.3431710755769367, 2.577615258910467, -0.03917174101429055, -0.2550537475026838, 0.3431710755769414, -2.577615258910468, 0.03917174101429022, 0.2550537475026839, -0.2902541223203254, 0.2902541223203254, 1.24011288701093, -1.240112887010931, 0.0, 0.0 },
            { -0.5106212029015649, 0.5106212029015631, -2.45732622715447, 5.948215232299109, -0.08515858445178548, -0.1209766789901025, 2.457326227154486, -5.948215232299111, 0.08515858445178504, 0.1209766789901029, -0.04815755496493462, 0.04815755496493646, 0.677709906233894, -0.6777099062338954, 0.0, 0.0 },
            { 0.4480426095561723, -0.4480426095561719, 0.09768474057399196, -0.1394632379727538, 1.194485697650694, 0.5108660505102562, -0.09768474057399451, 0.1394632379727538, -1.194485697650696, -0.5108660505102558, -0.9936166856201825, 0.9936166856201827, 0.3947674540614595, -0.3947674540614592, 0.0, 0.0 },
            { 0.3620931054203106, -0.36209310542031, 0.3072485455287162, -0.3743732505894498, 0.641123876152522, 0.1400665738549774, -0.3072485455287174, 0.3743732505894499, -0.6411238761525231, -0.1400665738549771, -0.7282688525661972, 0.728268852566197, 1.695572297066729, -1.695572297066729, 0.0, 0.0 },
            { 0.146214409606189, -0.1462144096061889, 0.05034971654428161, 0.2976650882617141, 0.0345079218804722, -0.2385170865248442, -0.05034971654428071, -0.2976650882617141, -0.03450792188047185, 0.2385170865248444, -0.3968320762545054, 0.3968320762545053, 2.812947873977686, -2.812947873977687, 0.0, 0.0 },
            { -0.2177341384895128, 0.2177341384895125, -1.094582818941096, 2.577615258910465, -0.2763537350169561, -0.3744271761302826, 1.0945828189411, -2.577615258910466, 0.2763537350169557, 0.374427176130283, -0.1425462359281372, 0.1425462359281376, 2.742936373739251, -2.742936373739253, 0.0, 0.0 },
            { -0.6469498004474561, 0.6469498004474538, -2.86796560319208, 5.948215232299106, -0.2198335985977407, -0.2361054678592688, 2.867965603192096, -5.948215232299108, 0.2198335985977403, 0.2361054678592694, -0.02365057948833671, 0.02365057948833904, 1.498988658309118, -1.498988658309119, 0.0, 0.0 },
            { 0.0312915907006706, -0.03129159070067365, -0.01835898776359182, -0.1394632379727549, -0.3564746494337235, 3.064418546200756, 0.01835898776358871, 0.1394632379727549, 0.3564746494337256, -3.064418546200756, -0.2917318275320166, 0.2917318275320194, 0.6268549107366259, -0.626854910736626, 0.0, 0.0 },
            { -0.08115263985277577, 0.08115263985277615, -0.1911728136619383, -0.3743732505894491, -0.6334377457491702, 1.873897324596623, 0.191172813661937, 0.3743732505894494, 0.6334377457491693, -1.873897324596622, -0.2138241098086772, 0.2138241098086769, 2.692415015448038, -2.692415015448039, 0.0, 0.0 },
            { -0.280406015316736, 0.2804060153167369, -0.7765293879951592, 0.2976650882617145, -0.8450946732717913, 0.5211466239153892, 0.7765293879951604, -0.2976650882617143, 0.8450946732717897, -0.5211466239153886, -0.1165122813500206, 0.1165122813500196, 4.466706083056569, -4.46670608305657, 0.0, 0.0 },
            { -0.5407390838389305, 0.540739083838929, -1.900881717512211, 2.577615258910464, -0.7620746178435123, -0.2713064417379437, 1.900881717512218, -2.577615258910465, 0.7620746178435112, 0.2713064417379441, -0.04185243114065645, 0.04185243114065798, 4.355534170881487, -4.355534170881489, 0.0, 0.0 },
            { -0.8028270414963643, 0.8028270414963609, -3.308600287881317, 5.948215232299106, -0.4027078781041347, -0.3212820047111649, 3.308600287881335, -5.948215232299107, 0.4027078781041343, 0.3212820047111655, -0.006943952206297066, 0.006943952206300674, 2.380258027687596, -2.380258027687597, 0.0, 0.0 },
            { -0.6024661006022062, 0.6024661006021943, -0.1111980582074792, -0.1394632379727555, -2.798666344201326, 6.308719277314981, 0.1111980582074728, 0.1394632379727556, 2.798666344201339, -6.308719277314979, -0.03054141204438203, 0.03054141204439311, 0.8125330516243915, -0.8125330516243927, 0.0, 0.0 },
            { -0.6558999074189006, 0.6558999074188961, -0.5899274584801926, -0.3743732505894476, -2.533672171195406, 4.141563231398197, 0.5899274584801909, 0.374373250589448, 2.533672171195411, -4.141563231398197, -0.02238525120120656, 0.02238525120121061, 3.489924305084542, -3.489924305084544, 0.0, 0.0 },
            { -0.7416684861493252, 0.741668486149325, -1.438061799394359, 0.2976650882617159, -2.028612145202948, 1.608708763091736, 1.438061799394363, -0.2976650882617157, 2.028612145202946, -1.608708763091735, -0.01219767353821819, 0.01219767353821825, 5.789770905854972, -5.789770905854973, 0.0, 0.0 },
            { -0.8422421101068909, 0.8422421101068889, -2.545949239175321, 2.577615258910464, -1.323019201252243, -0.01645545460693566, 2.545949239175331, -2.577615258910464, 1.323019201252241, 0.01645545460693638, -0.004381532023228829, 0.0043815320232308, 5.645669214207711, -5.645669214207714, 0.0, 0.0 },
            { -0.9346832259436917, 0.9346832259436877, -3.661123557496353, 5.948215232299104, -0.5776093462784093, -0.3608306320218785, 3.661123557496373, -5.948215232299106, 0.5776093462784085, 0.3608306320218791, -0.0007269625235750143, 0.0007269625235793442, 3.085304566917672, -3.085304566917674, 0.0, 0.0 },
            { 0.3074853722626633, 1.446710717421099, 0.5101403515226384, -0.1394632379727526, 0.5670030416514799, -0.1530086609423758, -0.04411407275910276, 0.1394632379727528, -0.04903123887257645, 0.1530086609423758, -1.254560710285859, -0.4996353793979034, 0.03588251092770245, -0.03588251092770214, -0.4660262787635357, -0.5179718027789034 },
            { 0.1954627698218467, 0.5369160196221104, 2.078793541194411, -0.3743732505894496, 0.3942801915760911, -0.1334505763054598, -0.07715627386907536, 0.37437325058945, -0.01463406049689693, 0.1334505763054598, -0.6428497067193434, -0.08952908272461346, 0.154119573060677, -0.1541195730606768, -2.001637267325336, -0.3796461310791937 },
            { -0.03003056293073679, -0.3142381266923394, 2.98933600325967, 0.2976650882617151, 0.1862250047481777, -0.1013343156647253, 0.3313724710046572, -0.2976650882617148, 0.02064332678526853, 0.1013343156647254, 0.02138275679527824, 0.3228859328277981, 0.2556837748112361, -0.2556837748112364, -3.320708474264327, -0.2068683315334458 },
            { -0.3594108085286483, -0.4459961310590557, 1.771254995661948, 2.577615258910468, 0.04064800962628531, -0.06264630850898417, 1.466804317454232, -2.577615258910469, 0.03366126061001107, 0.06264630850898439, 0.348551921273048, 0.456855018314656, 0.2493200576493375, -0.2493200576493383, -3.238059313116179, -0.07430927023629577 },
            { -0.7176755481442595, 0.173271153014661, -1.301812475554231, 5.94821523229911, -0.00907005759877566, -0.02620814943154542, 3.071381114390918, -5.948215232299113, 0.02139909098924464, 0.02620814943154604, 0.2632176355076583, 0.2811867596219405, 0.1362510418700871, -0.1362510418700886, -1.769568638836684, -0.01232903339046828 },
            { 0.1770747693011795, 0.42846505487112, 0.4004502840774149, -0.1394632379727526, 2.213850651592717, -0.3668968518087101, -0.01120777286087987, 0.1394632379727527, -0.06196108789916557, 0.3668968518087102, -0.5660958988113775, -0.03944392536092198, 0.1784788782711488, -0.178478878271148, -0.3892425112165354, -2.151889563693551 },
            { 0.06080604297580991, -0.07915971811263776, 1.607661897210028, -0.3743732505894495, 1.516674276058295, -0.37487812062084, 0.06418012540184692, 0.3743732505894499, 0.06054777151844203, 0.3748781206208401, -0.1838272826105324, 0.2021809577473603, 0.7665876163159816, -0.7665876163159814, -1.671842022611875, -1.577222047576736 },
            { -0.1558922634821877, -0.4749740948482764, 2.2077304305559, 0.2976650882617147, 0.6840901025753777, -0.3466125867863622, 0.5658490100072013, -0.2976650882617143, 0.17533467942485, 0.3466125867863624, 0.2102656638082256, 0.4206006945222385, 1.271765886517548, -1.271765886517548, -2.773579440563102, -0.859424782000227 },
            { -0.4527597228085115, -0.343270414590091, 1.009102815339154, 2.577615258910467, 0.1151854481698359, -0.2550537475026838, 1.695444966493032, -2.577615258910468, 0.1935289301984164, 0.2550537475026841, 0.3602377962631861, 0.4357923411354168, 1.240112887010932, -1.240112887010933, -2.704547781832184, -0.3087143783682514 },
            { -0.762168545193308, 0.2870003494821081, -1.718321398308427, 5.948215232299109, -0.05954838893434378, -0.1209766789901023, 3.196331056000528, -5.948215232299111, 0.1107687799692268, 0.1209766789901028, 0.2313162761990969, 0.2438519195121033, 0.6777099062338958, -0.6777099062338967, -1.478009657692097, -0.05122039103488248 },
            { -0.08475016524092989, -0.4046386622709666, 0.2340736160874853, -0.1394632379727535, 2.862244245835837, 0.5108660505102566, 0.03870413493950001, 0.1394632379727535, 0.4732728505344503, -0.510866050510256, 0.1153728112592262, 0.37401601625267, 0.3947674540614592, -0.3947674540614585, -0.2727777510269859, -3.335517096370287 },
            { -0.1903627724181237, -0.4922270439070826, 0.8930546867633528, -0.3743732505894493, 1.863503312631251, 0.1400665738549775, 0.2785575957059194, 0.3743732505894498, 0.5812555603262076, -0.1400665738549771, 0.2465089646238987, 0.4360808517013075, 1.695572297066729, -1.695572297066728, -1.171612282469273, -2.444758872957458 },
            { -0.372366120660258, -0.4346726554302756, 1.02219983605835, 0.2976650882617143, 0.7005797551593436, -0.2385170865248444, 0.9215004029697872, -0.2976650882617141, 0.6315639113983997, 0.2385170865248447, 0.3518707384543013, 0.4551680376362326, 2.812947873977686, -2.812947873977686, -1.943700239028137, -1.332143666557742 },
            { -0.6035346907125958, -0.0854040801841916, -0.1469210910796126, 2.577615258910465, -0.03709375989648653, -0.3744271761302826, 2.042244546802583, -2.577615258910466, 0.5156137101374247, 0.374427176130283, 0.3259166498443248, 0.3630221210524628, 2.742936373739251, -2.742936373739254, -1.895323455722969, -0.4785199502409374 },
            { -0.8311788531656247, 0.4764356808355257, -2.350077475863238, 5.948215232299106, -0.1801367449900725, -0.2361054678592687, 3.385853730520939, -5.948215232299109, 0.2595304522054089, 0.2361054678592691, 0.1742934063360719, 0.1804497659940272, 1.49898865830912, -1.498988658309121, -1.035776254657697, -0.07939370721533552 },
            { -0.4515260541569795, -0.3449344167537151, 0.05554390140986998, -0.139463237972755, 1.078490439572923, 3.064418546200757, 0.09226187693705079, 0.139463237972755, 1.791439738440372, -3.064418546200755, 0.3602606361302419, 0.4361998347804522, 0.6268549107366254, -0.6268549107366256, -0.1478057783469214, -2.869930178013295 },
            { -0.5227841522072396, -0.236482614229287, 0.126248722147369, -0.3743732505894489, 0.4183163098815909, 1.873897324596622, 0.5085943494712449, 0.3743732505894493, 1.685191801379931, -1.873897324596622, 0.3518036608181871, 0.4074631056183394, 2.692415015448038, -2.692415015448039, -0.6348430716186138, -2.103508111261521 },
            { -0.6389296465738782, -0.01055233088854401, -0.2499282894432491, 0.2976650882617149, -0.2719962301152995, 0.5211466239153889, 1.303130486547071, -0.2976650882617146, 1.418193116428282, -0.5211466239153882, 0.3095766349589822, 0.3399053425034398, 4.46670608305657, -4.466706083056571, -1.053202197103822, -1.146196886312981 },
            { -0.7776358216406034, 0.3281125037182033, -1.38738720130329, 2.577615258910464, -0.5562116577237252, -0.2713064417379435, 2.414376233721138, -2.577615258910465, 0.9679375779632982, 0.271306441737944, 0.2193144643419634, 0.2302088535804369, 4.355534170881487, -4.355534170881489, -1.026989032417847, -0.4117259202395717 },
            { -0.9072729166520318, 0.7024079530859919, -3.027980415225725, 5.948215232299106, -0.3685520951028127, -0.3212820047111648, 3.589220160536929, -5.948215232299107, 0.4368636611054563, 0.3212820047111654, 0.1015287096946688, 0.1033362538713712, 2.380258027687596, -2.380258027687598, -0.5612397453111998, -0.06831156600264252 },
            { -0.8089357500071547, 0.4137073670488225, -0.08728615924678979, -0.1394632379727554, -2.196844442578149, 6.308719277314981, 0.135109957168162, 0.1394632379727556, 3.400488245824517, -6.308719277314979, 0.1936391532121422, 0.2015892297461888, 0.8125330516243915, -0.8125330516243923, -0.04782379792137234, -1.203643803246369 },
            { -0.8356240617386471, 0.4891569243614591, -0.4872230611676066, -0.3743732505894475, -2.092568320900507, 4.141563231398196, 0.6926318557927773, 0.3743732505894479, 2.97477602149031, -4.141563231398196, 0.1703200743808495, 0.1761470629963378, 3.489924305084542, -3.489924305084545, -0.2054087946251704, -0.8822077005898025 },
            { -0.8777407109950016, 0.6126696726215782, -1.267675602021125, 0.2976650882617162, -1.788255639306013, 1.608708763091736, 1.608447996767597, -0.2976650882617158, 2.26896865109988, -1.608708763091735, 0.1309479626253885, 0.1341230757480347, 5.78977090585497, -5.789770905854972, -0.3407723947464706, -0.4807130117938661 },
            { -0.9261009934114284, 0.7609240701939921, -2.379803786327918, 2.577615258910464, -1.236680628221989, -0.01645545460693566, 2.712094692022734, -2.577615258910464, 1.409357774282496, 0.01645545460693638, 0.08201819467294974, 0.08315872854448644, 5.645669214207711, -5.645669214207714, -0.3322909056948134, -0.1726771460605062 },
            { -0.9696736394002108, 0.900114376888432, -3.57032664662657, 5.948215232299104, -0.5632844693634498, -0.3608306320218784, 3.751920468366156, -5.948215232299106, 0.5919342231933681, 0.360830632021879, 0.03468501533420759, 0.03487424717757132, 3.085304566917672, -3.085304566917674, -0.1815938217395824, -0.02864975382991715 },
            { -0.6341622249874548, 3.586265738526325, 0.6692606295592514, -0.1394632379727532, 0.7438596289923903, -0.153008660942377, 0.1150062052775064, 0.1394632379727536, 0.1278253484683306, 0.1530086609423769, 2.768289505319604, -5.720393018858473, 0.0358825109277075, -0.03588251092770672, -0.7842668348367576, -0.8716849774607209 },
            { -0.6836532569192777, 1.916159708320965, 2.76223370974089, -0.3743732505894504, 0.5239067827913405, -0.1334505763054609, 0.6062838946773997, 0.3743732505894511, 0.1149925307183491, 0.1334505763054609, 2.49462603546176, -3.727132486863448, 0.1541195730606782, -0.1541195730606782, -3.368517604418289, -0.6388993135096891 },
            { -0.7628654507111446, 0.1835021661761048, 4.123160595952987, 0.2976650882617145, 0.2568582456845195, -0.101334315664726, 1.465197063697973, -0.2976650882617137, 0.09127656772160858, 0.1013343156647261, 1.984792825224539, -1.405429540689498, 0.2556837748112356, -0.2556837748112364, -5.588357659650962, -0.3481348134061275 },
            { -0.8554271561133238, -0.4999769917856042, 2.876859811701729, 2.577615258910467, 0.06602020917706852, -0.06264630850898409, 2.572409133494012, -2.577615258910467, 0.05903346016079308, 0.06264630850898449, 1.28660375571585, 0.0688003921830784, 0.2493200576493381, -0.2493200576493395, -5.449268945195741, -0.1250536693378609 },
            { -0.9402274859520922, 0.02405959736797358, -0.6976099516887926, 5.94821523229911, -0.004860425416188807, -0.02620814943154526, 3.675583638256357, -5.948215232299112, 0.02560872317183116, 0.02620814943154587, 0.5591099554766361, 0.3570579331074829, 0.1362510418700886, -0.1362510418700895, -2.977973686567562, -0.02074829775564146 },
            { -0.6909256210738214, 1.70997717012215, 0.5333534687921777, -0.1394632379727527, 2.948593049784229, -0.3668968518087101, 0.1216954118538816, 0.139463237972753, 0.6727813102923474, 0.3668968518087102, 2.451416997189654, -3.470468546237983, 0.1784788782711514, -0.1784788782711502, -0.6550488806460593, -3.621374360076576 },
            { -0.7332005407359501, 0.7023134870157771, 2.178496589573511, -0.3743732505894496, 2.055201870256939, -0.3748781206208401, 0.6350148177653292, 0.3743732505894503, 0.599075365717086, 0.3748781206208403, 2.185659089941402, -2.154772036221229, 0.7665876163159813, -0.7665876163159812, -2.813511407338841, -2.654277235974023 },
            { -0.8005333467142955, -0.2611397489865263, 3.154742974376301, 0.2976650882617143, 0.9775325896090614, -0.3466125867863625, 1.512861553827601, -0.2976650882617136, 0.4687771664585332, 0.3466125867863628, 1.713382176134191, -0.6517090804333692, 1.271765886517547, -1.271765886517548, -4.667604528203903, -1.446309756067593 },
            { -0.8787433867174235, -0.4608807176327829, 1.932545150286921, 2.577615258910467, 0.2205930613417515, -0.2550537475026837, 2.618887301440799, -2.577615258910467, 0.2989365433703307, 0.2550537475026842, 1.094594821038318, 0.245029283311889, 1.240112887010932, -1.240112887010933, -4.551432451727718, -0.5195296047120812 },
            { -0.9499921500923028, 0.1503405556494953, -1.213668939016354, 5.948215232299109, -0.04205966944788331, -0.1209766789901021, 3.700983515292602, -5.948215232299111, 0.1282574994556865, 0.1209766789901027, 0.4703036921644733, 0.3293479022783343, 0.6777099062338963, -0.677709906233898, -2.487314576276245, -0.08619783000780247 },
            { -0.7796691827234997, -0.043914044762195, 0.3272110067530412, -0.1394632379727535, 4.00112510289496, 0.5108660505102567, 0.1318415256050564, 0.1394632379727536, 1.612153707593574, -0.5108660505102561, 1.865935463733137, -1.042352236247443, 0.3947674540614592, -0.3947674540614584, -0.459052532358098, -5.613278810488532 },
            { -0.8102923026698252, -0.338425224937229, 1.293090651757091, -0.3743732505894491, 2.698243174575459, 0.1400665738549774, 0.6785935606996576, 0.3743732505894497, 1.415995422270416, -0.140066573854977, 1.640169844097154, -0.4914523164901003, 1.695572297066728, -1.695572297066727, -1.971684212456749, -4.114238596845873 },
            { -0.8587241447300864, -0.4994261900414795, 1.685857952666198, 0.2976650882617144, 1.155427647363562, -0.2385170865248446, 1.585158519577635, -0.2976650882617138, 1.086411803602618, 0.238517086524845, 1.259833251982754, 0.0983170827888124, 2.812947873977685, -2.812947873977686, -3.271016472243832, -2.241839450966179 },
            { -0.9144887100557948, -0.2449133534525106, 0.5002192290845251, 2.577615258910465, 0.1262923644448732, -0.3744271761302825, 2.689384866966721, -2.577615258910466, 0.6789998344787848, 0.3744271761302831, 0.7883154152624038, 0.3710866482459018, 2.742936373739253, -2.742936373739254, -3.189604096051244, -0.8052921989236568 },
            { -0.9648660525100782, 0.3678754585859996, -1.996421441568078, 5.948215232299107, -0.1530285123814318, -0.2361054678592686, 3.739509764816099, -5.948215232299109, 0.2866386848140493, 0.2361054678592692, 0.3331075827754529, 0.2638830111486259, 1.49898865830912, -1.498988658309123, -1.743088323248018, -0.1336101724326167 },
            { -0.8784416271832037, -0.4619066773180055, 0.1060107905483536, -0.139463237972755, 2.058401034062876, 3.064418546200756, 0.1427287660755344, 0.139463237972755, 2.771350332930326, -3.064418546200756, 1.0971195216184, 0.2432287828828084, 0.6268549107366249, -0.626854910736625, -0.2487395566238887, -4.829751366993202 },
            { -0.8956147153233975, -0.3821410054265216, 0.3430099020825075, -0.3743732505894486, 1.136539317400057, 1.873897324596622, 0.7253555294063838, 0.3743732505894491, 2.403414808898397, -1.873897324596621, 0.9518063958532679, 0.3259493248966508, 2.692415015448038, -2.692415015448038, -1.068365431488892, -3.539954126298452 },
            { -0.9225819481946609, -0.1704190218352278, 0.1096776685653047, 0.2976650882617151, 0.1193618875400231, 0.5211466239153887, 1.662736444555625, -0.2976650882617146, 1.809551234083604, -0.521146623915388, 0.7170145472538635, 0.3759864227760252, 4.466706083056569, -4.46670608305657, -1.77241411312093, -1.928913121623626 },
            { -0.9533538629151408, 0.1968595496165639, -1.036731481174279, 2.577615258910464, -0.4156317250271828, -0.2713064417379435, 2.765031953850149, -2.577615258910465, 1.10851751065984, 0.2713064417379441, 0.4394975927893984, 0.3169967205091785, 4.355534170881487, -4.355534170881489, -1.728300472675868, -0.6928857856326558 },
            { -0.9809108421947411, 0.6361474589555614, -2.83635039694424, 5.948215232299106, -0.3452277551014371, -0.3212820047111647, 3.780850178818413, -5.948215232299107, 0.4601880011068317, 0.3212820047111654, 0.1825440666496564, 0.1622193165895236, 2.380258027687597, -2.380258027687598, -0.9444997818741695, -0.1149602460053937 },
            { -0.960106740598521, 0.2949843492973864, -0.07095717444746374, -0.1394632379727554, -1.785871616887396, 6.308719277314981, 0.1514389419674882, 0.1394632379727556, 3.811461071515268, -6.308719277314978, 0.3772581166434395, 0.2878642746576939, 0.8125330516243912, -0.8125330516243918, -0.08048176752002456, -2.025589454627871 },
            { -0.9658133285202342, 0.3827503177245998, -0.4170881653444773, -0.3743732505894475, -1.791346821168064, 4.141563231398196, 0.7627667516159062, 0.3743732505894479, 3.275997521222752, -4.141563231398196, 0.3242920013071638, 0.25877100948847, 3.489924305084543, -3.489924305084544, -0.3456785862714284, -1.484650700054687 },
            { -0.9747262765830126, 0.528643225593742, -1.151322081479055, 0.2976650882617161, -1.624120714779008, 1.608708763091736, 1.724801517309668, -0.2976650882617158, 2.433103575626887, -1.608708763091735, 0.2408926467735737, 0.2051904042156966, 5.789770905854972, -5.789770905854973, -0.573479435830612, -0.808982860847878 },
            { -0.9848266216709293, 0.7068534929806032, -2.266346190238104, 2.577615258910464, -1.177721645126408, -0.01645545460693555, 2.825552288112549, -2.577615258910464, 1.468316757378077, 0.01645545460693627, 0.1453988739785627, 0.1325742547117633, 5.645669214207711, -5.645669214207714, -0.5592060978744421, -0.2905951122516675 },
            { -0.9938101653443021, 0.8767501944164182, -3.508323148708825, 5.948215232299104, -0.5535022810988903, -0.3608306320218785, 3.813923966283901, -5.948215232299106, 0.6017164114579273, 0.3608306320218791, 0.0595938847503763, 0.05746608617750795, 3.085304566917673, -3.085304566917675, -0.3056008175750719, -0.04821413035903605 } } };
    alignas(32) static const double FE17_C0_Q125[1][125][20] =
        { { { 0.474294742672057, 0.03534581477412845, 0.03204171670352372, 0.02938433368505925, -0.005290877293692924, -0.005360028893208045, -0.005883778382894233, -0.006064568447132025, -0.006539612539072584, -0.006653592091919854, 0.2269079707835756, -0.1232161497057562, 0.2522002214199321, -0.135183567705751, 0.2853502351677849, -0.1503323757551087, 0.001560353443238686, 0.0317022959064631, 0.03586934833496947, 0.03986751792380304 },
            { 0.1291950481124205, 0.03122392372258521, 0.02819201414895275, 0.06154525848634441, -0.02315104878463878, -0.01231823902423107, -0.02581700966551914, -0.01393738824901563, -0.004896655350869663, -0.00496817678906169, 0.7494182056132106, -0.283171231715603, 0.1421405001624226, -0.1009403423083112, 0.1608239077660397, -0.1125641355282185, 0.005737654394744017, 0.1165741122432206, 0.1318969910327359, 0.02501661173279248 },
            { -0.06124023457623243, 0.02417604387311256, 0.02169831609928772, -0.02746260878552604, -0.03950887022027656, 0.007229849127673913, -0.04424025298783083, 0.008180163907843138, -0.002756010469795296, -0.002784778411426358, 0.6612668324815502, 0.1661995094082999, 0.04119457260221301, -0.05657940488773547, 0.0466093206163573, -0.06335506867644375, 0.007026471255819355, 0.1427594958664633, 0.1615242662697764, 0.01006238750686957 },
            { -0.0006527365268150049, 0.01526991699802778, 0.01361741835963622, -0.0277808447719799, -0.03973865042400918, 0.03752268604106154, -0.04469214521992814, 0.04245478939574661, -0.001025626888036027, -0.001031820332757577, 0.003741125690992893, 0.8625701451826212, 8.585399249283823e-5, -0.02096388715846981, 9.71389192682675e-5, -0.02357707368679145, 0.004106443156342867, 0.08343217149266305, 0.09439876627367967, 0.002166329506253875 },
            { 0.06409519867369189, 0.006507721085943739, 0.005772232708007901, 0.3655922704770111, -0.02230455598725847, 0.03527000462263041, -0.0251762632313681, 0.03990600823731522, -0.0001754094095104339, -0.0001758279729726607, -0.3085558568163959, 0.8107855864753916, -0.002149786890445184, -0.003572363974306686, -0.002432361840506592, -0.004032305141011213, 0.0009140952347665432, 0.0185720214511841, 0.0210131880884135, 0.0001464042094194047 },
            { 0.09575250369580601, 0.0305997011889127, 0.05815319294465331, 0.02938433368505924, -0.01268690419487559, -0.02666067450765343, -0.005035828082798989, -0.005065353520555482, -0.02784008833480681, -0.01332582182232869, 0.1393767076463154, -0.1029147190178874, 0.770530643399393, -0.2707458034196594, 0.1463957750250677, -0.1074674561435907, 0.006482415205160737, 0.1317057016236127, 0.02502322059424587, 0.1383384540359302 },
            { -0.02961282767530361, 0.02687903416528827, 0.0628551497059861, 0.06154525848634441, -0.06503397661559357, -0.06127066993027708, -0.02201001815695791, -0.0116410259443746, -0.02076433385164277, -0.01165672472927633, 0.4415502537457798, -0.236515163114198, 0.4165601689045614, -0.2368341213133684, 0.07914370349025429, -0.08015384544460653, 0.02383681610830914, 0.4843016824220924, 0.0920141473301235, 0.08680649241685949 },
            { -0.0559174061280025, 0.02063682627482009, 0.06306685164382755, -0.02746260878552602, -0.1351395291735683, 0.03596112225749397, -0.03749813479507418, 0.00683237767213412, -0.01161921877930034, -0.007955881264643132, 0.3265040657114509, 0.1388160225141888, 0.1011709567039774, -0.1616426734220587, 0.01922181907180722, -0.04485215239155974, 0.02919114531692853, 0.5930876306877355, 0.1126827649180299, 0.03491602196733888 },
            { 0.0262133217034175, 0.01291692138381889, 0.05052272862117455, -0.02778084477197986, -0.1617891293608983, 0.1866370758674901, -0.03764824101663143, 0.03545982188260791, -0.004297410975757989, -0.003508731733982562, -0.1288445758611865, 0.7204507228693313, -0.01470714380063984, -0.07128824060287058, -0.002794260985651435, -0.01658873420278818, 0.01706002551611259, 0.3466150438076794, 0.06585458788466543, 0.007517063776088686 },
            { 0.06216231346930405, 0.005463020987790709, 0.02569437405013414, 0.3655922704770112, -0.1029577123228624, 0.1754322843891585, -0.02109931751620359, 0.03333098489667335, -0.0007311963681187784, -0.0006778960919862666, -0.28709374647718, 0.6771983300495051, -0.009949227247400175, -0.01377307339892012, -0.001890288006402785, -0.002822541820922338, 0.003797565785170237, 0.07715659216020104, 0.01465924711021632, 0.0005080158748317805 },
            { -0.06395874758862662, 0.0226118430361826, -0.04152260697435826, 0.02938433368505922, 0.01766520646684973, -0.05896925563908029, -0.003658188754915843, -0.003549755490928667, -0.04473220813586378, 0.01300306513951767, 0.04437193169722244, -0.07212173591608738, 0.5425784772322489, 0.2641882328201247, 0.03266144210133898, -0.05470926277014361, 0.01004800948310352, 0.2041492402151759, 0.01228911368422423, 0.1502708657089564 },
            { -0.04880819578613185, 0.01970066601667215, -0.0142247815198057, 0.0615452584863444, 0.02429879416175359, -0.1355211698510861, -0.01589923839020225, -0.00815792927352383, -0.03317633718024186, 0.003052176407621525, 0.1134349118539144, -0.1657477598642398, 0.2367003243372687, 0.06201223194170024, 0.0142485820265971, -0.04057597476592092, 0.03694804277772983, 0.7506874742898438, 0.04518892014071384, 0.09429400419099249 },
            { 0.003258524524086542, 0.01493982301608183, 0.03175873077230894, -0.02746260878552599, -0.09299456511856573, 0.07954039613144911, -0.02685982908791006, 0.00478807057776624, -0.01840878057522599, -0.003836649608300727, -0.01121474416318353, 0.0972810557346015, -0.007686190549896853, -0.0779506730983424, -0.0004626834239830858, -0.02251466797053741, 0.04524747269098751, 0.9193101566091401, 0.05533945173503418, 0.03792771059001579 },
            { 0.05704201370620524, 0.00922645911475466, 0.06321752791622888, -0.0277808447719798, -0.2375116908820991, 0.4128121152899197, -0.02672338018740865, 0.02484993336088736, -0.006746959480154129, -0.003609728155968351, -0.2305702346328409, 0.5048855719686222, -0.05821299624103617, -0.07334022342071352, -0.003504231159280309, -0.008251798748189109, 0.02644373936915051, 0.5372675363949571, 0.03234174090798245, 0.008165449650961873 },
            { 0.05342483831392524, 0.003857782744497981, 0.04733380747674396, 0.3655922704770113, -0.2009385531214546, 0.388028863355365, -0.01486186178784207, 0.02335806300091187, -0.001139182616084009, -0.000927163220854909, -0.2324185012953347, 0.4745746729790602, -0.01781520512783669, -0.0188375287076776, -0.001072416830417828, -0.001393265472100589, 0.005886382746930749, 0.1195958828882867, 0.007199279308755635, 0.000551834888114635 },
            { 0.02588546307060624, 0.01294764933883208, 0.004851167988216634, 0.02938433368505925, 0.1059643447933393, -0.09363782930820398, -0.002057282410782658, -0.001923450029566724, -0.03994604907490959, 0.04226386845002048, -0.006948513130962009, -0.03907946770832563, -0.1349185921545143, 0.8586911315255736, -0.002771413775671168, -0.01667136398217792, 0.008645461801381142, 0.1756531441405561, 0.003608157598128388, 0.0700592391834015 },
            { 0.04304726648444837, 0.01118752222207207, -0.05737358819566307, 0.06154525848634439, 0.3250843089642434, -0.2151953256427784, -0.008891140325167073, -0.004420408487982162, -0.02946017154234525, 0.02212602429850904, -0.05249570738058352, -0.08981112485808927, -0.1739408543908741, 0.4495428728564422, -0.003572984807451902, -0.01229511438888013, 0.03179066391286825, 0.6459030412602131, 0.01326773840217938, 0.04396172313249461 },
            { 0.06095850418078277, 0.008377081602977864, -0.04210073380656288, -0.02746260878552599, 0.2031879743297627, 0.1263029345604899, -0.01489219497216556, 0.002594436297910344, -0.01620713245225004, 0.004542291894273767, -0.1456360420494062, 0.05271215158541661, -0.158495280764707, 0.09228747650078059, -0.003255711444032276, -0.006763998204481578, 0.03893162097595248, 0.7909885889290639, 0.01624799545229548, 0.01768264616942555 },
            { 0.06082414163778984, 0.005101680184287419, 0.0372918536713576, -0.02778084477197975, -0.1720987573347607, 0.6555081960752898, -0.014677760623714, 0.0134650415162044, -0.005884400231254046, -0.001417260581844631, -0.2064973466246074, 0.273574383027935, -0.08278599613267877, -0.02879502367678265, -0.001700538424326365, -0.002455836818506765, 0.02275259980457861, 0.4622732463415232, 0.009495729406721578, 0.003806893554767449 },
            { 0.03518476251527829, 0.002107478174024336, 0.06030251108461737, 0.3655922704770113, -0.2734284036534983, 0.6161546399009752, -0.008096944931246713, 0.01265666525047648, -0.0009855235533682734, -0.0006836267057975069, -0.1440926443944555, 0.2571502941838854, -0.01753830563548144, -0.01388950446494368, -0.0003602609622878616, -0.0004113053043217352, 0.005064734191630171, 0.1029021358759465, 0.00211375165096564, 0.0002572763005907544 },
            { 0.0570282321039781, 0.004373243757902897, 0.42820757294106, 0.02938433368505925, 0.2181488248511591, -0.121373909483891, -0.0006850853425730795, -0.000622348371996484, -0.01724243500357065, 0.02815237354797608, -0.01027068462962851, -0.01264448919020889, -0.2584956955922336, 0.5719825085493428, -0.001325444455105694, -0.001796282116499294, 0.003625891878191779, 0.07366862792873828, 0.0003777381057727541, 0.009507026836526988 },
            { 0.05261283176874231, 0.003754983325663178, 0.1082491771841238, 0.06154525848634435, 0.7184797178792188, -0.2789374568899219, -0.00294826609163918, -0.001430260201079683, -0.01266247170272496, 0.01582247943942939, -0.04648512652267074, -0.02905914189784801, -0.1996483970222638, 0.3214713482617111, -0.001023703161468995, -0.001319150773401268, 0.0133329500184217, 0.2708906296978315, 0.001388999852591215, 0.005965598348941358 },
            { 0.04337045709813664, 0.00278443317041826, -0.06256303284875084, -0.027462608785526, 0.6272136474824757, 0.1637146125679315, -0.004906009963213442, 0.0008394516007347343, -0.006920697983948531, 0.00453675355138014, -0.08324781307281624, 0.01705545827515076, -0.1174341219078499, 0.09217495187630732, -0.0006021469926853536, -0.0007209843632690512, 0.01632785518513198, 0.3317392599990419, 0.00170100303488299, 0.002399532076468247 },
            { 0.02921620886627502, 0.001677382162309403, 0.001848666776100829, -0.02778084477197972, -0.01043824566453986, 0.8496736099522137, -0.004800258645946943, 0.004356726994546339, -0.002494485852994545, -2.781327548615539e-5, -0.08792690235374709, 0.08851728367266912, -0.04569179083802893, -0.0005650929239225796, -0.0002342860320028919, -0.0002598705070753753, 0.009542401404860412, 0.1938766080890256, 0.0009941081400892497, 0.0005165948076345369 },
            { 0.0131197535534446, 0.0006863389002214823, 0.06403508060147256, 0.3655922704770113, -0.3070864295425533, 0.7986632971303641, -0.002631219531562118, 0.004095170081081789, -0.0004151231089779411, -0.0002484212071832761, -0.05132213136134703, 0.08320313212389119, -0.008097006910499919, -0.005047268395306493, -4.151764650433057e-5, -4.324668857069378e-5, 0.00212414084898227, 0.04315697961461826, 0.0002212887112035544, 3.491235021432434e-5 },
            { 0.05654431446143236, 0.05204518621781549, 0.0320417167035237, 0.02938433368505925, -0.005290877293692924, -0.005360028893208059, -0.01192490773290343, -0.02983350951956758, -0.01325411513868346, -0.03273110110703473, 0.1264043799176285, -0.09944720863332061, 0.140494018317591, -0.1091060586906362, 0.7819789251941014, -0.2459100090144874, 0.00767586675104039, 0.0255867825986615, 0.1424140685509259, 0.1582882236257547 },
            { -0.04278025910631897, 0.05985054551924836, 0.02819201414895273, 0.0615452584863444, -0.02315104878463877, -0.01231823902423109, -0.06441964522236243, -0.06856237317290936, -0.0122183321990424, -0.02444001594234797, 0.3962398733176508, -0.2285462467917093, 0.07515394389382436, -0.08146850315502502, 0.418301084800223, -0.2266926271403255, 0.02822531701930637, 0.09408644961865839, 0.5236779588851392, 0.09932484484956342 },
            { -0.05138829566442669, 0.06406493173092517, 0.02169831609928771, -0.02746260878552602, -0.03950887022027649, 0.007229849127673875, -0.1409918342512136, 0.04024078546457262, -0.008783289992913614, -0.01369919623653741, 0.278233902549252, 0.1341388878515704, 0.0173329828988239, -0.04566498706262442, 0.09647405277419623, -0.1629606276039011, 0.03456541037121738, 0.1152205567510653, 0.6413087774654576, 0.03995125673337695 },
            { 0.03048536711428617, 0.05387556942220683, 0.01361741835963622, -0.02778084477197984, -0.03973865042400918, 0.03752268604106151, -0.1750644481250408, 0.2088483912137566, -0.004017502499660055, -0.005075847026569907, -0.1462844768086952, 0.6961765433646111, -0.003357039407685197, -0.01691986046465747, -0.01868502374187653, -0.07453866709092692, 0.02020087860567428, 0.06733773604333163, 0.3747966716784805, 0.008601098518055942 },
            { 0.06154176623822713, 0.02826351338596363, 0.005772232708007915, 0.3655922704770112, -0.02230455598725847, 0.03527000462263036, -0.1138796068580066, 0.1963101392975263, -0.000793428095769478, -0.0008649528076420977, -0.2822691544071443, 0.6543814554151804, -0.001966640769624457, -0.002883239139637235, -0.01094617161420644, -0.0147208552318665, 0.004496720438713936, 0.01498939624723654, 0.08342982930580051, 0.0005812767748576801 },
            { -0.04996172582535883, 0.06068298015665159, 0.05815319294465326, 0.02938433368505924, -0.01268690419487555, -0.02666067450765341, -0.0128998306447704, -0.02491805868675295, -0.07131546564926367, -0.06555388658866725, 0.0729128464227924, -0.08306201385168992, 0.4030916170641848, -0.2185177386533208, 0.3767444280999011, -0.2221851586649981, 0.03188902844759021, 0.1062990883811832, 0.09935108437974033, 0.5492528576855951 },
            { -0.06351206574006868, 0.06377875305562593, 0.06285514970598607, 0.0615452584863444, -0.06503397661559354, -0.06127066993027711, -0.06461541960019898, -0.05726584856887373, -0.06095842970117493, -0.05734307580324216, 0.2108409160517036, -0.1908903404896989, 0.1989081126268734, -0.1911477702394026, 0.1859069252837122, -0.189917548063637, 0.1172607558942993, 0.3908777426361022, 0.3653288864674409, 0.3446526445440796 },
            { -0.0211685519580148, 0.06201917658318289, 0.06306685164382754, -0.02746260878552601, -0.1351395291735683, 0.03596112225749394, -0.1309994937203768, 0.0336106033099987, -0.04059166638108553, -0.03913746897481627, 0.08529754120282738, 0.1120377968763242, 0.02643040241836815, -0.1304610857118856, 0.0247028378215388, -0.1264643756196419, 0.1436003763980119, 0.4786783996066521, 0.447390648351956, 0.1386290238547333 },
            { 0.04824483250590069, 0.04845979916553498, 0.05052272862117455, -0.02778084477197981, -0.1617891293608983, 0.1866370758674901, -0.1539568820033721, 0.1744379576088758, -0.01757362300731373, -0.01726054912231701, -0.208147479739573, 0.5814725871430634, -0.02375928436109544, -0.05753642321453617, -0.0222063114680416, -0.0547510723045973, 0.08392360282118665, 0.2797514665026054, 0.2614661327497928, 0.02984541636810007 },
            { 0.05738371232293465, 0.02424040267203389, 0.02569437405013414, 0.3655922704770113, -0.1029577123228624, 0.1754322843891585, -0.09683864454104293, 0.1639655424586234, -0.003355941021674577, -0.003334782959389899, -0.2548975964108099, 0.5465637724875551, -0.008833470399916298, -0.0111161865315165, -0.008256090211431897, -0.010455520153767, 0.01868141418317038, 0.06227274376220079, 0.05820242406868587, 0.002017003680903719 },
            { -0.03935162277933654, 0.0634945861384104, -0.04152260697435832, 0.02938433368505924, 0.01766520646684981, -0.05896925563908027, -0.01216485326421166, -0.01746235781720596, -0.1487514135036621, 0.06396614549000747, 0.01637555837710645, -0.05820913358981004, 0.2002397729426421, 0.213225152469635, 0.05929629815512166, -0.146833986735444, 0.04942930221335618, 0.1647679474849232, 0.04879215151363608, 0.5966287753663615 },
            { -0.01193547959968051, 0.06102966866914919, -0.01422478151980573, 0.06154525848634439, 0.02429879416175364, -0.1355211698510861, -0.05677215132182462, -0.04013140634214928, -0.1184642929727521, 0.01501461063651403, 0.02008066213146424, -0.1337742827956144, 0.0419015553654761, 0.05004979771280775, 0.01240815989551841, -0.1169372714737705, 0.1817589817887323, 0.6058765352788416, 0.1794160827947864, 0.3743807289552953 },
            { 0.03326688864802686, 0.0531823636136585, 0.03175873077230894, -0.027462608785526, -0.0929945651185657, 0.0795403961314491, -0.1058745158115127, 0.02355401714192872, -0.0725626631391967, -0.01887367973670306, -0.09657790860520718, 0.07851510917043905, -0.0661910960828755, -0.06291364296994005, -0.01960093597223946, -0.07162732014379798, 0.2225864740468575, 0.7419711552532702, 0.2197173029006605, 0.1505864986869652 },
            { 0.06340387815709866, 0.03778418410398023, 0.06321752791622888, -0.02778084477197977, -0.2375116908820991, 0.4128121152899198, -0.1161152030785559, 0.1222445966181216, -0.02931607321778888, -0.01775738211926012, -0.2372448834310752, 0.4074909087113879, -0.05989817171921778, -0.05919256945742173, -0.01773743446176802, -0.0289381848858204, 0.130085027002307, 0.4336262487618005, 0.128408212597364, 0.03241973886677825 },
            { 0.04693574582092748, 0.01767082850840482, 0.04733380747674396, 0.3655922704770113, -0.2009385531214546, 0.388028863355365, -0.0696942436245003, 0.1149056195789007, -0.00534216183083527, -0.004561005950662122, -0.1989705391739377, 0.3830271164010712, -0.0152513717712847, -0.01520368597787037, -0.004516334964501583, -0.005273300608925908, 0.02895695831406191, 0.0965253073211555, 0.02858369902401697, 0.002190980746313912 },
            { 0.04804748687512923, 0.04853758960920389, 0.004851167988216599, 0.02938433368505924, 0.1059643447933394, -0.09363782930820398, -0.008408422170859377, -0.009462052455624696, -0.1632655015758902, 0.207909191351235, -0.01131488455055911, -0.03154086528226767, -0.219699994110961, 0.693045808624359, -0.02220056663142037, -0.05499417520132345, 0.04252973137347169, 0.1417688745684654, 0.01432566877780219, 0.2781600936408288 },
            { 0.05758435570636915, 0.04378433053973908, -0.05737358819566309, 0.06154525848634437, 0.3250843089642435, -0.2151953256427784, -0.03744304268552696, -0.0217453722975058, -0.1240649028404838, 0.1088448357528082, -0.06335370627512132, -0.07248616104856562, -0.2099180742233212, 0.3628240614021431, -0.0212121088705199, -0.0417898878653999, 0.1563882216427842, 0.5213054835302973, 0.05267763965707711, 0.1745436742630803 },
            { 0.06413923880368312, 0.03495844779040268, -0.04210073380656288, -0.02746260878552599, 0.2031879743297627, 0.1263029345604899, -0.06555003969915257, 0.01276284383074635, -0.07133791745542208, 0.02234495490483819, -0.1432405218388426, 0.04254374405258061, -0.1558882430904615, 0.0744848134902162, -0.01575242339804951, -0.02402938706078953, 0.191516823517349, 0.638403386387667, 0.06451031996871896, 0.07020639349835207 },
            { 0.05546935183224141, 0.02280238252843811, 0.0372918536713576, -0.02778084477197974, -0.1720987573347607, 0.6555081960752898, -0.06769897592778704, 0.06623875181836233, -0.02714091609870709, -0.006971948198583682, -0.1816818244777537, 0.220800672725777, -0.07283730790950997, -0.02324033606004356, -0.007360170918719619, -0.009142116862715771, 0.1119271566941926, 0.3730986894519093, 0.03770142256394109, 0.01511472119905175 },
            { 0.02960459346803771, 0.009979473413263475, 0.06030251108461737, 0.3655922704770113, -0.2734284036534983, 0.6161546399009752, -0.03882847531680075, 0.06226209606301469, -0.004726026580521191, -0.003362973641576266, -0.1196397080930487, 0.2075448633713472, -0.01456200471227113, -0.01121015752916492, -0.001471482769992989, -0.001591909688615153, 0.02491501201400934, 0.08305185805356724, 0.008392345735112966, 0.001021478404533396 },
            { 0.05084284700731454, 0.01983126690352994, 0.42820757294106, 0.02938433368505925, 0.2181488248511592, -0.121373909483891, -0.003190920477054538, -0.003061526346400265, -0.08031005118357103, 0.13849033308201, -0.008886865998446885, -0.0102053112158051, -0.223667329953504, 0.4616445490153087, -0.005641767875760317, -0.006752596744808137, 0.01783689652577135, 0.05945762328115865, 0.001499754609072576, 0.03774627737779754 },
            { 0.0460926810007943, 0.01723424343305393, 0.1082491771841238, 0.06154525848634435, 0.7184797178792189, -0.278937456889922, -0.01384439255008593, -0.007035897392591632, -0.05946011094588876, 0.07783572649800111, -0.03971482357493556, -0.02345350470633608, -0.1705707063288499, 0.2594581012031396, -0.004302462642675186, -0.004999500631637871, 0.06558895241533749, 0.218634627300916, 0.005514823363302775, 0.02368554689869112 },
            { 0.03706606554682575, 0.01301899537363618, -0.06256303284875084, -0.02746260878552601, 0.6272136474824757, 0.1637146125679315, -0.02332710830415054, 0.004129525050307111, -0.03290655188684815, 0.02231771006344832, -0.06987929864685934, 0.0137653848255784, -0.09857573158050909, 0.07439399536423914, -0.00248646682497664, -0.002766835182884782, 0.08032182790023824, 0.2677452872839355, 0.006753586949863144, 0.00952699565202696 },
            { 0.02435522702288887, 0.008006184655998713, 0.001848666776100829, -0.02778084477197972, -0.01043824566453986, 0.8496736099522137, -0.02314229100392424, 0.02143210310824616, -0.01202604313080348, -0.0001368222036278238, -0.07253772469112404, 0.07144190755896926, -0.03769470384750928, -0.000456083995780939, -0.0009508083692750021, -0.001011168820106391, 0.04694205789466584, 0.1564769515992201, 0.003946962835443529, 0.002051065094923906 },
            { 0.01072251350212875, 0.003335359170138878, 0.06403508060147256, 0.3655922704770113, -0.3070864295425533, 0.7986632971303641, -0.01283879530256213, 0.02014542282163206, -0.00202555528248443, -0.001222061637851612, -0.04177186175610073, 0.06715287938334091, -0.006590276832468586, -0.00407362796463814, -0.0001662326461961995, -0.0001703119074803854, 0.01044931338337671, 0.03483180708022388, 0.0008785948769573226, 0.0001386144456894806 },
            { -0.05515710284123237, -0.05515710284123235, 0.03204171670352369, 0.02938433368505924, -0.005290877293692882, -0.005360028893208087, 0.02816234836950946, -0.06464035907644411, 0.03130145878070507, -0.07091857989883542, 0.02816234836950914, -0.06464035907644411, 0.03130145878070474, -0.07091857989883549, 0.3774863112706631, 0.3774863112706635, 0.01663132467485099, 0.0166313246748509, 0.2005688439966323, 0.2229252092432526 },
            { -0.0305865072810532, -0.03058650728105329, 0.02819201414895275, 0.06154525848634437, -0.02315104878463876, -0.01231823902423111, 0.05898818416140916, -0.1485543099823093, 0.01118815894459771, -0.05295425954868647, 0.0589881841614089, -0.1485543099823094, 0.01118815894459739, -0.05295425954868653, 0.1349258793174665, 0.1349258793174667, 0.06115588331898249, 0.06115588331898233, 0.7375218186576097, 0.1398841386551503 },
            { 0.01991321224390454, 0.01991321224390445, 0.02169831609928771, -0.027462608785526, -0.03950887022027651, 0.007229849127673844, -0.06231816421932106, 0.08718983665807147, -0.003882200065494893, -0.02968209164958091, -0.06231816421932126, 0.08718983665807138, -0.003882200065495125, -0.02968209164958095, -0.04681818162550776, -0.04681818162550768, 0.07489298356114149, 0.07489298356114139, 0.9031871742021385, 0.05626534977027726 },
            { 0.06121441225202864, 0.06121441225202861, 0.01361741835963621, -0.02778084477197976, -0.03973865042400918, 0.03752268604106149, -0.2371985604757176, 0.4525124672891838, -0.00544339995831889, -0.0109978537456137, -0.2371985604757178, 0.4525124672891838, -0.00544339995831903, -0.01099785374561368, -0.06564578940018397, -0.06564578940018377, 0.0437693073245031, 0.04376930732450295, 0.5278448676961803, 0.01211335652734859 },
            { 0.05014320416707885, 0.05014320416707881, 0.005772232708007901, 0.3655922704770113, -0.02230455598725847, 0.03527000462263036, -0.2151086632639202, 0.4253457973563533, -0.001498716598923873, -0.001874095973639658, -0.2151086632639206, 0.4253457973563533, -0.001498716598924067, -0.001874095973639668, -0.01807407777802002, -0.01807407777801981, 0.009743058342975341, 0.009743058342975189, 0.1174983945684906, 0.0008186411073117066 },
            { -0.02619650654486568, -0.02619650654486572, 0.05815319294465323, 0.02938433368505924, -0.01268690419487551, -0.02666067450765344, 0.009721503531014142, -0.05399003626922148, 0.05374439170690043, -0.142035812620994, 0.009721503531013871, -0.05399003626922148, 0.05374439170690016, -0.1420358126209941, 0.1088367684279635, 0.1088367684279637, 0.06909405841438676, 0.06909405841438671, 0.1399210930957342, 0.7735402256867155 },
            { 0.0009522124308471219, 0.0009522124308470803, 0.06285514970598605, 0.06154525848634437, -0.06503397661559351, -0.06127066993027712, -0.001478265051656914, -0.1240780945292863, -0.001394600805638988, -0.1242454230213224, -0.001478265051657161, -0.1240780945292864, -0.001394600805639179, -0.1242454230213225, -0.002824180163030865, -0.002824180163030788, 0.2540692492652009, 0.2540692492652007, 0.5145109130222597, 0.4853915290810563 },
            { 0.04120247091732638, 0.0412024709173263, 0.06306685164382754, -0.027462608785526, -0.1351395291735683, 0.03596112225749394, -0.1141969470471635, 0.07282420009316147, -0.03538520832890751, -0.08479927734335091, -0.1141969470471639, 0.07282420009316135, -0.03538520832890771, -0.08479927734335094, -0.07165792750379392, -0.07165792750379371, 0.3111393880023321, 0.3111393880023317, 0.6300825899287342, 0.1952381765498311 },
            { 0.06406508711500515, 0.06406508711500512, 0.05052272862117455, -0.02778084477197975, -0.1617891293608983, 0.1866370758674901, -0.2344370198534586, 0.3779552723759697, -0.02676014058126069, -0.03739848616842657, -0.2344370198534589, 0.3779552723759694, -0.02676014058126082, -0.0373984861684266, -0.05419146316560685, -0.05419146316560665, 0.1818375346618962, 0.1818375346618958, 0.3682358107137654, 0.04203279016221241 },
            { 0.04463249992317966, 0.04463249992317967, 0.02569437405013414, 0.3655922704770113, -0.1029577123228624, 0.1754322843891585, -0.1877515984797158, 0.3552646574730893, -0.006506527370444725, -0.007225484745453193, -0.187751598479716, 0.355264657473089, -0.006506527370444864, -0.0072254847454532, -0.01317624760829497, -0.01317624760829476, 0.04047707897268571, 0.04047707897268552, 0.08196938007626489, 0.002840647000202434 },
            { 0.02994448634200982, 0.0299444863420097, -0.04152260697435837, 0.02938433368505922, 0.01766520646684989, -0.05896925563908027, -0.007856783360530814, -0.03783574570350796, -0.0960724807021955, 0.1385956489798212, -0.007856783360531052, -0.03783574570350805, -0.09607248070219566, 0.1385956489798213, -0.06164184895263401, -0.06164184895263392, 0.1070986248491398, 0.1070986248491397, 0.06871642334759274, 0.8402620962097326 },
            { 0.04588932242424484, 0.04588932242424478, -0.01422478151980576, 0.06154525848634435, 0.02429879416175372, -0.1355211698510861, -0.05497801734900565, -0.08695284456888173, -0.1147205417207771, 0.03253220417466089, -0.05497801734900591, -0.08695284456888185, -0.1147205417207773, 0.03253220417466091, -0.07360678367863656, -0.07360678367863648, 0.3938177585337869, 0.3938177585337868, 0.2526806283024376, 0.5272590747895738 },
            { 0.06185115229751287, 0.06185115229751283, 0.03175873077230893, -0.02746260878552601, -0.09299456511856564, 0.0795403961314491, -0.1460869852406077, 0.05103456315618392, -0.1001228729858551, -0.04089366135332154, -0.146086985240608, 0.05103456315618382, -0.1001228729858553, -0.04089366135332159, -0.06424065422468898, -0.0642406542246888, 0.4822788146500639, 0.4822788146500637, 0.3094388489651564, 0.2120784854366034 },
            { 0.06012402416271535, 0.06012402416271533, 0.06321752791622888, -0.02778084477197974, -0.2375116908820991, 0.4128121152899198, -0.2028977858028906, 0.2648677526647547, -0.05122642157634298, -0.0384749757883409, -0.2028977858028909, 0.2648677526647548, -0.05122642157634308, -0.03847497578834096, -0.03286780270597022, -0.03286780270597001, 0.2818556378820538, 0.2818556378820537, 0.1808436976935146, 0.04565833708245766 },
            { 0.03430208568317208, 0.03430208568317206, 0.04733380747674396, 0.3655922704770113, -0.2009385531214546, 0.388028863355365, -0.140168467199395, 0.2489663679899859, -0.01074411022226899, -0.00988234596426622, -0.1401684671993952, 0.2489663679899859, -0.01074411022226911, -0.009882345964266268, -0.006893616305219785, -0.00689361630521957, 0.06274113281760874, 0.0627411328176086, 0.04025585062436926, 0.00308566758873206 },
            { 0.06405377209550323, 0.06405377209550303, 0.004851167988216561, 0.02938433368505922, 0.1059643447933394, -0.09363782930820401, -0.01278659630826893, -0.02050145886894607, -0.2482760757366405, 0.4504774999877969, -0.01278659630826911, -0.02050145886894621, -0.2482760757366408, 0.4504774999877971, -0.05435860476970857, -0.05435860476970838, 0.09214930297096868, 0.09214930297096829, 0.02017555467292169, 0.3917467494272587 },
            { 0.06354777371698592, 0.06354777371698578, -0.0573735881956631, 0.06154525848634433, 0.3250843089642435, -0.2151953256427783, -0.06115382981011706, -0.04711576667303561, -0.2026289374353729, 0.2358344485774755, -0.06115382981011734, -0.04711576667303576, -0.2026289374353731, 0.2358344485774759, -0.0443644289618917, -0.04436442896189153, 0.3388468525865405, 0.3388468525865407, 0.07418855031666326, 0.2458185720700213 },
            { 0.05767129312800953, 0.05767129312800939, -0.04210073380656289, -0.02746260878552602, 0.2031879743297628, 0.1263029345604899, -0.1175666732089585, 0.02765329394166352, -0.1279474683368906, 0.04841488419752716, -0.1175666732089588, 0.02765329394166344, -0.1279474683368908, 0.04841488419752724, -0.02801335506038619, -0.02801335506038597, 0.414960104952508, 0.4149601049525082, 0.09085310484864113, 0.09887516962624986 },
            { 0.04250522124077318, 0.04250522124077314, 0.0372918536713576, -0.02778084477197972, -0.1720987573347607, 0.6555081960752898, -0.1323880869042974, 0.1435197122720697, -0.05307515970360593, -0.01510614212931357, -0.1323880869042977, 0.1435197122720696, -0.053075159703606, -0.01510614212931366, -0.0116204979511512, -0.01162049795115098, 0.242512923073051, 0.2425129230730508, 0.05309679596699539, 0.02128681659804665 },
            { 0.0204175014942816, 0.02041750149428156, 0.06030251108461737, 0.3655922704770113, -0.2734284036534983, 0.6161546399009752, -0.0809475986170374, 0.134903479717181, -0.009852575965761716, -0.007286565585370549, -0.08094759861703762, 0.1349034797171809, -0.00985257596576183, -0.007286565585370625, -0.002157164282935178, -0.00215716428293497, 0.05398343503378833, 0.05398343503378825, 0.01181935955933849, 0.00143859904326463 },
            { 0.03786767594073564, 0.0378676759407354, 0.42820757294106, 0.02938433368505924, 0.2181488248511592, -0.121373909483891, -0.00634510558531472, -0.006633418781102615, -0.1596955355001958, 0.3000674410486592, -0.006345105585314936, -0.006633418781102747, -0.1596955355001962, 0.3000674410486596, -0.008727801295597633, -0.008727801295597372, 0.03864725990346512, 0.03864725990346483, 0.002112179304200823, 0.05315996724111459 },
            { 0.03356269025993335, 0.03356269025993312, 0.1082491771841238, 0.06154525848634435, 0.7184797178792189, -0.278937456889922, -0.02790559693979946, -0.01524470104946379, -0.1198514043898167, 0.1686469138505702, -0.02790559693979979, -0.01524470104946391, -0.1198514043898171, 0.1686469138505705, -0.006550209680165772, -0.006550209680165512, 0.1421117898581267, 0.1421117898581268, 0.007766801117880546, 0.03335753840358632 },
            { 0.02611512322344678, 0.02611512322344658, -0.06256303284875084, -0.02746260878552602, 0.6272136474824757, 0.1637146125679315, -0.04798211686699275, 0.008947454937942793, -0.06768631575494352, 0.04835585271384368, -0.0479821168669932, 0.008947454937942693, -0.06768631575494377, 0.04835585271384377, -0.003699243767146551, -0.003699243767146313, 0.1740335575920868, 0.1740335575920871, 0.009511413732839228, 0.01341734369455711 },
            { 0.01658129246701175, 0.01658129246701164, 0.001848666776100829, -0.02778084477197971, -0.01043824566453986, 0.8496736099522137, -0.04864587885353939, 0.04643700533360774, -0.02527914963688355, -0.0002964530997043363, -0.04864587885353958, 0.04643700533360765, -0.02527914963688363, -0.0002964530997043987, -0.001381575222258713, -0.001381575222258484, 0.101709504746943, 0.1017095047469429, 0.005558704847474349, 0.002888617390378295 },
            { 0.007097650309218408, 0.007097650309218335, 0.06403508060147256, 0.3655922704770114, -0.3070864295425533, 0.7986632971303641, -0.02748471560919311, 0.04364915110248652, -0.004336217657327592, -0.002647844801244838, -0.02748471560919338, 0.04364915110248646, -0.004336217657327678, -0.002647844801244918, -0.0002369862499229415, -0.0002369862499227264, 0.02264056023180033, 0.02264056023180025, 0.001237369036681008, 0.000195217645391748 },
            { 0.0520451862178155, 0.05654431446143223, 0.03204171670352369, 0.02938433368505922, -0.005290877293692882, -0.005360028893208087, 0.1264043799176287, -0.09944720863332054, 0.1404940183175912, -0.109106058690636, -0.01192490773290366, -0.02983350951956762, -0.01325411513868373, -0.03273110110703481, -0.2459100090144875, 0.7819789251941016, 0.02558678259866149, 0.007675866751040414, 0.1424140685509259, 0.1582882236257547 },
            { 0.05985054551924845, -0.04278025910631917, 0.02819201414895275, 0.06154525848634434, -0.02315104878463878, -0.01231823902423109, 0.3962398733176508, -0.2285462467917092, 0.07515394389382464, -0.08146850315502495, -0.06441964522236268, -0.06856237317290945, -0.01221833219904265, -0.02444001594234804, -0.2266926271403256, 0.4183010848002232, 0.09408644961865853, 0.02822531701930634, 0.5236779588851395, 0.0993248448495635 },
            { 0.06406493173092527, -0.05138829566442681, 0.02169831609928772, -0.027462608785526, -0.03950887022027655, 0.007229849127673882, 0.2782339025492522, 0.1341388878515704, 0.01733298289882413, -0.04566498706262443, -0.1409918342512138, 0.04024078546457251, -0.008783289992913756, -0.01369919623653746, -0.1629606276039013, 0.09647405277419639, 0.1152205567510656, 0.03456541037121728, 0.6413087774654576, 0.03995125673337695 },
            { 0.05387556942220691, 0.03048536711428613, 0.01361741835963621, -0.02778084477197969, -0.03973865042400912, 0.03752268604106146, -0.1462844768086947, 0.6961765433646111, -0.003357039407685009, -0.01691986046465746, -0.1750644481250409, 0.2088483912137564, -0.004017502499660174, -0.005075847026569907, -0.07453866709092717, -0.01868502374187636, 0.06733773604333176, 0.02020087860567414, 0.3747966716784805, 0.008601098518055886 },
            { 0.02826351338596361, 0.06154176623822715, 0.005772232708007887, 0.3655922704770114, -0.02230455598725847, 0.03527000462263036, -0.2822691544071438, 0.6543814554151808, -0.001966640769624262, -0.002883239139637211, -0.1138796068580066, 0.1963101392975258, -0.0007934280957696063, -0.0008649528076421012, -0.01472085523186671, -0.01094617161420624, 0.01498939624723664, 0.004496720438713811, 0.0834298293058004, 0.0005812767748576801 },
            { 0.06068298015665168, -0.04996172582535884, 0.05815319294465323, 0.02938433368505922, -0.01268690419487551, -0.02666067450765343, 0.07291284642279257, -0.08306201385168988, 0.4030916170641847, -0.2185177386533206, -0.01289983064477072, -0.02491805868675302, -0.07131546564926383, -0.06555388658866741, -0.2221851586649982, 0.3767444280999013, 0.1062990883811834, 0.03188902844759023, 0.09935108437974027, 0.5492528576855953 },
            { 0.06377875305562607, -0.06351206574006872, 0.06285514970598607, 0.06154525848634432, -0.06503397661559349, -0.06127066993027709, 0.2108409160517037, -0.1908903404896988, 0.1989081126268734, -0.1911477702394025, -0.06461541960019926, -0.05726584856887382, -0.06095842970117506, -0.05734307580324227, -0.1899175480636372, 0.1859069252837124, 0.3908777426361023, 0.1172607558942994, 0.365328886467441, 0.3446526445440797 },
            { 0.06201917658318298, -0.02116855195801483, 0.06306685164382755, -0.02746260878552602, -0.1351395291735683, 0.03596112225749395, 0.08529754120282763, 0.1120377968763243, 0.02643040241836832, -0.1304610857118855, -0.130999493720377, 0.03361060330999857, -0.04059166638108561, -0.03913746897481633, -0.1264643756196421, 0.02470283782153893, 0.4786783996066523, 0.1436003763980117, 0.4473906483519562, 0.1386290238547332 },
            { 0.04845979916553503, 0.04824483250590068, 0.05052272862117455, -0.0277808447719797, -0.1617891293608983, 0.1866370758674901, -0.2081474797395725, 0.5814725871430635, -0.02375928436109527, -0.05753642321453613, -0.1539568820033722, 0.1744379576088756, -0.01757362300731377, -0.01726054912231702, -0.05475107230459755, -0.02220631146804139, 0.2797514665026056, 0.08392360282118638, 0.2614661327497928, 0.02984541636809999 },
            { 0.02424040267203391, 0.05738371232293465, 0.02569437405013414, 0.3655922704770114, -0.1029577123228624, 0.1754322843891585, -0.2548975964108097, 0.5465637724875554, -0.008833470399916128, -0.01111618653151648, -0.09683864454104296, 0.163965542458623, -0.003355941021674684, -0.003334782959389906, -0.01045552015376722, -0.008256090211431699, 0.06227274376220099, 0.01868141418317021, 0.0582024240686858, 0.002017003680903708 },
            { 0.06349458613841058, -0.03935162277933653, -0.0415226069743584, 0.02938433368505921, 0.01766520646684995, -0.05896925563908027, 0.01637555837710662, -0.05820913358980993, 0.2002397729426419, 0.213225152469635, -0.01216485326421193, -0.01746235781720606, -0.1487514135036622, 0.06396614549000761, -0.1468339867354442, 0.05929629815512179, 0.1647679474849235, 0.04942930221335604, 0.04879215151363607, 0.5966287753663617 },
            { 0.06102966866914931, -0.01193547959968052, -0.01422478151980577, 0.06154525848634432, 0.02429879416175378, -0.1355211698510861, 0.02008066213146446, -0.1337742827956142, 0.04190155536547618, 0.05004979771280778, -0.05677215132182489, -0.04013140634214939, -0.1184642929727522, 0.01501461063651406, -0.1169372714737708, 0.01240815989551858, 0.6058765352788418, 0.1817589817887322, 0.1794160827947865, 0.3743807289552954 },
            { 0.05318236361365855, 0.03326688864802687, 0.03175873077230894, -0.02746260878552604, -0.0929945651185656, 0.0795403961314491, -0.09657790860520678, 0.07851510917043911, -0.06619109608287531, -0.06291364296994, -0.105874515811513, 0.0235540171419286, -0.07256266313919671, -0.0188736797367031, -0.07162732014379823, -0.01960093597223928, 0.7419711552532702, 0.2225864740468573, 0.2197173029006607, 0.1505864986869651 },
            { 0.03778418410398027, 0.06340387815709866, 0.06321752791622888, -0.02778084477197971, -0.237511690882099, 0.4128121152899198, -0.2372448834310748, 0.4074909087113879, -0.05989817171921762, -0.05919256945742168, -0.116115203078556, 0.1222445966181215, -0.02931607321778885, -0.01775738211926017, -0.02893818488582065, -0.01773743446176783, 0.4336262487618007, 0.1300850270023069, 0.128408212597364, 0.03241973886677819 },
            { 0.01767082850840484, 0.04693574582092747, 0.04733380747674396, 0.3655922704770114, -0.2009385531214546, 0.388028863355365, -0.1989705391739375, 0.3830271164010716, -0.01525137177128457, -0.01520368597787032, -0.0696942436245003, 0.1149056195789004, -0.005342161830835364, -0.004561005950662163, -0.005273300608926116, -0.004516334964501375, 0.09652530732115563, 0.02895695831406171, 0.02858369902401692, 0.002190980746313926 },
            { 0.04853758960920411, 0.04804748687512907, 0.004851167988216536, 0.02938433368505924, 0.1059643447933395, -0.09363782930820398, -0.01131488455055892, -0.03154086528226754, -0.2196999941109609, 0.6930458086243588, -0.008408422170859627, -0.009462052455624807, -0.1632655015758905, 0.2079091913512356, -0.05499417520132371, -0.0222005666314202, 0.1417688745684658, 0.04252973137347134, 0.01432566877780221, 0.2781600936408289 },
            { 0.04378433053973921, 0.05758435570636902, -0.05737358819566312, 0.06154525848634432, 0.3250843089642436, -0.2151953256427784, -0.06335370627512105, -0.07248616104856546, -0.209918074223321, 0.3628240614021431, -0.03744304268552719, -0.0217453722975059, -0.1240649028404839, 0.1088448357528083, -0.04178988786540012, -0.02121210887051969, 0.5213054835302974, 0.156388221642784, 0.05267763965707711, 0.1745436742630803 },
            { 0.03495844779040284, 0.06413923880368307, -0.04210073380656289, -0.02746260878552604, 0.2031879743297628, 0.1263029345604899, -0.1432405218388422, 0.0425437440525807, -0.1558882430904613, 0.07448481349021616, -0.06555003969915299, 0.01276284383074628, -0.07133791745542227, 0.02234495490483827, -0.02402938706078984, -0.01575242339804931, 0.6384033863876669, 0.1915168235173492, 0.0645103199687191, 0.07020639349835213 },
            { 0.02280238252843817, 0.05546935183224138, 0.03729185367135761, -0.02778084477197971, -0.1720987573347607, 0.6555081960752898, -0.1816818244777534, 0.2208006727257771, -0.07283730790950982, -0.02324033606004347, -0.06769897592778726, 0.06623875181836217, -0.02714091609870707, -0.006971948198583748, -0.009142116862715995, -0.007360170918719402, 0.3730986894519093, 0.1119271566941924, 0.03770142256394109, 0.0151147211990517 },
            { 0.009979473413263464, 0.02960459346803771, 0.06030251108461737, 0.3655922704770114, -0.2734284036534983, 0.6161546399009752, -0.1196397080930486, 0.2075448633713476, -0.01456200471227102, -0.01121015752916485, -0.03882847531680075, 0.0622620960630143, -0.004726026580521278, -0.003362973641576329, -0.001591909688615369, -0.001471482769992781, 0.08305185805356752, 0.02491501201400906, 0.008392345735112938, 0.001021478404533403 },
            { 0.01983126690353013, 0.05084284700731428, 0.42820757294106, 0.02938433368505922, 0.2181488248511592, -0.121373909483891, -0.008886865998446656, -0.01020531121580499, -0.2236673299535037, 0.4616445490153089, -0.003190920477054795, -0.003061526346400362, -0.08031005118357108, 0.1384903330820103, -0.006752596744808381, -0.005641767875760066, 0.05945762328115901, 0.01783689652577102, 0.001499754609072604, 0.03774627737779754 },
            { 0.01723424343305413, 0.0460926810007941, 0.1082491771841238, 0.06154525848634433, 0.7184797178792189, -0.278937456889922, -0.03971482357493523, -0.02345350470633597, -0.1705707063288497, 0.2594581012031394, -0.01384439255008621, -0.007035897392591722, -0.05946011094588886, 0.07783572649800109, -0.004999500631638122, -0.00430246264267492, 0.2186346273009161, 0.06558895241533735, 0.005514823363302754, 0.02368554689869109 },
            { 0.01301899537363642, 0.0370660655468255, -0.06256303284875081, -0.02746260878552602, 0.6272136474824754, 0.1637146125679314, -0.06987929864685886, 0.0137653848255785, -0.09857573158050864, 0.07439399536423896, -0.02332710830415099, 0.004129525050307059, -0.0329065518868484, 0.02231771006344851, -0.002766835182885027, -0.002486466824976396, 0.267745287283935, 0.08032182790023869, 0.006753586949863137, 0.009526995652026988 },
            { 0.008006184655998842, 0.02435522702288875, 0.001848666776100829, -0.02778084477197971, -0.01043824566453986, 0.8496736099522137, -0.07253772469112377, 0.07144190755896936, -0.03769470384750919, -0.0004560839957808488, -0.02314229100392443, 0.02143210310824601, -0.01202604313080357, -0.0001368222036278862, -0.001011168820106606, -0.000950808369274787, 0.1564769515992202, 0.04694205789466575, 0.003946962835443529, 0.002051065094923879 },
            { 0.003335359170138909, 0.01072251350212871, 0.06403508060147256, 0.3655922704770114, -0.3070864295425533, 0.7986632971303641, -0.04177186175610062, 0.06715287938334119, -0.006590276832468506, -0.004073627964638071, -0.01283879530256207, 0.02014542282163179, -0.002025555282484492, -0.001222061637851681, -0.0001703119074806282, -0.0001662326461959567, 0.03483180708022418, 0.0104493133833764, 0.0008785948769573226, 0.0001386144456894806 },
            { 0.03534581477412863, 0.4742947426720567, 0.03204171670352372, 0.02938433368505921, -0.00529087729369291, -0.005360028893208059, 0.2269079707835757, -0.1232161497057561, 0.2522002214199321, -0.1351835677057509, -0.005883778382894448, -0.006064568447132102, -0.006539612539072719, -0.006653592091919918, -0.150332375755109, 0.2853502351677857, 0.03170229590646333, 0.001560353443238821, 0.03586934833496953, 0.03986751792380308 },
            { 0.03122392372258538, 0.1291950481124203, 0.02819201414895275, 0.0615452584863443, -0.02315104878463881, -0.01231823902423103, 0.7494182056132109, -0.2831712317156029, 0.1421405001624229, -0.1009403423083112, -0.02581700966551936, -0.01393738824901566, -0.004896655350869868, -0.004968176789061744, -0.1125641355282188, 0.16082390776604, 0.1165741122432207, 0.005737654394744078, 0.1318969910327359, 0.02501661173279236 },
            { 0.02417604387311277, -0.06124023457623264, 0.02169831609928774, -0.02746260878552601, -0.03950887022027656, 0.007229849127673934, 0.6612668324815504, 0.1661995094082998, 0.04119457260221332, -0.05657940488773545, -0.04424025298783108, 0.008180163907843043, -0.002756010469795434, -0.002784778411426421, -0.06335506867644428, 0.04660932061635777, 0.1427594958664634, 0.007026471255819349, 0.1615242662697768, 0.01006238750686951 },
            { 0.0152699169980279, -0.0006527365268150656, 0.01361741835963622, -0.02778084477197965, -0.03973865042400912, 0.03752268604106149, 0.003741125690993531, 0.8625701451826212, 8.585399249306895e-5, -0.02096388715846981, -0.04469214521992814, 0.04245478939574635, -0.001025626888036098, -0.001031820332757556, -0.02357707368679179, 9.713891926848607e-5, 0.08343217149266324, 0.004106443156342676, 0.09439876627367956, 0.00216632950625383 },
            { 0.006507721085943798, 0.0640951986736919, 0.005772232708007887, 0.3655922704770114, -0.02230455598725847, 0.0352700046226303, -0.3085558568163953, 0.8107855864753917, -0.002149786890444993, -0.003572363974306627, -0.02517626323136787, 0.03990600823731466, -0.0001754094095105484, -0.0001758279729726434, -0.004032305141011459, -0.002432361840506405, 0.01857202145118408, 0.0009140952347663489, 0.02101318808841331, 0.0001464042094193561 },
            { 0.03059970118891297, 0.09575250369580598, 0.05815319294465323, 0.02938433368505921, -0.01268690419487552, -0.02666067450765343, 0.1393767076463157, -0.1029147190178873, 0.7705306433993927, -0.2707458034196592, -0.005035828082799204, -0.005065353520555503, -0.02784008833480688, -0.01332582182232879, -0.1074674561435912, 0.1463957750250683, 0.1317057016236129, 0.006482415205160887, 0.02502322059424574, 0.1383384540359305 },
            { 0.02687903416528849, -0.02961282767530371, 0.06285514970598605, 0.06154525848634427, -0.0650339766155935, -0.06127066993027704, 0.44155025374578, -0.2365151631141979, 0.4165601689045615, -0.2368341213133683, -0.02201001815695821, -0.01164102594437463, -0.02076433385164286, -0.01165672472927641, -0.08015384544460696, 0.07914370349025482, 0.4843016824220924, 0.0238368161083091, 0.0920141473301236, 0.08680649241685953 },
            { 0.02063682627482021, -0.05591740612800255, 0.06306685164382757, -0.02746260878552604, -0.1351395291735683, 0.035961122257494, 0.3265040657114512, 0.1388160225141889, 0.1011709567039776, -0.1616426734220586, -0.03749813479507442, 0.006832377672133995, -0.01161921877930032, -0.007955881264643203, -0.04485215239156009, 0.01922181907180753, 0.5930876306877355, 0.02919114531692841, 0.1126827649180299, 0.03491602196733878 },
            { 0.01291692138381893, 0.0262133217034175, 0.05052272862117456, -0.02778084477197967, -0.1617891293608983, 0.1866370758674901, -0.1288445758611859, 0.7204507228693313, -0.01470714380063964, -0.07128824060287053, -0.03764824101663139, 0.03545982188260768, -0.004297410975757976, -0.003508731733982575, -0.01658873420278847, -0.002794260985651208, 0.3466150438076796, 0.01706002551611235, 0.06585458788466543, 0.007517063776088583 },
            { 0.005463020987790647, 0.06216231346930407, 0.02569437405013414, 0.3655922704770114, -0.1029577123228624, 0.1754322843891585, -0.2870937464771796, 0.6771983300495057, -0.00994922724739998, -0.01377307339892009, -0.02109931751620317, 0.03333098489667252, -0.0007311963681188652, -0.0006778960919862596, -0.002822541820922543, -0.001890288006402556, 0.07715659216020115, 0.00379756578516996, 0.01465924711021604, 0.0005080158748317562 },
            { 0.02261184303618289, -0.06395874758862659, -0.04152260697435839, 0.0293843336850592, 0.01766520646684995, -0.05896925563908029, 0.0443719316972226, -0.07212173591608723, 0.5425784772322486, 0.2641882328201249, -0.003658188754916129, -0.003549755490928765, -0.04473220813586392, 0.01300306513951778, -0.0547092627701441, 0.03266144210133935, 0.204149240215176, 0.0100480094831035, 0.01228911368422422, 0.1502708657089568 },
            { 0.01970066601667236, -0.04880819578613182, -0.01422478151980575, 0.06154525848634428, 0.02429879416175377, -0.1355211698510861, 0.1134349118539146, -0.1657477598642396, 0.2367003243372687, 0.06201223194170031, -0.01589923839020253, -0.008157929273523892, -0.03317633718024195, 0.003052176407621576, -0.04057597476592135, 0.01424858202659742, 0.7506874742898438, 0.03694804277772974, 0.04518892014071394, 0.09429400419099274 },
            { 0.01493982301608196, 0.003258524524086591, 0.03175873077230895, -0.02746260878552605, -0.09299456511856559, 0.07954039613144911, -0.0112147441631832, 0.09728105573460157, -0.007686190549896717, -0.07795067309834229, -0.02685982908791038, 0.004788070577766174, -0.01840878057522601, -0.003836649608300777, -0.0225146679705378, -0.0004626834239828291, 0.9193101566091402, 0.04524747269098751, 0.0553394517350345, 0.03792771059001585 },
            { 0.009226459114754717, 0.05704201370620527, 0.06321752791622888, -0.02778084477197969, -0.237511690882099, 0.4128121152899198, -0.2305702346328403, 0.5048855719686222, -0.05821299624103592, -0.07334022342071345, -0.02672338018740875, 0.02484993336088715, -0.006746959480154057, -0.003609728155968376, -0.008251798748189373, -0.003504231159280098, 0.5372675363949573, 0.02644373936915019, 0.03234174090798242, 0.008165449650961734 },
            { 0.003857782744498047, 0.05342483831392521, 0.04733380747674396, 0.3655922704770114, -0.2009385531214546, 0.388028863355365, -0.2324185012953343, 0.4745746729790601, -0.01781520512783651, -0.01883752870767753, -0.0148618617878421, 0.02335806300091176, -0.001139182616084092, -0.0009271632208549332, -0.001393265472100853, -0.001072416830417627, 0.1195958828882868, 0.005886382746930555, 0.007199279308755635, 0.0005518348881146072 },
            { 0.01294764933883237, 0.02588546307060614, 0.004851167988216522, 0.02938433368505922, 0.1059643447933396, -0.09363782930820398, -0.006948513130961911, -0.0390794677083255, -0.1349185921545144, 0.8586911315255732, -0.002057282410782874, -0.001923450029566828, -0.03994604907491, 0.04226386845002127, -0.01667136398217828, -0.002771413775670977, 0.1756531441405562, 0.008645461801380788, 0.003608157598128398, 0.070059239183402 },
            { 0.01118752222207229, 0.04304726648444827, -0.05737358819566312, 0.0615452584863443, 0.3250843089642437, -0.2151953256427784, -0.05249570738058321, -0.08981112485808909, -0.1739408543908738, 0.449542872856442, -0.008891140325167364, -0.004420408487982266, -0.02946017154234552, 0.0221260242985094, -0.01229511438888052, -0.003572984807451668, 0.6459030412602131, 0.03179066391286815, 0.01326773840217944, 0.04396172313249474 },
            { 0.008377081602978068, 0.06095850418078272, -0.04210073380656288, -0.02746260878552605, 0.2031879743297628, 0.1263029345604899, -0.1456360420494058, 0.05271215158541667, -0.1584952807647068, 0.09228747650078055, -0.01489219497216602, 0.002594436297910306, -0.01620713245225028, 0.004542291894273893, -0.006763998204481958, -0.003255711444032085, 0.7909885889290632, 0.0389316209759528, 0.0162479954522957, 0.01768264616942564 },
            { 0.0051016801842875, 0.06082414163778984, 0.03729185367135762, -0.0277808447719797, -0.1720987573347607, 0.6555081960752898, -0.2064973466246069, 0.2735743830279351, -0.08278599613267856, -0.02879502367678251, -0.0146777606237141, 0.01346504151620425, -0.005884400231253991, -0.001417260581844679, -0.002455836818506999, -0.001700538424326166, 0.4622732463415235, 0.02275259980457826, 0.00949572940672155, 0.003806893554767365 },
            { 0.002107478174024374, 0.03518476251527828, 0.06030251108461737, 0.3655922704770114, -0.2734284036534983, 0.6161546399009752, -0.1440926443944553, 0.2571502941838856, -0.0175383056354813, -0.0138895044649436, -0.00809694493124663, 0.0126566652504761, -0.0009855235533683254, -0.0006836267057975659, -0.0004113053043219225, -0.0003602609622876604, 0.1029021358759467, 0.005064734191629811, 0.002113751650965584, 0.0002572763005907683 },
            { 0.004373243757903068, 0.05702823210397787, 0.42820757294106, 0.02938433368505922, 0.2181488248511592, -0.121373909483891, -0.01027068462962824, -0.01264448919020878, -0.2584956955922334, 0.5719825085493426, -0.0006850853425733432, -0.0006223483719965603, -0.01724243500357074, 0.02815237354797626, -0.001796282116499535, -0.001325444455105439, 0.07366862792873863, 0.00362589187819139, 0.0003777381057727403, 0.009507026836526822 },
            { 0.003754983325663417, 0.05261283176874208, 0.1082491771841238, 0.06154525848634432, 0.7184797178792189, -0.278937456889922, -0.04648512652267036, -0.0290591418978479, -0.1996483970222635, 0.3214713482617109, -0.002948266091639513, -0.00143026020107978, -0.01266247170272521, 0.01582247943942966, -0.001319150773401582, -0.001023703161468738, 0.2708906296978316, 0.01333295001842184, 0.001388999852591204, 0.005965598348941384 },
            { 0.002784433170418514, 0.04337045709813643, -0.06256303284875082, -0.02746260878552603, 0.6272136474824757, 0.1637146125679315, -0.08324781307281579, 0.01705545827515083, -0.1174341219078495, 0.09217495187630712, -0.004906009963213961, 0.0008394516007346614, -0.006920697983948867, 0.004536753551380372, -0.0007209843632693027, -0.000602146992685109, 0.3317392599990414, 0.01632785518513254, 0.001701003034883018, 0.002399532076468289 },
            { 0.001677382162309536, 0.02921620886627491, 0.001848666776100843, -0.02778084477197971, -0.01043824566453986, 0.8496736099522137, -0.08792690235374687, 0.08851728367266919, -0.04569179083802882, -0.0005650929239225033, -0.004800258645947096, 0.00435672699454618, -0.002494485852994568, -2.781327548621784e-5, -0.0002598705070755904, -0.0002342860320026768, 0.1938766080890256, 0.009542401404860158, 0.0009941081400892497, 0.0005165948076345092 },
            { 0.0006863389002215829, 0.01311975355344455, 0.06403508060147256, 0.3655922704770114, -0.3070864295425533, 0.7986632971303641, -0.05132213136134675, 0.08320313212389113, -0.008097006910499815, -0.005047268395306385, -0.002631219531562284, 0.004095170081081845, -0.000415123108978014, -0.0002484212071833629, -4.324668857093664e-5, -4.151764650414322e-5, 0.0431569796146184, 0.002124140848982242, 0.0002212887112035544, 3.491235021432781e-5 } } };
    alignas(32) static const double FE27_C0_D001_Q125[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE27_C0_D001_Q125[0][0][0] + coordinate_dofs[7] * FE27_C0_D001_Q125[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE27_C0_D001_Q125[0][0][0] + coordinate_dofs[11] * FE27_C0_D001_Q125[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE27_C0_D001_Q125[0][0][0] + coordinate_dofs[10] * FE27_C0_D001_Q125[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE27_C0_D001_Q125[0][0][0] + coordinate_dofs[8] * FE27_C0_D001_Q125[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE27_C0_D001_Q125[0][0][0] + coordinate_dofs[3] * FE27_C0_D001_Q125[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE27_C0_D001_Q125[0][0][0] + coordinate_dofs[6] * FE27_C0_D001_Q125[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE27_C0_D001_Q125[0][0][0] + coordinate_dofs[5] * FE27_C0_D001_Q125[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE27_C0_D001_Q125[0][0][0] + coordinate_dofs[4] * FE27_C0_D001_Q125[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE27_C0_D001_Q125[0][0][0] + coordinate_dofs[9] * FE27_C0_D001_Q125[0][0][1];
    alignas(32) double sp[44];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = std::abs(sp[13]);
    alignas(32) double BF0[20] = {};
    alignas(32) double BF1[20] = {};
    alignas(32) double BF2[20] = {};
    for (int iq = 0; iq < 125; ++iq)
    {
        // Quadrature loop body setup (num_points=125)
        // Unstructured varying computations for num_points=125
        double w2_c0 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w2_c0 += w[2][ic] * FE17_C0_Q125[0][iq][ic];
        double w2_c1 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w2_c1 += w[2][ic + 20] * FE17_C0_Q125[0][iq][ic];
        double w2_c2 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w2_c2 += w[2][ic + 40] * FE17_C0_Q125[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w1_c0 += w[1][ic] * FE17_C0_Q125[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w1_c1 += w[1][ic + 20] * FE17_C0_Q125[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 20; ++ic)
            w1_c2 += w[1][ic + 40] * FE17_C0_Q125[0][iq][ic];
        const double w1_d0_c0 = w[1][0] * FE17_C0_D100_Q125[0][iq][0] + w[1][1] * FE17_C0_D100_Q125[0][iq][1] + w[1][6] * FE17_C0_D100_Q125[0][iq][2] + w[1][7] * FE17_C0_D100_Q125[0][iq][3] + w[1][8] * FE17_C0_D100_Q125[0][iq][4] + w[1][9] * FE17_C0_D100_Q125[0][iq][5] + w[1][10] * FE17_C0_D100_Q125[0][iq][6] + w[1][11] * FE17_C0_D100_Q125[0][iq][7] + w[1][12] * FE17_C0_D100_Q125[0][iq][8] + w[1][13] * FE17_C0_D100_Q125[0][iq][9] + w[1][14] * FE17_C0_D100_Q125[0][iq][10] + w[1][15] * FE17_C0_D100_Q125[0][iq][11] + w[1][16] * FE17_C0_D100_Q125[0][iq][12] + w[1][17] * FE17_C0_D100_Q125[0][iq][13] + w[1][18] * FE17_C0_D100_Q125[0][iq][14] + w[1][19] * FE17_C0_D100_Q125[0][iq][15];
        const double w1_d1_c0 = w[1][0] * FE17_C0_D010_Q125[0][iq][0] + w[1][2] * FE17_C0_D010_Q125[0][iq][1] + w[1][4] * FE17_C0_D010_Q125[0][iq][2] + w[1][5] * FE17_C0_D010_Q125[0][iq][3] + w[1][8] * FE17_C0_D010_Q125[0][iq][4] + w[1][9] * FE17_C0_D010_Q125[0][iq][5] + w[1][10] * FE17_C0_D010_Q125[0][iq][6] + w[1][11] * FE17_C0_D010_Q125[0][iq][7] + w[1][12] * FE17_C0_D010_Q125[0][iq][8] + w[1][13] * FE17_C0_D010_Q125[0][iq][9] + w[1][14] * FE17_C0_D010_Q125[0][iq][10] + w[1][15] * FE17_C0_D010_Q125[0][iq][11] + w[1][16] * FE17_C0_D010_Q125[0][iq][12] + w[1][17] * FE17_C0_D010_Q125[0][iq][13] + w[1][18] * FE17_C0_D010_Q125[0][iq][14] + w[1][19] * FE17_C0_D010_Q125[0][iq][15];
        const double w1_d2_c0 = w[1][0] * FE17_C0_D001_Q125[0][iq][0] + w[1][3] * FE17_C0_D001_Q125[0][iq][1] + w[1][4] * FE17_C0_D001_Q125[0][iq][2] + w[1][5] * FE17_C0_D001_Q125[0][iq][3] + w[1][6] * FE17_C0_D001_Q125[0][iq][4] + w[1][7] * FE17_C0_D001_Q125[0][iq][5] + w[1][10] * FE17_C0_D001_Q125[0][iq][6] + w[1][11] * FE17_C0_D001_Q125[0][iq][7] + w[1][12] * FE17_C0_D001_Q125[0][iq][8] + w[1][13] * FE17_C0_D001_Q125[0][iq][9] + w[1][14] * FE17_C0_D001_Q125[0][iq][10] + w[1][15] * FE17_C0_D001_Q125[0][iq][11] + w[1][16] * FE17_C0_D001_Q125[0][iq][12] + w[1][17] * FE17_C0_D001_Q125[0][iq][13] + w[1][18] * FE17_C0_D001_Q125[0][iq][14] + w[1][19] * FE17_C0_D001_Q125[0][iq][15];
        const double w1_d0_c1 = w[1][20] * FE17_C0_D100_Q125[0][iq][0] + w[1][21] * FE17_C0_D100_Q125[0][iq][1] + w[1][26] * FE17_C0_D100_Q125[0][iq][2] + w[1][27] * FE17_C0_D100_Q125[0][iq][3] + w[1][28] * FE17_C0_D100_Q125[0][iq][4] + w[1][29] * FE17_C0_D100_Q125[0][iq][5] + w[1][30] * FE17_C0_D100_Q125[0][iq][6] + w[1][31] * FE17_C0_D100_Q125[0][iq][7] + w[1][32] * FE17_C0_D100_Q125[0][iq][8] + w[1][33] * FE17_C0_D100_Q125[0][iq][9] + w[1][34] * FE17_C0_D100_Q125[0][iq][10] + w[1][35] * FE17_C0_D100_Q125[0][iq][11] + w[1][36] * FE17_C0_D100_Q125[0][iq][12] + w[1][37] * FE17_C0_D100_Q125[0][iq][13] + w[1][38] * FE17_C0_D100_Q125[0][iq][14] + w[1][39] * FE17_C0_D100_Q125[0][iq][15];
        const double w1_d1_c1 = w[1][20] * FE17_C0_D010_Q125[0][iq][0] + w[1][22] * FE17_C0_D010_Q125[0][iq][1] + w[1][24] * FE17_C0_D010_Q125[0][iq][2] + w[1][25] * FE17_C0_D010_Q125[0][iq][3] + w[1][28] * FE17_C0_D010_Q125[0][iq][4] + w[1][29] * FE17_C0_D010_Q125[0][iq][5] + w[1][30] * FE17_C0_D010_Q125[0][iq][6] + w[1][31] * FE17_C0_D010_Q125[0][iq][7] + w[1][32] * FE17_C0_D010_Q125[0][iq][8] + w[1][33] * FE17_C0_D010_Q125[0][iq][9] + w[1][34] * FE17_C0_D010_Q125[0][iq][10] + w[1][35] * FE17_C0_D010_Q125[0][iq][11] + w[1][36] * FE17_C0_D010_Q125[0][iq][12] + w[1][37] * FE17_C0_D010_Q125[0][iq][13] + w[1][38] * FE17_C0_D010_Q125[0][iq][14] + w[1][39] * FE17_C0_D010_Q125[0][iq][15];
        const double w1_d2_c1 = w[1][20] * FE17_C0_D001_Q125[0][iq][0] + w[1][23] * FE17_C0_D001_Q125[0][iq][1] + w[1][24] * FE17_C0_D001_Q125[0][iq][2] + w[1][25] * FE17_C0_D001_Q125[0][iq][3] + w[1][26] * FE17_C0_D001_Q125[0][iq][4] + w[1][27] * FE17_C0_D001_Q125[0][iq][5] + w[1][30] * FE17_C0_D001_Q125[0][iq][6] + w[1][31] * FE17_C0_D001_Q125[0][iq][7] + w[1][32] * FE17_C0_D001_Q125[0][iq][8] + w[1][33] * FE17_C0_D001_Q125[0][iq][9] + w[1][34] * FE17_C0_D001_Q125[0][iq][10] + w[1][35] * FE17_C0_D001_Q125[0][iq][11] + w[1][36] * FE17_C0_D001_Q125[0][iq][12] + w[1][37] * FE17_C0_D001_Q125[0][iq][13] + w[1][38] * FE17_C0_D001_Q125[0][iq][14] + w[1][39] * FE17_C0_D001_Q125[0][iq][15];
        const double w1_d0_c2 = w[1][40] * FE17_C0_D100_Q125[0][iq][0] + w[1][41] * FE17_C0_D100_Q125[0][iq][1] + w[1][46] * FE17_C0_D100_Q125[0][iq][2] + w[1][47] * FE17_C0_D100_Q125[0][iq][3] + w[1][48] * FE17_C0_D100_Q125[0][iq][4] + w[1][49] * FE17_C0_D100_Q125[0][iq][5] + w[1][50] * FE17_C0_D100_Q125[0][iq][6] + w[1][51] * FE17_C0_D100_Q125[0][iq][7] + w[1][52] * FE17_C0_D100_Q125[0][iq][8] + w[1][53] * FE17_C0_D100_Q125[0][iq][9] + w[1][54] * FE17_C0_D100_Q125[0][iq][10] + w[1][55] * FE17_C0_D100_Q125[0][iq][11] + w[1][56] * FE17_C0_D100_Q125[0][iq][12] + w[1][57] * FE17_C0_D100_Q125[0][iq][13] + w[1][58] * FE17_C0_D100_Q125[0][iq][14] + w[1][59] * FE17_C0_D100_Q125[0][iq][15];
        const double w1_d1_c2 = w[1][40] * FE17_C0_D010_Q125[0][iq][0] + w[1][42] * FE17_C0_D010_Q125[0][iq][1] + w[1][44] * FE17_C0_D010_Q125[0][iq][2] + w[1][45] * FE17_C0_D010_Q125[0][iq][3] + w[1][48] * FE17_C0_D010_Q125[0][iq][4] + w[1][49] * FE17_C0_D010_Q125[0][iq][5] + w[1][50] * FE17_C0_D010_Q125[0][iq][6] + w[1][51] * FE17_C0_D010_Q125[0][iq][7] + w[1][52] * FE17_C0_D010_Q125[0][iq][8] + w[1][53] * FE17_C0_D010_Q125[0][iq][9] + w[1][54] * FE17_C0_D010_Q125[0][iq][10] + w[1][55] * FE17_C0_D010_Q125[0][iq][11] + w[1][56] * FE17_C0_D010_Q125[0][iq][12] + w[1][57] * FE17_C0_D010_Q125[0][iq][13] + w[1][58] * FE17_C0_D010_Q125[0][iq][14] + w[1][59] * FE17_C0_D010_Q125[0][iq][15];
        const double w1_d2_c2 = w[1][40] * FE17_C0_D001_Q125[0][iq][0] + w[1][43] * FE17_C0_D001_Q125[0][iq][1] + w[1][44] * FE17_C0_D001_Q125[0][iq][2] + w[1][45] * FE17_C0_D001_Q125[0][iq][3] + w[1][46] * FE17_C0_D001_Q125[0][iq][4] + w[1][47] * FE17_C0_D001_Q125[0][iq][5] + w[1][50] * FE17_C0_D001_Q125[0][iq][6] + w[1][51] * FE17_C0_D001_Q125[0][iq][7] + w[1][52] * FE17_C0_D001_Q125[0][iq][8] + w[1][53] * FE17_C0_D001_Q125[0][iq][9] + w[1][54] * FE17_C0_D001_Q125[0][iq][10] + w[1][55] * FE17_C0_D001_Q125[0][iq][11] + w[1][56] * FE17_C0_D001_Q125[0][iq][12] + w[1][57] * FE17_C0_D001_Q125[0][iq][13] + w[1][58] * FE17_C0_D001_Q125[0][iq][14] + w[1][59] * FE17_C0_D001_Q125[0][iq][15];
        alignas(32) double sv125[72];
        sv125[0] = -1 * w1_c0 * (1 / w[0][0]);
        sv125[1] = -1 * w1_c1 * (1 / w[0][0]);
        sv125[2] = -1 * w1_c2 * (1 / w[0][0]);
        sv125[3] = -1 * (-1 * w2_c0) + -1 * sv125[0];
        sv125[4] = -1 * (-1 * w2_c1) + -1 * sv125[1];
        sv125[5] = -1 * (-1 * w2_c2) + -1 * sv125[2];
        sv125[6] = w1_d0_c0 * sp[14];
        sv125[7] = w1_d1_c0 * sp[17];
        sv125[8] = sv125[6] + sv125[7];
        sv125[9] = w1_d2_c0 * sp[18];
        sv125[10] = sv125[8] + sv125[9];
        sv125[11] = w1_c0 * sv125[10];
        sv125[12] = w1_d0_c0 * sp[22];
        sv125[13] = w1_d1_c0 * sp[26];
        sv125[14] = sv125[12] + sv125[13];
        sv125[15] = w1_d2_c0 * sp[30];
        sv125[16] = sv125[14] + sv125[15];
        sv125[17] = w1_c1 * sv125[16];
        sv125[18] = sv125[11] + sv125[17];
        sv125[19] = w1_d0_c0 * sp[34];
        sv125[20] = w1_d1_c0 * sp[38];
        sv125[21] = sv125[19] + sv125[20];
        sv125[22] = w1_d2_c0 * sp[42];
        sv125[23] = sv125[21] + sv125[22];
        sv125[24] = w1_c2 * sv125[23];
        sv125[25] = sv125[18] + sv125[24];
        sv125[26] = w1_d0_c1 * sp[14];
        sv125[27] = w1_d1_c1 * sp[17];
        sv125[28] = sv125[26] + sv125[27];
        sv125[29] = w1_d2_c1 * sp[18];
        sv125[30] = sv125[28] + sv125[29];
        sv125[31] = w1_c0 * sv125[30];
        sv125[32] = w1_d0_c1 * sp[22];
        sv125[33] = w1_d1_c1 * sp[26];
        sv125[34] = sv125[32] + sv125[33];
        sv125[35] = w1_d2_c1 * sp[30];
        sv125[36] = sv125[34] + sv125[35];
        sv125[37] = w1_c1 * sv125[36];
        sv125[38] = sv125[31] + sv125[37];
        sv125[39] = w1_d0_c1 * sp[34];
        sv125[40] = w1_d1_c1 * sp[38];
        sv125[41] = sv125[39] + sv125[40];
        sv125[42] = w1_d2_c1 * sp[42];
        sv125[43] = sv125[41] + sv125[42];
        sv125[44] = w1_c2 * sv125[43];
        sv125[45] = sv125[38] + sv125[44];
        sv125[46] = w1_d0_c2 * sp[14];
        sv125[47] = w1_d1_c2 * sp[17];
        sv125[48] = sv125[46] + sv125[47];
        sv125[49] = w1_d2_c2 * sp[18];
        sv125[50] = sv125[48] + sv125[49];
        sv125[51] = w1_c0 * sv125[50];
        sv125[52] = w1_d0_c2 * sp[22];
        sv125[53] = w1_d1_c2 * sp[26];
        sv125[54] = sv125[52] + sv125[53];
        sv125[55] = w1_d2_c2 * sp[30];
        sv125[56] = sv125[54] + sv125[55];
        sv125[57] = w1_c1 * sv125[56];
        sv125[58] = sv125[51] + sv125[57];
        sv125[59] = w1_d0_c2 * sp[34];
        sv125[60] = w1_d1_c2 * sp[38];
        sv125[61] = sv125[59] + sv125[60];
        sv125[62] = w1_d2_c2 * sp[42];
        sv125[63] = sv125[61] + sv125[62];
        sv125[64] = w1_c2 * sv125[63];
        sv125[65] = sv125[58] + sv125[64];
        sv125[66] = sv125[3] + -1 * sv125[25];
        sv125[67] = sv125[4] + -1 * sv125[45];
        sv125[68] = sv125[5] + -1 * sv125[65];
        sv125[69] = sv125[66] * sp[43];
        sv125[70] = sv125[67] * sp[43];
        sv125[71] = sv125[68] * sp[43];
        const double fw0 = sv125[69] * weights125[iq];
        for (int i = 0; i < 20; ++i)
            BF0[i] += fw0 * FE17_C0_Q125[0][iq][i];
        const double fw1 = sv125[70] * weights125[iq];
        for (int i = 0; i < 20; ++i)
            BF1[i] += fw1 * FE17_C0_Q125[0][iq][i];
        const double fw2 = sv125[71] * weights125[iq];
        for (int i = 0; i < 20; ++i)
            BF2[i] += fw2 * FE17_C0_Q125[0][iq][i];
    }
    std::fill_n(A, 60, 0.0);
    for (int i = 0; i < 20; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 20; ++i)
        A[i + 20] += BF1[i];
    for (int i = 0; i < 20; ++i)
        A[i + 40] += BF2[i];
  }

};


class tentativevelocity_form_0: public ufc::form
{
public:

  tentativevelocity_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~tentativevelocity_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "230a64b9c62f21a344860d269842c8945d28f56d9f9802c5fc8c2c00e4df4bf27249a9089afa2be51bcc4428d6ad3e466e8dcd49417432f769e5dad9ccf1ef56";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 1;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new tentativevelocity_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new tentativevelocity_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new tentativevelocity_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_finite_element_1();
    case 1:
        return new tentativevelocity_finite_element_1();
    case 2:
        return new tentativevelocity_finite_element_4();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_dofmap_1();
    case 1:
        return new tentativevelocity_dofmap_1();
    case 2:
        return new tentativevelocity_dofmap_4();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new tentativevelocity_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class tentativevelocity_form_1: public ufc::form
{
public:

  tentativevelocity_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~tentativevelocity_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "08c2d38d5aeb56f8f68ad5efd0bdb69f62eae38308d8b876b094589fad572faa6d44c924adab1142dcf15776356cd42ed524c338ccae4eafb4c128ae9c673873";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new tentativevelocity_finite_element_3();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new tentativevelocity_dofmap_3();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new tentativevelocity_coordinate_mapping_3();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_finite_element_1();
    case 1:
        return new tentativevelocity_finite_element_4();
    case 2:
        return new tentativevelocity_finite_element_1();
    case 3:
        return new tentativevelocity_finite_element_1();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new tentativevelocity_dofmap_1();
    case 1:
        return new tentativevelocity_dofmap_4();
    case 2:
        return new tentativevelocity_dofmap_1();
    case 3:
        return new tentativevelocity_dofmap_1();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new tentativevelocity_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace TentativeVelocity
{

class CoefficientSpace_f: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_u0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_u0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_k Form_a_FunctionSpace_2;

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 1), k(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const tentativevelocity_form_0>();
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::Form(2, 1), k(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->k = k;

    _ufc_form = std::make_shared<const tentativevelocity_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_k;

  // Coefficients
  dolfin::CoefficientAssigner k;
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), k(*this, 0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::MultiMeshForm(V1, V0), k(*this, 0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->k = k;

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_k;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner k;
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<tentativevelocity_finite_element_1>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<tentativevelocity_dofmap_1>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_k Form_L_FunctionSpace_1;

typedef CoefficientSpace_u0 Form_L_FunctionSpace_2;

typedef CoefficientSpace_f Form_L_FunctionSpace_3;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), k(*this, 0), u0(*this, 1), f(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const tentativevelocity_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> f):
    dolfin::Form(1, 3), k(*this, 0), u0(*this, 1), f(*this, 2)
  {
    _function_spaces[0] = V0;

    this->k = k;
    this->u0 = u0;
    this->f = f;

    _ufc_form = std::make_shared<const tentativevelocity_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "u0")
      return 1;
    else if (name == "f")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "u0";
    case 2:
      return "f";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u0;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_f;

  // Coefficients
  dolfin::CoefficientAssigner k;
  dolfin::CoefficientAssigner u0;
  dolfin::CoefficientAssigner f;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), k(*this, 0), u0(*this, 1), f(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k, std::shared_ptr<const dolfin::GenericFunction> u0, std::shared_ptr<const dolfin::GenericFunction> f):
    dolfin::MultiMeshForm(V0), k(*this, 0), u0(*this, 1), f(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->k = k;
    this->u0 = u0;
    this->f = f;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;
    else if (name == "u0")
      return 1;
    else if (name == "f")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    case 1:
      return "u0";
    case 2:
      return "f";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_k;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_u0;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_f;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner k;
  dolfin::MultiMeshCoefficientAssigner u0;
  dolfin::MultiMeshCoefficientAssigner f;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
